<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【一周一算法】第二周：选择排序与插入排序</title>
      <link href="/2025/10/21/%E3%80%90%E4%B8%80%E5%91%A8%E4%B8%80%E7%AE%97%E6%B3%95%E3%80%91%E7%AC%AC%E4%BA%8C%E5%91%A8%EF%BC%9A%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%E4%B8%8E%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
      <url>/2025/10/21/%E3%80%90%E4%B8%80%E5%91%A8%E4%B8%80%E7%AE%97%E6%B3%95%E3%80%91%E7%AC%AC%E4%BA%8C%E5%91%A8%EF%BC%9A%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%E4%B8%8E%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1>🧮 一周一个算法 · 第 2 周</h1><h2 id="选择排序与插入排序-——-从“挑选”与“插入”看排序的两种哲学"><strong>选择排序与插入排序 —— 从“挑选”与“插入”看排序的两种哲学</strong></h2><blockquote><p>“冒泡排序靠交换相邻元素逐步推进，<br>选择排序靠挑选最值一步到位，<br>插入排序靠不断调整插入位置，<br>—— 三者合称：排序算法的三剑客。”</p></blockquote><hr><h2 id="🧭-一、引言：为什么还要研究-O-n-2-算法？">🧭 一、引言：为什么还要研究 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 算法？</h2><p>很多人觉得这些算法“太简单”或“太慢”，但实际上——<br>它们是<strong>后续所有排序算法的核心雏形</strong>：</p><table><thead><tr><th>算法</th><th>启发思想</th><th>后继算法</th></tr></thead><tbody><tr><td><strong>冒泡排序</strong></td><td>相邻交换</td><td>快速排序（基于交换）</td></tr><tr><td><strong>选择排序</strong></td><td>找最小元素</td><td>堆排序（基于选择）</td></tr><tr><td><strong>插入排序</strong></td><td>有序插入</td><td>希尔排序 / 二分插入排序</td></tr></tbody></table><p>学习这三种算法 = 搞懂所有复杂排序的“原型逻辑”。</p><hr><h2 id="🧩-二、选择排序（Selection-Sort）">🧩 二、选择排序（Selection Sort）</h2><h3 id="🧠-核心思想">🧠 核心思想</h3><blockquote><p>每一趟从未排序部分中“选出最小值”，放到前面。</p></blockquote><p>形象类比：<br>像每次在乱序的卡片中挑出最小的一张，放到有序区末尾。</p><p>示例：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">初始: <span class="hljs-string">[29, 10, 14, 37, 13]</span><br>第<span class="hljs-number">1</span>轮: 选出<span class="hljs-number">10</span> -&gt; <span class="hljs-string">[10, 29, 14, 37, 13]</span><br>第<span class="hljs-number">2</span>轮: 选出<span class="hljs-number">13</span> -&gt; <span class="hljs-string">[10, 13, 14, 37, 29]</span><br>第<span class="hljs-number">3</span>轮: 选出<span class="hljs-number">14</span> -&gt; <span class="hljs-string">[10, 13, 14, 37, 29]</span><br>第<span class="hljs-number">4</span>轮: 选出<span class="hljs-number">29</span> -&gt; <span class="hljs-string">[10, 13, 14, 29, 37]</span><br></code></pre></td></tr></table></figure><hr><h3 id="⚙️-伪代码">⚙️ 伪代码</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs text">procedure SelectionSort(A[0..n-1]):<br>    for i from 0 to n-2:<br>        minIndex ← i<br>        for j from i+1 to n-1:<br>            if A[j] &lt; A[minIndex]:<br>                minIndex ← j<br>        swap(A[i], A[minIndex])<br></code></pre></td></tr></table></figure><hr><h3 id="💻-C-实现">💻 C++ 实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;utility&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">selectionSort</span><span class="hljs-params">(std::vector&lt;<span class="hljs-type">int</span>&gt;&amp; arr)</span> </span>&#123;<br>    <span class="hljs-type">size_t</span> n = arr.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; ++i) &#123;<br>        <span class="hljs-type">size_t</span> minIndex = i;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> j = i + <span class="hljs-number">1</span>; j &lt; n; ++j) &#123;<br>            <span class="hljs-keyword">if</span> (arr[j] &lt; arr[minIndex])<br>                minIndex = j;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (minIndex != i)<br>            std::<span class="hljs-built_in">swap</span>(arr[i], arr[minIndex]);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::vector&lt;<span class="hljs-type">int</span>&gt; arr = &#123;<span class="hljs-number">29</span>, <span class="hljs-number">10</span>, <span class="hljs-number">14</span>, <span class="hljs-number">37</span>, <span class="hljs-number">13</span>&#125;;<br>    <span class="hljs-built_in">selectionSort</span>(arr);<br><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;排序结果：&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : arr) std::cout &lt;&lt; num &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    std::cout &lt;&lt; std::endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tap">排序结果：10<span class="hljs-number"> 13 </span>14<span class="hljs-number"> 29 </span>37<br></code></pre></td></tr></table></figure><hr><h3 id="📈-时间复杂度分析">📈 时间复杂度分析</h3><ul><li>比较次数：固定 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo><mo>+</mo><mo>⋯</mo><mo>+</mo><mn>1</mn><mo>=</mo><mfrac><mrow><mi>n</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><mn>2</mn></mfrac><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">((n-1) + (n-2) + \dots + 1 = \frac{n(n-1)}{2})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">((</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.355em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span></li><li>交换次数：<strong>最多 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 次</strong></li><li>时间复杂度：<p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(n) = O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p></li><li>空间复杂度：<p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>S</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">S(n) = O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p></li><li><strong>稳定性</strong>：❌ 不稳定（同值元素可能被交换顺序打乱）</li></ul><hr><h3 id="✳️-数学视角：交换次数之少">✳️ 数学视角：交换次数之少</h3><p>选择排序交换次数最少：</p><ul><li>每次只在确定位置后交换 1 次；</li><li>总交换次数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>≤</mo><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\leq n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>；</li></ul><p>相比冒泡排序可能交换上千次，选择排序“节省了手臂动作”😄。</p><hr><h2 id="🔸-三、插入排序（Insertion-Sort）">🔸 三、插入排序（Insertion Sort）</h2><h3 id="🧠-核心思想-2">🧠 核心思想</h3><blockquote><p>构建一个“有序区”，每次把新的元素插入到合适位置。</p></blockquote><p>示例：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">初始: <span class="hljs-string">[5, 2, 4, 6, 1, 3]</span><br>第<span class="hljs-number">1</span>轮: <span class="hljs-string">[2, 5, 4, 6, 1, 3]</span><br>第<span class="hljs-number">2</span>轮: <span class="hljs-string">[2, 4, 5, 6, 1, 3]</span><br>第<span class="hljs-number">3</span>轮: <span class="hljs-string">[2, 4, 5, 6, 1, 3]</span><br>第<span class="hljs-number">4</span>轮: <span class="hljs-string">[1, 2, 4, 5, 6, 3]</span><br>第<span class="hljs-number">5</span>轮: <span class="hljs-string">[1, 2, 3, 4, 5, 6]</span><br></code></pre></td></tr></table></figure><p>就像你打扑克牌时，拿到新牌后插到正确的位置。</p><hr><h3 id="⚙️-伪代码-2">⚙️ 伪代码</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs text">procedure InsertionSort(A[0..n-1]):<br>    for i from 1 to n-1:<br>        key ← A[i]<br>        j ← i - 1<br>        while j ≥ 0 and A[j] &gt; key:<br>            A[j + 1] ← A[j]<br>            j ← j - 1<br>        A[j + 1] ← key<br></code></pre></td></tr></table></figure><hr><h3 id="💻-C-实现-2">💻 C++ 实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insertionSort</span><span class="hljs-params">(std::vector&lt;<span class="hljs-type">int</span>&gt;&amp; arr)</span> </span>&#123;<br>    <span class="hljs-type">size_t</span> n = arr.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-type">int</span> key = arr[i];<br>        <span class="hljs-type">int</span> j = <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">int</span>&gt;(i) - <span class="hljs-number">1</span>;<br><br>        <span class="hljs-comment">// 向右移动比 key 大的元素</span><br>        <span class="hljs-keyword">while</span> (j &gt;= <span class="hljs-number">0</span> &amp;&amp; arr[j] &gt; key) &#123;<br>            arr[j + <span class="hljs-number">1</span>] = arr[j];<br>            --j;<br>        &#125;<br>        arr[j + <span class="hljs-number">1</span>] = key;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::vector&lt;<span class="hljs-type">int</span>&gt; arr = &#123;<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>&#125;;<br>    <span class="hljs-built_in">insertionSort</span>(arr);<br><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;排序结果：&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : arr) std::cout &lt;&lt; num &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    std::cout &lt;&lt; std::endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tap">排序结果：1<span class="hljs-number"> 2 </span>3<span class="hljs-number"> 4 </span>5 6<br></code></pre></td></tr></table></figure><hr><h2 id="📈-时间复杂度分析-2">📈 时间复杂度分析</h2><table><thead><tr><th>情况</th><th>比较次数</th><th>时间复杂度</th></tr></thead><tbody><tr><td>最好（已排序）</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td></tr><tr><td>平均</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup><mi mathvariant="normal">/</mi><mn>4</mn></mrow><annotation encoding="application/x-tex">n^2/4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord">/4</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td></tr><tr><td>最坏（逆序）</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">n^2/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord">/2</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td></tr></tbody></table><p>空间复杂度：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>S</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">S(n) = O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p><p>稳定性：<br>✅ <strong>稳定</strong>（相等元素不会被交换顺序）</p><hr><h2 id="🔢-数学推导：平均复杂度为何是-O-n-2-4-？">🔢 数学推导：平均复杂度为何是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mi mathvariant="normal">/</mi><mn>4</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2/4)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord">/4</span><span class="mclose">)</span></span></span></span>？</h2><p>平均情况下，插入时一半的元素需要移动：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mfrac><mn>1</mn><mi>n</mi></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mfrac><mi>i</mi><mn>2</mn></mfrac><mo>=</mo><mfrac><msup><mi>n</mi><mn>2</mn></msup><mn>4</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{n} \sum_{i=1}^{n} \frac{i}{2} = \frac{n^2}{4}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.9291em;vertical-align:-1.2777em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3365em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.1771em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4911em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>所以：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>≈</mo><mfrac><mn>1</mn><mn>4</mn></mfrac><msup><mi>n</mi><mn>2</mn></msup><mo>⇒</mo><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(n) \approx \frac{1}{4} n^2 \Rightarrow O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>这说明插入排序在<strong>部分有序</strong>的数组中效率非常高。</p><hr><h2 id="🔍-四、两者对比总结">🔍 四、两者对比总结</h2><table><thead><tr><th>特性</th><th>选择排序</th><th>插入排序</th></tr></thead><tbody><tr><td>思想</td><td>每次挑最小</td><td>每次插入新元素</td></tr><tr><td>比较次数</td><td>固定 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td><td>平均 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mi mathvariant="normal">/</mi><mn>4</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2/4)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord">/4</span><span class="mclose">)</span></span></span></span></td></tr><tr><td>交换次数</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>≤</mo><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\leq n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></td><td>最坏 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 移动</td></tr><tr><td>稳定性</td><td>❌ 不稳定</td><td>✅ 稳定</td></tr><tr><td>最好情况</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td></tr><tr><td>适用场景</td><td>小数组，无序度高</td><td>部分有序、小规模</td></tr><tr><td>工程意义</td><td>启发堆排序</td><td>启发希尔排序</td></tr></tbody></table><hr><h2 id="🧠-五、思考题与练习">🧠 五、思考题与练习</h2><ol><li>为什么选择排序即使数组已排序也不会提前终止？</li><li>如果我们使用<strong>二分查找</strong>寻找插入位置，插入排序的复杂度能否变成 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n \log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>？（提示：移动操作仍然需要 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>）</li><li>请实现一个泛型模板版的 <code>insertionSort&lt;T&gt;</code>，支持自定义比较函数。</li></ol><hr><h2 id="🌱-六、延伸阅读">🌱 六、延伸阅读</h2><ul><li>《算法导论》第 2 章：插入排序分析</li><li>《Data Structures and Algorithms in C++》：排序策略比较</li><li>LeetCode 推荐：<ul><li><a href="https://leetcode.com/problems/insertion-sort-list/">#147. Insertion Sort List</a></li><li><a href="https://leetcode.com/problems/sort-an-array/">#912. Sort an Array</a></li></ul></li></ul><hr><h2 id="✨-七、总结">✨ 七、总结</h2><table><thead><tr><th>指标</th><th>选择排序</th><th>插入排序</th></tr></thead><tbody><tr><td><strong>时间复杂度</strong></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，最好 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td></tr><tr><td><strong>空间复杂度</strong></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td></tr><tr><td><strong>稳定性</strong></td><td>否</td><td>是</td></tr><tr><td><strong>适用性</strong></td><td>简单、对交换代价敏感</td><td>部分有序、小规模场景</td></tr></tbody></table><blockquote><p>🧩 “选择排序注重决策，插入排序注重适应。<br>在算法的世界里，这两种思维是最早的智慧火花。”</p></blockquote><hr><p>🔜 <strong>下周预告</strong></p><blockquote><p><strong>第 3 周：归并排序（Merge Sort）——分治思想的第一次登场</strong><br>我们将深入剖析递归与分治策略，用数学方式理解为什么“分而治之”如此强大。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 一周一算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> C++ </tag>
            
            <tag> 选择排序 </tag>
            
            <tag> 插入排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【一周一算法】第一周：冒泡排序思考与练习详解</title>
      <link href="/2025/10/18/%E3%80%90%E4%B8%80%E5%91%A8%E4%B8%80%E7%AE%97%E6%B3%95%E3%80%91%E7%AC%AC%E4%B8%80%E5%91%A8%EF%BC%9A%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E6%80%9D%E8%80%83%E4%B8%8E%E7%BB%83%E4%B9%A0%E8%AF%A6%E8%A7%A3/"/>
      <url>/2025/10/18/%E3%80%90%E4%B8%80%E5%91%A8%E4%B8%80%E7%AE%97%E6%B3%95%E3%80%91%E7%AC%AC%E4%B8%80%E5%91%A8%EF%BC%9A%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E6%80%9D%E8%80%83%E4%B8%8E%E7%BB%83%E4%B9%A0%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1>冒泡排序思考与练习详解</h1><h2 id="🧠-思考题解答">🧠 思考题解答</h2><h3 id="1-如果要对-10000-个元素排序，冒泡排序大约需要比较多少次？">1. 如果要对 10000 个元素排序，冒泡排序大约需要比较多少次？</h3><p><strong>解答：</strong></p><p>根据冒泡排序的数学原理，最坏情况下（完全逆序）的比较次数为：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mfrac><mrow><mi>n</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><mn>2</mn></mfrac><mo>=</mo><mfrac><mrow><mn>10000</mn><mo>×</mo><mn>9999</mn></mrow><mn>2</mn></mfrac><mo>=</mo><mn>49</mn><mo separator="true">,</mo><mn>995</mn><mo separator="true">,</mo><mn>000</mn><mtext> 次</mtext></mrow><annotation encoding="application/x-tex">\frac{n(n-1)}{2} = \frac{10000 \times 9999}{2} = 49,995,000 \text{ 次}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.113em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">10000</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">9999</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord">49</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">995</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">000</span><span class="mord text"><span class="mord"> </span><span class="mord cjk_fallback">次</span></span></span></span></span></span></p><p>这大约是 <strong>5000万次比较</strong>！</p><p><strong>实际演示：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">10000</span>;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> comparisons = (<span class="hljs-type">long</span> <span class="hljs-type">long</span>)n * (n - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;10000个元素冒泡排序最多需要比较: &quot;</span> <br>              &lt;&lt; comparisons &lt;&lt; <span class="hljs-string">&quot; 次&quot;</span> &lt;&lt; std::endl;<br>    <br>    <span class="hljs-comment">// 换算成更直观的单位</span><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;约等于: &quot;</span> &lt;&lt; comparisons / <span class="hljs-number">1000000</span> &lt;&lt; <span class="hljs-string">&quot; 百万次比较&quot;</span> &lt;&lt; std::endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">10000个元素冒泡排序最多需要比较: 49995000 次</span><br><span class="hljs-section">约等于: 49 百万次比较</span><br></code></pre></td></tr></table></figure><p><strong>性能分析：</strong></p><ul><li>现代CPU每秒可执行约10亿次操作</li><li>即使每次比较+交换只需10个CPU周期，也需要约0.5秒</li><li>对于大规模数据，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 算法变得不实用</li></ul><p><strong>启示：</strong> 这就是为什么我们需要学习更高效的排序算法（如快速排序、归并排序）！</p><hr><h3 id="2-若数组初始状态接近有序，冒泡排序是否仍然适合？为什么？">2. 若数组初始状态接近有序，冒泡排序是否仍然适合？为什么？</h3><p><strong>解答：</strong></p><p><strong>是的，非常合适！</strong> 这是冒泡排序的一个<strong>显著优势</strong>。</p><p><strong>原因分析：</strong></p><ol><li><p><strong>优化机制发挥作用</strong>：</p><ul><li>当数组接近有序时，交换次数大幅减少</li><li>提前退出机制（<code>swapped</code>标志）会很快终止排序</li></ul></li><li><p><strong>时间复杂度改善</strong>：</p><ul><li>最好情况：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>（一趟扫描即完成）</li><li>接近有序时：接近 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></li></ul></li></ol><p><strong>实验验证：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;chrono&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bubbleSort</span><span class="hljs-params">(std::vector&lt;<span class="hljs-type">int</span>&gt;&amp; arr)</span> </span>&#123;<br>    <span class="hljs-type">size_t</span> n = arr.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-type">bool</span> swapped;<br>    <span class="hljs-type">int</span> comparisons = <span class="hljs-number">0</span>; <span class="hljs-comment">// 记录比较次数</span><br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; ++i) &#123;<br>        swapped = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> j = <span class="hljs-number">0</span>; j &lt; n - i - <span class="hljs-number">1</span>; ++j) &#123;<br>            comparisons++;<br>            <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;<br>                std::<span class="hljs-built_in">swap</span>(arr[j], arr[j + <span class="hljs-number">1</span>]);<br>                swapped = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!swapped) <span class="hljs-keyword">break</span>;<br>    &#125;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;实际比较次数: &quot;</span> &lt;&lt; comparisons &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 测试用例1：完全有序</span><br>    std::vector&lt;<span class="hljs-type">int</span>&gt; sorted = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>&#125;;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;完全有序数组:&quot;</span> &lt;&lt; std::endl;<br>    <span class="hljs-built_in">bubbleSort</span>(sorted);<br>    <br>    <span class="hljs-comment">// 测试用例2：接近有序（只有一对元素乱序）</span><br>    std::vector&lt;<span class="hljs-type">int</span>&gt; nearlySorted = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>&#125;;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;\n接近有序数组:&quot;</span> &lt;&lt; std::endl;<br>    <span class="hljs-built_in">bubbleSort</span>(nearlySorted);<br>    <br>    <span class="hljs-comment">// 测试用例3：完全乱序</span><br>    std::vector&lt;<span class="hljs-type">int</span>&gt; random = &#123;<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">9</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10</span>&#125;;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;\n完全乱序数组:&quot;</span> &lt;&lt; std::endl;<br>    <span class="hljs-built_in">bubbleSort</span>(random);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>预期输出：</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">完全有序数组:</span><br><span class="hljs-section">实际比较次数: 9</span><br><br><span class="hljs-section">接近有序数组:</span><br><span class="hljs-section">实际比较次数: 14</span><br><br><span class="hljs-section">完全乱序数组:</span><br><span class="hljs-section">实际比较次数: 45</span><br></code></pre></td></tr></table></figure><p><strong>应用场景：</strong></p><ul><li>实时数据流中偶尔出现乱序的情况</li><li>维护几乎有序的缓存数据</li><li>小规模数据集的增量更新</li></ul><hr><h3 id="3-降序排列的冒泡排序实现">3. 降序排列的冒泡排序实现</h3><p><strong>解答：</strong></p><p>只需要修改比较条件的方向即可实现降序排列。</p><p><strong>代码实现：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;utility&gt;</span></span><br><br><span class="hljs-comment">// 降序冒泡排序</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bubbleSortDescending</span><span class="hljs-params">(std::vector&lt;<span class="hljs-type">int</span>&gt;&amp; arr)</span> </span>&#123;<br>    <span class="hljs-type">size_t</span> n = arr.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-type">bool</span> swapped;<br>    <br>    std::cout &lt;&lt; <span class="hljs-string">&quot;降序排序过程:&quot;</span> &lt;&lt; std::endl;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;初始数组: &quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : arr) std::cout &lt;&lt; num &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    std::cout &lt;&lt; std::endl;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; ++i) &#123;<br>        swapped = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> j = <span class="hljs-number">0</span>; j &lt; n - i - <span class="hljs-number">1</span>; ++j) &#123;<br>            <span class="hljs-comment">// 关键修改：改变比较方向</span><br>            <span class="hljs-keyword">if</span> (arr[j] &lt; arr[j + <span class="hljs-number">1</span>]) &#123;<br>                std::<span class="hljs-built_in">swap</span>(arr[j], arr[j + <span class="hljs-number">1</span>]);<br>                swapped = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-comment">// 打印每轮结果</span><br>        std::cout &lt;&lt; <span class="hljs-string">&quot;第&quot;</span> &lt;&lt; i + <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&quot;轮: &quot;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : arr) std::cout &lt;&lt; num &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        std::cout &lt;&lt; std::endl;<br>        <br>        <span class="hljs-keyword">if</span> (!swapped) <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 通用冒泡排序函数，支持升序和降序</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bubbleSort</span><span class="hljs-params">(std::vector&lt;<span class="hljs-type">int</span>&gt;&amp; arr, <span class="hljs-type">bool</span> ascending = <span class="hljs-literal">true</span>)</span> </span>&#123;<br>    <span class="hljs-type">size_t</span> n = arr.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-type">bool</span> swapped;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; ++i) &#123;<br>        swapped = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> j = <span class="hljs-number">0</span>; j &lt; n - i - <span class="hljs-number">1</span>; ++j) &#123;<br>            <span class="hljs-comment">// 根据参数决定排序方向</span><br>            <span class="hljs-type">bool</span> shouldSwap = ascending ? <br>                (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) : <br>                (arr[j] &lt; arr[j + <span class="hljs-number">1</span>]);<br>                <br>            <span class="hljs-keyword">if</span> (shouldSwap) &#123;<br>                std::<span class="hljs-built_in">swap</span>(arr[j], arr[j + <span class="hljs-number">1</span>]);<br>                swapped = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!swapped) <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::vector&lt;<span class="hljs-type">int</span>&gt; arr = &#123;<span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>&#125;;<br>    <br>    <span class="hljs-comment">// 方法1：直接使用降序版本</span><br>    <span class="hljs-built_in">bubbleSortDescending</span>(arr);<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;\n最终降序结果: &quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : arr) std::cout &lt;&lt; num &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    std::cout &lt;&lt; std::endl;<br>    <br>    <span class="hljs-comment">// 方法2：使用通用版本</span><br>    std::vector&lt;<span class="hljs-type">int</span>&gt; arr2 = &#123;<span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>&#125;;<br>    <span class="hljs-built_in">bubbleSort</span>(arr2, <span class="hljs-literal">false</span>); <span class="hljs-comment">// false 表示降序</span><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;通用版本降序结果: &quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : arr2) std::cout &lt;&lt; num &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    std::cout &lt;&lt; std::endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>输出示例：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs tap">降序排序过程:<br>初始数组:<span class="hljs-number"> 5 </span>1<span class="hljs-number"> 4 </span>2<span class="hljs-number"> 8 </span><br>第1轮:<span class="hljs-number"> 5 </span>4<span class="hljs-number"> 2 </span>8<span class="hljs-number"> 1 </span><br>第2轮:<span class="hljs-number"> 5 </span>4<span class="hljs-number"> 8 </span>2<span class="hljs-number"> 1 </span><br>第3轮:<span class="hljs-number"> 5 </span>8<span class="hljs-number"> 4 </span>2<span class="hljs-number"> 1 </span><br>第4轮:<span class="hljs-number"> 8 </span>5<span class="hljs-number"> 4 </span>2<span class="hljs-number"> 1 </span><br><br>最终降序结果:<span class="hljs-number"> 8 </span>5<span class="hljs-number"> 4 </span>2<span class="hljs-number"> 1 </span><br>通用版本降序结果:<span class="hljs-number"> 8 </span>5<span class="hljs-number"> 4 </span>2<span class="hljs-number"> 1 </span><br></code></pre></td></tr></table></figure><p><strong>关键修改点：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 升序：寻找较大的元素往后冒泡</span><br><span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>])<br><br><span class="hljs-comment">// 降序：寻找较小的元素往后冒泡  </span><br><span class="hljs-keyword">if</span> (arr[j] &lt; arr[j + <span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><hr><h2 id="💡-扩展思考">💡 扩展思考</h2><h3 id="4-冒泡排序在实际开发中的应用">4. 冒泡排序在实际开发中的应用</h3><p>虽然冒泡排序在大数据场景下效率不高，但在以下场景仍有价值：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 场景1：小型数据集（&lt; 50个元素）</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sortSmallDataset</span><span class="hljs-params">()</span> </span>&#123;<br>    std::vector&lt;<span class="hljs-type">int</span>&gt; smallData = &#123;<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>&#125;;<br>    <br>    <span class="hljs-comment">// 对于小数据，代码简单比微秒级性能更重要</span><br>    <span class="hljs-built_in">bubbleSort</span>(smallData);<br>&#125;<br><br><span class="hljs-comment">// 场景2：教学和算法演示</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">educationalExample</span><span class="hljs-params">()</span> </span>&#123;<br>    std::vector&lt;<span class="hljs-type">int</span>&gt; demo = &#123;<span class="hljs-number">64</span>, <span class="hljs-number">34</span>, <span class="hljs-number">25</span>, <span class="hljs-number">12</span>, <span class="hljs-number">22</span>, <span class="hljs-number">11</span>, <span class="hljs-number">90</span>&#125;;<br>    <br>    std::cout &lt;&lt; <span class="hljs-string">&quot;冒泡排序教学演示:&quot;</span> &lt;&lt; std::endl;<br>    <span class="hljs-built_in">bubbleSortWithVisualization</span>(demo);<br>&#125;<br><br><span class="hljs-comment">// 场景3：几乎有序数据的维护</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">maintainNearlySorted</span><span class="hljs-params">()</span> </span>&#123;<br>    std::vector&lt;<span class="hljs-type">int</span>&gt; nearlySorted = <span class="hljs-built_in">getNearlySortedData</span>();<br>    <br>    <span class="hljs-comment">// 新增少量元素后重新排序</span><br>    nearlySorted.<span class="hljs-built_in">push_back</span>(newElement);<br>    <span class="hljs-built_in">bubbleSort</span>(nearlySorted); <span class="hljs-comment">// 效率接近O(n)</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-性能对比实验">5. 性能对比实验</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;chrono&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">comparePerformance</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">data</span><span class="hljs-params">(<span class="hljs-number">1000</span>)</span></span>;<br>    <br>    <span class="hljs-comment">// 生成测试数据</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; ++i) &#123;<br>        data[i] = <span class="hljs-built_in">rand</span>() % <span class="hljs-number">1000</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 复制数据用于不同算法</span><br>    <span class="hljs-keyword">auto</span> data1 = data;<br>    <span class="hljs-keyword">auto</span> data2 = data;<br>    <br>    <span class="hljs-comment">// 测试冒泡排序</span><br>    <span class="hljs-keyword">auto</span> start = std::chrono::high_resolution_clock::<span class="hljs-built_in">now</span>();<br>    <span class="hljs-built_in">bubbleSort</span>(data1);<br>    <span class="hljs-keyword">auto</span> end = std::chrono::high_resolution_clock::<span class="hljs-built_in">now</span>();<br>    <span class="hljs-keyword">auto</span> bubbleTime = std::chrono::<span class="hljs-built_in">duration_cast</span>&lt;std::chrono::microseconds&gt;(end - start);<br>    <br>    <span class="hljs-comment">// 测试STL排序</span><br>    start = std::chrono::high_resolution_clock::<span class="hljs-built_in">now</span>();<br>    std::<span class="hljs-built_in">sort</span>(data<span class="hljs-number">2.</span><span class="hljs-built_in">begin</span>(), data<span class="hljs-number">2.</span><span class="hljs-built_in">end</span>());<br>    end = std::chrono::high_resolution_clock::<span class="hljs-built_in">now</span>();<br>    <span class="hljs-keyword">auto</span> stlTime = std::chrono::<span class="hljs-built_in">duration_cast</span>&lt;std::chrono::microseconds&gt;(end - start);<br>    <br>    std::cout &lt;&lt; <span class="hljs-string">&quot;性能对比 (1000个元素):&quot;</span> &lt;&lt; std::endl;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;冒泡排序: &quot;</span> &lt;&lt; bubbleTime.<span class="hljs-built_in">count</span>() &lt;&lt; <span class="hljs-string">&quot; 微秒&quot;</span> &lt;&lt; std::endl;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;STL排序: &quot;</span> &lt;&lt; stlTime.<span class="hljs-built_in">count</span>() &lt;&lt; <span class="hljs-string">&quot; 微秒&quot;</span> &lt;&lt; std::endl;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;速度差异: &quot;</span> &lt;&lt; (<span class="hljs-type">double</span>)bubbleTime.<span class="hljs-built_in">count</span>() / stlTime.<span class="hljs-built_in">count</span>() &lt;&lt; <span class="hljs-string">&quot; 倍&quot;</span> &lt;&lt; std::endl;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="🎯-总结">🎯 总结</h2><p>通过这三个思考题的深入分析，我们得到以下重要认知：</p><ol><li><strong>复杂度认知</strong>：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 算法在大规模数据下性能急剧下降</li><li><strong>适用场景</strong>：冒泡排序在接近有序的小数据集中有独特优势</li><li><strong>算法灵活性</strong>：通过简单修改比较逻辑可实现不同排序需求</li><li><strong>工程思维</strong>：理解算法不仅要懂原理，更要明白实际应用场景</li></ol><p>冒泡排序作为算法学习的&quot;Hello World&quot;，教会我们的不仅是排序本身，更是<strong>算法思维的起点</strong>——如何分析问题、优化方案、理解边界条件。</p>]]></content>
      
      
      <categories>
          
          <category> 一周一算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 算法解答 </tag>
            
            <tag> 冒泡算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【一周一算法】第一周：冒泡算法</title>
      <link href="/2025/10/18/%E3%80%90%E4%B8%80%E5%91%A8%E4%B8%80%E7%AE%97%E6%B3%95%E3%80%91%E7%AC%AC%E4%B8%80%E5%91%A8%EF%BC%9A%E5%86%92%E6%B3%A1%E7%AE%97%E6%B3%95/"/>
      <url>/2025/10/18/%E3%80%90%E4%B8%80%E5%91%A8%E4%B8%80%E7%AE%97%E6%B3%95%E3%80%91%E7%AC%AC%E4%B8%80%E5%91%A8%EF%BC%9A%E5%86%92%E6%B3%A1%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1>🧮 一周一个算法 · 第 1 周</h1><h2 id="冒泡排序（Bubble-Sort）——最温柔的排序算法"><strong>冒泡排序（Bubble Sort）——最温柔的排序算法</strong></h2><blockquote><p>“算法世界的 Hello World”—— 从冒泡排序开始，理解算法的核心：<strong>有序化的思想 + 复杂度的度量</strong></p></blockquote><hr><h2 id="🧭-一、算法引入：从“气泡上浮”说起">🧭 一、算法引入：从“气泡上浮”说起</h2><p>想象你有一列数字，它们像一串气泡。每次比较相邻的两个，如果前一个更“大”，那它就“上浮”到后面。经过一轮比较，最大的数就会被“冒泡”到最末尾。重复这个过程，就能让所有气泡依次排好序。</p><p>形象化图示（升序排列）：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">初始: <span class="hljs-string">[5, 1, 4, 2, 8]</span><br>第<span class="hljs-number">1</span>轮: <span class="hljs-string">[1, 4, 2, 5, 8]</span>   (<span class="hljs-number">8</span> 冒到最右)<br>第<span class="hljs-number">2</span>轮: <span class="hljs-string">[1, 2, 4, 5, 8]</span><br>第<span class="hljs-number">3</span>轮: <span class="hljs-string">[1, 2, 4, 5, 8]</span>   (已排序)<br></code></pre></td></tr></table></figure><hr><h2 id="🧩-二、算法思想总结">🧩 二、算法思想总结</h2><p>核心思想：<strong>相邻元素两两比较，不符合顺序则交换，重复这一过程直到全部有序。</strong></p><p>流程逻辑：</p><ol><li>外层循环控制“趟数”；</li><li>内层循环进行相邻元素比较；</li><li>每次外层结束，最大元素确定；</li><li>可通过标志位检测是否提前有序（优化版）。</li></ol><hr><h2 id="⚙️-三、算法伪代码">⚙️ 三、算法伪代码</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs text">procedure BubbleSort(A[0..n-1]):<br>    for i from 0 to n-2:<br>        swapped ← false<br>        for j from 0 to n-2-i:<br>            if A[j] &gt; A[j+1]:<br>                swap(A[j], A[j+1])<br>                swapped ← true<br>        if not swapped:<br>            break  // 提前结束，数组已排序<br></code></pre></td></tr></table></figure><hr><h2 id="💻-四、C-实现代码（含优化）">💻 四、C++ 实现代码（含优化）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;utility&gt;</span> <span class="hljs-comment">// for std::swap</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bubbleSort</span><span class="hljs-params">(std::vector&lt;<span class="hljs-type">int</span>&gt;&amp; arr)</span> </span>&#123;<br>    <span class="hljs-type">size_t</span> n = arr.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-type">bool</span> swapped;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; ++i) &#123;<br>        swapped = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> j = <span class="hljs-number">0</span>; j &lt; n - i - <span class="hljs-number">1</span>; ++j) &#123;<br>            <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;<br>                std::<span class="hljs-built_in">swap</span>(arr[j], arr[j + <span class="hljs-number">1</span>]);<br>                swapped = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 若一趟中未发生交换，说明已排序完成</span><br>        <span class="hljs-keyword">if</span> (!swapped)<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::vector&lt;<span class="hljs-type">int</span>&gt; arr = &#123;<span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>&#125;;<br><br>    <span class="hljs-built_in">bubbleSort</span>(arr);<br><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;排序结果：&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : arr) std::cout &lt;&lt; num &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    std::cout &lt;&lt; std::endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tap">排序结果：1<span class="hljs-number"> 2 </span>4<span class="hljs-number"> 5 </span>8<br></code></pre></td></tr></table></figure><hr><h2 id="📈-五、复杂度分析（数学视角）">📈 五、复杂度分析（数学视角）</h2><h3 id="1️⃣-时间复杂度">1️⃣ 时间复杂度</h3><ul><li><p><strong>最坏情况</strong>（完全逆序）：</p><ul><li><p>第 1 轮比较 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 次</p></li><li><p>第 2 轮比较 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>−</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">n-2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span></span></span></span> 次</p></li><li><p>…</p></li><li><p>第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(n-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 轮比较 1 次⇒ 总比较次数：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo><mo>+</mo><mo>⋯</mo><mo>+</mo><mn>1</mn><mo>=</mo><mfrac><mrow><mi>n</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">(n-1) + (n-2) + \cdots + 1 = \frac{n(n-1)}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.113em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>因此：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(n) = O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p></li></ul></li><li><p><strong>最好情况</strong>（数组已排序 + 启用优化）：</p><ul><li><p>只需一趟比较，未发生交换</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(n) = O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></span></p></li></ul></li><li><p><strong>平均情况</strong>：元素随机分布，约为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。</p></li></ul><hr><h3 id="2️⃣-空间复杂度">2️⃣ 空间复杂度</h3><ul><li><p>仅使用一个辅助变量 <code>swapped</code>：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>S</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">S(n) = O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p></li></ul><hr><h3 id="3️⃣-稳定性分析">3️⃣ 稳定性分析</h3><p>冒泡排序是<strong>稳定排序算法</strong>。即相同元素的相对顺序保持不变。👉 当 <code>A[j] == A[j+1]</code> 时不交换。</p><hr><h2 id="🔢-六、数学扩展：为什么比较次数是-frac-n-n-1-2-？">🔢 六、数学扩展：为什么比较次数是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mi>n</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{n(n-1)}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.355em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>？</h2><p>推导：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></munderover><mi>i</mi><mo>=</mo><mfrac><mrow><mi>n</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\sum_{i=1}^{n-1} i = \frac{n(n-1)}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.0788em;vertical-align:-1.2777em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8011em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.113em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>该数列为等差数列，首项为 1，末项为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>，项数为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>。因此其求和公式是：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>S</mi><mo>=</mo><mfrac><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">S = \frac{(1 + n - 1)(n - 1)}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.113em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p><strong>数学意义</strong>：这其实表示“所有可能的无序对数量”。每一对 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(i, j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span></span></span></span> 都需要至少比较一次，冒泡排序会检查所有这些对。</p><hr><h2 id="🚀-七、可视化理解（交换轨迹）">🚀 七、可视化理解（交换轨迹）</h2><p>举例：<code>[5, 3, 4, 1, 2]</code></p><table><thead><tr><th>轮次</th><th>操作</th><th>数组状态</th></tr></thead><tbody><tr><td>1</td><td>交换 (5,3)</td><td>[3,5,4,1,2]</td></tr><tr><td>1</td><td>交换 (5,4)</td><td>[3,4,5,1,2]</td></tr><tr><td>1</td><td>交换 (5,1)</td><td>[3,4,1,5,2]</td></tr><tr><td>1</td><td>交换 (5,2)</td><td>[3,4,1,2,5]</td></tr><tr><td>2</td><td>交换 (4,1)</td><td>[3,1,4,2,5]</td></tr><tr><td>2</td><td>交换 (4,2)</td><td>[3,1,2,4,5]</td></tr><tr><td>3</td><td>交换 (3,1)</td><td>[1,3,2,4,5]</td></tr><tr><td>3</td><td>交换 (3,2)</td><td>[1,2,3,4,5]</td></tr></tbody></table><hr><h2 id="🔍-八、算法改进方向">🔍 八、算法改进方向</h2><table><thead><tr><th>改进方法</th><th>思想</th><th>效果</th></tr></thead><tbody><tr><td><strong>提前退出标志</strong></td><td>检测一趟是否发生交换</td><td>减少不必要比较</td></tr><tr><td><strong>记录最后交换位置</strong></td><td>限制下一趟的比较区间</td><td>更高效的优化版</td></tr><tr><td><strong>鸡尾酒排序</strong></td><td>双向冒泡（正向+反向）</td><td>改善局部有序性能</td></tr></tbody></table><hr><h2 id="🧠-九、思考与练习">🧠 九、思考与练习</h2><ol><li><p>如果要对 10000 个元素排序，冒泡排序大约需要比较多少次？（提示：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mi>n</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{n(n-1)}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.355em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>）</p></li><li><p>若数组初始状态接近有序，冒泡排序是否仍然适合？为什么？</p></li><li><p>尝试改写 <code>bubbleSort()</code>，实现<strong>降序</strong>排列。</p></li></ol><hr><h2 id="🌱-十、延伸阅读">🌱 十、延伸阅读</h2><ul><li><p>《算法导论》第 2 章：基础排序算法</p></li><li><p>《Programming Pearls》：关于冒泡排序的性能陷阱</p></li><li><p>LeetCode 题目推荐：</p><ul><li><a href="https://leetcode.com/problems/sort-an-array/">#912 Sort an Array</a></li><li><a href="https://leetcode.com/problems/insertion-sort-list/">#147 Insertion Sort List</a></li></ul></li></ul><hr><h2 id="✨-总结">✨ 总结</h2><table><thead><tr><th>特性</th><th>说明</th></tr></thead><tbody><tr><td><strong>时间复杂度</strong></td><td>平均 / 最坏：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，最好：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td></tr><tr><td><strong>空间复杂度</strong></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td></tr><tr><td><strong>稳定性</strong></td><td>✅ 稳定</td></tr><tr><td><strong>是否原地排序</strong></td><td>✅ 是</td></tr><tr><td><strong>适用场景</strong></td><td>小规模、部分有序数据、教学演示</td></tr></tbody></table><blockquote><p>🧩 “冒泡排序不是最快的算法，但它是理解算法思想的最好入口。”—— 下一周，我们将进入 <strong>选择排序与插入排序</strong>，从“局部最优”出发，迈向更优的排序逻辑。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 一周一算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> C++ </tag>
            
            <tag> 冒泡算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LIBLSX - 轻量级 C++ 跨平台工具库</title>
      <link href="/2025/07/06/LIBLSX-%E8%BD%BB%E9%87%8F%E7%BA%A7-C-%E8%B7%A8%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7%E5%BA%93/"/>
      <url>/2025/07/06/LIBLSX-%E8%BD%BB%E9%87%8F%E7%BA%A7-C-%E8%B7%A8%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1>LIBLSX - 轻量级 C++ 跨平台工具库</h1><p><a href="LICENSE"><img src="https://img.shields.io/badge/license-MIT-blue" alt="MIT License"></a></p><p><img src="https://img.shields.io/badge/C++-17-blue.svg" alt="C++17"></p><p>LIBLSX 是一个轻量级、跨平台的 C++ 工具库，旨在为开发者提供高效且易用的基础组件。当前已开发完成 <strong>线程管理（Thread）</strong>、<strong>数据通信（DataTransfer）</strong>、<strong>内存管理（Memory）</strong>、<strong>锁管理（LockManager）</strong> 和 <strong>日志系统（Logger）</strong> 五大核心模块。</p><p>项目地址：<a href="https://github.com/JinBiLianShao/liblsx">LIBLSX Github</a></p><h2 id="功能特性">功能特性</h2><h3 id="1-Thread-模块">1. Thread 模块</h3><ul><li><strong>线程生命周期管理</strong>：通过 <code>ThreadWrapper</code> 实现线程的启动、停止、暂停、恢复。</li><li><strong>灵活任务绑定</strong>：支持 Lambda、自由函数、成员函数、函数对象等多种任务类型。</li><li><strong>任务调度器</strong>：<code>Scheduler</code> 支持一次性延迟任务和周期性任务调度。</li><li><strong>线程池</strong>：<code>ThreadPool</code> 管理多个工作线程并执行任务队列中的任务。</li><li><strong>跨平台兼容</strong>：基于 C++11 标准线程库，适配 Windows/Linux/macOS。</li></ul><h3 id="2-DataTransfer-模块">2. DataTransfer 模块</h3><ul><li><strong>统一通信接口</strong>：通过 <code>ICommunication</code> 抽象 UDP/TCP/串口等通信协议。</li><li><strong>多协议支持</strong>：<ul><li><strong>网络协议</strong>：UDP（客户端/服务器/广播/多播）、TCP（客户端/服务器）。</li><li><strong>串口通信</strong>：跨平台串口读写，支持超时配置。</li></ul></li><li><strong>线程安全设计</strong>：内置锁机制保障多线程安全，RAII 管理资源。</li><li><strong>工厂模式创建实例</strong>：通过 <code>CommunicationFactory</code> 快速创建各类通信实例。</li></ul><h3 id="3-Memory-模块">3. Memory 模块</h3><ul><li><strong>模块化设计</strong>：包含 FIFO 队列、管道、循环队列、共享内存、内存缓冲区等组件。</li><li><strong>线程安全</strong>：所有组件均支持多线程安全访问。</li><li><strong>灵活的数据结构</strong>：支持固定大小块管理和动态内存缓冲区。</li><li><strong>跨平台</strong>：适配 Windows 和 POSIX 系统（Linux/macOS）。</li></ul><h3 id="4-LockManager-模块">4. LockManager 模块</h3><ul><li><strong>RAII 原则封装</strong>：基于 RAII (Resource Acquisition Is Initialization) 机制，自动管理互斥量的加锁与解锁，确保资源在作用域结束或异常抛出时被正确释放，极大提升并发代码的<strong>安全性、可读性、健壮性和可维护性</strong>。</li><li><strong>多种锁类型支持</strong>：全面支持 C++ 标准库提供的各类互斥量，包括 <code>std::mutex</code> (独占)、<code>std::recursive_mutex</code> (递归)、<code>std::timed_mutex</code> (定时独占)、<code>std::shared_mutex</code> (读写锁) 和 <code>std::shared_timed_mutex</code> (定时读写锁)。</li><li><strong>死锁自动避免</strong>：<code>MultiLockGuard</code> 类利用 C++17 的 <code>std::scoped_lock</code>，在单个原子操作中同时获取多个互斥量，内置死锁避免算法，从根本上解决多锁场景下的死锁问题。</li><li><strong>条件变量支持</strong>：<code>Condition</code> 类封装 <code>std::condition_variable_any</code>，提供强大的线程间协作和同步机制，并通过强制使用谓词 (predicate) 有效避免“虚假唤醒”。</li><li><strong>C++17 标准兼容</strong>：充分利用 <code>if constexpr</code>、<code>std::scoped_lock</code>、<code>std::is_same_v</code> 等 C++17 特性，提供更高效、更简洁的实现。</li></ul><h3 id="5-Logger-模块">5. Logger 模块</h3><ul><li><strong>多线程安全</strong>：内部使用互斥锁和原子操作，确保在多线程环境下的日志写入安全。</li><li><strong>跨平台支持</strong>：主要依赖 C++ 标准库，兼容 Windows/Linux/macOS。</li><li><strong>日志级别控制</strong>：支持 DEBUG, INFO, WARNING, ERROR 四种级别，可动态调整。</li><li><strong>多种输出目标</strong>：支持控制台 (Console) 和本地文件 (File) 输出。</li><li><strong>动态切换输出</strong>：可在运行时动态切换日志的输出目标。</li><li><strong>文件日志轮转</strong>：文件输出模式下，支持按最大行数限制进行日志轮转，保留最新日志。</li><li><strong>灵活配置</strong>：通过 <code>LoggerConfig</code> 进行初始化配置。</li><li><strong>清晰的日志格式</strong>：包含时间戳、线程ID、级别、代码位置 (文件、行号、函数) 和消息。</li><li><strong>便捷宏定义</strong>：提供 <code>LSX_LOG_DEBUG</code>, <code>LSX_LOG_INFO</code> 等宏简化日志调用。</li></ul><h2 id="快速开始">快速开始</h2><h3 id="前置条件">前置条件</h3><ul><li>C++17 或更高版本的编译器。</li><li>将 LIBLSX 库导入项目。</li></ul><h3 id="代码示例">代码示例</h3><h4 id="线程任务调度">线程任务调度</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;LIBLSX/Thread/ThreadWrapper.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;LIBLSX/Thread/Scheduler.h&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> LIBLSX::Thread;<br><br><span class="hljs-comment">// 创建线程并绑定 Lambda 任务</span><br>ThreadWrapper thread;<br>thread.<span class="hljs-built_in">setTask</span>([]() &#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Hello from thread!&quot;</span> &lt;&lt; std::endl;<br>&#125;);<br>thread.<span class="hljs-built_in">start</span>();<br>thread.<span class="hljs-built_in">stop</span>();<br><br><span class="hljs-comment">// 调度周期性任务</span><br>Scheduler scheduler;<br>scheduler.<span class="hljs-built_in">schedulePeriodic</span>(<span class="hljs-number">1000</span>, []() &#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Tick every 1s&quot;</span> &lt;&lt; std::endl;<br>&#125;);<br>std::this_thread::<span class="hljs-built_in">sleep_for</span>(std::chrono::<span class="hljs-built_in">seconds</span>(<span class="hljs-number">3</span>));<br>scheduler.<span class="hljs-built_in">shutdown</span>();<br>````<br><br>#### 网络通信<br><br>```cpp<br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;LIBLSX/DataTransfer/CommunicationFactory.h&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> LIBLSX;<br><br><span class="hljs-comment">// 创建 TCP 客户端</span><br><span class="hljs-keyword">auto</span> tcp = CommunicationFactory::<span class="hljs-built_in">create</span>(CommType::TCP_CLIENT, <span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8080</span>);<br><span class="hljs-keyword">if</span> (tcp &amp;&amp; tcp-&gt;<span class="hljs-built_in">create</span>()) &#123;<br>    std::vector&lt;<span class="hljs-type">uint8_t</span>&gt; data = &#123;<span class="hljs-number">0x01</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x03</span>&#125;;<br>    tcp-&gt;<span class="hljs-built_in">send</span>(data.<span class="hljs-built_in">data</span>(), data.<span class="hljs-built_in">size</span>());<br>    tcp-&gt;<span class="hljs-built_in">close</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="内存管理">内存管理</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;LIBLSX/Memory/FIFO.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;LIBLSX/Memory/Pipe.h&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> LIBLSX::Memory;<br><br><span class="hljs-comment">// 使用 FIFO 队列</span><br>FIFO&lt;std::string&gt; string_fifo;<br>string_fifo.<span class="hljs-built_in">Put</span>(<span class="hljs-string">&quot;Hello&quot;</span>);<br>string_fifo.<span class="hljs-built_in">Put</span>(<span class="hljs-string">&quot;World&quot;</span>);<br><br><span class="hljs-comment">// 使用管道</span><br>Pipe byte_pipe;<br>std::vector&lt;<span class="hljs-type">uint8_t</span>&gt; send = &#123;<span class="hljs-string">&#x27;H&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>&#125;;<br>byte_pipe.<span class="hljs-built_in">Write</span>(send);<br>std::vector&lt;<span class="hljs-type">uint8_t</span>&gt; received = byte_pipe.<span class="hljs-built_in">Read</span>(<span class="hljs-number">5</span>);<br></code></pre></td></tr></table></figure><h4 id="锁管理-LockManager">锁管理 (LockManager)</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;LIBLSX/LockManager/MultiLockGuard.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;thread&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;mutex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;chrono&gt;</span> <span class="hljs-comment">// For std::chrono::milliseconds</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> LIBLSX::LockManager;<br><br>std::mutex account_m1, account_m2;<br><span class="hljs-type">int</span> account_balance1 = <span class="hljs-number">100</span>, account_balance2 = <span class="hljs-number">200</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">transfer_funds</span><span class="hljs-params">(<span class="hljs-type">int</span> amount, <span class="hljs-type">int</span>&amp; from_balance, <span class="hljs-type">int</span>&amp; to_balance, std::mutex&amp; m_from, std::mutex&amp; m_to)</span> </span>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Attempting transfer of &quot;</span> &lt;&lt; amount &lt;&lt; <span class="hljs-string">&quot;...&quot;</span> &lt;&lt; std::endl;<br>    <span class="hljs-comment">// MultiLockGuard 原子性地获取两个互斥量，自动处理死锁</span><br>    <span class="hljs-function">MultiLockGuard&lt;std::mutex, std::mutex&gt; <span class="hljs-title">lock_pair</span><span class="hljs-params">(m_from, m_to)</span></span>;<br><br>    <span class="hljs-keyword">if</span> (from_balance &gt;= amount) &#123;<br>        std::this_thread::<span class="hljs-built_in">sleep_for</span>(std::chrono::<span class="hljs-built_in">milliseconds</span>(<span class="hljs-number">10</span>)); <span class="hljs-comment">// 模拟处理时间</span><br>        from_balance -= amount;<br>        to_balance += amount;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Transfer successful. Bal1=&quot;</span> &lt;&lt; from_balance &lt;&lt; <span class="hljs-string">&quot;, Bal2=&quot;</span> &lt;&lt; to_balance &lt;&lt; std::endl;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Transfer failed: Insufficient funds.&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// Example usage (within main or another function):</span><br><span class="hljs-comment">// std::thread t1(transfer_funds, 30, std::ref(account_balance1), std::ref(account_balance2), std::ref(account_m1), std::ref(account_m2));</span><br><span class="hljs-comment">// std::thread t2(transfer_funds, 80, std::ref(account_balance2), std::ref(account_balance1), std::ref(account_m2), std::ref(account_m1)); // 演示颠倒顺序仍安全</span><br><span class="hljs-comment">// t1.join(); t2.join();</span><br></code></pre></td></tr></table></figure><h4 id="日志系统-Logger">日志系统 (Logger)</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;LIBLSX/Logger/Logger.h&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> LIBLSX::Logger;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-comment">// Note: Logger instance lifecycle needs management in a real app.</span><br>    LoggerConfig config;<br>    config.level = LogLevel::DEBUG; <span class="hljs-comment">// 设置级别为 DEBUG</span><br>    config.mode = OutputMode::Console; <span class="hljs-comment">// 输出到控制台</span><br><br>    <span class="hljs-function">Logger <span class="hljs-title">logger</span><span class="hljs-params">(config)</span></span>; <span class="hljs-comment">// 创建 Logger 实例</span><br><br>    <span class="hljs-comment">// 使用日志宏记录日志</span><br>    <span class="hljs-built_in">LSX_LOG_DEBUG</span>(logger, <span class="hljs-string">&quot;这是一个调试信息.&quot;</span>);<br>    <span class="hljs-built_in">LSX_LOG_INFO</span>(logger, <span class="hljs-string">&quot;应用程序启动.&quot;</span>);<br>    <span class="hljs-built_in">LSX_LOG_WARNING</span>(logger, <span class="hljs-string">&quot;发现一个潜在问题.&quot;</span>);<br>    <span class="hljs-built_in">LSX_LOG_ERROR</span>(logger, <span class="hljs-string">&quot;发生严重错误!&quot;</span>);<br><br>    <span class="hljs-comment">// logger.SetLogLevel(LogLevel::INFO); // 动态改变级别示例</span><br>    <span class="hljs-comment">// LSX_LOG_DEBUG(logger, &quot;这条 DEBUG 日志不会被记录.&quot;);</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="模块文档">模块文档</h2><table><thead><tr><th>模块</th><th>功能说明</th><th>详细文档链接</th></tr></thead><tbody><tr><td><strong>Thread</strong></td><td>线程管理与任务调度</td><td><a href="https://github.com/JinBiLianShao/liblsx/blob/master/example%2FThread%2FLIBLSX%20%E5%B7%A5%E5%85%B7%E5%BA%93%20Thread%20%E6%A8%A1%E5%9D%97%20%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3.md">Thread 模块文档</a></td></tr><tr><td><strong>DataTransfer</strong></td><td>网络与串口通信</td><td><a href="https://github.com/JinBiLianShao/liblsx/blob/master/example%2FDataTransfer%2FLIBLSX%20%E5%B7%A5%E5%85%B7%E5%BA%93%20DataTransfer%20%E6%A8%A1%E5%9D%97%20%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3.md">DataTransfer 模块文档</a></td></tr><tr><td><strong>Memory</strong></td><td>内存管理与数据结构</td><td><a href="https://github.com/JinBiLianShao/liblsx/blob/master/example%2FMemoryManagement%2FLIBLSX%20%E5%B7%A5%E5%85%B7%E5%BA%93%20Memory%20%E6%A8%A1%E5%9D%97%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E.md">Memory 模块文档</a></td></tr><tr><td><strong>LockManager</strong></td><td>RAII 锁管理与并发原语</td><td><a href="https://github.com/JinBiLianShao/liblsx/blob/master/example/LockManager/LIBLSX%20%E5%B7%A5%E5%85%B7%E5%BA%93%20LockManager%20%E6%A8%A1%E5%9D%97%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E.md">LockManager 模块文档</a></td></tr><tr><td><strong>Logger</strong></td><td>轻量级多功能日志系统</td><td><a href="https://github.com/JinBiLianShao/liblsx/blob/master/example/Logger/LSX_LIB%E5%B7%A5%E5%85%B7%E5%BA%93Logger%20%E6%A8%A1%E5%9D%97%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E.md">Logger 模块文档</a></td></tr></tbody></table><h2 id="项目状态与贡献">项目状态与贡献</h2><ul><li><strong>当前版本</strong>：v0.1.0（开发中）</li><li><strong>待开发模块</strong>：数据库模块、Web模块等。</li><li><strong>欢迎贡献</strong>：欢迎提交 Issue 或 PR，共同完善功能模块。请遵循项目的代码规范与协议。</li></ul><h2 id="许可证">许可证</h2><p>本项目采用 <strong>MIT 许可证</strong>。详情请参阅 <a href="https://www.google.com/search?q=LICENSE">LICENSE</a> 文件。</p>]]></content>
      
      
      <categories>
          
          <category> C++开源项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开源项目 </tag>
            
            <tag> C++跨平台工具库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[已验证]基于HAL库可迁移通用gpio模拟I2C实现</title>
      <link href="/2024/10/23/%E5%B7%B2%E9%AA%8C%E8%AF%81-%E5%9F%BA%E4%BA%8EHAL%E5%BA%93%E5%8F%AF%E8%BF%81%E7%A7%BB%E9%80%9A%E7%94%A8gpio%E6%A8%A1%E6%8B%9FI2C%E5%AE%9E%E7%8E%B0/"/>
      <url>/2024/10/23/%E5%B7%B2%E9%AA%8C%E8%AF%81-%E5%9F%BA%E4%BA%8EHAL%E5%BA%93%E5%8F%AF%E8%BF%81%E7%A7%BB%E9%80%9A%E7%94%A8gpio%E6%A8%A1%E6%8B%9FI2C%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1>[已验证]基于HAL库可迁移通用gpio模拟I2C实现</h1><h2 id="引言">引言</h2><p>之前写过一版，但没有经过工程验证，而今年在实际工程领域确实要用到gpio模拟I2C的功能实现，我在原有的基础上调试，修复bug才有了今天这篇博客。下述源码已经过实际开发工程验证，可迁移使用。话不多说，在介绍一遍吧。。</p><h2 id="I2C协议简介">I2C协议简介</h2><p>I2C是一种多主多从的串行通信协议，具有简单、灵活的优点。它使用两根信号线：SDA（数据线）和SCL（时钟线）。数据在SDA线上传输，而SCL线用于同步信号。I2C的通信时序如下图所示：</p><p><img src="/images/2024-10-23-01.png" alt="i2c时序图"></p><h3 id="时序说明">时序说明</h3><ol><li><strong>起始条件（Start Condition）</strong>：SDA从高电平跳变到低电平，SCL保持高电平。</li><li><strong>停止条件（Stop Condition）</strong>：SDA从低电平跳变到高电平，SCL保持高电平。</li><li><strong>数据传输</strong>：数据在SDA线上传输时，SCL线提供时钟信号，每个时钟周期传输一位数据。</li></ol><h2 id="GPIO初始化">GPIO初始化</h2><p>在STM32中，我使用GPIO引脚模拟I2C信号。以下是GPIO初始化的代码实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">I2C_GPIO_Init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    GPIO_InitTypeDef GPIO_InitStruct = &#123;<span class="hljs-number">0</span>&#125;;<br><br>    <span class="hljs-comment">// 初始化SCL引脚</span><br>    GPIO_InitStruct.Pin = I2C3_SCL_Pin;<br>    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;<br>    GPIO_InitStruct.Pull = GPIO_NOPULL;<br>    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;<br>    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &amp;GPIO_InitStruct);<br><br>    <span class="hljs-comment">// 初始化SDA引脚</span><br>    GPIO_InitStruct.Pin = I2C3_SDA_Pin;<br>    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &amp;GPIO_InitStruct);<br><br>    <span class="hljs-comment">// 将SCL和SDA拉高</span><br>    HAL_GPIO_WritePin(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin, GPIO_PIN_SET);<br>    HAL_GPIO_WritePin(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin, GPIO_PIN_SET);<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>I2C_GPIO_Init</code>函数中，我们将SCL和SDA引脚初始化为推挽输出模式，并将其状态设置为高电平。</p><h2 id="I2C操作实现">I2C操作实现</h2><p>接下来，我们将实现I2C的基本操作，包括起始条件、停止条件、发送字节和读取字节等。</p><h3 id="起始条件与停止条件">起始条件与停止条件</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">I2C_Start</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    I2C_Set_SDA(GPIO_PIN_SET);<br>    I2C_Set_SCL(GPIO_PIN_SET);<br>    I2C_Delay();<br>    I2C_Set_SDA(GPIO_PIN_RESET);<br>    I2C_Delay();<br>    I2C_Set_SCL(GPIO_PIN_RESET);<br>    I2C_Delay();<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">I2C_Stop</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    I2C_Set_SDA(GPIO_PIN_RESET);<br>    I2C_Set_SCL(GPIO_PIN_SET);<br>    I2C_Delay();<br>    I2C_Set_SDA(GPIO_PIN_SET);<br>    I2C_Delay();<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>I2C_Start</code>和<code>I2C_Stop</code>函数中，我们通过控制SDA和SCL的电平来实现I2C的起始和停止条件。</p><h3 id="发送字节">发送字节</h3><p>发送字节的函数如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> HAL_StatusTypeDef <span class="hljs-title function_">I2C_Send_Byte</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> byte)</span><br>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int8_t</span> i = <span class="hljs-number">7</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>    &#123;<br>        GPIO_PinState bit = (byte &amp; (<span class="hljs-number">1</span> &lt;&lt; i)) ? GPIO_PIN_SET : GPIO_PIN_RESET;<br>        I2C_Set_SDA(bit);<br>        I2C_Delay();<br>        I2C_Set_SCL(GPIO_PIN_SET);<br>        I2C_Delay();<br>        I2C_Set_SCL(GPIO_PIN_RESET);<br>        I2C_Delay();<br>    &#125;<br><br>    <span class="hljs-comment">// 接收ACK</span><br>    I2C_Set_SDA_Input();<br>    I2C_Delay();<br>    I2C_Set_SCL(GPIO_PIN_SET);<br>    I2C_Delay();<br>    GPIO_PinState ack = I2C_Read_SDA();<br>    I2C_Set_SCL(GPIO_PIN_RESET);<br>    I2C_Delay();<br><br>    <span class="hljs-keyword">return</span> (ack == GPIO_PIN_RESET) ? HAL_OK : HAL_ERROR;<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>I2C_Send_Byte</code>函数中，我们将数据的每一位发送到SDA线上，并在发送完毕后读取ACK信号。</p><h3 id="读取字节">读取字节</h3><p>读取字节的实现如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">uint8_t</span> <span class="hljs-title function_">I2C_Read_Byte</span><span class="hljs-params">(GPIO_PinState ack)</span><br>&#123;<br>    <span class="hljs-type">uint8_t</span> byte = <span class="hljs-number">0</span>;<br><br>    I2C_Set_SDA_Input();  <span class="hljs-comment">// 设置SDA为输入模式</span><br>    I2C_Delay();<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int8_t</span> i = <span class="hljs-number">7</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>    &#123;<br>        I2C_Set_SCL(GPIO_PIN_SET);<br>        I2C_Delay();<br>        <span class="hljs-keyword">if</span> (I2C_Read_SDA() == GPIO_PIN_SET)<br>        &#123;<br>            byte |= (<span class="hljs-number">1</span> &lt;&lt; i);<br>        &#125;<br>        I2C_Set_SCL(GPIO_PIN_RESET);<br>        I2C_Delay();<br>    &#125;<br><br>    <span class="hljs-comment">// 发送ACK或NACK</span><br>    I2C_Set_SDA(ack);<br>    I2C_Delay();<br>    I2C_Set_SCL(GPIO_PIN_SET);<br>    I2C_Delay();<br>    I2C_Set_SCL(GPIO_PIN_RESET);<br>    I2C_Delay();<br><br>    <span class="hljs-keyword">return</span> byte;<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>I2C_Read_Byte</code>函数中，我们设置SDA为输入模式，读取数据位，并根据需要发送ACK或NACK。</p><h2 id="I2C读写操作的封装">I2C读写操作的封装</h2><p>我们还可以将上述基本操作封装为更高层次的I2C读写函数，如<code>G_I2C_Mem_Write</code>和<code>G_I2C_Mem_Read</code>。</p><h3 id="写入操作">写入操作</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c">HAL_StatusTypeDef <span class="hljs-title function_">G_I2C_Mem_Write</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> devAddr, <span class="hljs-type">uint8_t</span> memAddr, <span class="hljs-type">uint8_t</span> *pData, <span class="hljs-type">uint16_t</span> size)</span><br>&#123;<br>    I2C_Start();<br><br>    <span class="hljs-keyword">if</span> (I2C_Send_Byte(devAddr &lt;&lt; <span class="hljs-number">1</span>) != HAL_OK)<br>    &#123;<br>        I2C_Stop();<br>        <span class="hljs-keyword">return</span> HAL_ERROR;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (I2C_Send_Byte(memAddr) != HAL_OK)<br>    &#123;<br>        I2C_Stop();<br>        <span class="hljs-keyword">return</span> HAL_ERROR;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">uint16_t</span> i = <span class="hljs-number">0</span>; i &lt; size; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (I2C_Send_Byte(pData[i]) != HAL_OK)<br>        &#123;<br>            I2C_Stop();<br>            <span class="hljs-keyword">return</span> HAL_ERROR;<br>        &#125;<br>    &#125;<br><br>    I2C_Stop();<br>    <span class="hljs-keyword">return</span> HAL_OK;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="读取操作">读取操作</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c">HAL_StatusTypeDef <span class="hljs-title function_">G_I2C_Mem_Read</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> devAddr, <span class="hljs-type">uint8_t</span> memAddr, <span class="hljs-type">uint8_t</span> *pData, <span class="hljs-type">uint16_t</span> size)</span><br>&#123;<br>    I2C_Start();<br><br>    <span class="hljs-keyword">if</span> (I2C_Send_Byte(devAddr &lt;&lt; <span class="hljs-number">1</span>) != HAL_OK)<br>    &#123;<br>        I2C_Stop();<br>        <span class="hljs-keyword">return</span> HAL_ERROR;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (I2C_Send_Byte(memAddr) != HAL_OK)<br>    &#123;<br>        I2C_Stop();<br>        <span class="hljs-keyword">return</span> HAL_ERROR;<br>    &#125;<br><br>    I2C_Start();<br><br>    <span class="hljs-keyword">if</span> (I2C_Send_Byte((devAddr &lt;&lt; <span class="hljs-number">1</span>) | <span class="hljs-number">0x01</span>) != HAL_OK)<br>    &#123;<br>        I2C_Stop();<br>        <span class="hljs-keyword">return</span> HAL_ERROR;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">uint16_t</span> i = <span class="hljs-number">0</span>; i &lt; size; i++)<br>    &#123;<br>        pData[i] = I2C_Read_Byte((i == size - <span class="hljs-number">1</span>) ? I2C_NACK : I2C_ACK);<br>    &#125;<br><br>    I2C_Stop();<br>    <span class="hljs-keyword">return</span> HAL_OK;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="结论">结论</h2><p>通过以上实现，我们可以利用GPIO成功模拟I2C通信。这种方法不仅适用于STM32等微控制器，还能应用于其他许多嵌入式平台。在实际应用中，理解I2C时序和信号的处理都是至关重要的。</p><h2 id="附录">附录</h2><p>完整的代码实现可参考本博客提供的源文件和头文件。</p><h5 id="i2c-gpio-h">i2c_gpio.h</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @file i2c_gpio.h</span><br><span class="hljs-comment"> * @brief 实现gpio模拟I2C的功能实现</span><br><span class="hljs-comment"> * @author 连思鑫 (liansixin)</span><br><span class="hljs-comment"> * @date 9/5/2024</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __I2C_GPIO_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __I2C_GPIO_H</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stm32f4xx_hal.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">I2C_GPIO_Init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">I2C_Delay</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">I2C_Start</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">I2C_Stop</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br>HAL_StatusTypeDef <span class="hljs-title function_">I2C_Mem_Write</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> devAddr, <span class="hljs-type">uint16_t</span> memAddr, <span class="hljs-type">uint8_t</span> *pData, <span class="hljs-type">uint16_t</span> size)</span>;<br>HAL_StatusTypeDef <span class="hljs-title function_">I2C_Mem_Read</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> devAddr, <span class="hljs-type">uint16_t</span> memAddr, <span class="hljs-type">uint8_t</span> *pData, <span class="hljs-type">uint16_t</span> size)</span>;<br><br><span class="hljs-comment">// I2C API函数声明</span><br>HAL_StatusTypeDef <span class="hljs-title function_">G_I2C_Mem_Write</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> devAddr, <span class="hljs-type">uint8_t</span> memAddr, <span class="hljs-type">uint8_t</span> *pData, <span class="hljs-type">uint16_t</span> size)</span>;<br>HAL_StatusTypeDef <span class="hljs-title function_">G_I2C_Mem_Read</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> devAddr, <span class="hljs-type">uint8_t</span> memAddr, <span class="hljs-type">uint8_t</span> *pData, <span class="hljs-type">uint16_t</span> size)</span>;<br><br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* __I2C_GPIO_H */</span></span><br><br></code></pre></td></tr></table></figure><h5 id="i2c-gpio-c">i2c_gpio.c</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @file i2c_gpio.h</span><br><span class="hljs-comment"> * @brief 实现gpio模拟I2C的功能实现</span><br><span class="hljs-comment"> * @author 连思鑫 (liansixin)</span><br><span class="hljs-comment"> * @date 9/5/2024</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stm32f4xx_hal.h&quot;</span></span><br><br><span class="hljs-comment">// 定义引脚和端口</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> I2C3_SCL_Pin GPIO_PIN_8</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> I2C3_SDA_Pin GPIO_PIN_9</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> I2C3_SCL_GPIO_Port GPIOA</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> I2C3_SDA_GPIO_Port GPIOC</span><br><br><span class="hljs-comment">// 定义 I2C ACK 和 NACK</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> I2C_ACK GPIO_PIN_RESET</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> I2C_NACK GPIO_PIN_SET</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">I2C_GPIO_Init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    GPIO_InitTypeDef GPIO_InitStruct = &#123;<span class="hljs-number">0</span>&#125;;<br><br>    <span class="hljs-comment">// 初始化SCL引脚</span><br>    GPIO_InitStruct.Pin = I2C3_SCL_Pin;<br>    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;<br>    GPIO_InitStruct.Pull = GPIO_NOPULL;<br>    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;<br>    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &amp;GPIO_InitStruct);<br><br>    <span class="hljs-comment">// 初始化SDA引脚</span><br>    GPIO_InitStruct.Pin = I2C3_SDA_Pin;<br>    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &amp;GPIO_InitStruct);<br><br>    <span class="hljs-comment">// 将SCL和SDA拉高</span><br>    HAL_GPIO_WritePin(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin, GPIO_PIN_SET);<br>    HAL_GPIO_WritePin(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin, GPIO_PIN_SET);<br>&#125;<br><br><span class="hljs-comment">//输出模式</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">I2C_Set_SDA_Output</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    GPIO_InitTypeDef GPIO_InitStruct = &#123;<span class="hljs-number">0</span>&#125;;<br><br>    GPIO_InitStruct.Pin = I2C3_SDA_Pin;<br>    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;<br>    GPIO_InitStruct.Pull = GPIO_NOPULL;<br>    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;<br>    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &amp;GPIO_InitStruct);<br>&#125;<br><br><span class="hljs-comment">// 输入模式</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">I2C_Set_SDA_Input</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    GPIO_InitTypeDef GPIO_InitStruct = &#123;<span class="hljs-number">0</span>&#125;;<br><br>    GPIO_InitStruct.Pin = I2C3_SDA_Pin;<br>    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;<br>    GPIO_InitStruct.Pull = GPIO_NOPULL;<br>    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &amp;GPIO_InitStruct);<br>&#125;<br><br><span class="hljs-comment">// 设置SCL线电平</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">I2C_Set_SCL</span><span class="hljs-params">(GPIO_PinState state)</span><br>&#123;<br>    HAL_GPIO_WritePin(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin, state);<br>&#125;<br><br><span class="hljs-comment">// 设置SDA线电平</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">I2C_Set_SDA</span><span class="hljs-params">(GPIO_PinState state)</span><br>&#123;<br>    I2C_Set_SDA_Output();  <span class="hljs-comment">// 设置为输出模式</span><br>    HAL_GPIO_WritePin(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin, state);<br>&#125;<br><br><span class="hljs-comment">// 读取SDA线电平</span><br><span class="hljs-type">static</span> GPIO_PinState <span class="hljs-title function_">I2C_Read_SDA</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    I2C_Set_SDA_Input();  <span class="hljs-comment">// 设置为输入模式</span><br>    <span class="hljs-keyword">return</span> HAL_GPIO_ReadPin(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">I2C_Delay</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-comment">// 延时函数，可以根据时钟频率调整</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">126</span>; i++)<br>    &#123;<br>        __NOP();<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">I2C_Start</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>  I2C_Set_SDA(GPIO_PIN_SET);<br>    I2C_Set_SCL(GPIO_PIN_SET);<br>    I2C_Delay();<br>    I2C_Set_SDA(GPIO_PIN_RESET);<br>    I2C_Delay();<br>    I2C_Set_SCL(GPIO_PIN_RESET);<br>    I2C_Delay();<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">I2C_Stop</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>  I2C_Set_SDA(GPIO_PIN_RESET);<br>    I2C_Set_SCL(GPIO_PIN_SET);<br>    I2C_Delay();<br>    I2C_Set_SDA(GPIO_PIN_SET);<br>    I2C_Delay();<br>&#125;<br><br><span class="hljs-comment">// 发送一个字节，返回ACK状态</span><br><span class="hljs-type">static</span> HAL_StatusTypeDef <span class="hljs-title function_">I2C_Send_Byte</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> byte)</span><br>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int8_t</span> i = <span class="hljs-number">7</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>    &#123;<br>        GPIO_PinState bit = (byte &amp; (<span class="hljs-number">1</span> &lt;&lt; i)) ? GPIO_PIN_SET : GPIO_PIN_RESET;<br>        I2C_Set_SDA(bit);<br>        I2C_Delay();<br>        I2C_Set_SCL(GPIO_PIN_SET);<br>        I2C_Delay();<br>        I2C_Set_SCL(GPIO_PIN_RESET);<br>        I2C_Delay();<br>    &#125;<br><br>    <span class="hljs-comment">// 接收ACK</span><br>    I2C_Set_SDA_Input();  <span class="hljs-comment">// 切换SDA为输入模式</span><br>    I2C_Delay();<br>    I2C_Set_SCL(GPIO_PIN_SET);<br>    I2C_Delay();<br>    GPIO_PinState ack = I2C_Read_SDA();  <span class="hljs-comment">// 读取ACK信号</span><br>    I2C_Set_SCL(GPIO_PIN_RESET);<br>    I2C_Delay();<br><br>    <span class="hljs-keyword">return</span> (ack == GPIO_PIN_RESET) ? HAL_OK : HAL_ERROR;<br>&#125;<br><br><span class="hljs-comment">// 读取一个字节，并发送ACK或NACK</span><br><span class="hljs-type">static</span> <span class="hljs-type">uint8_t</span> <span class="hljs-title function_">I2C_Read_Byte</span><span class="hljs-params">(GPIO_PinState ack)</span><br>&#123;<br>    <span class="hljs-type">uint8_t</span> byte = <span class="hljs-number">0</span>;<br><br>    I2C_Set_SDA_Input();  <span class="hljs-comment">// 设置SDA为输入模式</span><br>    I2C_Delay();<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int8_t</span> i = <span class="hljs-number">7</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>    &#123;<br>        I2C_Set_SCL(GPIO_PIN_SET);<br>        I2C_Delay();<br>        <span class="hljs-keyword">if</span> (I2C_Read_SDA() == GPIO_PIN_SET)<br>        &#123;<br>            byte |= (<span class="hljs-number">1</span> &lt;&lt; i);<br>        &#125;<br>        I2C_Set_SCL(GPIO_PIN_RESET);<br>        I2C_Delay();<br>    &#125;<br><br>    <span class="hljs-comment">// 发送ACK或NACK</span><br>    I2C_Set_SDA(ack);  <span class="hljs-comment">// 设置SDA为输出模式，并发送ACK或NACK</span><br>    I2C_Delay();<br>    I2C_Set_SCL(GPIO_PIN_SET);<br>    I2C_Delay();<br>    I2C_Set_SCL(GPIO_PIN_RESET);<br>    I2C_Delay();<br><br>    <span class="hljs-keyword">return</span> byte;<br>&#125;<br><br><span class="hljs-comment">// 模拟I2C写入函数，类似HAL_I2C_Mem_Write</span><br>HAL_StatusTypeDef <span class="hljs-title function_">G_I2C_Mem_Write</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> devAddr, <span class="hljs-type">uint8_t</span> memAddr, <span class="hljs-type">uint8_t</span> *pData, <span class="hljs-type">uint16_t</span> size)</span><br>&#123;<br>    I2C_Start();<br><br>    <span class="hljs-keyword">if</span> (I2C_Send_Byte(devAddr &lt;&lt; <span class="hljs-number">1</span>) != HAL_OK)<br>    &#123;<br>        I2C_Stop();<br>        <span class="hljs-keyword">return</span> HAL_ERROR;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (I2C_Send_Byte(memAddr) != HAL_OK)<br>    &#123;<br>        I2C_Stop();<br>        <span class="hljs-keyword">return</span> HAL_ERROR;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">uint16_t</span> i = <span class="hljs-number">0</span>; i &lt; size; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (I2C_Send_Byte(pData[i]) != HAL_OK)<br>        &#123;<br>            I2C_Stop();<br>            <span class="hljs-keyword">return</span> HAL_ERROR;<br>        &#125;<br>    &#125;<br><br>    I2C_Stop();<br>    <span class="hljs-keyword">return</span> HAL_OK;<br>&#125;<br><br><span class="hljs-comment">// 模拟I2C读取函数，类似HAL_I2C_Mem_Read</span><br>HAL_StatusTypeDef <span class="hljs-title function_">G_I2C_Mem_Read</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> devAddr, <span class="hljs-type">uint8_t</span> memAddr, <span class="hljs-type">uint8_t</span> *pData, <span class="hljs-type">uint16_t</span> size)</span><br>&#123;<br>    I2C_Start();<br><br>    <span class="hljs-keyword">if</span> (I2C_Send_Byte(devAddr &lt;&lt; <span class="hljs-number">1</span>) != HAL_OK)<br>    &#123;<br>        I2C_Stop();<br>        <span class="hljs-keyword">return</span> HAL_ERROR;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (I2C_Send_Byte(memAddr) != HAL_OK)<br>    &#123;<br>        I2C_Stop();<br>        <span class="hljs-keyword">return</span> HAL_ERROR;<br>    &#125;<br><br>    I2C_Start();  <span class="hljs-comment">// 重新启动信号</span><br><br>    <span class="hljs-keyword">if</span> (I2C_Send_Byte((devAddr &lt;&lt; <span class="hljs-number">1</span>) | <span class="hljs-number">0x01</span>) != HAL_OK)<br>    &#123;<br>        I2C_Stop();<br>        <span class="hljs-keyword">return</span> HAL_ERROR;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">uint16_t</span> i = <span class="hljs-number">0</span>; i &lt; size; i++)<br>    &#123;<br>        pData[i] = I2C_Read_Byte((i == size - <span class="hljs-number">1</span>) ? I2C_NACK : I2C_ACK);<br>    &#125;<br><br>    I2C_Stop();<br>    <span class="hljs-keyword">return</span> HAL_OK;<br>&#125;<br><br><span class="hljs-comment">// 模拟I2C写入函数，支持16位寄存器地址</span><br>HAL_StatusTypeDef <span class="hljs-title function_">I2C_Mem_Write</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> devAddr, <span class="hljs-type">uint16_t</span> memAddr, <span class="hljs-type">uint8_t</span> *pData, <span class="hljs-type">uint16_t</span> size)</span><br>&#123;<br>    I2C_Start();<br><br>    <span class="hljs-keyword">if</span> (I2C_Send_Byte(devAddr &lt;&lt; <span class="hljs-number">1</span>) != HAL_OK)<br>    &#123;<br>        I2C_Stop();<br>        <span class="hljs-keyword">return</span> HAL_ERROR;<br>    &#125;<br><br>    <span class="hljs-comment">// 发送高位地址字节</span><br>    <span class="hljs-keyword">if</span> (I2C_Send_Byte((<span class="hljs-type">uint8_t</span>)(memAddr &gt;&gt; <span class="hljs-number">8</span>)) != HAL_OK)<br>    &#123;<br>        I2C_Stop();<br>        <span class="hljs-keyword">return</span> HAL_ERROR;<br>    &#125;<br><br>    <span class="hljs-comment">// 发送低位地址字节</span><br>    <span class="hljs-keyword">if</span> (I2C_Send_Byte((<span class="hljs-type">uint8_t</span>)(memAddr &amp; <span class="hljs-number">0xFF</span>)) != HAL_OK)<br>    &#123;<br>        I2C_Stop();<br>        <span class="hljs-keyword">return</span> HAL_ERROR;<br>    &#125;<br><br>    <span class="hljs-comment">// 发送数据</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">uint16_t</span> i = <span class="hljs-number">0</span>; i &lt; size; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (I2C_Send_Byte(pData[i]) != HAL_OK)<br>        &#123;<br>            I2C_Stop();<br>            <span class="hljs-keyword">return</span> HAL_ERROR;<br>        &#125;<br>    &#125;<br><br>    I2C_Stop();<br>    <span class="hljs-keyword">return</span> HAL_OK;<br>&#125;<br><br><br><span class="hljs-comment">// 模拟I2C读取函数，支持16位寄存器地址</span><br>HAL_StatusTypeDef <span class="hljs-title function_">I2C_Mem_Read</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> devAddr, <span class="hljs-type">uint16_t</span> memAddr, <span class="hljs-type">uint8_t</span> *pData, <span class="hljs-type">uint16_t</span> size)</span><br>&#123;<br>    I2C_Start();<br><br>    <span class="hljs-keyword">if</span> (I2C_Send_Byte(devAddr &lt;&lt; <span class="hljs-number">1</span>) != HAL_OK)<br>    &#123;<br>        I2C_Stop();<br>        <span class="hljs-keyword">return</span> HAL_ERROR;<br>    &#125;<br><br>    <span class="hljs-comment">// 发送高位地址字节</span><br>    <span class="hljs-keyword">if</span> (I2C_Send_Byte((<span class="hljs-type">uint8_t</span>)(memAddr &gt;&gt; <span class="hljs-number">8</span>)) != HAL_OK)<br>    &#123;<br>        I2C_Stop();<br>        <span class="hljs-keyword">return</span> HAL_ERROR;<br>    &#125;<br><br>    <span class="hljs-comment">// 发送低位地址字节</span><br>    <span class="hljs-keyword">if</span> (I2C_Send_Byte((<span class="hljs-type">uint8_t</span>)(memAddr &amp; <span class="hljs-number">0xFF</span>)) != HAL_OK)<br>    &#123;<br>        I2C_Stop();<br>        <span class="hljs-keyword">return</span> HAL_ERROR;<br>    &#125;<br><br>    I2C_Start();  <span class="hljs-comment">// 重新启动信号</span><br><br>    <span class="hljs-keyword">if</span> (I2C_Send_Byte((devAddr &lt;&lt; <span class="hljs-number">1</span>) | <span class="hljs-number">0x01</span>) != HAL_OK)<br>    &#123;<br>        I2C_Stop();<br>        <span class="hljs-keyword">return</span> HAL_ERROR;<br>    &#125;<br><br>    <span class="hljs-comment">// 接收数据</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">uint16_t</span> i = <span class="hljs-number">0</span>; i &lt; size; i++)<br>    &#123;<br>        pData[i] = I2C_Read_Byte((i == size - <span class="hljs-number">1</span>) ? I2C_NACK : I2C_ACK);<br>    &#125;<br><br>    I2C_Stop();<br>    <span class="hljs-keyword">return</span> HAL_OK;<br>&#125;<br></code></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> stm32学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gpio </tag>
            
            <tag> i2c </tag>
            
            <tag> gpio模拟i2c </tag>
            
            <tag> stm32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Bash 脚本绑定 IRQ 到指定 CPU</title>
      <link href="/2024/10/23/%E4%BD%BF%E7%94%A8-Bash-%E8%84%9A%E6%9C%AC%E7%BB%91%E5%AE%9A-IRQ-%E5%88%B0%E6%8C%87%E5%AE%9A-CPU/"/>
      <url>/2024/10/23/%E4%BD%BF%E7%94%A8-Bash-%E8%84%9A%E6%9C%AC%E7%BB%91%E5%AE%9A-IRQ-%E5%88%B0%E6%8C%87%E5%AE%9A-CPU/</url>
      
        <content type="html"><![CDATA[<h3 id="使用-Bash-脚本绑定-IRQ-到指定-CPU">使用 Bash 脚本绑定 IRQ 到指定 CPU</h3><p>在现代操作系统中，合理地管理中断请求（IRQ）可以显著提升系统性能。本文将介绍如何使用 Bash 脚本将特定的 IRQ 绑定到指定的 CPU，确保系统资源的高效利用。</p><h4 id="脚本概述">脚本概述</h4><p>这个 Bash 脚本的功能是检查输入的 IRQ 号和 CPU 号，验证 IRQ 是否存在，并设置其 <code>smp_affinity</code>，以便将该中断分配给特定的 CPU。</p><h4 id="脚本实现">脚本实现</h4><ol><li><p><strong>参数检查</strong>：首先，脚本检查输入参数的数量是否正确，确保用户输入了 IRQ 和 CPU 的有效值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$#</span>&quot;</span> -ne 2 ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Usage: <span class="hljs-variable">$0</span> &lt;IRQ_NUMBER&gt; &lt;CPU_NUMBER&gt;&quot;</span><br>    <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure></li><li><p><strong>验证 IRQ 号</strong>：接下来，脚本检查 <code>/proc/irq/&lt;IRQ_NUMBER&gt;</code> 目录是否存在，以确认指定的 IRQ 是否有效。如果无效，脚本会列出所有可用的 IRQ 号。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> [ ! -d <span class="hljs-string">&quot;/proc/irq/<span class="hljs-variable">$IRQ_NUMBER</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;IRQ <span class="hljs-variable">$IRQ_NUMBER</span> does not exist. Available IRQs are:&quot;</span><br>    <span class="hljs-built_in">cat</span> /proc/interrupts | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span> | sed <span class="hljs-string">&#x27;s/://g&#x27;</span> | grep -E <span class="hljs-string">&#x27;^[0-9]+$&#x27;</span><br>    <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure></li><li><p><strong>设置 CPU 掩码</strong>：通过计算 CPU 掩码，脚本可以将 IRQ 绑定到指定的 CPU。此处使用位运算将中断分配给指定的 CPU。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">AFFINITY_MASK=$(<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;%x&quot;</span> $((<span class="hljs-number">1</span> &lt;&lt; CPU_NUMBER)))<br></code></pre></td></tr></table></figure></li><li><p><strong>应用和验证设置</strong>：将计算出的掩码写入 <code>/proc/irq/$IRQ_NUMBER/smp_affinity</code> 文件，脚本随后验证设置是否成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$AFFINITY_MASK</span> &gt; <span class="hljs-string">&quot;/proc/irq/<span class="hljs-variable">$IRQ_NUMBER</span>/smp_affinity&quot;</span><br>CURRENT_AFFINITY=$(<span class="hljs-built_in">cat</span> /proc/irq/<span class="hljs-variable">$IRQ_NUMBER</span>/smp_affinity)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Current affinity for IRQ <span class="hljs-variable">$IRQ_NUMBER</span>: <span class="hljs-variable">$CURRENT_AFFINITY</span>&quot;</span><br></code></pre></td></tr></table></figure></li></ol><h4 id="使用示例">使用示例</h4><p>要使用这个脚本，只需执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./script.sh &lt;IRQ_NUMBER&gt; &lt;CPU_NUMBER&gt;<br></code></pre></td></tr></table></figure><p>例如，如果你想将 IRQ 24 绑定到 CPU 2，可以运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./script.sh 24 2<br></code></pre></td></tr></table></figure><h4 id="完整代码">完整代码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment"># 检查输入参数</span><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$#</span>&quot;</span> -ne 2 ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Usage: <span class="hljs-variable">$0</span> &lt;IRQ_NUMBER&gt; &lt;CPU_NUMBER&gt;&quot;</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Author: liansixin</span><br><span class="hljs-string">    exit 1</span><br><span class="hljs-string">fi</span><br><span class="hljs-string"></span><br><span class="hljs-string">IRQ_NUMBER=<span class="hljs-variable">$1</span>  # 获取中断号</span><br><span class="hljs-string">CPU_NUMBER=<span class="hljs-variable">$2</span>  # 获取目标CPU号</span><br><span class="hljs-string"></span><br><span class="hljs-string"># 检查中断号目录是否存在</span><br><span class="hljs-string">if [ ! -d &quot;</span>/proc/irq/<span class="hljs-variable">$IRQ_NUMBER</span><span class="hljs-string">&quot; ]; then</span><br><span class="hljs-string">    echo &quot;</span>IRQ <span class="hljs-variable">$IRQ_NUMBER</span> does not exist. Available IRQs are:<span class="hljs-string">&quot;</span><br><span class="hljs-string">    cat /proc/interrupts | awk &#x27;&#123;print <span class="hljs-variable">$1</span>&#125;&#x27; | sed &#x27;s/://g&#x27; | grep -E &#x27;^[0-9]+$&#x27;</span><br><span class="hljs-string">    exit 1</span><br><span class="hljs-string">fi</span><br><span class="hljs-string"></span><br><span class="hljs-string"># 计算CPU掩码，1 &lt;&lt; CPU_NUMBER 表示将中断绑定到指定的 CPU</span><br><span class="hljs-string">AFFINITY_MASK=<span class="hljs-subst">$(printf <span class="hljs-string">&quot;%x&quot;</span> $((1 &lt;&lt; CPU_NUMBER)</span>))</span><br><span class="hljs-string"></span><br><span class="hljs-string"># 设置中断的 smp_affinity</span><br><span class="hljs-string">echo &quot;</span>Setting IRQ <span class="hljs-variable">$IRQ_NUMBER</span> to CPU <span class="hljs-variable">$CPU_NUMBER</span> (affinity mask: 0x<span class="hljs-variable">$AFFINITY_MASK</span>)<span class="hljs-string">&quot;</span><br><span class="hljs-string">echo <span class="hljs-variable">$AFFINITY_MASK</span> &gt; &quot;</span>/proc/irq/<span class="hljs-variable">$IRQ_NUMBER</span>/smp_affinity<span class="hljs-string">&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string"># 验证设置是否生效</span><br><span class="hljs-string">CURRENT_AFFINITY=<span class="hljs-subst">$(cat /proc/irq/$IRQ_NUMBER/smp_affinity)</span></span><br><span class="hljs-string">echo &quot;</span>Current affinity <span class="hljs-keyword">for</span> IRQ <span class="hljs-variable">$IRQ_NUMBER</span>: <span class="hljs-variable">$CURRENT_AFFINITY</span><span class="hljs-string">&quot;</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><h4 id="总结">总结</h4><p>通过这个简单的 Bash 脚本，你可以轻松地将 IRQ 绑定到指定的 CPU，从而提高系统性能。有效的 IRQ 管理对于多核系统尤为重要，可以帮助减少中断处理的延迟和提高响应速度。希望这篇博客能帮助你更好地理解和管理中断请求！</p>]]></content>
      
      
      <categories>
          
          <category> Bash脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 中断 </tag>
            
            <tag> irq </tag>
            
            <tag> irq绑定cpu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用STM32F407 GPIO模拟SMI时序对PHY设备进行读写配置</title>
      <link href="/2024/06/30/%E4%BD%BF%E7%94%A8STM32F407-GPIO%E6%A8%A1%E6%8B%9FSMI%E6%97%B6%E5%BA%8F%E5%AF%B9PHY%E8%AE%BE%E5%A4%87%E8%BF%9B%E8%A1%8C%E8%AF%BB%E5%86%99%E9%85%8D%E7%BD%AE/"/>
      <url>/2024/06/30/%E4%BD%BF%E7%94%A8STM32F407-GPIO%E6%A8%A1%E6%8B%9FSMI%E6%97%B6%E5%BA%8F%E5%AF%B9PHY%E8%AE%BE%E5%A4%87%E8%BF%9B%E8%A1%8C%E8%AF%BB%E5%86%99%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="使用STM32F407-GPIO模拟SMI时序对PHY设备进行读写配置">使用STM32F407 GPIO模拟SMI时序对PHY设备进行读写配置</h2><p>在嵌入式系统中，常常需要通过SMI（Serial Management Interface）来配置PHY（Physical Layer Device）设备。SMI协议包括MDIO（Management Data Input/Output）和MDC（Management Data Clock）信号，通过这两个信号与PHY设备进行通信。本文将详细介绍如何使用STM32F407通过GPIO模拟SMI时序对七个PHY设备进行读写配置。</p><h3 id="1-SMI时序介绍">1. SMI时序介绍</h3><p>SMI协议用于通过MDIO和MDC信号来配置PHY设备的寄存器。SMI包括两种操作：读操作和写操作。下面我们分别介绍其时序要求。</p><h4 id="写操作时序">写操作时序</h4><ol><li><strong>起始帧</strong>：32个连续的1位。</li><li><strong>起始码</strong>：01。</li><li><strong>操作码</strong>：10表示读，01表示写。</li><li><strong>PHY地址</strong>：5位。</li><li><strong>寄存器地址</strong>：5位。</li><li><strong>周转位</strong>：写操作为10。</li><li><strong>数据</strong>：16位。</li></ol><h4 id="读操作时序">读操作时序</h4><ol><li><strong>起始帧</strong>：32个连续的1位。</li><li><strong>起始码</strong>：01。</li><li><strong>操作码</strong>：10表示读。</li><li><strong>PHY地址</strong>：5位。</li><li><strong>寄存器地址</strong>：5位。</li><li><strong>周转位</strong>：Z0（高阻态，随后读取0）。</li><li><strong>数据</strong>：16位。</li></ol><h3 id="2-硬件介绍">2. 硬件介绍</h3><p>我们的硬件平台是STM32F407，七个PHY设备的MDIO连接在同一个GPIO引脚上，MDC分别连接在七个不同的GPIO引脚上。</p><h4 id="STM32引脚配置">STM32引脚配置</h4><p>使用STM32CubeMX进行引脚配置：</p><ul><li><strong>MDIO</strong>：使用GPIOF的第5引脚（PF5）。</li><li><strong>MDC</strong>：使用GPIOF的第6到12引脚（PF6到PF12）。</li></ul><h3 id="3-GPIO模拟SMI实现">3. GPIO模拟SMI实现</h3><h4 id="DWT（Data-Watchpoint-and-Trace）延时实现">DWT（Data Watchpoint and Trace）延时实现</h4><p>为了满足SMI时序要求，我们使用DWT进行精确的延时操作。以下是DWT初始化和纳秒延时函数的实现。</p><p><strong>dwt_delay.h</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> DWT_DELAY_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DWT_DELAY_H</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stm32f4xx_hal.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">DWT_Init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">DWT_Delay</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> ns)</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// DWT_DELAY_H</span></span><br></code></pre></td></tr></table></figure><p><strong>dwt_delay.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;dwt_delay.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">DWT_Init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    CoreDebug-&gt;DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;<br>    DWT-&gt;CYCCNT = <span class="hljs-number">0</span>;<br>    DWT-&gt;CTRL |= DWT_CTRL_CYCCNTENA_Msk;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">DWT_Delay</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> ns)</span> &#123;<br>    <span class="hljs-type">uint32_t</span> ns_count_tick =  ns * (HAL_RCC_GetHCLKFreq() / <span class="hljs-number">1000000000</span>);<br>    <span class="hljs-type">uint32_t</span> start_tick = DWT-&gt;CYCCNT;<br>    <span class="hljs-keyword">while</span> ((DWT-&gt;CYCCNT - start_tick) &lt; ns_count_tick);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="PHY读写操作函数实现">PHY读写操作函数实现</h4><p><strong>phy_smi.h</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> PHY_SMI_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PHY_SMI_H</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stm32f4xx_hal.h&quot;</span></span><br><br><span class="hljs-comment">// 定义7个PHY设备的MDIO和MDC GPIO端口和引脚</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MDIO_PORT       GPIOF</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MDIO_PIN        GPIO_PIN_5</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MDC_PORT_1      GPIOF</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MDC_PIN_1       GPIO_PIN_6</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MDC_PORT_2      GPIOF</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MDC_PIN_2       GPIO_PIN_7</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MDC_PORT_3      GPIOF</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MDC_PIN_3       GPIO_PIN_8</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MDC_PORT_4      GPIOF</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MDC_PIN_4       GPIO_PIN_9</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MDC_PORT_5      GPIOF</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MDC_PIN_5       GPIO_PIN_10</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MDC_PORT_6      GPIOF</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MDC_PIN_6       GPIO_PIN_11</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MDC_PORT_7      GPIOF</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MDC_PIN_7       GPIO_PIN_12</span><br><br><span class="hljs-comment">// 定义时序常量</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MDC_DELAY_NS    400  <span class="hljs-comment">// 根据需要调整延迟时间（纳秒）</span></span><br><br><span class="hljs-comment">// 函数声明</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">PHY_Write</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> phyAddr, <span class="hljs-type">uint8_t</span> regAddr, <span class="hljs-type">uint16_t</span> data)</span>;<br><span class="hljs-type">uint16_t</span> <span class="hljs-title function_">PHY_Read</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> phyAddr, <span class="hljs-type">uint8_t</span> regAddr)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">PHY_WriteAll</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> regAddr, <span class="hljs-type">uint16_t</span> data)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">PHY_ReadAll</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> regAddr, <span class="hljs-type">uint16_t</span>* data)</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// PHY_SMI_H</span></span><br></code></pre></td></tr></table></figure><p><strong>phy_smi.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;phy_smi.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;dwt_delay.h&quot;</span></span><br><br><span class="hljs-comment">// 内部使用的静态函数</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">MDIO_Set</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> value)</span> &#123;<br>    HAL_GPIO_WritePin(MDIO_PORT, MDIO_PIN, value ? GPIO_PIN_SET : GPIO_PIN_RESET);<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">uint8_t</span> <span class="hljs-title function_">MDIO_Get</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> HAL_GPIO_ReadPin(MDIO_PORT, MDIO_PIN);<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">MDC_Toggle</span><span class="hljs-params">(GPIO_TypeDef *port, <span class="hljs-type">uint16_t</span> pin)</span> &#123;<br>    HAL_GPIO_WritePin(port, pin, GPIO_PIN_SET);<br>    DWT_Delay(MDC_DELAY_NS);<br>    HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET);<br>    DWT_Delay(MDC_DELAY_NS);<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">MDIO_WriteBit</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> bit, GPIO_TypeDef *mdc_port, <span class="hljs-type">uint16_t</span> mdc_pin)</span> &#123;<br>    MDIO_Set(bit);<br>    MDC_Toggle(mdc_port, mdc_pin);<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">uint8_t</span> <span class="hljs-title function_">MDIO_ReadBit</span><span class="hljs-params">(GPIO_TypeDef *mdc_port, <span class="hljs-type">uint16_t</span> mdc_pin)</span> &#123;<br>    MDC_Toggle(mdc_port, mdc_pin);<br>    <span class="hljs-keyword">return</span> MDIO_Get();<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">PHY_Write</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> phyAddr, <span class="hljs-type">uint8_t</span> regAddr, <span class="hljs-type">uint16_t</span> data)</span> &#123;<br>    GPIO_TypeDef *mdc_ports[] = &#123;MDC_PORT_1, MDC_PORT_2, MDC_PORT_3, MDC_PORT_4, MDC_PORT_5, MDC_PORT_6, MDC_PORT_7&#125;;<br>    <span class="hljs-type">uint16_t</span> mdc_pins[] = &#123;MDC_PIN_1, MDC_PIN_2, MDC_PIN_3, MDC_PIN_4, MDC_PIN_5, MDC_PIN_6, MDC_PIN_7&#125;;<br><br>    GPIO_TypeDef *mdc_port = mdc_ports[phyAddr];<br>    <span class="hljs-type">uint16_t</span> mdc_pin = mdc_pins[phyAddr];<br><br>    <span class="hljs-comment">// 生成帧起始位（32个1）</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) &#123;<br>        MDIO_WriteBit(<span class="hljs-number">1</span>, mdc_port, mdc_pin);<br>    &#125;<br><br>    <span class="hljs-comment">// 写入起始码（01）、写操作码（01）、PHY地址、寄存器地址和周转位（10）</span><br>    MDIO_WriteBit(<span class="hljs-number">0</span>, mdc_port, mdc_pin);<br>    MDIO_WriteBit(<span class="hljs-number">1</span>, mdc_port, mdc_pin);<br>    MDIO_WriteBit(<span class="hljs-number">0</span>, mdc_port, mdc_pin);<br>    MDIO_WriteBit(<span class="hljs-number">1</span>, mdc_port, mdc_pin);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">4</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        MDIO_WriteBit((phyAddr &gt;&gt; i) &amp; <span class="hljs-number">0x01</span>, mdc_port, mdc_pin);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">4</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        MDIO_WriteBit((regAddr &gt;&gt; i) &amp; <span class="hljs-number">0x01</span>, mdc_port, mdc_pin);<br>    &#125;<br>    MDIO_WriteBit(<span class="hljs-number">1</span>, mdc_port, mdc_pin);<br>    MDIO_WriteBit(<span class="hljs-number">0</span>, mdc_port, mdc_pin);<br><br>    <span class="hljs-comment">// 写入数据</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">15</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        MDIO_WriteBit((data &gt;&gt; i) &amp; <span class="hljs-number">0x01</span>, mdc_port, mdc_pin);<br>    &#125;<br><br>    <span class="hljs-comment">// 释放MDIO</span><br>    MDIO_Set(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-type">uint16_t</span> <span class="hljs-title function_">PHY_Read</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> phyAddr, <span class="hljs-type">uint8_t</span> regAddr)</span> &#123;<br>    GPIO_TypeDef *mdc_ports[] = &#123;MDC_PORT_1, MDC_PORT_2, MDC_PORT_3, MDC_PORT_4, MDC_PORT_5, MDC_PORT_6, MDC_PORT_7&#125;;<br>    <span class="hljs-type">uint16_t</span> mdc_pins[] = &#123;MDC_PIN_1, MDC_PIN_2, MDC_PIN_3, MDC_PIN_4, MDC_PIN_5, MDC_PIN_6, MDC_PIN_7&#125;;<br><br>    GPIO_TypeDef *mdc_port = mdc_ports[phyAddr];<br>    <span class="hljs-type">uint16_t</span> mdc_pin = mdc_pins[phyAddr];<br><br>    <span class="hljs-type">uint16_t</span> data = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 生成帧起始位（32个1）</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) &#123;<br>        MDIO_WriteBit(<span class="hljs-number">1</span>, mdc_port, mdc_pin);<br>    &#125;<br><br>    <span class="hljs-comment">// 写入起始码（01）、读操作码（10）、PHY地址、寄存器地址和周转位（Z0）</span><br>    MDIO_WriteBit(<span class="hljs-number">0</span>, mdc_port, mdc_pin);<br>    MDIO_WriteBit(<span class="hljs-number">1</span>, mdc_port, mdc_pin);<br>    MDIO_WriteBit(<span class="hljs-number">1</span>, mdc_port, mdc_pin);<br>    MDIO_WriteBit(<span class="hljs-number">0</span>, mdc<br><br>_port, mdc_pin);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">4</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        MDIO_WriteBit((phyAddr &gt;&gt; i) &amp; <span class="hljs-number">0x01</span>, mdc_port, mdc_pin);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">4</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        MDIO_WriteBit((regAddr &gt;&gt; i) &amp; <span class="hljs-number">0x01</span>, mdc_port, mdc_pin);<br>    &#125;<br><br>    <span class="hljs-comment">// 切换MDIO为输入模式进行周转</span><br>    GPIO_InitTypeDef GPIO_InitStruct = &#123;<span class="hljs-number">0</span>&#125;;<br>    GPIO_InitStruct.Pin = MDIO_PIN;<br>    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;<br>    GPIO_InitStruct.Pull = GPIO_NOPULL;<br>    HAL_GPIO_Init(MDIO_PORT, &amp;GPIO_InitStruct);<br><br>    <span class="hljs-comment">// 周转</span><br>    MDIO_ReadBit(mdc_port, mdc_pin);  <span class="hljs-comment">// 周转时的虚拟读取</span><br>    DWT_Delay(MDC_DELAY_NS);<br><br>    <span class="hljs-comment">// 读取数据</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">15</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        data |= (MDIO_ReadBit(mdc_port, mdc_pin) &lt;&lt; i);<br>    &#125;<br><br>    <span class="hljs-comment">// 切换MDIO回输出模式</span><br>    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;<br>    HAL_GPIO_Init(MDIO_PORT, &amp;GPIO_InitStruct);<br><br>    <span class="hljs-comment">// 释放MDIO</span><br>    MDIO_Set(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">return</span> data;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">PHY_WriteAll</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> regAddr, <span class="hljs-type">uint16_t</span> data)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">uint8_t</span> phyAddr = <span class="hljs-number">0</span>; phyAddr &lt; <span class="hljs-number">7</span>; phyAddr++) &#123;<br>        PHY_Write(phyAddr, regAddr, data);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">PHY_ReadAll</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> regAddr, <span class="hljs-type">uint16_t</span>* data)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">uint8_t</span> phyAddr = <span class="hljs-number">0</span>; phyAddr &lt; <span class="hljs-number">7</span>; phyAddr++) &#123;<br>        data[phyAddr] = PHY_Read(phyAddr, regAddr);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-使用示例">4. 使用示例</h3><p>以下是一个在主程序中使用<code>PHY_WriteAll</code>和<code>PHY_ReadAll</code>来同时对所有PHY设备进行读写操作的示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;main.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;dwt_delay.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;phy_smi.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    <span class="hljs-comment">// HAL库初始化</span><br>    HAL_Init();<br><br>    <span class="hljs-comment">// 系统时钟配置</span><br>    SystemClock_Config();<br><br>    <span class="hljs-comment">// 启用DWT</span><br>    DWT_Init();<br><br>    <span class="hljs-comment">// 其他初始化代码</span><br><br>    <span class="hljs-comment">// 配置所有PHY设备的某个寄存器</span><br>    <span class="hljs-type">uint16_t</span> regAddr = <span class="hljs-number">0x1</span>;  <span class="hljs-comment">// 示例寄存器地址</span><br>    <span class="hljs-type">uint16_t</span> writeData = <span class="hljs-number">0x1234</span>;  <span class="hljs-comment">// 示例写入数据</span><br>    PHY_WriteAll(regAddr, writeData);<br><br>    <span class="hljs-comment">// 读取所有PHY设备的某个寄存器</span><br>    <span class="hljs-type">uint16_t</span> readData[<span class="hljs-number">7</span>];<br>    PHY_ReadAll(regAddr, readData);<br><br>    <span class="hljs-comment">// 输出读取的数据</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">7</span>; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;PHY %d: 0x%04X\n&quot;</span>, i, readData[i]);<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">// 主循环</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="结论">结论</h3><p>通过GPIO模拟SMI时序来读写PHY设备是一个复杂但有趣的过程。本文详细介绍了如何配置STM32F407与七个PHY设备之间的通信，并通过具体的代码实现了读写操作。希望通过本文，您能对PHY设备的配置有一个深入的了解，并能够在实际项目中灵活应用。</p><p>如有任何疑问或建议，欢迎在评论区留言讨论。</p>]]></content>
      
      
      <categories>
          
          <category> STM32 </category>
          
          <category> SMI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
            <tag> GPIO </tag>
            
            <tag> SMI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Rust 封装 UDP 和 TCP 套接字</title>
      <link href="/2024/03/09/%E4%BD%BF%E7%94%A8-Rust-%E5%B0%81%E8%A3%85-UDP-%E5%92%8C-TCP-%E5%A5%97%E6%8E%A5%E5%AD%97/"/>
      <url>/2024/03/09/%E4%BD%BF%E7%94%A8-Rust-%E5%B0%81%E8%A3%85-UDP-%E5%92%8C-TCP-%E5%A5%97%E6%8E%A5%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h2 id="使用-Rust-封装-UDP-和-TCP-套接字">使用 Rust 封装 UDP 和 TCP 套接字</h2><h3 id="摘要："><strong>摘要：</strong></h3><p>在网络编程中，UDP 和 TCP 套接字是常用的通信方式。本文介绍了如何使用 Rust 语言封装 UDP 和 TCP 套接字，并提供了示例代码演示了如何发送和接收数据。</p><h3 id="引言："><strong>引言：</strong></h3><p>Rust 是一种安全、并发、实用的系统编程语言，它提供了强大的网络编程能力。在网络编程中，UDP（User Datagram Protocol）和TCP（Transmission Control Protocol）是两种常用的网络通信协议，它们分别提供了不同的特性和适用场景。在本文中，我们将介绍如何使用 Rust 封装 UDP 和 TCP 套接字，并演示了如何在封装的套接字上发送和接收数据。</p><h3 id="封装-UDP-套接字："><strong>封装 UDP 套接字：</strong></h3><p>首先，我们定义了一个名为 <code>MyUdpSocket</code> 的结构体，用于封装 UDP 套接字。该结构体包含一个 <code>socket</code> 字段，用于存储实际的 UDP 套接字。我们为 <code>MyUdpSocket</code> 结构体实现了以下方法：</p><ul><li><code>new(addr: &amp;str) -&gt; Result&lt;Self&gt;</code>：用于创建一个新的 UDP 套接字，并绑定到指定的地址。</li><li><code>send_to(buf: &amp;[u8], addr: &amp;str) -&gt; Result&lt;usize&gt;</code>：用于向指定地址发送数据。</li><li><code>recv_from(buf: &amp;mut [u8]) -&gt; Result&lt;(usize, SocketAddr)&gt;</code>：用于接收数据。</li></ul><h3 id="封装-TCP-套接字："><strong>封装 TCP 套接字：</strong></h3><p>接下来，我们定义了一个名为 <code>MyTcpListener</code> 的结构体，用于封装 TCP 监听器。该结构体包含一个 <code>listener</code> 字段，用于存储实际的 TCP 监听器。我们为 <code>MyTcpListener</code> 结构体实现了以下方法：</p><ul><li><code>new(addr: &amp;str) -&gt; Result&lt;Self&gt;</code>：用于创建一个新的 TCP 监听器，并绑定到指定的地址。</li><li><code>accept() -&gt; Result&lt;(TcpStream, SocketAddr)&gt;</code>：用于接受新的 TCP 连接。</li></ul><h3 id="示例用法："><strong>示例用法：</strong></h3><p>在示例用法部分，我们展示了如何使用封装的 UDP 套接字和 TCP 监听器发送和接收数据。首先，我们创建了封装了 UDP 套接字和 TCP 监听器的对象，然后通过调用相应的方法来发送和接收数据。</p><h3 id="总结："><strong>总结：</strong></h3><p>通过封装 UDP 套接字和 TCP 套接字，我们可以更加方便地使用这些套接字，并提供了一种更加模块化和可复用的编程方式。Rust 的安全性和并发性使得它成为一个理想的选择来进行网络编程，并且通过封装套接字，我们可以更好地利用 Rust 的特性来构建可靠的网络应用程序。</p><h3 id="参考文献："><strong>参考文献：</strong></h3><ol><li>Rust 官方文档：<a href="https://doc.rust-lang.org/">https://doc.rust-lang.org/</a></li><li>Rust 标准库文档：<a href="https://doc.rust-lang.org/std/index.html">https://doc.rust-lang.org/std/index.html</a></li><li>The Rust Programming Language（Rust 编程语言书籍）：<a href="https://www.rust-lang.org/zh-CN/what/triangle">https://www.rust-lang.org/zh-CN/what/triangle</a></li><li>Rust网络编程（The Book）：<a href="https://book.async.rs/">https://book.async.rs/</a></li></ol><h3 id="完整示例代码："><strong>完整示例代码：</strong></h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::net::&#123;UdpSocket, TcpListener, TcpStream, SocketAddr&#125;;<br><span class="hljs-keyword">use</span> std::io::&#123;<span class="hljs-type">Result</span>, Error, ErrorKind&#125;;<br><br><span class="hljs-comment">// 封装UDP套接字</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">MyUdpSocket</span> &#123;<br>    socket: UdpSocket,<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">MyUdpSocket</span> &#123;<br>    <span class="hljs-comment">// 创建一个新的UDP套接字</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(addr: &amp;<span class="hljs-type">str</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;<span class="hljs-keyword">Self</span>&gt; &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">socket</span> = UdpSocket::<span class="hljs-title function_ invoke__">bind</span>(addr)?;<br>        <span class="hljs-title function_ invoke__">Ok</span>(<span class="hljs-keyword">Self</span> &#123; socket &#125;)<br>    &#125;<br><br>    <span class="hljs-comment">// 发送数据</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">send_to</span>(&amp;<span class="hljs-keyword">self</span>, buf: &amp;[<span class="hljs-type">u8</span>], addr: &amp;<span class="hljs-type">str</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;<span class="hljs-type">usize</span>&gt; &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">dest_addr</span>: SocketAddr = addr.<span class="hljs-title function_ invoke__">parse</span>().<span class="hljs-title function_ invoke__">map_err</span>(|_| Error::<span class="hljs-title function_ invoke__">new</span>(ErrorKind::Other, <span class="hljs-string">&quot;Invalid socket address&quot;</span>))?;<br>        <span class="hljs-keyword">self</span>.socket.<span class="hljs-title function_ invoke__">send_to</span>(buf, &amp;dest_addr)<br>    &#125;<br><br>    <span class="hljs-comment">// 接收数据</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">recv_from</span>(&amp;<span class="hljs-keyword">self</span>, buf: &amp;<span class="hljs-keyword">mut</span> [<span class="hljs-type">u8</span>]) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;(<span class="hljs-type">usize</span>, SocketAddr)&gt; &#123;<br>        <span class="hljs-keyword">self</span>.socket.<span class="hljs-title function_ invoke__">recv_from</span>(buf)<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 封装TCP套接字</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">MyTcpListener</span> &#123;<br>    listener: TcpListener,<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">MyTcpListener</span> &#123;<br>    <span class="hljs-comment">// 创建一个新的TCP监听器</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(addr: &amp;<span class="hljs-type">str</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;<span class="hljs-keyword">Self</span>&gt; &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">listener</span> = TcpListener::<span class="hljs-title function_ invoke__">bind</span>(addr)?;<br>        <span class="hljs-title function_ invoke__">Ok</span>(<span class="hljs-keyword">Self</span> &#123; listener &#125;)<br>    &#125;<br><br>    <span class="hljs-comment">// 接收连接</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">accept</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;(TcpStream, SocketAddr)&gt; &#123;<br>        <span class="hljs-keyword">self</span>.listener.<span class="hljs-title function_ invoke__">accept</span>()<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 示例用法</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;()&gt; &#123;<br>    <span class="hljs-comment">// 创建一个封装了UDP套接字的对象</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">udp_socket</span> = MyUdpSocket::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-string">&quot;127.0.0.1:8080&quot;</span>)?;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;UDP socket bound to &#123;&#125;&quot;</span>, <span class="hljs-string">&quot;127.0.0.1:8080&quot;</span>);<br><br>    <span class="hljs-comment">// 创建一个封装了TCP监听器的对象</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">tcp_listener</span> = MyTcpListener::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-string">&quot;127.0.0.1:8081&quot;</span>)?;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;TCP listener bound to &#123;&#125;&quot;</span>, <span class="hljs-string">&quot;127.0.0.1:8081&quot;</span>);<br><br>    <span class="hljs-comment">// 发送UDP数据</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">udp_buf</span> = <span class="hljs-string">b&quot;Hello, UDP!&quot;</span>;<br>    udp_socket.<span class="hljs-title function_ invoke__">send_to</span>(udp_buf, <span class="hljs-string">&quot;127.0.0.1:8888&quot;</span>)?;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;UDP message sent&quot;</span>);<br><br>    <span class="hljs-comment">// 接收UDP数据</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">udp_recv_buf</span> = [<span class="hljs-number">0u8</span>; <span class="hljs-number">1024</span>];<br>    <span class="hljs-keyword">let</span> (udp_recv_len, udp_src_addr) = udp_socket.<span class="hljs-title function_ invoke__">recv_from</span>(&amp;<span class="hljs-keyword">mut</span> udp_recv_buf)?;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Received &#123;&#125; bytes from &#123;&#125;: &#123;:?&#125;&quot;</span>, udp_recv_len, udp_src_addr, &amp;udp_recv_buf[..udp_recv_len]);<br><br>    <span class="hljs-title function_ invoke__">Ok</span>(())<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="深入理解-UDP-和-TCP-套接字">深入理解 UDP 和 TCP 套接字</h2><h3 id="UDP-套接字的特性与应用场景"><strong>UDP 套接字的特性与应用场景</strong></h3><p>UDP 是一种无连接的协议，它不需要建立连接即可发送数据。它的特点是：</p><ul><li><strong>无连接</strong>：发送方和接收方之间没有连接的概念，数据以独立的包（datagram）的形式发送。</li><li><strong>速度快</strong>：由于不需要建立连接和确认机制，UDP 的传输速度比 TCP 快。</li><li><strong>不可靠</strong>：UDP 不保证数据包的顺序和完整性，数据包可能会丢失、重复或乱序到达。</li></ul><p>这些特点使得 UDP 适用于以下场景：</p><ul><li><strong>实时应用</strong>：如视频会议、在线游戏等，这些应用需要低延迟和高实时性，能容忍部分数据丢失。</li><li><strong>广播和多播</strong>：如 IPTV、网络广播等，UDP 可以方便地进行广播和多播通信。</li><li><strong>简单的查询服务</strong>：如 DNS 查询，快速发送请求并接收响应，不需要复杂的连接管理。</li></ul><h3 id="TCP-套接字的特性与应用场景"><strong>TCP 套接字的特性与应用场景</strong></h3><p>TCP 是一种面向连接的协议，它提供可靠的数据传输。它的特点是：</p><ul><li><strong>面向连接</strong>：在通信前需要建立连接（三次握手），在通信结束后释放连接（四次挥手）。</li><li><strong>可靠传输</strong>：TCP 保证数据按顺序到达，不丢失、不重复。</li><li><strong>流控制和拥塞控制</strong>：TCP 通过流控制和拥塞控制机制，调整发送数据的速率，避免网络拥塞。</li></ul><p>这些特点使得 TCP 适用于以下场景：</p><ul><li><strong>文件传输</strong>：如 FTP、HTTP 等需要保证数据完整和顺序的场景。</li><li><strong>电子邮件</strong>：如 SMTP、POP3 等需要可靠传输的场景。</li><li><strong>数据库连接</strong>：如 MySQL、PostgreSQL 等数据库的客户端和服务器之间需要可靠的通信。</li></ul><h3 id="Rust-中的异步网络编程"><strong>Rust 中的异步网络编程</strong></h3><p>Rust 提供了强大的异步编程能力，通过 async/await 语法可以方便地编写异步代码。异步编程在处理 I/O 密集型任务时非常有效，可以避免线程阻塞，提高程序的并发性和性能。</p><p>在 Rust 中，我们可以使用 <code>tokio</code> 或 <code>async-std</code> 等异步运行时库来进行异步网络编程。这些库提供了异步版本的网络 API，使得我们可以用异步的方式进行网络通信。</p><p>以下是一个使用 <code>tokio</code> 库的异步 UDP 套接字示例：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> tokio::net::UdpSocket;<br><span class="hljs-keyword">use</span> tokio::io::&#123;<span class="hljs-keyword">self</span>, <span class="hljs-type">Result</span>&#125;;<br><br><span class="hljs-meta">#[tokio::main]</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;()&gt; &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">socket</span> = UdpSocket::<span class="hljs-title function_ invoke__">bind</span>(<span class="hljs-string">&quot;127.0.0.1:8080&quot;</span>).<span class="hljs-keyword">await</span>?;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">buf</span> = [<span class="hljs-number">0u8</span>; <span class="hljs-number">1024</span>];<br><br>    <span class="hljs-keyword">loop</span> &#123;<br>        <span class="hljs-keyword">let</span> (len, addr) = socket.<span class="hljs-title function_ invoke__">recv_from</span>(&amp;<span class="hljs-keyword">mut</span> buf).<span class="hljs-keyword">await</span>?;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Received &#123;&#125; bytes from &#123;&#125;&quot;</span>, len, addr);<br><br>        socket.<span class="hljs-title function_ invoke__">send_to</span>(&amp;buf[..len], &amp;addr).<span class="hljs-keyword">await</span>?;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个示例展示了如何使用 <code>tokio</code> 库创建一个异步 UDP 服务器，它接收数据并将其发送回客户端。</p><h3 id="Rust-中的安全和性能优势"><strong>Rust 中的安全和性能优势</strong></h3><p>Rust 的所有权系统和借用检查器确保了内存安全，避免了常见的内存错误，如空指针解引用</p><p>和缓冲区溢出。这使得 Rust 在进行系统编程和网络编程时具有显著的安全优势。</p><p>此外，Rust 的零成本抽象和高效的编译器优化使得它在性能上也具有优势。Rust 的编译器会在编译时进行严格的类型检查和优化，生成高效的机器码，从而在运行时提供优异的性能。</p><h3 id="封装套接字的优势"><strong>封装套接字的优势</strong></h3><p>封装套接字可以提供以下优势：</p><ul><li><strong>简化使用</strong>：通过封装复杂的网络操作，可以简化 API，使得用户更容易使用。</li><li><strong>模块化</strong>：将网络操作封装在独立的模块中，可以提高代码的可维护性和可复用性。</li><li><strong>增强安全性</strong>：通过封装，可以在内部实现更多的安全检查，防止用户误用导致的安全问题。</li></ul><p>在实际开发中，我们可以根据具体需求，进一步封装和扩展 UDP 和 TCP 套接字的功能。例如，可以添加超时机制、错误处理、日志记录等功能，以提高封装套接字的实用性和健壮性。</p><h3 id="总结"><strong>总结</strong></h3><p>通过封装 UDP 和 TCP 套接字，我们可以更加方便地使用这些网络通信机制，并利用 Rust 的安全性和并发性构建高效、可靠的网络应用程序。Rust 提供了强大的异步编程能力，使得我们可以用异步的方式进行网络编程，提高程序的并发性和性能。在实际开发中，我们可以根据具体需求，进一步封装和扩展 UDP 和 TCP 套接字的功能，以满足不同的应用场景。</p><p>通过本文的介绍和示例代码，希望能帮助大家更好地理解和使用 Rust 进行网络编程。如果有任何问题或建议，欢迎留言讨论。</p><h3 id="参考文献"><strong>参考文献</strong></h3><ol><li>Rust 官方文档：<a href="https://doc.rust-lang.org/">https://doc.rust-lang.org/</a></li><li>Rust 标准库文档：<a href="https://doc.rust-lang.org/std/index.html">https://doc.rust-lang.org/std/index.html</a></li><li>The Rust Programming Language（Rust 编程语言书籍）：<a href="https://www.rust-lang.org/zh-CN/what/triangle">https://www.rust-lang.org/zh-CN/what/triangle</a></li><li>Rust 网络编程（The Book）：<a href="https://book.async.rs/">https://book.async.rs/</a></li><li>Tokio 异步编程：<a href="https://tokio.rs/">https://tokio.rs/</a></li><li>Async-std 异步编程：<a href="https://async.rs/">https://async.rs/</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Rust语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UDP/TCP </tag>
            
            <tag> Rust语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Linux的GPIO工具类的实现原理</title>
      <link href="/2024/02/24/%E5%9F%BA%E4%BA%8ELinux%E7%9A%84GPIO%E5%B7%A5%E5%85%B7%E7%B1%BB%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
      <url>/2024/02/24/%E5%9F%BA%E4%BA%8ELinux%E7%9A%84GPIO%E5%B7%A5%E5%85%B7%E7%B1%BB%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="基于Linux的GPIO工具类的实现原理"><strong>基于Linux的GPIO工具类的实现原理</strong></h2><h3 id="导言："><strong>导言：</strong></h3><p>在嵌入式系统中，Linux提供了丰富的GPIO接口，用于与外部设备进行通信。为了方便在应用程序中控制GPIO，可以通过封装一个GPIO工具类来简化操作。本文将详细介绍基于Linux的GPIO工具类的实现原理，包括GPIO的导出、方向设置和值设置等基本操作。</p><h3 id="GPIO工具类的原理"><strong>GPIO工具类的原理</strong></h3><p>在Linux系统中，GPIO被视为文件系统中的特殊文件，可以通过文件操作来控制。GPIO设备通常位于/sys/class/gpio目录下，每个GPIO设备都有一个相应的目录，其中包含了一些用于控制GPIO的文件，例如direction、value等。</p><p>GPIO工具类的实现原理就是通过打开、读写这些特殊文件来实现对GPIO的控制。通过导出GPIO、设置方向和设置值等操作，可以实现对GPIO引脚的配置和控制。这样，开发者就可以通过调用GPIO工具类提供的接口来方便地控制GPIO引脚。</p><h3 id="GPIO工具类的实现"><strong>GPIO工具类的实现</strong></h3><p>下面是一个简单的C++类，用于在Linux系统中控制GPIO引脚。该类将GPIO设备地址和GPIO编号作为参数传递，并提供了设置方向和设置值的方法。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdexcept&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GPIO</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">GPIO</span>(<span class="hljs-type">const</span> std::string&amp; gpioDevice, <span class="hljs-type">const</span> std::string&amp; gpioNumber) : <span class="hljs-built_in">gpioDevice</span>(gpioDevice), <span class="hljs-built_in">gpioNumber</span>(gpioNumber) &#123;<br>        <span class="hljs-built_in">exportGPIO</span>();<br>    &#125;<br><br>    ~<span class="hljs-built_in">GPIO</span>() &#123;<br>        <span class="hljs-built_in">unexportGPIO</span>();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setDirection</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; direction)</span> </span>&#123;<br>        <span class="hljs-function">std::ofstream <span class="hljs-title">directionFile</span><span class="hljs-params">(getFilePath(<span class="hljs-string">&quot;direction&quot;</span>))</span></span>;<br>        <span class="hljs-keyword">if</span> (!directionFile.<span class="hljs-built_in">is_open</span>()) &#123;<br>            <span class="hljs-keyword">throw</span> std::<span class="hljs-built_in">runtime_error</span>(<span class="hljs-string">&quot;Failed to open GPIO direction file&quot;</span>);<br>        &#125;<br>        directionFile &lt;&lt; direction;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setValue</span><span class="hljs-params">(<span class="hljs-type">bool</span> value)</span> </span>&#123;<br>        <span class="hljs-function">std::ofstream <span class="hljs-title">valueFile</span><span class="hljs-params">(getFilePath(<span class="hljs-string">&quot;value&quot;</span>))</span></span>;<br>        <span class="hljs-keyword">if</span> (!valueFile.<span class="hljs-built_in">is_open</span>()) &#123;<br>            <span class="hljs-keyword">throw</span> std::<span class="hljs-built_in">runtime_error</span>(<span class="hljs-string">&quot;Failed to open GPIO value file&quot;</span>);<br>        &#125;<br>        valueFile &lt;&lt; (value ? <span class="hljs-string">&quot;1&quot;</span> : <span class="hljs-string">&quot;0&quot;</span>);<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    std::string gpioDevice;<br>    std::string gpioNumber;<br><br>    <span class="hljs-function">std::string <span class="hljs-title">getFilePath</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; file)</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> gpioDevice + <span class="hljs-string">&quot;/gpio&quot;</span> + gpioNumber + <span class="hljs-string">&quot;/&quot;</span> + file;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">exportGPIO</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-function">std::ofstream <span class="hljs-title">exportFile</span><span class="hljs-params">(gpioDevice + <span class="hljs-string">&quot;/export&quot;</span>)</span></span>;<br>        <span class="hljs-keyword">if</span> (!exportFile.<span class="hljs-built_in">is_open</span>()) &#123;<br>            <span class="hljs-keyword">throw</span> std::<span class="hljs-built_in">runtime_error</span>(<span class="hljs-string">&quot;Failed to open GPIO export file&quot;</span>);<br>        &#125;<br>        exportFile &lt;&lt; gpioNumber;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">unexportGPIO</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-function">std::ofstream <span class="hljs-title">unexportFile</span><span class="hljs-params">(gpioDevice + <span class="hljs-string">&quot;/unexport&quot;</span>)</span></span>;<br>        <span class="hljs-keyword">if</span> (!unexportFile.<span class="hljs-built_in">is_open</span>()) &#123;<br>            <span class="hljs-keyword">throw</span> std::<span class="hljs-built_in">runtime_error</span>(<span class="hljs-string">&quot;Failed to open GPIO unexport file&quot;</span>);<br>        &#125;<br>        unexportFile &lt;&lt; gpioNumber;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">// 示例用法</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 初始化 GPIO 对象，指定 GPIO 设备地址为 /sys/class/gpio，GPIO 编号为 18</span><br>        <span class="hljs-function">GPIO <span class="hljs-title">gpio</span><span class="hljs-params">(<span class="hljs-string">&quot;/sys/class/gpio&quot;</span>, <span class="hljs-string">&quot;18&quot;</span>)</span></span>;<br><br>        <span class="hljs-comment">// 设置 GPIO 方向为输出</span><br>        gpio.<span class="hljs-built_in">setDirection</span>(<span class="hljs-string">&quot;out&quot;</span>);<br><br>        <span class="hljs-comment">// 设置 GPIO 输出值为高电平</span><br>        gpio.<span class="hljs-built_in">setValue</span>(<span class="hljs-literal">true</span>);<br>    &#125; <span class="hljs-built_in">catch</span> (<span class="hljs-type">const</span> std::exception&amp; e) &#123;<br>        std::cerr &lt;&lt; <span class="hljs-string">&quot;Error: &quot;</span> &lt;&lt; e.<span class="hljs-built_in">what</span>() &lt;&lt; std::endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="GPIO方向的含义"><strong>GPIO方向的含义</strong></h3><p>GPIO的方向指的是该引脚是作为输入还是输出。在嵌入式系统中，GPIO引脚通常可以配置为输入模式或输出模式。</p><ul><li><p>输入模式：GPIO引脚接收外部信号，可以读取外部设备发送的电压信号。例如，可以用来接收按钮的状态、传感器的数据等。</p></li><li><p>输出模式：GPIO引脚向外部设备发送电压信号，可以控制外部设备的状态。例如，可以控制LED的亮灭、驱动电机的运动等。</p></li></ul><p>在代码中，<code>gpio.setDirection(&quot;out&quot;)</code> 就是将GPIO引脚设置为输出模式。这样，该GPIO引脚就可以向外部设备发送电压信号，用来控制外部设备的状态。</p><h3 id="结论"><strong>结论</strong></h3><p>通过封装一个GPIO工具类，可以方便地在Linux系统中控制GPIO引脚。GPIO工具类的实现原理是基于文件操作，通过读写/sys/class/gpio目录下的特殊文件来实现对GPIO引脚的配置和控制。通过调用GPIO工具类提供的接口，开发者可以方便地进行GPIO的操作，从而实现与外部设备的通信和控制。</p>]]></content>
      
      
      <categories>
          
          <category> C++工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gpio </tag>
            
            <tag> C++工具类 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用C++实现彩色打印类，助力通信协议调试</title>
      <link href="/2024/02/24/%E5%88%A9%E7%94%A8C-%E5%AE%9E%E7%8E%B0%E5%BD%A9%E8%89%B2%E6%89%93%E5%8D%B0%E7%B1%BB%EF%BC%8C%E5%8A%A9%E5%8A%9B%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE%E8%B0%83%E8%AF%95/"/>
      <url>/2024/02/24/%E5%88%A9%E7%94%A8C-%E5%AE%9E%E7%8E%B0%E5%BD%A9%E8%89%B2%E6%89%93%E5%8D%B0%E7%B1%BB%EF%BC%8C%E5%8A%A9%E5%8A%9B%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="利用C-实现彩色打印类，助力通信协议调试">利用C++实现彩色打印类，助力通信协议调试</h2><p>在软件开发过程中，调试是一个至关重要的环节。特别是在处理通信协议等涉及到复杂数据交互的场景下，清晰地标识特殊字段对于快速定位问题、排查错误至关重要。本文将介绍如何利用C++编程语言，实现一个彩色打印类，用于在调试过程中标识特殊字段，助力通信协议等功能的调试。</p><h3 id="为什么需要彩色打印类？">为什么需要彩色打印类？</h3><p>在调试通信协议等复杂软件场景中，经常会遇到需要区分不同类型信息的情况。例如，在处理接收到的数据时，需要清晰地区分接收到的数据、发送的数据以及出现错误的信息等。使用彩色打印可以帮助我们直观地区分不同类型的信息，提高调试效率。</p><h3 id="实现原理">实现原理</h3><p>在C++中，我们可以利用控制台输出的特性来实现彩色打印。常用的是使用ANSI转义序列，通过输出不同的ANSI码来实现在终端中改变文本颜色等效果。主要的ANSI码如下：</p><ul><li><code>\033[0m</code>：重置颜色</li><li><code>\033[31m</code>：红色</li><li><code>\033[32m</code>：绿色</li><li><code>\033[34m</code>：蓝色</li><li><code>\033[33m</code>：黄色</li><li><code>\033[36m</code>：青色</li><li><code>\033[35m</code>：洋红色</li><li><code>\033[37m</code>：白色</li></ul><p>基于以上原理，我们可以实现一个彩色打印类，通过设置不同的ANSI码来实现打印不同颜色的文本。</p><h3 id="实现彩色打印类">实现彩色打印类</h3><p>首先，我们定义一个枚举类型 <code>TextColor</code>，用于表示不同的颜色。然后，实现 <code>ColorPrinter</code> 类，提供 <code>setColor()</code> 方法用于设置打印颜色，以及 <code>printWithMarker()</code> 方法用于打印带有特殊字段标识的字符串。</p><p>以下是彩色打印类的代码实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><br><span class="hljs-comment">// 枚举类型定义颜色</span><br><span class="hljs-keyword">enum class</span> <span class="hljs-title class_">TextColor</span> &#123;<br>    Default,<br>    Red,<br>    Green,<br>    Blue,<br>    Yellow,<br>    Cyan,<br>    Magenta,<br>    White<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ColorPrinter</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 构造函数</span><br>    <span class="hljs-built_in">ColorPrinter</span>() : <span class="hljs-built_in">textColor</span>(TextColor::Default) &#123;<br>        <span class="hljs-comment">// 初始化颜色映射</span><br>        colorMap[TextColor::Default] = <span class="hljs-string">&quot;\033[0m&quot;</span>; <span class="hljs-comment">// 默认颜色</span><br>        colorMap[TextColor::Red] = <span class="hljs-string">&quot;\033[31m&quot;</span>; <span class="hljs-comment">// 红色</span><br>        colorMap[TextColor::Green] = <span class="hljs-string">&quot;\033[32m&quot;</span>; <span class="hljs-comment">// 绿色</span><br>        colorMap[TextColor::Blue] = <span class="hljs-string">&quot;\033[34m&quot;</span>; <span class="hljs-comment">// 蓝色</span><br>        colorMap[TextColor::Yellow] = <span class="hljs-string">&quot;\033[33m&quot;</span>; <span class="hljs-comment">// 黄色</span><br>        colorMap[TextColor::Cyan] = <span class="hljs-string">&quot;\033[36m&quot;</span>; <span class="hljs-comment">// 青色</span><br>        colorMap[TextColor::Magenta] = <span class="hljs-string">&quot;\033[35m&quot;</span>; <span class="hljs-comment">// 洋红色</span><br>        colorMap[TextColor::White] = <span class="hljs-string">&quot;\033[37m&quot;</span>; <span class="hljs-comment">// 白色</span><br>    &#125;<br><br>    <span class="hljs-comment">// 设置打印颜色</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setColor</span><span class="hljs-params">(TextColor color)</span> </span>&#123;<br>        textColor = color;<br>    &#125;<br><br>    <span class="hljs-comment">// 打印字符串，带特殊字段标识</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printWithMarker</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; text, <span class="hljs-type">const</span> std::string&amp; marker)</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-built_in">getColorCode</span>() &lt;&lt; text &lt;&lt; <span class="hljs-string">&quot; (&quot;</span> &lt;&lt; marker &lt;&lt; <span class="hljs-string">&quot;)&quot;</span> &lt;&lt; <span class="hljs-built_in">getColorCode</span>() &lt;&lt; std::endl;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    TextColor textColor; <span class="hljs-comment">// 打印颜色</span><br>    std::map&lt;TextColor, std::string&gt; colorMap; <span class="hljs-comment">// 颜色映射</span><br><br>    <span class="hljs-comment">// 获取当前颜色码</span><br>    <span class="hljs-function">std::string <span class="hljs-title">getColorCode</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> colorMap[textColor];<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ColorPrinter printer;<br><br>    <span class="hljs-comment">// 设置不同颜色并打印字符串，带特殊字段标识</span><br>    printer.<span class="hljs-built_in">setColor</span>(TextColor::Red);<br>    printer.<span class="hljs-built_in">printWithMarker</span>(<span class="hljs-string">&quot;Error occurred&quot;</span>, <span class="hljs-string">&quot;ERR&quot;</span>);<br><br>    printer.<span class="hljs-built_in">setColor</span>(TextColor::Green);<br>    printer.<span class="hljs-built_in">printWithMarker</span>(<span class="hljs-string">&quot;Data received&quot;</span>, <span class="hljs-string">&quot;RX&quot;</span>);<br><br>    printer.<span class="hljs-built_in">setColor</span>(TextColor::Blue);<br>    printer.<span class="hljs-built_in">printWithMarker</span>(<span class="hljs-string">&quot;Data sent&quot;</span>, <span class="hljs-string">&quot;TX&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="总结">总结</h3><p>通过实现彩色打印类，我们可以在调试过程中更加直观地标识特殊字段，提高调试效率。这个彩色打印类具有通用性，可以用于各种C++项目中，特别是涉及到通信协议等场景。希望这个彩色打印类能够帮助你更加轻松地进行调试工作！</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C++通用类 </tag>
            
            <tag> 调试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用STM32的GPIO模拟I2C通信：从原理到实现</title>
      <link href="/2024/02/23/%E4%BD%BF%E7%94%A8STM32%E7%9A%84GPIO%E6%A8%A1%E6%8B%9FI2C%E9%80%9A%E4%BF%A1%EF%BC%9A%E4%BB%8E%E5%8E%9F%E7%90%86%E5%88%B0%E5%AE%9E%E7%8E%B0/"/>
      <url>/2024/02/23/%E4%BD%BF%E7%94%A8STM32%E7%9A%84GPIO%E6%A8%A1%E6%8B%9FI2C%E9%80%9A%E4%BF%A1%EF%BC%9A%E4%BB%8E%E5%8E%9F%E7%90%86%E5%88%B0%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="使用STM32的GPIO模拟I2C通信：从原理到实现">使用STM32的GPIO模拟I2C通信：从原理到实现</h2><p>在嵌入式系统中，I2C（Inter-Integrated Circuit）是一种常用的串行通信协议，用于在芯片之间进行简单、高效的数据传输。然而，在某些情况下，由于外部设备或特定硬件限制，我们可能无法直接使用硬件I2C接口。在这种情况下，可以通过GPIO模拟I2C通信来实现相同的功能。本文将介绍GPIO模拟I2C通信的原理，并提供一个基于STM32的示例代码。</p><h3 id="GPIO模拟I2C通信原理">GPIO模拟I2C通信原理</h3><p>GPIO模拟I2C通信是通过控制微控制器的通用输入/输出引脚来模拟I2C通信协议。在I2C通信中，通常有两根线：SDA（数据线）和SCL（时钟线）。通过控制这两根线的电平变化，可以实现起始条件、停止条件、数据传输等功能。</p><ol><li><p><strong>起始条件（Start Condition）</strong>：在I2C通信中，起始条件是将SDA线从高电平转换为低电平，然后保持SCL线为高电平状态。</p></li><li><p><strong>停止条件（Stop Condition）</strong>：停止条件是将SDA线从低电平转换为高电平，然后保持SCL线为高电平状态。</p></li><li><p><strong>数据传输</strong>：在数据传输过程中，数据是在SCL线为低电平时传输的。SDA线的电平变化表示数据的位值，即高电平表示1，低电平表示0。在每个数据字节传输后，都需要等待接收方发送应答信号。</p></li></ol><p>基于以上原理，可以通过GPIO控制来模拟I2C通信的各个步骤，从而实现与外部设备的数据交换。</p><h3 id="优化模拟I2C实现">优化模拟I2C实现</h3><p>为了增强模拟I2C的通用性和易用性，我对模拟I2C实现进行了优化，并提供了类似于HAL库中对I2C的操作风格。</p><ol><li><p><strong>模拟I2C句柄定义</strong>：创建了一个结构体<code>SimulatedI2C_HandleTypeDef</code>，用于存储模拟I2C的引脚信息。</p></li><li><p><strong>封装模拟I2C操作函数</strong>：封装了模拟I2C的初始化函数<code>SimulatedI2C_Init</code>、写入函数<code>SimulatedI2C_Write</code>和读取函数<code>SimulatedI2C_Read</code>，以实现类似于HAL库中对I2C的操作风格。</p></li></ol><h3 id="优化后的示例代码">优化后的示例代码</h3><p>下面是示例代码，演示了如何使用STM32的GPIO模拟I2C通信与外部设备进行读写操作：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stm32f4xx_hal.h&quot;</span></span><br><br><span class="hljs-comment">// GPIO定义</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SDA_GPIO_PORT GPIOA</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SDA_PIN GPIO_PIN_0</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SCL_GPIO_PORT GPIOA</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SCL_PIN GPIO_PIN_1</span><br><br><span class="hljs-comment">// 模拟I2C句柄定义</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    GPIO_TypeDef *SDA_GPIO_Port;<br>    <span class="hljs-type">uint16_t</span> SDA_Pin;<br>    GPIO_TypeDef *SCL_GPIO_Port;<br>    <span class="hljs-type">uint16_t</span> SCL_Pin;<br>&#125; SimulatedI2C_HandleTypeDef;<br><br><span class="hljs-comment">// 函数声明</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">SimulatedI2C_Init</span><span class="hljs-params">(SimulatedI2C_HandleTypeDef *hi2c)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">SimulatedI2C_Write</span><span class="hljs-params">(SimulatedI2C_HandleTypeDef *hi2c, <span class="hljs-type">uint8_t</span> dev_addr, <span class="hljs-type">uint8_t</span> *data, <span class="hljs-type">uint16_t</span> size)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">SimulatedI2C_Read</span><span class="hljs-params">(SimulatedI2C_HandleTypeDef *hi2c, <span class="hljs-type">uint8_t</span> dev_addr, <span class="hljs-type">uint8_t</span> *data, <span class="hljs-type">uint16_t</span> size)</span>;<br><br><span class="hljs-comment">// 延迟函数</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">I2C_Delay</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    <span class="hljs-comment">// 根据需要添加延迟，也可以用HAL库的HAL_Delay();</span><br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++);<br>&#125;<br><br><span class="hljs-comment">// 启动条件</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">I2C_Start</span><span class="hljs-params">(SimulatedI2C_HandleTypeDef *hi2c)</span> &#123;<br>    HAL_GPIO_WritePin(hi2c-&gt;SDA_GPIO_Port, hi2c-&gt;SDA_Pin, GPIO_PIN_SET);<br>    HAL_GPIO_WritePin(hi2c-&gt;SCL_GPIO_Port, hi2c-&gt;SCL_Pin, GPIO_PIN_SET);<br>    I2C_Delay();<br>    HAL_GPIO_WritePin(hi2c-&gt;SDA_GPIO_Port, hi2c-&gt;SDA_Pin, GPIO_PIN_RESET);<br>    I2C_Delay();<br>    HAL_GPIO_WritePin(hi2c-&gt;SCL_GPIO_Port, hi2c-&gt;SCL_Pin, GPIO_PIN_RESET);<br>    I2C_Delay();<br>&#125;<br><br><span class="hljs-comment">// 停止条件</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">I2C_Stop</span><span class="hljs-params">(SimulatedI2C_HandleTypeDef *hi2c)</span> &#123;<br>    HAL_GPIO_WritePin(hi2c-&gt;SDA_GPIO_Port, hi2c-&gt;SDA_Pin, GPIO_PIN_RESET);<br>    HAL_GPIO_WritePin(hi2c-&gt;SCL_GPIO_Port, hi2c-&gt;SCL_Pin, GPIO_PIN_SET);<br>    I2C_Delay();<br>    HAL_GPIO_WritePin(hi2c-&gt;SDA_GPIO_Port, hi2c-&gt;SDA_Pin, GPIO_PIN_SET);<br>    I2C_Delay();<br>&#125;<br><br><span class="hljs-comment">// 写入单个字节</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">I2C_WriteByte</span><span class="hljs-params">(SimulatedI2C_HandleTypeDef *hi2c, <span class="hljs-type">uint8_t</span> byte)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int8_t</span> i = <span class="hljs-number">7</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        <span class="hljs-keyword">if</span> (byte &amp; (<span class="hljs-number">1</span> &lt;&lt; i)) &#123;<br>            HAL_GPIO_WritePin(hi2c-&gt;SDA_GPIO_Port, hi2c-&gt;SDA_Pin, GPIO_PIN_SET);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            HAL_GPIO_WritePin(hi2c-&gt;SDA_GPIO_Port, hi2c-&gt;SDA_Pin, GPIO_PIN_RESET);<br>        &#125;<br>        I2C_Delay();<br>        HAL_GPIO_WritePin(hi2c-&gt;SCL_GPIO_Port, hi2c-&gt;SCL_Pin, GPIO_PIN_SET);<br>        I2C_Delay();<br>        HAL_GPIO_WritePin(hi2c-&gt;SCL_GPIO_Port, hi2c-&gt;SCL_Pin, GPIO_PIN_RESET);<br>        I2C_Delay();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 读取单个字节</span><br><span class="hljs-type">uint8_t</span> <span class="hljs-title function_">I2C_ReadByte</span><span class="hljs-params">(SimulatedI2C_HandleTypeDef *hi2c)</span> &#123;<br>    <span class="hljs-type">uint8_t</span> byte = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int8_t</span> i = <span class="hljs-number">7</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        HAL_GPIO_WritePin(hi2c-&gt;SCL_GPIO_Port, hi2c-&gt;SCL_Pin, GPIO_PIN_SET);<br>        I2C_Delay();<br>        <span class="hljs-keyword">if</span> (HAL_GPIO_ReadPin(hi2c-&gt;SDA_GPIO_Port, hi2c-&gt;SDA_Pin)) &#123;<br>            byte |= (<span class="hljs-number">1</span> &lt;&lt; i);<br>        &#125;<br>        HAL_GPIO_WritePin(hi2c-&gt;SCL_GPIO_Port, hi2c-&gt;SCL_Pin, GPIO_PIN_RESET);<br>        I2C_Delay();<br>    &#125;<br>    <span class="hljs-keyword">return</span> byte;<br>&#125;<br><br><span class="hljs-comment">// 模拟I2C初始化</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">SimulatedI2C_Init</span><span class="hljs-params">(SimulatedI2C_HandleTypeDef *hi2c)</span> &#123;<br>    GPIO_InitTypeDef GPIO_InitStruct = &#123;<span class="hljs-number">0</span>&#125;;<br><br>    <span class="hljs-comment">// 初始化SDA引脚</span><br>    GPIO_InitStruct.Pin = hi2c-&gt;SDA_Pin;<br>    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;<br>    GPIO_InitStruct.Pull = GPIO_PULLUP;<br>    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;<br>    HAL_GPIO_Init(hi2c-&gt;SDA_GPIO_Port, &amp;GPIO_InitStruct);<br><br>    <span class="hljs-comment">// 初始化SCL引脚</span><br>    GPIO_InitStruct.Pin = hi2c-&gt;SCL_Pin;<br>    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;<br>    GPIO_InitStruct.Pull = GPIO_PULLUP;<br>    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;<br>    HAL_GPIO_Init(hi2c-&gt;SCL_GPIO_Port, &amp;GPIO_InitStruct);<br>&#125;<br><br><span class="hljs-comment">// 向设备写入数据</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">SimulatedI2C_Write</span><span class="hljs-params">(SimulatedI2C_HandleTypeDef *hi2c, <span class="hljs-type">uint8_t</span> dev_addr, <span class="hljs-type">uint8_t</span> *data, <span class="hljs-type">uint16_t</span> size)</span> &#123;<br>    <span class="hljs-comment">// 发送起始条件</span><br>    I2C_Start(hi2c);<br><br>    <span class="hljs-comment">// 发送设备地址和写入位</span><br>    I2C_WriteByte(hi2c, dev_addr &lt;&lt; <span class="hljs-number">1</span>);<br><br>    <span class="hljs-comment">// 发送数据</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">uint16_t</span> i = <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>        I2C_WriteByte(hi2c, data[i]);<br>    &#125;<br><br>    <span class="hljs-comment">// 结束通信</span><br>    I2C_Stop(hi2c);<br>&#125;<br><br><span class="hljs-comment">// 从设备读取数据</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">SimulatedI2C_Read</span><span class="hljs-params">(SimulatedI2C_HandleTypeDef *hi2c, <span class="hljs-type">uint8_t</span> dev_addr, <span class="hljs-type">uint8_t</span> *data, <span class="hljs-type">uint16_t</span> size)</span> &#123;<br>    <span class="hljs-comment">// 发送起始条件</span><br>    I2C_Start(hi2c);<br><br>    <span class="hljs-comment">// 发送设备地址和读取位</span><br>    I2C_WriteByte(hi2c, (dev_addr &lt;&lt; <span class="hljs-number">1</span>) | <span class="hljs-number">0x01</span>);<br><br>    <span class="hljs-comment">// 读取数据</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">uint16_t</span> i = <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>        data[i] = I2C_ReadByte(hi2c);<br>    &#125;<br><br>    <span class="hljs-comment">// 结束通信</span><br>    I2C_Stop(hi2c);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    HAL_Init();<br><br>    SimulatedI2C_HandleTypeDef hi2c = &#123;<span class="hljs-number">0</span>&#125;;<br>    hi2c.SDA_GPIO_Port = SDA_GPIO_PORT;<br>    hi2c.SDA_Pin = SDA_PIN;<br>    hi2c.SCL_GPIO_Port = SCL_GPIO_PORT;<br>    hi2c.SCL_Pin = SCL_PIN;<br><br>    SimulatedI2C_Init(&amp;hi2c);<br><br>    <span class="hljs-comment">// 以下是示例代码，使用模拟I2C向外部设备写入数据和读取数据</span><br>    <span class="hljs-type">uint8_t</span> writeData[] = &#123;<span class="hljs-number">0x12</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x56</span>&#125;;<br>    <span class="hljs-type">uint8_t</span> readData[<span class="hljs-number">3</span>];<br><br>    SimulatedI2C_Write(&amp;hi2c, <span class="hljs-number">0x50</span>, writeData, <span class="hljs-keyword">sizeof</span>(writeData));<br>    SimulatedI2C_Read(&amp;hi2c, <span class="hljs-number">0x50</span>, readData, <span class="hljs-keyword">sizeof</span>(readData));<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">// 无限循环</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>我们使模拟I2C的操作更加通用和易用，从而能够更灵活地与不同的外部设备进行通信。在实际应用中，您可以根据具体的需求和外部设备的通信协议来进行定制和扩展。</p><p>**注意：**上述示例代码写于今晚，还未经过实际验证其稳定性！！请谨慎用于工作项目中。。。</p><p><strong>已更新已验证版本，请跳转观看：</strong> <a href="https://jinbilianshao.github.io/2024/10/23/%E5%B7%B2%E9%AA%8C%E8%AF%81-%E5%9F%BA%E4%BA%8EHAL%E5%BA%93%E5%8F%AF%E8%BF%81%E7%A7%BB%E9%80%9A%E7%94%A8gpio%E6%A8%A1%E6%8B%9FI2C%E5%AE%9E%E7%8E%B0/">点我跳转到最新博客</a></p>]]></content>
      
      
      <categories>
          
          <category> STM32学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
            <tag> 模拟I2C实现 </tag>
            
            <tag> HAL库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式笔记：嵌入式系统中的实时操作系统（RTOS）与任务调度器</title>
      <link href="/2023/09/20/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E5%AE%9E%E6%97%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88RTOS%EF%BC%89%E4%B8%8E%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E5%99%A8/"/>
      <url>/2023/09/20/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E5%AE%9E%E6%97%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88RTOS%EF%BC%89%E4%B8%8E%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="嵌入式笔记：嵌入式系统中的实时操作系统（RTOS）与任务调度器">嵌入式笔记：嵌入式系统中的实时操作系统（RTOS）与任务调度器</h2><p><strong>一、引言</strong></p><p>在当今高度数字化和智能化的世界中，嵌入式系统已经成为了各种电子设备的核心组成部分。从智能手机、汽车电子到工业控制系统，嵌入式系统无处不在。而在这些嵌入式系统中，实时操作系统（RTOS）扮演着至关重要的角色，它为系统提供了高效的任务管理和调度机制，确保系统能够在规定的时间内完成关键任务，满足实时性要求。本文将深入探讨嵌入式系统中的实时操作系统（RTOS）与任务调度器，包括其基本概念、工作原理、常见的 RTOS 类型以及任务调度算法，并通过实例代码展示其实际应用。</p><p><strong>二、实时操作系统（RTOS）概述</strong></p><p>（一）定义与特点实时操作系统是指能够在确定的时间内对外部事件做出响应并完成特定任务的操作系统。与通用操作系统相比，RTOS 具有以下特点：</p><ol><li>强实时性：能够在严格的时间限制内完成关键任务，确保系统的可靠性和稳定性。</li><li>可确定性：任务的执行时间和响应时间是可预测和确定的。</li><li>资源占用少：在有限的硬件资源上高效运行，节省内存和处理器资源。</li><li>高可靠性：能够应对各种异常情况，保证系统的持续稳定运行。</li></ol><p>（二）RTOS 的基本架构一个典型的 RTOS 架构通常包括内核、任务管理、内存管理、中断管理、通信机制等模块。内核是 RTOS 的核心部分，负责任务调度、资源分配和系统管理等关键功能。任务管理模块负责创建、删除和管理任务，内存管理模块负责分配和释放内存资源，中断管理模块处理外部中断事件，通信机制实现任务之间的数据交换和同步。</p><p><strong>三、任务调度器</strong></p><p>（一）任务调度的基本概念任务调度器是 RTOS 中的核心组件，其主要职责是根据一定的调度算法，合理地分配处理器资源给各个任务，以确保系统的高效运行和满足实时性要求。任务调度器需要考虑任务的优先级、截止时间、执行时间等因素，以决定哪个任务应该在何时获得处理器的使用权。</p><p>（二）任务调度算法</p><ol><li>优先级调度算法优先级调度算法是根据任务的优先级来决定任务的执行顺序。具有较高优先级的任务会优先获得处理器资源。优先级可以是静态分配的，也可以是动态调整的。静态优先级调度算法简单直观，但可能导致低优先级任务长时间得不到执行。动态优先级调度算法可以根据任务的执行情况动态调整优先级，提高系统的公平性和资源利用率。</li><li>时间片轮转调度算法时间片轮转调度算法将处理器的时间划分为固定长度的时间片，每个任务在一个时间片内执行。当时间片用完时，任务会被挂起，处理器切换到下一个任务执行。这种算法适用于多个任务具有相同优先级且对响应时间要求不高的情况。</li><li>最早截止时间优先调度算法最早截止时间优先调度算法根据任务的截止时间来决定任务的执行顺序。截止时间最早的任务会优先获得处理器资源。这种算法适用于对截止时间要求严格的实时系统。</li></ol><p>（三）任务调度的实现机制任务调度的实现通常涉及到任务状态的切换、任务上下文的保存和恢复以及处理器的切换等操作。当一个任务被调度执行时，RTOS 会将其状态从就绪态切换为运行态，并将处理器的上下文切换到该任务的上下文。当任务执行完成或被挂起时，RTOS 会保存其上下文，并将处理器的上下文切换到下一个就绪任务的上下文。</p><p><strong>四、常见的实时操作系统（RTOS）</strong></p><p>（一）FreeRTOSFreeRTOS 是一个开源的、轻量级的 RTOS，广泛应用于各种嵌入式系统中。它具有简单易用、可裁剪性强、支持多种处理器架构等优点。（二）RTXRTX 是 Keil 公司推出的一款实时操作系统，与 Keil 开发工具紧密集成，方便开发者进行应用程序的开发和调试。（三）μC/OS-IIμC/OS-II 是一款经典的实时操作系统，具有良好的稳定性和可靠性，被广泛应用于工业控制、医疗设备等领域。</p><p><strong>五、实例代码分析</strong></p><p>以下是一个使用 FreeRTOS 实现简单任务调度的实例代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;FreeRTOS.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;task.h&quot;</span></span><br><br><span class="hljs-comment">// 定义任务栈大小</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TASK_STACK_SIZE 128</span><br><br><span class="hljs-comment">// 定义任务优先级</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TASK1_PRIORITY 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TASK2_PRIORITY 2</span><br><br><span class="hljs-comment">// 任务 1 的函数</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">Task1Function</span><span class="hljs-params">(<span class="hljs-type">void</span> *pvParameters)</span><br>&#123;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Task 1 is running\n&quot;</span>);<br>        vTaskDelay(<span class="hljs-number">1000</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 任务 2 的函数</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">Task2Function</span><span class="hljs-params">(<span class="hljs-type">void</span> *pvParameters)</span><br>&#123;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Task 2 is running\n&quot;</span>);<br>        vTaskDelay(<span class="hljs-number">2000</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">// 创建任务 1</span><br>    xTaskCreate(Task1Function, <span class="hljs-string">&quot;Task1&quot;</span>, TASK_STACK_SIZE, <span class="hljs-literal">NULL</span>, TASK1_PRIORITY, <span class="hljs-literal">NULL</span>);<br><br>    <span class="hljs-comment">// 创建任务 2</span><br>    xTaskCreate(Task2Function, <span class="hljs-string">&quot;Task2&quot;</span>, TASK_STACK_SIZE, <span class="hljs-literal">NULL</span>, TASK2_PRIORITY, <span class="hljs-literal">NULL</span>);<br><br>    <span class="hljs-comment">// 启动调度器</span><br>    vTaskStartScheduler();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上述代码中，我们首先包含了 FreeRTOS 的头文件。然后，定义了任务栈大小和任务优先级。接下来，分别实现了任务 1 和任务 2 的函数，在函数中通过 <code>vTaskDelay</code> 函数实现任务的延时。在 <code>main</code> 函数中，使用 <code>xTaskCreate</code> 函数创建了两个任务，并指定了任务的名称、栈大小、参数、优先级等信息。最后，使用 <code>vTaskStartScheduler</code> 函数启动调度器，开始任务的调度执行。</p><p><strong>六、总结</strong></p><p>实时操作系统（RTOS）在嵌入式系统中起着至关重要的作用，它通过任务调度器实现了对系统资源的高效管理和任务的合理分配，确保了系统的实时性和可靠性。本文对 RTOS 和任务调度器进行了详细的介绍，包括其基本概念、工作原理、常见的 RTOS 类型和任务调度算法，并通过实例代码展示了其实际应用。随着嵌入式技术的不断发展，RTOS 将在更多的领域得到广泛的应用，为各种智能设备和系统提供强大的支持。</p><p>希望本文能够为广大嵌入式开发者和爱好者提供有益的参考，帮助大家更好地理解和应用实时操作系统。在实际的开发过程中，还需要根据具体的应用需求和硬件环境选择合适的 RTOS 和任务调度策略，以实现最优的系统性能。</p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 嵌入式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式笔记：嵌入式系统中的固件更新与版本控制</title>
      <link href="/2023/09/20/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E5%9B%BA%E4%BB%B6%E6%9B%B4%E6%96%B0%E4%B8%8E%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
      <url>/2023/09/20/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E5%9B%BA%E4%BB%B6%E6%9B%B4%E6%96%B0%E4%B8%8E%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="嵌入式笔记：嵌入式系统中的固件更新与版本控制">嵌入式笔记：嵌入式系统中的固件更新与版本控制</h2><h3 id="引言">引言</h3><p>在嵌入式系统开发中，固件更新和版本控制是保证系统持续性能优化和问题修复的关键。本篇博客将介绍一些固件更新的方法和版本控制的实践原则，同时提供相应的业务代码示例。</p><h3 id="固件更新方法">固件更新方法</h3><h4 id="1-通过Bootloader更新">1. <strong>通过Bootloader更新</strong></h4><p>使用一个独立于应用程序的Bootloader来负责固件更新的过程，确保在更新时不会影响系统正常运行。</p><h4 id="2-通过串口-网络更新">2. <strong>通过串口/网络更新</strong></h4><p>允许通过串口或者网络连接上传新的固件，并在系统中进行更新。</p><h4 id="3-OTA（Over-The-Air）更新">3. <strong>OTA（Over-The-Air）更新</strong></h4><p>允许通过无线网络直接向设备推送新的固件版本，适用于远程设备的更新。</p><h3 id="版本控制的实践原则">版本控制的实践原则</h3><h4 id="1-语义化版本号">1. <strong>语义化版本号</strong></h4><p>采用语义化版本号（如MAJOR.MINOR.PATCH）来清晰地标识每个版本的变化。</p><h4 id="2-版本日志记录">2. <strong>版本日志记录</strong></h4><p>及时记录每个版本的变更内容，包括新增功能、修复的问题等。</p><h4 id="3-备份和回滚机制">3. <strong>备份和回滚机制</strong></h4><p>在更新前备份当前版本，以便在出现问题时能够快速回滚。</p><h3 id="固件更新示例：通过Bootloader更新">固件更新示例：通过Bootloader更新</h3><p>以下是一个简单的Bootloader固件更新示例，包括检测新固件、下载并更新的过程。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">check_for_new_firmware</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 检测是否有新固件</span><br>    <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">download_firmware</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 下载新固件</span><br>    <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">update_firmware</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 更新固件</span><br>    <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    check_for_new_firmware();<br>    download_firmware();<br>    update_firmware();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="结论">结论</h3><p>固件更新和版本控制是嵌入式系统开发中至关重要的环节。通过合适的固件更新方法和版本控制实践原则，可以保证系统持续性能优化和问题修复。</p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 嵌入式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式笔记：嵌入式系统中的多任务管理与调度器设计</title>
      <link href="/2023/09/20/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E5%A4%9A%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86%E4%B8%8E%E8%B0%83%E5%BA%A6%E5%99%A8%E8%AE%BE%E8%AE%A1/"/>
      <url>/2023/09/20/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E5%A4%9A%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86%E4%B8%8E%E8%B0%83%E5%BA%A6%E5%99%A8%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="嵌入式笔记：嵌入式系统中的多任务管理与调度器设计">嵌入式笔记：嵌入式系统中的多任务管理与调度器设计</h2><h3 id="引言">引言</h3><p>在嵌入式系统中，多任务管理和调度是保证系统高效运行的关键。本篇博客将介绍多任务管理的基本原则以及设计一个简单的任务调度器的方法，同时提供完善的业务代码示例。</p><h3 id="多任务管理的基本原则">多任务管理的基本原则</h3><h4 id="1-任务的设计与分解">1. <strong>任务的设计与分解</strong></h4><p>将复杂的任务分解成多个小任务，提高系统的响应速度。</p><h4 id="2-任务的优先级与调度">2. <strong>任务的优先级与调度</strong></h4><p>根据任务的重要性和紧急程度设定任务的优先级，并合理调度任务的执行顺序。</p><h4 id="3-任务同步与通信">3. <strong>任务同步与通信</strong></h4><p>合理使用信号量、消息队列等机制来保证多个任务之间的同步和通信。</p><h3 id="设计一个简单的任务调度器">设计一个简单的任务调度器</h3><p>以下是一个简单的任务调度器的设计示例，其中包括任务的创建、初始化、执行以及调度等功能。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-type">void</span> (*task_function)(<span class="hljs-type">void</span>);<br>    <span class="hljs-type">int</span> priority;<br>&#125; Task;<br><br>Task tasks[<span class="hljs-number">5</span>]; <span class="hljs-comment">// 最多支持5个任务</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">create_task</span><span class="hljs-params">(<span class="hljs-type">void</span> (*function)(<span class="hljs-type">void</span>), <span class="hljs-type">int</span> priority)</span> &#123;<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> task_index = <span class="hljs-number">0</span>;<br>    tasks[task_index].task_function = function;<br>    tasks[task_index].priority = priority;<br>    task_index++;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">initialize_scheduler</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 初始化调度器</span><br>    <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">schedule_tasks</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span> (tasks[i].task_function != <span class="hljs-literal">NULL</span>) &#123;<br>            tasks[i].task_function();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">task1</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 任务1的具体实现</span><br>    <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">task2</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 任务2的具体实现</span><br>    <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">task3</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 任务3的具体实现</span><br>    <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    create_task(task1, <span class="hljs-number">1</span>);<br>    create_task(task2, <span class="hljs-number">2</span>);<br>    create_task(task3, <span class="hljs-number">3</span>);<br>    <br>    initialize_scheduler();<br>    schedule_tasks();<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="结论">结论</h3><p>多任务管理和调度是嵌入式系统开发中不可或缺的一部分。通过合理设计任务、设定优先级、实现调度器等方法，可以保证系统的高效运行。希望本篇博客对你了解多任务管理与调度器设计有所帮助。如果你有任何问题或建议，请随时在评论区留言。</p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 嵌入式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式笔记：嵌入式系统中的数据存储与文件系统选型</title>
      <link href="/2023/09/20/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E4%B8%8E%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E9%80%89%E5%9E%8B/"/>
      <url>/2023/09/20/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E4%B8%8E%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E9%80%89%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="嵌入式笔记：嵌入式系统中的数据存储与文件系统选型">嵌入式笔记：嵌入式系统中的数据存储与文件系统选型</h2><h3 id="引言">引言</h3><p>在嵌入式系统开发中，合适的数据存储方案和文件系统选型对于数据的读写和管理至关重要。本篇博客将介绍一些常用的数据存储方案以及文件系统选型原则，同时提供相应的业务代码示例。</p><h3 id="常用数据存储方案">常用数据存储方案</h3><h4 id="1-Flash存储">1. <strong>Flash存储</strong></h4><p>Flash存储是一种非易失性存储器，适用于嵌入式系统中的固件存储、配置数据等。</p><h4 id="2-RAM">2. <strong>RAM</strong></h4><p>RAM是一种易失性存储器，速度快，但断电后数据丢失，适用于临时数据存储。</p><h4 id="3-外部存储介质">3. <strong>外部存储介质</strong></h4><p>如SD卡、EEPROM等，可以扩展嵌入式系统的存储容量。</p><h3 id="文件系统选型原则">文件系统选型原则</h3><h4 id="1-考虑嵌入式系统的资源限制">1. <strong>考虑嵌入式系统的资源限制</strong></h4><p>选择一个轻量级的文件系统，避免过多的资源消耗。</p><h4 id="2-支持闪存控制器">2. <strong>支持闪存控制器</strong></h4><p>确保文件系统能够兼容所使用的闪存控制器，以保证稳定的数据存储和读取。</p><h4 id="3-考虑数据保护与恢复">3. <strong>考虑数据保护与恢复</strong></h4><p>选择一个具有良好的数据保护机制和恢复能力的文件系统，以防止数据丢失。</p><h3 id="数据存储示例：使用Flash存储">数据存储示例：使用Flash存储</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-comment">// 在Flash中存储数据</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">write_to_flash</span><span class="hljs-params">(<span class="hljs-type">int</span> address, <span class="hljs-type">char</span> data)</span> &#123;<br>    <span class="hljs-comment">// 写入数据到指定地址</span><br>    <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-comment">// 从Flash中读取数据</span><br><span class="hljs-type">char</span> <span class="hljs-title function_">read_from_flash</span><span class="hljs-params">(<span class="hljs-type">int</span> address)</span> &#123;<br>    <span class="hljs-comment">// 从指定地址读取数据</span><br>    <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> address = <span class="hljs-number">0x1000</span>;<br>    <span class="hljs-type">char</span> data = <span class="hljs-string">&#x27;H&#x27;</span>;<br>    write_to_flash(address, data);<br>    <span class="hljs-type">char</span> read_data = read_from_flash(address);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Read from Flash: %c\n&quot;</span>, read_data);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="结论">结论</h3><p>数据存储和文件系统选型是嵌入式系统开发中至关重要的环节。通过选择合适的数据存储方案和文件系统，可以保证数据的稳定性和可靠性。在实际应用中，根据项目需求和系统资源限制来选择最合适的方案。</p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 嵌入式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式笔记：嵌入式系统中的通信协议选择与实现</title>
      <link href="/2023/09/20/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE%E9%80%89%E6%8B%A9%E4%B8%8E%E5%AE%9E%E7%8E%B0/"/>
      <url>/2023/09/20/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE%E9%80%89%E6%8B%A9%E4%B8%8E%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="嵌入式笔记：嵌入式系统中的通信协议选择与实现">嵌入式笔记：嵌入式系统中的通信协议选择与实现</h2><h3 id="引言">引言</h3><p>在嵌入式系统开发中，选择合适的通信协议对于设备间的数据传输至关重要。本篇博客将介绍一些常用的通信协议，以及它们在嵌入式系统中的实现方法，同时提供相应的业务代码示例。</p><h3 id="常用通信协议介绍">常用通信协议介绍</h3><h4 id="1-UART通信">1. <strong>UART通信</strong></h4><p>UART是一种串行通信协议，适用于近距离设备之间的简单通信。它使用两根线（TX和RX）进行数据传输。</p><h4 id="2-SPI通信">2. <strong>SPI通信</strong></h4><p>SPI（Serial Peripheral Interface）是一种同步串行通信协议，适用于短距离高速数据传输。它使用四根线（MISO、MOSI、SCK、CS）。</p><h4 id="3-I2C通信">3. <strong>I2C通信</strong></h4><p>I2C（Inter-Integrated Circuit）是一种串行通信协议，适用于多个设备共享同一根总线的情况。它使用两根线（SDA和SCL）。</p><h4 id="4-CAN通信">4. <strong>CAN通信</strong></h4><p>CAN（Controller Area Network）是一种高可靠性的串行通信协议，常用于汽车电子和工控领域。</p><h3 id="UART通信的实现示例">UART通信的实现示例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">uart_init</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 初始化UART模块</span><br>    <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">uart_send</span><span class="hljs-params">(<span class="hljs-type">char</span> data)</span> &#123;<br>    <span class="hljs-comment">// 发送数据</span><br>    <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-type">char</span> <span class="hljs-title function_">uart_receive</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 接收数据</span><br>    <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    uart_init();<br>    uart_send(<span class="hljs-string">&#x27;H&#x27;</span>);<br>    uart_send(<span class="hljs-string">&#x27;i&#x27;</span>);<br>    <span class="hljs-type">char</span> received_data = uart_receive();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Received: %c\n&quot;</span>, received_data);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="SPI通信的实现示例">SPI通信的实现示例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">spi_init</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 初始化SPI模块</span><br>    <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">spi_send</span><span class="hljs-params">(<span class="hljs-type">char</span> data)</span> &#123;<br>    <span class="hljs-comment">// 发送数据</span><br>    <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-type">char</span> <span class="hljs-title function_">spi_receive</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 接收数据</span><br>    <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    spi_init();<br>    spi_send(<span class="hljs-string">&#x27;H&#x27;</span>);<br>    spi_send(<span class="hljs-string">&#x27;i&#x27;</span>);<br>    <span class="hljs-type">char</span> received_data = spi_receive();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Received: %c\n&quot;</span>, received_data);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="结论">结论</h3><p>选择合适的通信协议对于嵌入式系统的开发至关重要。本篇博客介绍了常用的UART、SPI、I2C和CAN通信协议，并提供了相应的业务框架代码示例以帮助你在项目中实现相应的通信功能。</p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 嵌入式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式笔记：中断处理与嵌入式系统性能优化</title>
      <link href="/2023/09/20/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%AC%94%E8%AE%B0%EF%BC%9A%E4%B8%AD%E6%96%AD%E5%A4%84%E7%90%86%E4%B8%8E%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
      <url>/2023/09/20/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%AC%94%E8%AE%B0%EF%BC%9A%E4%B8%AD%E6%96%AD%E5%A4%84%E7%90%86%E4%B8%8E%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="嵌入式笔记：中断处理与嵌入式系统性能优化"><strong>嵌入式笔记：中断处理与嵌入式系统性能优化</strong></h2><p>在嵌入式系统中，中断处理是一个至关重要的方面，它可以帮助系统及时响应外部事件，提高系统的实时性和稳定性。</p><h3 id="1-中断处理的基本原理"><strong>1. 中断处理的基本原理</strong></h3><p>中断是一种硬件或软件触发的事件，它会打断当前正在执行的程序流程，转而执行与之相关的中断服务程序（ISR）。ISR通常用于处理特定的事件或情况，然后返回到原来的程序流程。</p><h3 id="2-中断优先级与处理流程"><strong>2. 中断优先级与处理流程</strong></h3><p>不同的中断可以有不同的优先级，高优先级的中断会打断低优先级的中断。因此，需要合理设置中断优先级以确保关键事件能够得到及时处理。</p><h3 id="3-中断与任务调度"><strong>3. 中断与任务调度</strong></h3><p>中断处理可以与任务调度结合使用，例如通过中断处理器中的定时器中断来触发任务的执行，从而实现多任务系统的高效运行。</p><h3 id="中断处理的优化方法"><strong>中断处理的优化方法</strong></h3><h4 id="1-最小化中断服务程序的执行时间"><strong>1. 最小化中断服务程序的执行时间</strong></h4><p>中断服务程序应该尽可能地简洁和高效，避免在其中执行耗时过长的操作。</p><h4 id="2-合理使用临界区保护关键资源"><strong>2. 合理使用临界区保护关键资源</strong></h4><p>在中断服务程序中访问共享资源时，需要使用临界区保护，以防止出现竞态条件。</p><h4 id="3-合理配置中断控制器"><strong>3. 合理配置中断控制器</strong></h4><p>中断控制器的配置可以影响中断的响应时间和优先级，需要根据实际需求进行合理的配置。</p><h3 id="示例：中断处理的简单应用"><strong>示例：中断处理的简单应用</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">GPIO_ISR</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 处理GPIO中断事件</span><br>    <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setup_interrupt</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 配置GPIO为中断引脚</span><br>    <span class="hljs-built_in">configure_GPIO_interrupt</span>();<br>    <br>    <span class="hljs-comment">// 注册中断服务程序</span><br>    <span class="hljs-built_in">register_ISR</span>(GPIO_ISR);<br>    <br>    <span class="hljs-comment">// 启用中断</span><br>    <span class="hljs-built_in">enable_interrupt</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="结论"><strong>结论</strong></h3><p>中断处理是嵌入式系统实现实时响应的重要手段。通过合理配置中断优先级、最小化中断服务程序的执行时间等优化方法，可以提高系统的性能和稳定性。</p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 嵌入式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式笔记：嵌入式系统中的实时时钟和定时器的应用与优化</title>
      <link href="/2023/09/20/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E5%AE%9E%E6%97%B6%E6%97%B6%E9%92%9F%E5%92%8C%E5%AE%9A%E6%97%B6%E5%99%A8%E7%9A%84%E5%BA%94%E7%94%A8%E4%B8%8E%E4%BC%98%E5%8C%96/"/>
      <url>/2023/09/20/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E5%AE%9E%E6%97%B6%E6%97%B6%E9%92%9F%E5%92%8C%E5%AE%9A%E6%97%B6%E5%99%A8%E7%9A%84%E5%BA%94%E7%94%A8%E4%B8%8E%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="嵌入式笔记：嵌入式系统中的实时时钟和定时器的应用与优化">嵌入式笔记：嵌入式系统中的实时时钟和定时器的应用与优化</h2><h3 id="引言">引言</h3><p>在嵌入式系统中，实时时钟和定时器是至关重要的组件，它们可以用于实现任务调度、时间测量、周期性操作等功能。本篇博客将介绍实时时钟和定时器的基本原理，以及在嵌入式系统中的应用和优化方法。</p><h3 id="实时时钟与定时器的基本原理">实时时钟与定时器的基本原理</h3><h4 id="1-实时时钟（RTC）">1. 实时时钟（RTC）</h4><p>实时时钟是一个能够提供准确时间的硬件模块，通常包括一个计数器和一个时钟源。它可以独立于处理器运行，即使系统关机也能保持计时。</p><h4 id="2-定时器">2. 定时器</h4><p>定时器是一个用于生成特定时间间隔的硬件模块，它可以用于任务调度、测量时间等应用场景。通常包括计数器、比较器等组件。</p><h3 id="实时时钟和定时器的应用">实时时钟和定时器的应用</h3><h4 id="1-精确时间测量">1. 精确时间测量</h4><p>利用实时时钟和定时器可以实现对事件的精确时间测量，用于性能分析或者控制算法。</p><h4 id="2-周期性操作">2. 周期性操作</h4><p>定时器可以用于实现周期性的任务，例如定时采样传感器数据、定时发送数据等。</p><h4 id="3-睡眠与唤醒策略">3. 睡眠与唤醒策略</h4><p>实时时钟可以用于设定唤醒时间，从而实现低功耗睡眠模式。</p><h3 id="实时时钟和定时器的优化方法">实时时钟和定时器的优化方法</h3><h4 id="1-合理选择时钟源">1. 合理选择时钟源</h4><p>选择合适的时钟源对于保证实时时钟的准确性至关重要，特别是在没有网络连接的情况下。</p><h4 id="2-合理配置定时器参数">2. 合理配置定时器参数</h4><p>根据应用场景，选择合适的定时器模式、频率和计数值，以满足实际需求。</p><h4 id="3-硬件加速计数">3. 硬件加速计数</h4><p>一些处理器提供了硬件加速计数功能，可以提高定时器的计数效率。</p><h3 id="示例：定时器的简单应用">示例：定时器的简单应用</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setup_timer</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 配置定时器模式和参数</span><br>    <span class="hljs-built_in">configure_timer_mode</span>();<br>    <br>    <span class="hljs-comment">// 设置比较值，决定定时器中断的触发时机</span><br>    <span class="hljs-built_in">set_compare_value</span>();<br>    <br>    <span class="hljs-comment">// 启动定时器</span><br>    <span class="hljs-built_in">start_timer</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="结论">结论</h3><p>实时时钟和定时器是嵌入式系统开发中不可或缺的组件，它们可以用于实现时间测量、任务调度等功能。通过合理选择时钟源、配置定时器参数等优化方法，可以最大限度地发挥它们的作用。</p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 嵌入式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式笔记：嵌入式系统中的电源管理与低功耗设计</title>
      <link href="/2023/09/20/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E5%8A%9F%E8%80%97%E4%BC%98%E5%8C%96%E4%B8%8E%E4%BD%8E%E5%8A%9F%E8%80%97%E8%AE%BE%E8%AE%A1%E7%AD%96%E7%95%A5/"/>
      <url>/2023/09/20/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E5%8A%9F%E8%80%97%E4%BC%98%E5%8C%96%E4%B8%8E%E4%BD%8E%E5%8A%9F%E8%80%97%E8%AE%BE%E8%AE%A1%E7%AD%96%E7%95%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="嵌入式笔记：嵌入式系统中的电源管理与低功耗设计">嵌入式笔记：嵌入式系统中的电源管理与低功耗设计</h2><h3 id="引言">引言</h3><p>在嵌入式系统开发中，电源管理和低功耗设计是确保设备长时间稳定运行的关键。随着物联网设备和便携式电子产品的普及，低功耗设计变得尤为重要。本篇博客将详细介绍嵌入式系统中的电源管理策略、低功耗设计原则、具体的实现方法和实际应用实例，同时提供相应的业务代码示例，帮助读者更好地理解和应用这些技术。</p><h3 id="1-电源管理概述">1. 电源管理概述</h3><h4 id="1-1-电源管理的重要性">1.1 电源管理的重要性</h4><p>电源管理在嵌入式系统中起着至关重要的作用，主要体现在以下几个方面：</p><ul><li><strong>延长电池寿命</strong>：对于电池供电的嵌入式设备来说，电源管理可以有效延长设备的运行时间。通过降低功耗，可以减少电池的放电速率，从而延长设备的使用寿命。</li><li><strong>降低能耗</strong>：减少系统的功耗不仅有助于环保，还能降低运营成本。特别是在大规模部署的物联网设备中，降低每个设备的功耗可以显著减少整体能耗。</li><li><strong>提高系统可靠性</strong>：通过合理的电源管理，可以减少热量产生，进而提高系统的稳定性和可靠性。过高的功耗会导致设备发热，从而影响系统性能和寿命。</li><li><strong>满足设计规范</strong>：许多嵌入式系统，特别是便携式设备，需要满足严格的功耗规范和标准。有效的电源管理有助于确保设备符合这些规范。</li></ul><h4 id="1-2-电源管理的主要策略">1.2 电源管理的主要策略</h4><p>电源管理主要包括以下几种策略：</p><ul><li><strong>动态电压与频率调节（DVFS）</strong>：通过调节处理器的电压和频率，达到降低功耗的目的。在处理器负载较轻时，可以降低频率和电压，以减少功耗。在处理器负载较重时，可以提高频率和电压，以提高性能。</li><li><strong>电源域控制</strong>：将系统划分为多个电源域，根据需要对不同电源域进行独立控制。例如，可以在不需要使用某个外设时关闭其电源域，以节省功耗。</li><li><strong>睡眠模式与待机模式</strong>：在不需要工作时，将系统置于低功耗的睡眠模式或待机模式。这些模式可以显著降低系统的功耗，但需要考虑唤醒时间和响应速度。</li><li><strong>硬件加速</strong>：利用硬件加速器执行特定任务，减少处理器负担，从而降低功耗。例如，使用专用的加密芯片进行加密运算，而不是使用通用处理器进行软件加密。</li><li><strong>高效电源转换</strong>：使用高效的电源转换器，如DCDC转换器，减少电能损耗，提高电源使用效率。</li><li><strong>电源监测与管理</strong>：通过实时监测电源使用情况，动态调整电源策略，以优化功耗。</li></ul><h3 id="2-低功耗设计原则">2. 低功耗设计原则</h3><p>低功耗设计需要从硬件和软件两个方面进行考虑。以下是一些常见的低功耗设计原则：</p><h4 id="2-1-硬件设计原则">2.1 硬件设计原则</h4><ul><li><strong>选择低功耗器件</strong>：在硬件设计时，选择低功耗的微控制器、传感器和其他外设。例如，选择具有低功耗模式的微控制器、使用低功耗传感器等。</li><li><strong>优化电路设计</strong>：通过优化电路设计，减少电路中的能量损耗。例如，减少电路中的电阻和电感、优化PCB布局以减少信号干扰等。</li><li><strong>使用电源管理芯片</strong>：利用专用的电源管理芯片（PMIC）进行电源管理，提高系统效率。PMIC可以集成多种电源管理功能，如电源转换、充电管理、电池监测等。</li><li><strong>减少不必要的电源消耗</strong>：关闭或断电不使用的模块和外设，避免不必要的电源消耗。例如，在不需要使用显示屏时关闭其电源，在不需要使用无线通信模块时关闭其电源等。</li><li><strong>优化电源路径</strong>：确保电源路径的最小损耗，减少电源转换过程中的能量损耗。例如，选择高效的电源转换器，减少电源路径中的电阻和电感等。</li></ul><h4 id="2-2-软件设计原则">2.2 软件设计原则</h4><ul><li><strong>减少处理器负载</strong>：通过优化代码，减少处理器的负载，降低功耗。例如，优化算法以提高执行效率，减少不必要的计算和操作等。</li><li><strong>利用低功耗模式</strong>：在不需要工作时，将处理器和外设置于低功耗模式。例如，在不需要处理任务时将处理器置于睡眠模式，在不需要使用某个外设时关闭其电源等。</li><li><strong>中断与事件驱动</strong>：采用中断和事件驱动机制，避免不必要的轮询操作，降低功耗。例如，使用中断机制来响应外部事件，而不是通过轮询机制来检测外部事件。</li><li><strong>减少内存访问</strong>：减少频繁的内存访问，以降低功耗。例如，将常用的数据保存在寄存器中，减少对外部存储器的访问等。</li><li><strong>优化任务调度</strong>：通过合理的任务调度，减少处理器的工作负载，提高系统效率。例如，合理安排任务的执行顺序，避免不必要的任务切换等。</li><li><strong>减少通信功耗</strong>：优化通信协议，减少通信过程中的功耗。例如，选择低功耗的无线通信协议，减少通信数据量和通信频率等。</li></ul><h3 id="3-低功耗设计的实现方法">3. 低功耗设计的实现方法</h3><h4 id="3-1-动态电压与频率调节（DVFS）">3.1 动态电压与频率调节（DVFS）</h4><p>DVFS是一种通过调节处理器电压和频率来降低功耗的方法。在处理器负载较轻时，可以降低频率和电压，以减少功耗。在处理器负载较重时，可以提高频率和电压，以提高性能。以下是一个基于STM32微控制器的DVFS实现示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stm32f4xx.h&quot;</span></span><br><br><span class="hljs-comment">// 初始化系统时钟</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">SystemClock_Config</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    <span class="hljs-comment">// 配置系统时钟为100MHz</span><br>    RCC_OscInitTypeDef RCC_OscInitStruct = &#123;<span class="hljs-number">0</span>&#125;;<br>    RCC_ClkInitTypeDef RCC_ClkInitStruct = &#123;<span class="hljs-number">0</span>&#125;;<br><br>    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;<br>    RCC_OscInitStruct.HSEState = RCC_HSE_ON;<br>    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;<br>    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;<br>    RCC_OscInitStruct.PLL.PLLM = <span class="hljs-number">8</span>;<br>    RCC_OscInitStruct.PLL.PLLN = <span class="hljs-number">400</span>;<br>    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;<br>    RCC_OscInitStruct.PLL.PLLQ = <span class="hljs-number">7</span>;<br>    <span class="hljs-keyword">if</span> (HAL_RCC_OscConfig(&amp;RCC_OscInitStruct) != HAL_OK) &#123;<br>        <span class="hljs-comment">// 初始化错误处理</span><br>    &#125;<br><br>    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;<br>    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;<br>    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;<br>    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;<br>    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;<br>    <span class="hljs-keyword">if</span> (HAL_RCC_ClockConfig(&amp;RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) &#123;<br>        <span class="hljs-comment">// 初始化错误处理</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 调整系统频率</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">SetSystemFrequency</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> frequency)</span> &#123;<br>    <span class="hljs-comment">// 根据需求调整系统频率</span><br>    <span class="hljs-comment">// 示例：设置系统频率为50MHz</span><br>    RCC_OscInitTypeDef RCC_OscInitStruct = &#123;<span class="hljs-number">0</span>&#125;;<br>    RCC_ClkInitTypeDef RCC_ClkInitStruct = &#123;<span class="hljs-number">0</span>&#125;;<br><br>    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;<br>    RCC_OscInitStruct.HSEState = RCC_HSE_ON;<br>    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;<br>    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;<br>    RCC_OscInitStruct.PLL.PLLM = <span class="hljs-number">8</span>;<br>    RCC_OscInitStruct.PLL.PLLN = <span class="hljs-number">400</span>;<br>    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8; <span class="hljs-comment">// 修改PLL倍频因子</span><br>    RCC_OscInitStruct.PLL.PLLQ = <span class="hljs-number">7</span>;<br>    <span class="hljs-keyword">if</span> (HAL_RCC_OscConfig(&amp;RCC_OscInitStruct) != HAL_OK) &#123;<br>        <span class="hljs-comment">// 初始化错误处理</span><br>    &#125;<br><br>    RCC_ClkInitStruct.ClockType = RCC<br><br>_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;<br>    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;<br>    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;<br>    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;<br>    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;<br>    <span class="hljs-keyword">if</span> (HAL_RCC_ClockConfig(&amp;RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) &#123;<br>        <span class="hljs-comment">// 初始化错误处理</span><br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    HAL_Init();<br>    SystemClock_Config();<br><br>    <span class="hljs-comment">// 设置系统频率为50MHz以降低功耗</span><br>    SetSystemFrequency(<span class="hljs-number">50000000</span>);<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">// 主循环</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-2-电源域控制">3.2 电源域控制</h4><p>电源域控制是一种将系统划分为多个电源域，并根据需要对不同电源域进行独立控制的方法。在一些复杂的嵌入式系统中，可以通过电源域控制来管理不同模块的电源状态，从而实现低功耗设计。以下是一个基于TI的MSP430微控制器的电源域控制示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;msp430.h&quot;</span></span><br><br><span class="hljs-comment">// 初始化电源域</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">PowerDomain_Init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    <span class="hljs-comment">// 配置电源域</span><br>    <span class="hljs-comment">// 示例：使能电源域1，禁用电源域2</span><br>    PMMCTL0_H = PMMPW_H; <span class="hljs-comment">// 解锁PMM寄存器</span><br>    PMMCTL0_L = PMMPW_L; <span class="hljs-comment">// 锁定PMM寄存器</span><br>    PMMCTL0 &amp;= ~PMMPW;   <span class="hljs-comment">// 禁用电源域2</span><br>    PMMCTL0 |= PMMPW;    <span class="hljs-comment">// 使能电源域1</span><br>&#125;<br><br><span class="hljs-comment">// 切换电源域状态</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">PowerDomain_Switch</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> domain, <span class="hljs-type">uint8_t</span> state)</span> &#123;<br>    <span class="hljs-comment">// 根据需求切换电源域状态</span><br>    <span class="hljs-keyword">if</span> (domain == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">if</span> (state == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-comment">// 使能电源域1</span><br>            PMMCTL0_H = PMMPW_H; <span class="hljs-comment">// 解锁PMM寄存器</span><br>            PMMCTL0_L = PMMPW_L; <span class="hljs-comment">// 锁定PMM寄存器</span><br>            PMMCTL0 |= PMMPW;    <span class="hljs-comment">// 使能电源域1</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 禁用电源域1</span><br>            PMMCTL0_H = PMMPW_H; <span class="hljs-comment">// 解锁PMM寄存器</span><br>            PMMCTL0_L = PMMPW_L; <span class="hljs-comment">// 锁定PMM寄存器</span><br>            PMMCTL0 &amp;= ~PMMPW;   <span class="hljs-comment">// 禁用电源域1</span><br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (domain == <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-keyword">if</span> (state == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-comment">// 使能电源域2</span><br>            PMMCTL0_H = PMMPW_H; <span class="hljs-comment">// 解锁PMM寄存器</span><br>            PMMCTL0_L = PMMPW_L; <span class="hljs-comment">// 锁定PMM寄存器</span><br>            PMMCTL0 |= PMMPW;    <span class="hljs-comment">// 使能电源域2</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 禁用电源域2</span><br>            PMMCTL0_H = PMMPW_H; <span class="hljs-comment">// 解锁PMM寄存器</span><br>            PMMCTL0_L = PMMPW_L; <span class="hljs-comment">// 锁定PMM寄存器</span><br>            PMMCTL0 &amp;= ~PMMPW;   <span class="hljs-comment">// 禁用电源域2</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    WDTCTL = WDTPW | WDTHOLD; <span class="hljs-comment">// 停止看门狗</span><br><br>    PowerDomain_Init();<br><br>    <span class="hljs-comment">// 切换电源域状态</span><br>    PowerDomain_Switch(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">// 使能电源域1</span><br>    PowerDomain_Switch(<span class="hljs-number">2</span>, <span class="hljs-number">0</span>); <span class="hljs-comment">// 禁用电源域2</span><br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">// 主循环</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-3-睡眠模式与待机模式">3.3 睡眠模式与待机模式</h4><p>睡眠模式和待机模式是降低系统功耗的常用方法。当系统处于不活动状态时，可以进入睡眠模式或待机模式，以减少功耗。以下是一个基于AVR微控制器的睡眠模式示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;avr/io.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;avr/sleep.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;avr/interrupt.h&gt;</span></span><br><br><span class="hljs-comment">// 初始化睡眠模式</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">SleepMode_Init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    <span class="hljs-comment">// 配置睡眠模式</span><br>    set_sleep_mode(SLEEP_MODE_PWR_DOWN);<br>&#125;<br><br><span class="hljs-comment">// 启用睡眠模式</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">Enter_Sleep</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    sleep_enable();<br>    sei();  <span class="hljs-comment">// 使能中断</span><br>    sleep_cpu();  <span class="hljs-comment">// 进入睡眠模式</span><br>    sleep_disable();<br>&#125;<br><br><span class="hljs-comment">// 中断服务程序</span><br>ISR(INT0_vect) &#123;<br>    <span class="hljs-comment">// 处理中断</span><br>    <span class="hljs-comment">// 在这里添加中断处理代码</span><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    <span class="hljs-comment">// 配置外部中断</span><br>    EIMSK |= (<span class="hljs-number">1</span> &lt;&lt; INT0);  <span class="hljs-comment">// 使能外部中断0</span><br>    EICRA |= (<span class="hljs-number">1</span> &lt;&lt; ISC01); <span class="hljs-comment">// 配置中断触发方式（下降沿触发）</span><br><br>    SleepMode_Init();<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        Enter_Sleep();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-实际应用实例">4. 实际应用实例</h3><h4 id="4-1-物联网设备">4.1 物联网设备</h4><p>在物联网设备中，电源管理和低功耗设计尤为重要。物联网设备通常需要长时间运行，并且往往依赖电池供电。以下是一个物联网温湿度传感器的设计示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Wire.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;LowPower.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;DHT.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DHTPIN 2     <span class="hljs-comment">// 传感器连接到的引脚</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DHTTYPE DHT11   <span class="hljs-comment">// DHT11 类型传感器</span></span><br><br>DHT <span class="hljs-title function_">dht</span><span class="hljs-params">(DHTPIN, DHTTYPE)</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">()</span> &#123;<br>  Wire.begin();<br>  dht.begin();<br>  Serial.begin(<span class="hljs-number">9600</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">loop</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-comment">// 读取温度和湿度</span><br>  <span class="hljs-type">float</span> h = dht.readHumidity();<br>  <span class="hljs-type">float</span> t = dht.readTemperature();<br><br>  <span class="hljs-comment">// 打印温度和湿度</span><br>  Serial.print(<span class="hljs-string">&quot;Humidity: &quot;</span>);<br>  Serial.print(h);<br>  Serial.print(<span class="hljs-string">&quot; %\t&quot;</span>);<br>  Serial.print(<span class="hljs-string">&quot;Temperature: &quot;</span>);<br>  Serial.print(t);<br>  Serial.println(<span class="hljs-string">&quot; *C&quot;</span>);<br><br>  <span class="hljs-comment">// 进入低功耗模式，睡眠8秒</span><br>  LowPower.powerDown(SLEEP_8S, ADC_OFF, BOD_OFF);<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个示例中，传感器每8秒读取一次温度和湿度数据，然后进入低功耗模式，以节省电能。</p><h4 id="4-2-便携式医疗设备">4.2 便携式医疗设备</h4><p>便携式医疗设备通常需要长时间运行，并且对功耗有严格要求。以下是一个便携式心率监测设备的设计示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Wire.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;LowPower.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;PulseSensor.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PULSE_PIN A0   <span class="hljs-comment">// 心率传感器连接到的引脚</span></span><br><br>PulseSensor pulseSensor;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">()</span> &#123;<br>  Wire.begin();<br>  pulseSensor.analogInput(PULSE_PIN);<br>  pulseSensor.begin();<br>  Serial.begin(<span class="hljs-number">9600</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">loop</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-comment">// 读取心率数据</span><br>  <span class="hljs-type">int</span> myBPM = pulseSensor.getBeatsPerMinute();<br><br>  <span class="hljs-comment">// 打印心率数据</span><br>  Serial.print(<span class="hljs-string">&quot;Heart rate: &quot;</span>);<br>  Serial.print(myBPM);<br>  Serial.println(<span class="hljs-string">&quot; BPM&quot;</span>);<br><br>  <span class="hljs-comment">// 进入低功耗模式，睡眠8秒</span><br>  LowPower.powerDown(SLEEP_8S, ADC_OFF, BOD_OFF);<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个示例中，设备每8秒读取一次心率数据，然后进入低功耗模式，以延长电池寿命。</p><h4 id="4-3-智能家居设备">4.3 智能家居设备</h4><p>智能家居设备需要长期稳定运行，同时具备低功耗特性。以下是一个智能灯光控制设备的设计示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Wire.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;LowPower.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;IRremote.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> RECV_PIN 11   <span class="hljs-comment">// 红外接收器连接到的引脚</span></span><br><br>IRrecv <span class="hljs-title function_">irrecv</span><span class="hljs-params">(RECV_PIN)</span>;<br>decode_results results;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">()</span> &#123;<br>  Wire.begin();<br>  irrecv.enableIRIn(); <span class="hljs-comment">// 启用红外接收器</span><br>  Serial.begin(<span class="hljs-number">9600</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">loop</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-comment">// 检测红外信号</span><br>  <span class="hljs-keyword">if</span> (irrecv.decode(&amp;results)) &#123;<br>    Serial.println(results.value, HEX);<br>    irrecv.resume(); <span class="hljs-comment">// 接收下一个红外信号</span><br>  &#125;<br><br>  <span class="hljs-comment">// 进入低功耗模式，睡眠1秒</span><br>  LowPower.powerDown(SLEEP_1S, ADC_OFF, BOD_OFF);<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个示例中，设备每秒检测一次红外信号，然后进入低功耗模式，以节省电能。</p><h3 id="结论">结论</h3><p>电源管理和低功耗设计在嵌入式系统开发中具有重要意义。通过动态电压与频率调节、电源域控制、睡眠模式与待机模式等方法，可以有效降低系统功耗，延长电池寿命，提升系统可靠性。实际应用中，可以根据具体需求选择合适的电源管理策略和低功耗设计方法。希望本篇博客对你了解电源管理与低功耗设计有所帮助。如果你有任何问题或建议，请随时在评论区留言。</p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 嵌入式 </tag>
            
            <tag> 功耗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式笔记：嵌入式系统中的异常处理与调试技巧</title>
      <link href="/2023/09/20/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E4%B8%8E%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/"/>
      <url>/2023/09/20/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E4%B8%8E%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="嵌入式笔记：嵌入式系统中的异常处理与调试技巧">嵌入式笔记：嵌入式系统中的异常处理与调试技巧</h2><h3 id="引言">引言</h3><p>在嵌入式系统开发中，异常处理和调试技巧是至关重要的，它们可以帮助你快速定位和解决问题，提高系统的稳定性和可靠性。本篇博客将介绍一些常用的异常处理和调试技巧，帮助你在嵌入式项目中优化开发流程。</p><h3 id="异常处理的基本原则">异常处理的基本原则</h3><h4 id="1-日志记录">1. 日志记录</h4><p>在系统中合理记录日志信息，包括错误信息、警告和调试信息，以便后续分析和定位问题。</p><h4 id="2-异常状态处理">2. 异常状态处理</h4><p>在代码中实现异常状态的处理逻辑，包括错误返回码、异常情况下的恢复策略等。</p><h4 id="3-硬件监控">3. 硬件监控</h4><p>利用硬件的监控功能，如看门狗定时器，可以在系统出现异常情况时进行重启或者其他应对措施。</p><h3 id="常用调试技巧">常用调试技巧</h3><h4 id="1-使用调试器">1. 使用调试器</h4><p>借助调试器（如GDB），可以在开发过程中单步执行代码、查看变量值等，快速定位问题。</p><h4 id="2-使用断言">2. 使用断言</h4><p>在关键逻辑点上添加断言，用于检查程序的假设是否成立，一旦断言失败将会暂停程序执行。</p><h4 id="3-代码复审">3. 代码复审</h4><p>进行代码复审是一种有效的发现潜在问题的方法，可以借助团队成员共同审查代码。</p><h3 id="示例：使用断言进行调试">示例：使用断言进行调试</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cassert&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">divide</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    <span class="hljs-built_in">assert</span>(b != <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-string">&quot;Division by zero!&quot;</span>); <span class="hljs-comment">// 断言，如果b为0则会暂停程序</span><br>    <span class="hljs-type">int</span> result = a / b;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="结论">结论</h3><p>异常处理和调试技巧是嵌入式系统开发中不可或缺的一部分。通过合理记录日志、处理异常状态，以及借助调试器、断言等工具，可以帮助你快速定位和解决问题，提高系统的稳定性和可靠性。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C++通用工具类：队列</title>
      <link href="/2023/09/18/C-%E9%80%9A%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB%EF%BC%9A%E9%98%9F%E5%88%97/"/>
      <url>/2023/09/18/C-%E9%80%9A%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB%EF%BC%9A%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h2 id="标题：C-通用工具类：队列"><strong>标题：C++通用工具类：队列</strong></h2><p><strong>简介：</strong>队列是一种常用的数据结构，它遵循先进先出（FIFO）的原则。在C++中，我们可以编写通用的工具类来实现队列的基本操作。</p><p><strong>正文：</strong></p><p><strong>1. 实现一个通用的队列类</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Queue</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    std::queue&lt;T&gt; elements;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">enqueue</span><span class="hljs-params">(<span class="hljs-type">const</span> T&amp; element)</span> </span>&#123;<br>        elements.<span class="hljs-built_in">push</span>(element);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dequeue</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!elements.<span class="hljs-built_in">empty</span>()) &#123;<br>            elements.<span class="hljs-built_in">pop</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function">T <span class="hljs-title">front</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!elements.<span class="hljs-built_in">empty</span>()) &#123;<br>            <span class="hljs-keyword">return</span> elements.<span class="hljs-built_in">front</span>();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> std::<span class="hljs-built_in">runtime_error</span>(<span class="hljs-string">&quot;Queue is empty.&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> elements.<span class="hljs-built_in">empty</span>();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>2. 使用示例</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Queue&lt;<span class="hljs-type">int</span>&gt; intQueue;<br>    intQueue.<span class="hljs-built_in">enqueue</span>(<span class="hljs-number">10</span>);<br>    intQueue.<span class="hljs-built_in">enqueue</span>(<span class="hljs-number">20</span>);<br>    intQueue.<span class="hljs-built_in">enqueue</span>(<span class="hljs-number">30</span>);<br><br>    <span class="hljs-keyword">while</span> (!intQueue.<span class="hljs-built_in">isEmpty</span>()) &#123;<br>        std::cout &lt;&lt; intQueue.<span class="hljs-built_in">front</span>() &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        intQueue.<span class="hljs-built_in">dequeue</span>();<br>    &#125;<br><br>    std::cout &lt;&lt; std::endl;<br><br>    Queue&lt;std::string&gt; stringQueue;<br>    stringQueue.<span class="hljs-built_in">enqueue</span>(<span class="hljs-string">&quot;Hello&quot;</span>);<br>    stringQueue.<span class="hljs-built_in">enqueue</span>(<span class="hljs-string">&quot;World&quot;</span>);<br>    stringQueue.<span class="hljs-built_in">enqueue</span>(<span class="hljs-string">&quot;OpenAI&quot;</span>);<br><br>    <span class="hljs-keyword">while</span> (!stringQueue.<span class="hljs-built_in">isEmpty</span>()) &#123;<br>        std::cout &lt;&lt; stringQueue.<span class="hljs-built_in">front</span>() &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        stringQueue.<span class="hljs-built_in">dequeue</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>结论：</strong></p><p>通用工具类可以帮助我们简化许多常见的任务，例如实现常用的数据结构。在C++中，我们可以编写这样的工具类来提高代码的可重用性和可维护性。</p>]]></content>
      
      
      <categories>
          
          <category> C++通用工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++通用工具类：栈</title>
      <link href="/2023/09/18/C-%E9%80%9A%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB%EF%BC%9A%E6%A0%88/"/>
      <url>/2023/09/18/C-%E9%80%9A%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB%EF%BC%9A%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<h2 id="标题：C-通用工具类：栈"><strong>标题：C++通用工具类：栈</strong></h2><p><strong>简介：</strong>栈是一种常用的数据结构，它遵循后进先出（LIFO）的原则。在C++中，我们可以编写通用的工具类来实现栈的基本操作。</p><p><strong>正文：</strong></p><p><strong>1. 实现一个通用的栈类</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Stack</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    std::vector&lt;T&gt; elements;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">const</span> T&amp; element)</span> </span>&#123;<br>        elements.<span class="hljs-built_in">push_back</span>(element);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!elements.<span class="hljs-built_in">empty</span>()) &#123;<br>            elements.<span class="hljs-built_in">pop_back</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function">T <span class="hljs-title">top</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!elements.<span class="hljs-built_in">empty</span>()) &#123;<br>            <span class="hljs-keyword">return</span> elements.<span class="hljs-built_in">back</span>();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> std::<span class="hljs-built_in">runtime_error</span>(<span class="hljs-string">&quot;Stack is empty.&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> elements.<span class="hljs-built_in">empty</span>();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>2. 使用示例</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Stack&lt;<span class="hljs-type">int</span>&gt; intStack;<br>    intStack.<span class="hljs-built_in">push</span>(<span class="hljs-number">10</span>);<br>    intStack.<span class="hljs-built_in">push</span>(<span class="hljs-number">20</span>);<br>    intStack.<span class="hljs-built_in">push</span>(<span class="hljs-number">30</span>);<br><br>    <span class="hljs-keyword">while</span> (!intStack.<span class="hljs-built_in">isEmpty</span>()) &#123;<br>        std::cout &lt;&lt; intStack.<span class="hljs-built_in">top</span>() &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        intStack.<span class="hljs-built_in">pop</span>();<br>    &#125;<br><br>    std::cout &lt;&lt; std::endl;<br><br>    Stack&lt;std::string&gt; stringStack;<br>    stringStack.<span class="hljs-built_in">push</span>(<span class="hljs-string">&quot;Hello&quot;</span>);<br>    stringStack.<span class="hljs-built_in">push</span>(<span class="hljs-string">&quot;World&quot;</span>);<br>    stringStack.<span class="hljs-built_in">push</span>(<span class="hljs-string">&quot;OpenAI&quot;</span>);<br><br>    <span class="hljs-keyword">while</span> (!stringStack.<span class="hljs-built_in">isEmpty</span>()) &#123;<br>        std::cout &lt;&lt; stringStack.<span class="hljs-built_in">top</span>() &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        stringStack.<span class="hljs-built_in">pop</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>结论：</strong></p><p>通用工具类可以帮助我们简化许多常见的任务，例如实现常用的数据结构。在C++中，我们可以编写这样的工具类来提高代码的可重用性和可维护性。</p>]]></content>
      
      
      <categories>
          
          <category> C++通用工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++通用工具类：配置文件读取</title>
      <link href="/2023/09/18/C-%E9%80%9A%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB%EF%BC%9A%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96/"/>
      <url>/2023/09/18/C-%E9%80%9A%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB%EF%BC%9A%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<h2 id="标题：C-通用工具类：配置文件读取"><strong>标题：C++通用工具类：配置文件读取</strong></h2><p><strong>简介：</strong>在许多应用程序中，配置文件是用来存储程序配置信息的重要组成部分。在C++中，我们可以编写通用的工具类来简化配置文件的读取过程。</p><p><strong>正文：</strong></p><p><strong>1. 实现一个通用的配置文件读取函数</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConfigUtil</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    std::map&lt;std::string, std::string&gt; configMap;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">ConfigUtil</span>(<span class="hljs-type">const</span> std::string&amp; filepath) &#123;<br>        <span class="hljs-function">std::ifstream <span class="hljs-title">configFile</span><span class="hljs-params">(filepath)</span></span>;<br>        <span class="hljs-keyword">if</span> (configFile) &#123;<br>            std::string line;<br>            <span class="hljs-keyword">while</span> (std::<span class="hljs-built_in">getline</span>(configFile, line)) &#123;<br>                <span class="hljs-type">size_t</span> delimiterPos = line.<span class="hljs-built_in">find</span>(<span class="hljs-string">&#x27;=&#x27;</span>);<br>                <span class="hljs-keyword">if</span> (delimiterPos != std::string::npos) &#123;<br>                    std::string key = line.<span class="hljs-built_in">substr</span>(<span class="hljs-number">0</span>, delimiterPos);<br>                    std::string value = line.<span class="hljs-built_in">substr</span>(delimiterPos + <span class="hljs-number">1</span>);<br>                    configMap[key] = value;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> std::<span class="hljs-built_in">runtime_error</span>(<span class="hljs-string">&quot;Failed to open config file.&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function">std::string <span class="hljs-title">getValue</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; key)</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">auto</span> it = configMap.<span class="hljs-built_in">find</span>(key);<br>        <span class="hljs-keyword">if</span> (it != configMap.<span class="hljs-built_in">end</span>()) &#123;<br>            <span class="hljs-keyword">return</span> it-&gt;second;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>2. 使用示例</strong></p><p>假设配置文件（config.txt）内容如下：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">username</span><span class="hljs-operator">=</span>JohnDoe<br><span class="hljs-attribute">password</span><span class="hljs-operator">=</span>secretpassword<br><span class="hljs-attribute">server</span><span class="hljs-operator">=</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><br><span class="hljs-attribute">port</span><span class="hljs-operator">=</span><span class="hljs-number">8080</span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-function">ConfigUtil <span class="hljs-title">config</span><span class="hljs-params">(<span class="hljs-string">&quot;config.txt&quot;</span>)</span></span>;<br><br>        std::string username = config.<span class="hljs-built_in">getValue</span>(<span class="hljs-string">&quot;username&quot;</span>);<br>        std::string password = config.<span class="hljs-built_in">getValue</span>(<span class="hljs-string">&quot;password&quot;</span>);<br>        std::string server = config.<span class="hljs-built_in">getValue</span>(<span class="hljs-string">&quot;server&quot;</span>);<br>        std::string port = config.<span class="hljs-built_in">getValue</span>(<span class="hljs-string">&quot;port&quot;</span>);<br><br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Username: &quot;</span> &lt;&lt; username &lt;&lt; std::endl;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Password: &quot;</span> &lt;&lt; password &lt;&lt; std::endl;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Server: &quot;</span> &lt;&lt; server &lt;&lt; std::endl;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Port: &quot;</span> &lt;&lt; port &lt;&lt; std::endl;<br>    &#125; <span class="hljs-built_in">catch</span> (<span class="hljs-type">const</span> std::exception&amp; e) &#123;<br>        std::cerr &lt;&lt; <span class="hljs-string">&quot;Exception caught: &quot;</span> &lt;&lt; e.<span class="hljs-built_in">what</span>() &lt;&lt; std::endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>结论：</strong></p><p>通用工具类可以帮助我们简化许多常见的任务，例如配置文件读取。在C++中，我们可以编写这样的工具类来提高代码的可重用性和可维护性。</p>]]></content>
      
      
      <categories>
          
          <category> C++通用工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 配置文件读取 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++通用工具类：日志记录</title>
      <link href="/2023/09/18/C-%E9%80%9A%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB%EF%BC%9A%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/09/18/C-%E9%80%9A%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB%EF%BC%9A%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="标题：C-通用工具类：日志记录"><strong>标题：C++通用工具类：日志记录</strong></h2><p><strong>简介：</strong>日志记录是开发过程中必不可少的一环，它可以帮助我们跟踪程序的执行过程以及排查错误。在C++中，我们可以编写通用的工具类来简化日志记录的过程。</p><p><strong>正文：</strong></p><p><strong>1. 实现一个通用的日志记录函数</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctime&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LogUtil</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    std::ofstream logFile;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">LogUtil</span>(<span class="hljs-type">const</span> std::string&amp; filepath) &#123;<br>        logFile.<span class="hljs-built_in">open</span>(filepath, std::ios::out | std::ios::app);<br>        <span class="hljs-keyword">if</span> (!logFile.<span class="hljs-built_in">is_open</span>()) &#123;<br>            <span class="hljs-keyword">throw</span> std::<span class="hljs-built_in">runtime_error</span>(<span class="hljs-string">&quot;Failed to open log file.&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    ~<span class="hljs-built_in">LogUtil</span>() &#123;<br>        logFile.<span class="hljs-built_in">close</span>();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">log</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; message)</span> </span>&#123;<br>        std::<span class="hljs-type">time_t</span> currentTime = std::<span class="hljs-built_in">time</span>(<span class="hljs-number">0</span>);<br>        std::string timestamp = std::<span class="hljs-built_in">ctime</span>(&amp;currentTime);<br>        timestamp.<span class="hljs-built_in">pop_back</span>(); <span class="hljs-comment">// Remove the trailing newline character</span><br><br>        logFile &lt;&lt; <span class="hljs-string">&quot;[&quot;</span> &lt;&lt; timestamp &lt;&lt; <span class="hljs-string">&quot;] &quot;</span> &lt;&lt; message &lt;&lt; std::endl;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>2. 使用示例</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-function">LogUtil <span class="hljs-title">logger</span><span class="hljs-params">(<span class="hljs-string">&quot;logfile.txt&quot;</span>)</span></span>;<br>        logger.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;This is a log message.&quot;</span>);<br>        logger.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;Another log message.&quot;</span>);<br>    &#125; <span class="hljs-built_in">catch</span> (<span class="hljs-type">const</span> std::exception&amp; e) &#123;<br>        std::cerr &lt;&lt; <span class="hljs-string">&quot;Exception caught: &quot;</span> &lt;&lt; e.<span class="hljs-built_in">what</span>() &lt;&lt; std::endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>结论：</strong></p><p>通用工具类可以帮助我们简化许多常见的任务，例如日志记录。在C++中，我们可以编写这样的工具类来提高代码的可重用性和可维护性。</p>]]></content>
      
      
      <categories>
          
          <category> C++通用工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 日志记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式笔记：嵌入式系统中的实时操作系统（RTOS）介绍与应用</title>
      <link href="/2023/09/18/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E5%AE%9E%E6%97%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88RTOS%EF%BC%89%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%BA%94%E7%94%A8/"/>
      <url>/2023/09/18/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E5%AE%9E%E6%97%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88RTOS%EF%BC%89%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="嵌入式笔记：嵌入式系统中的实时操作系统（RTOS）介绍与应用">嵌入式笔记：嵌入式系统中的实时操作系统（RTOS）介绍与应用</h2><h3 id="引言">引言</h3><p>实时操作系统（RTOS）在嵌入式系统开发中扮演着重要角色，它可以提供任务调度、中断管理等功能，确保系统能够按时响应外部事件。本篇博客将介绍RTOS的基本概念、优势以及在嵌入式系统中的应用场景。</p><h3 id="RTOS的基本概念">RTOS的基本概念</h3><h4 id="1-任务（Task）">1. 任务（Task）</h4><p>RTOS允许程序员将应用程序拆分成多个独立的任务，每个任务可以独立运行。</p><h4 id="2-任务调度器（Scheduler）">2. 任务调度器（Scheduler）</h4><p>任务调度器负责决定哪个任务在特定时刻运行，它根据任务的优先级和状态进行调度。</p><h4 id="3-中断服务程序（ISR）">3. 中断服务程序（ISR）</h4><p>RTOS提供了对中断的支持，可以使系统在响应外部事件时快速切换到中断服务程序，处理紧急任务。</p><h3 id="RTOS的优势">RTOS的优势</h3><h4 id="1-实时性">1. 实时性</h4><p>RTOS可以确保任务在特定时间内执行，保证系统的实时性。</p><h4 id="2-多任务管理">2. 多任务管理</h4><p>RTOS能够有效地管理多个任务，分配CPU时间片，提高系统的利用率。</p><h4 id="3-中断处理">3. 中断处理</h4><p>RTOS提供了可靠的中断处理机制，保证在发生紧急事件时能够迅速响应。</p><h3 id="RTOS在嵌入式系统中的应用">RTOS在嵌入式系统中的应用</h3><h4 id="1-嵌入式控制系统">1. 嵌入式控制系统</h4><p>RTOS常用于控制系统中，保证系统能够按时响应外部传感器、执行控制算法等。</p><h4 id="2-通信系统">2. 通信系统</h4><p>在通信系统中，RTOS可以确保数据的及时传输和处理。</p><h4 id="3-实时监控系统">3. 实时监控系统</h4><p>RTOS在实时监控系统中发挥着重要作用，保证监控数据的实时性。</p><h3 id="示例：FreeRTOS的简单应用">示例：FreeRTOS的简单应用</h3><p>FreeRTOS是一个常用的开源RTOS，以下是一个简单的示例，展示了如何在FreeRTOS中创建任务：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">Task1</span><span class="hljs-params">(<span class="hljs-type">void</span> *pvParameters)</span> &#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">// 任务1的代码</span><br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Task2</span><span class="hljs-params">(<span class="hljs-type">void</span> *pvParameters)</span> &#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">// 任务2的代码</span><br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    xTaskCreate(Task1, <span class="hljs-string">&quot;Task1&quot;</span>, <span class="hljs-number">100</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">1</span>, <span class="hljs-literal">NULL</span>);<br>    xTaskCreate(Task2, <span class="hljs-string">&quot;Task2&quot;</span>, <span class="hljs-number">100</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">2</span>, <span class="hljs-literal">NULL</span>);<br>    vTaskStartScheduler();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="结论">结论</h3><p>实时操作系统（RTOS）是嵌入式系统开发中的重要组成部分，它提供了任务调度、中断处理等功能，保证了系统的实时性和稳定性。通过合理应用RTOS，可以提高嵌入式系统的性能和可靠性。</p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 嵌入式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式笔记：优化嵌入式系统的电源管理策略</title>
      <link href="/2023/09/18/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%AC%94%E8%AE%B0%EF%BC%9A%E4%BC%98%E5%8C%96%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%94%B5%E6%BA%90%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/"/>
      <url>/2023/09/18/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%AC%94%E8%AE%B0%EF%BC%9A%E4%BC%98%E5%8C%96%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%94%B5%E6%BA%90%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="嵌入式笔记：优化嵌入式系统的电源管理策略">嵌入式笔记：优化嵌入式系统的电源管理策略</h2><h3 id="引言">引言</h3><p>在嵌入式系统中，电源管理是一个至关重要的方面。有效的电源管理策略可以延长电池寿命、降低功耗、提高系统效率。本篇博客将介绍一些优化嵌入式系统电源管理的基本原则和策略，帮助你在项目中合理利用电源资源。</p><h3 id="电源管理的基本原则">电源管理的基本原则</h3><h4 id="1-睡眠模式">1. 睡眠模式</h4><p>尽可能地将系统置于低功耗的睡眠模式，以降低系统在空闲时的功耗。</p><h4 id="2-逐步唤醒">2. 逐步唤醒</h4><p>只在必要时唤醒相关的硬件模块，避免全局唤醒所有模块，从而减少功耗。</p><h4 id="3-动态调整时钟频率">3. 动态调整时钟频率</h4><p>根据系统负载的需求，动态调整处理器的时钟频率，以节省功耗。</p><h3 id="电源管理的优化策略">电源管理的优化策略</h3><h4 id="1-利用低功耗模式">1. 利用低功耗模式</h4><p>许多嵌入式处理器都提供了多种低功耗模式，如停机模式、睡眠模式等，可以根据需求选择合适的模式。</p><h4 id="2-优化中断处理">2. 优化中断处理</h4><p>避免不必要的中断触发，合理使用中断控制器，以降低系统在中断处理时的功耗。</p><h4 id="3-合理配置时钟和定时器">3. 合理配置时钟和定时器</h4><p>在不需要高时钟精度的情况下，降低时钟频率和定时器的触发频率，以减少功耗。</p><h4 id="4-动态电压调节（DVFS）">4. 动态电压调节（DVFS）</h4><p>根据处理器负载的需求，动态调整电压以降低功耗，同时保证稳定运行。</p><h3 id="示例：低功耗睡眠模式的实现">示例：低功耗睡眠模式的实现</h3><p>让我们通过一个简单的示例来演示如何在嵌入式系统中实现低功耗睡眠模式。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 进入睡眠模式</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">enter_sleep_mode</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 禁用不必要的模块和外设</span><br>    <span class="hljs-built_in">disable_unnecessary_modules</span>();<br>    <br>    <span class="hljs-comment">// 配置睡眠模式</span><br>    <span class="hljs-built_in">set_sleep_mode</span>(SLEEP_MODE_PWR_DOWN);<br>    <br>    <span class="hljs-comment">// 进入睡眠模式</span><br>    <span class="hljs-built_in">sleep_enable</span>();<br>    <span class="hljs-built_in">sleep_cpu</span>();<br>    <br>    <span class="hljs-comment">// 退出睡眠模式后的处理</span><br>    <span class="hljs-built_in">sleep_disable</span>();<br>    <span class="hljs-built_in">enable_necessary_modules</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="结论">结论</h3><p>电源管理是嵌入式系统开发中的一个至关重要的方面，合理的电源管理策略可以显著影响系统的性能和功耗表现。通过利用低功耗模式、动态调整时钟频率等优化策略，可以在项目中实现高效的电源管理。</p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 嵌入式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式笔记：理解并优化嵌入式系统的内存管理</title>
      <link href="/2023/09/18/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%90%86%E8%A7%A3%E5%B9%B6%E4%BC%98%E5%8C%96%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
      <url>/2023/09/18/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%90%86%E8%A7%A3%E5%B9%B6%E4%BC%98%E5%8C%96%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="嵌入式笔记：理解并优化嵌入式系统的内存管理">嵌入式笔记：理解并优化嵌入式系统的内存管理</h2><h3 id="引言">引言</h3><p>在嵌入式系统开发中，内存是一个关键的资源。有效地管理内存可以提高系统的性能、稳定性和功耗效率。本篇博客将介绍一些内存管理的基本概念，并提供一些优化策略，帮助你在嵌入式项目中合理利用内存资源。</p><h3 id="内存管理的基本概念">内存管理的基本概念</h3><h4 id="1-堆与栈">1. 堆与栈</h4><ul><li><strong>堆（Heap）</strong>：用于动态分配内存，需要手动释放。在堆上分配的内存通常用于存储变量、数据结构等动态大小的数据。</li><li><strong>栈（Stack）</strong>：用于自动分配和释放内存，存储局部变量、函数参数等。由编译器自动管理。</li></ul><h4 id="2-内存碎片">2. 内存碎片</h4><p>内存碎片是指已分配但未被使用的内存块，它们降低了可用内存的效率。</p><h3 id="内存管理的优化策略">内存管理的优化策略</h3><h4 id="1-静态分配-vs-动态分配">1. 静态分配 vs. 动态分配</h4><p>在嵌入式系统中，尽量减少动态内存分配，可以提高系统的稳定性和可靠性。</p><h4 id="2-使用内存池">2. 使用内存池</h4><p>内存池是一种将大块内存预先分配并划分为多个小块的技术，可以减少动态内存分配的开销，同时降低内存碎片的产生。</p><h4 id="3-避免内存泄漏">3. 避免内存泄漏</h4><p>确保在动态分配内存后，及时释放不再需要的内存，以避免内存泄漏问题。</p><h4 id="4-使用栈上对象">4. 使用栈上对象</h4><p>优先使用栈分配对象，尤其是对于生命周期较短的对象，避免频繁的动态内存分配和释放。</p><h4 id="5-选择合适的数据结构">5. 选择合适的数据结构</h4><p>选择合适的数据结构可以减少内存的占用，例如使用位域、压缩数据等技术。</p><h3 id="示例：内存池的实现">示例：内存池的实现</h3><p>让我们通过一个简单的内存池示例来演示如何优化内存管理。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MemoryPool</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    std::vector&lt;<span class="hljs-type">char</span>*&gt; blocks;<br>    <span class="hljs-type">size_t</span> blockSize;<br>    <span class="hljs-type">size_t</span> capacity;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">MemoryPool</span>(<span class="hljs-type">size_t</span> blockSize, <span class="hljs-type">size_t</span> capacity) : <span class="hljs-built_in">blockSize</span>(blockSize), <span class="hljs-built_in">capacity</span>(capacity) &#123;<br>        <span class="hljs-comment">// 预先分配内存块</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>; i &lt; capacity; ++i) &#123;<br>            blocks.<span class="hljs-built_in">push_back</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">char</span>[blockSize]);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span>* <span class="hljs-title">allocate</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (blocks.<span class="hljs-built_in">empty</span>()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>; <span class="hljs-comment">// 内存池已用尽</span><br>        &#125;<br><br>        <span class="hljs-type">char</span>* block = blocks.<span class="hljs-built_in">back</span>();<br>        blocks.<span class="hljs-built_in">pop_back</span>();<br>        <span class="hljs-keyword">return</span> block;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">deallocate</span><span class="hljs-params">(<span class="hljs-type">void</span>* ptr)</span> </span>&#123;<br>        blocks.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">char</span>*&gt;(ptr));<br>    &#125;<br><br>    ~<span class="hljs-built_in">MemoryPool</span>() &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span>* block : blocks) &#123;<br>            <span class="hljs-keyword">delete</span>[] block;<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="结论">结论</h3><p>内存管理是嵌入式系统开发中的关键环节。通过合理利用静态分配、内存池等优化策略，可以提高系统的性能和稳定性。同时，及时释放不再需要的内存是避免内存泄漏的重要手段。</p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 嵌入式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式笔记：了解嵌入式系统中的通信协议：UART与SPI</title>
      <link href="/2023/09/18/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%AC%94%E8%AE%B0%EF%BC%9A%E4%BA%86%E8%A7%A3%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE%EF%BC%9AUART%E4%B8%8ESPI/"/>
      <url>/2023/09/18/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%AC%94%E8%AE%B0%EF%BC%9A%E4%BA%86%E8%A7%A3%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE%EF%BC%9AUART%E4%B8%8ESPI/</url>
      
        <content type="html"><![CDATA[<h2 id="嵌入式笔记：了解嵌入式系统中的通信协议：UART与SPI">嵌入式笔记：了解嵌入式系统中的通信协议：UART与SPI</h2><h3 id="引言">引言</h3><p>在嵌入式系统中，通信协议是实现设备间数据传输的基础。本篇博客将介绍两种常用的嵌入式通信协议：UART（通用异步收发传输）和SPI（串行外设接口）。我们将深入了解它们的工作原理、优缺点以及在实际项目中的应用场景。</p><h3 id="UART-通用异步收发传输">UART: 通用异步收发传输</h3><h4 id="工作原理">工作原理</h4><p>UART是一种异步的串行通信协议，使用两根线进行数据传输：一根用于发送数据（TX），另一根用于接收数据（RX）。通信双方通过共享相同的波特率（Baud Rate）来保证数据的正确传输。</p><h4 id="优点">优点</h4><ul><li>简单、易于实现</li><li>适用于近距离通信</li></ul><h4 id="缺点">缺点</h4><ul><li>不适合高速长距离通信</li></ul><h4 id="应用场景">应用场景</h4><ul><li>与传感器、无线模块等简单设备通信</li><li>调试和控制台输出</li></ul><h3 id="SPI-串行外设接口">SPI: 串行外设接口</h3><h4 id="工作原理-2">工作原理</h4><p>SPI是一种全双工的串行通信协议，通常由一个主设备和一个或多个从设备组成。它使用四根线进行通信：时钟线（SCLK）、主设备输出从设备输入线（MOSI）、主设备输入从设备输出线（MISO）和片选线（CS）。</p><h4 id="优点-2">优点</h4><ul><li>高速、适合长距离通信</li><li>支持多从设备</li></ul><h4 id="缺点-2">缺点</h4><ul><li>使用的引脚较多</li><li>复杂度相对较高</li></ul><h4 id="应用场景-2">应用场景</h4><ul><li>存储器、显示屏、传感器等外设的高速通信</li><li>数字信号处理器与外设之间的数据传输</li></ul><h3 id="UART与SPI的选择">UART与SPI的选择</h3><p>在实际项目中，选择使用UART还是SPI取决于具体的需求和应用场景。如果需要简单、短距离的通信，UART可能是更合适的选择。而对于高速、长距离通信或需要连接多个外设的情况，SPI可能会更适用。</p><h3 id="结论">结论</h3><p>了解和熟练使用通信协议是嵌入式软件开发工程师的基本技能之一。UART和SPI是常用的两种通信协议，每种都有其独特的优势和适用场景。正确选择和实现合适的通信协议将在项目的性能和稳定性方面起到至关重要的作用。</p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 嵌入式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式笔记：理解并实现异步通信在嵌入式系统中的应用</title>
      <link href="/2023/09/18/%E7%90%86%E8%A7%A3%E5%B9%B6%E5%AE%9E%E7%8E%B0%E5%BC%82%E6%AD%A5%E9%80%9A%E4%BF%A1%E5%9C%A8%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/"/>
      <url>/2023/09/18/%E7%90%86%E8%A7%A3%E5%B9%B6%E5%AE%9E%E7%8E%B0%E5%BC%82%E6%AD%A5%E9%80%9A%E4%BF%A1%E5%9C%A8%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="嵌入式笔记：理解并实现异步通信在嵌入式系统中的应用">嵌入式笔记：理解并实现异步通信在嵌入式系统中的应用</h2><h3 id="引言">引言</h3><p>在嵌入式通信系统中，异步通信是一个至关重要的概念。它可以提高系统的效率和响应速度，特别是在处理并发任务时。本篇博客将介绍异步通信的基本概念，并提供一个简单的C++示例，演示如何在嵌入式系统中实现异步通信。</p><h3 id="异步通信的基本概念">异步通信的基本概念</h3><p>在异步通信中，一个任务可以在另一个任务执行的同时进行。这意味着任务可以并行运行，而无需等待前一个任务完成。这在处理I/O密集型任务或需要等待外部事件的情况下非常有用。</p><h3 id="实现异步通信的基本步骤">实现异步通信的基本步骤</h3><h4 id="1-使用多线程或事件驱动模型">1. 使用多线程或事件驱动模型</h4><p>在嵌入式系统中，你可以选择使用多线程或事件驱动模型来实现异步通信。多线程允许同时执行多个任务，而事件驱动模型则通过事件和回调函数来实现异步操作。</p><h4 id="2-设计合适的数据结构">2. 设计合适的数据结构</h4><p>在异步通信中，你需要考虑如何组织和管理任务的状态和数据。合适的数据结构可以有效地支持异步操作。</p><h4 id="3-使用信号量或互斥体保护共享资源">3. 使用信号量或互斥体保护共享资源</h4><p>当多个任务同时访问共享资源时，你需要使用信号量或互斥体等同步机制来保护这些资源，以避免竞态条件和数据损坏。</p><h3 id="示例：使用C-实现异步通信">示例：使用C++实现异步通信</h3><p>让我们通过一个简单的示例来演示如何在C++中实现异步通信。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;thread&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">async_task</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> </span>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Async task &quot;</span> &lt;&lt; id &lt;&lt; <span class="hljs-string">&quot; started.&quot;</span> &lt;&lt; std::endl;<br>    <span class="hljs-comment">// 模拟异步任务的工作</span><br>    std::this_thread::<span class="hljs-built_in">sleep_for</span>(std::chrono::<span class="hljs-built_in">seconds</span>(<span class="hljs-number">2</span>));<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Async task &quot;</span> &lt;&lt; id &lt;&lt; <span class="hljs-string">&quot; finished.&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">std::thread <span class="hljs-title">task1</span><span class="hljs-params">(async_task, <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-function">std::thread <span class="hljs-title">task2</span><span class="hljs-params">(async_task, <span class="hljs-number">2</span>)</span></span>;<br><br>    task<span class="hljs-number">1.</span><span class="hljs-built_in">join</span>();<br>    task<span class="hljs-number">2.</span><span class="hljs-built_in">join</span>();<br><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;All tasks completed.&quot;</span> &lt;&lt; std::endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个示例中，我们创建了两个异步任务(<code>async_task</code>)，它们分别会等待2秒钟然后完成。在<code>main</code>函数中，我们创建了两个线程来执行这两个异步任务。</p><h3 id="结论">结论</h3><p>异步通信是嵌入式通信系统中一个至关重要的概念，它可以提高系统的效率和响应速度。通过使用多线程或事件驱动模型，并合理设计数据结构，你可以有效地实现异步通信。在C++中，通过线程可以方便地实现异步操作。</p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 嵌入式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++通用工具类：异常处理</title>
      <link href="/2023/09/18/C-%E9%80%9A%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB%EF%BC%9A%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
      <url>/2023/09/18/C-%E9%80%9A%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB%EF%BC%9A%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="标题：C-通用工具类：异常处理"><strong>标题：C++通用工具类：异常处理</strong></h2><p><strong>简介：</strong>异常处理是保证程序稳定性的重要一环。在C++中，我们可以编写通用的工具类来简化异常处理过程。</p><p><strong>正文：</strong></p><p><strong>1. 实现一个通用的异常处理函数</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;exception&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionUtil</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">handleException</span><span class="hljs-params">(<span class="hljs-type">const</span> std::exception&amp; e)</span> </span>&#123;<br>        std::cerr &lt;&lt; <span class="hljs-string">&quot;Exception caught: &quot;</span> &lt;&lt; e.<span class="hljs-built_in">what</span>() &lt;&lt; std::endl;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>2. 使用示例</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">throw</span> std::<span class="hljs-built_in">runtime_error</span>(<span class="hljs-string">&quot;Something went wrong.&quot;</span>);<br>    &#125; <span class="hljs-built_in">catch</span> (<span class="hljs-type">const</span> std::exception&amp; e) &#123;<br>        ExceptionUtil::<span class="hljs-built_in">handleException</span>(e);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3. 实现一个通用的异常抛出函数</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionUtil</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">throwException</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">throw</span> std::<span class="hljs-built_in">runtime_error</span>(<span class="hljs-string">&quot;Custom exception message.&quot;</span>);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>4. 使用示例</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        ExceptionUtil::<span class="hljs-built_in">throwException</span>();<br>    &#125; <span class="hljs-built_in">catch</span> (<span class="hljs-type">const</span> std::exception&amp; e) &#123;<br>        ExceptionUtil::<span class="hljs-built_in">handleException</span>(e);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>结论：</strong></p><p>通用工具类可以帮助我们简化许多常见的任务，例如异常处理。在C++中，我们可以编写这样的工具类来提高代码的可重用性和可维护性。</p>]]></content>
      
      
      <categories>
          
          <category> C++通用工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 异常处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++通用工具类：容器操作</title>
      <link href="/2023/09/18/C-%E9%80%9A%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB%EF%BC%9A%E5%AE%B9%E5%99%A8%E6%93%8D%E4%BD%9C/"/>
      <url>/2023/09/18/C-%E9%80%9A%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB%EF%BC%9A%E5%AE%B9%E5%99%A8%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="标题：C-通用工具类：容器操作"><strong>标题：C++通用工具类：容器操作</strong></h2><p><strong>简介：</strong>容器操作是许多应用程序中常见的任务之一。在C++中，我们可以编写通用的工具类来简化容器的操作。</p><p><strong>正文：</strong></p><p><strong>1. 实现一个通用的打印容器元素函数</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;list&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Container&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printContainer</span><span class="hljs-params">(<span class="hljs-type">const</span> Container&amp; container)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; element : container) &#123;<br>        std::cout &lt;&lt; element &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    std::cout &lt;&lt; std::endl;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2. 使用示例</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::vector&lt;<span class="hljs-type">int</span>&gt; vec = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br>    std::list&lt;std::string&gt; lst = &#123;<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;banana&quot;</span>, <span class="hljs-string">&quot;cherry&quot;</span>&#125;;<br>    std::map&lt;<span class="hljs-type">int</span>, std::string&gt; mp = &#123;&#123;<span class="hljs-number">1</span>, <span class="hljs-string">&quot;one&quot;</span>&#125;, &#123;<span class="hljs-number">2</span>, <span class="hljs-string">&quot;two&quot;</span>&#125;, &#123;<span class="hljs-number">3</span>, <span class="hljs-string">&quot;three&quot;</span>&#125;&#125;;<br><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Vector: &quot;</span>;<br>    <span class="hljs-built_in">printContainer</span>(vec);<br><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;List: &quot;</span>;<br>    <span class="hljs-built_in">printContainer</span>(lst);<br><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Map: &quot;</span>;<br>    <span class="hljs-built_in">printContainer</span>(mp);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3. 实现一个通用的查找元素函数</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Container, <span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">contains</span><span class="hljs-params">(<span class="hljs-type">const</span> Container&amp; container, <span class="hljs-type">const</span> T&amp; element)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> std::<span class="hljs-built_in">find</span>(container.<span class="hljs-built_in">begin</span>(), container.<span class="hljs-built_in">end</span>(), element) != container.<span class="hljs-built_in">end</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>4. 使用示例</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::vector&lt;<span class="hljs-type">int</span>&gt; vec = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br>    <span class="hljs-type">int</span> target1 = <span class="hljs-number">3</span>;<br>    <span class="hljs-type">int</span> target2 = <span class="hljs-number">6</span>;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">contains</span>(vec, target1)) &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Vector contains &quot;</span> &lt;&lt; target1 &lt;&lt; std::endl;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Vector does not contain &quot;</span> &lt;&lt; target1 &lt;&lt; std::endl;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">contains</span>(vec, target2)) &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Vector contains &quot;</span> &lt;&lt; target2 &lt;&lt; std::endl;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Vector does not contain &quot;</span> &lt;&lt; target2 &lt;&lt; std::endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>结论：</strong></p><p>通用工具类可以帮助我们简化许多常见的任务，例如容器操作。在C++中，我们可以编写这样的工具类来提高代码的可重用性和可维护性。</p>]]></content>
      
      
      <categories>
          
          <category> C++通用工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 容器操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++通用工具类：文件操作</title>
      <link href="/2023/09/18/C-%E9%80%9A%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB%EF%BC%9A%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
      <url>/2023/09/18/C-%E9%80%9A%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB%EF%BC%9A%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="标题：C-通用工具类：文件操作"><strong>标题：C++通用工具类：文件操作</strong></h2><p><strong>简介：</strong>文件操作是许多应用程序中常见的任务之一。在C++中，我们可以编写通用的工具类来简化文件的读写操作。</p><p><strong>正文：</strong></p><p><strong>1. 实现一个通用的文件读取函数</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fstream&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">FileUtil</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">static</span> std::string <span class="hljs-title">read</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; filepath)</span> </span>&#123;<br>        <span class="hljs-function">std::ifstream <span class="hljs-title">file</span><span class="hljs-params">(filepath)</span></span>;<br>        <span class="hljs-keyword">if</span> (file) &#123;<br>            <span class="hljs-function">std::string <span class="hljs-title">content</span><span class="hljs-params">((std::istreambuf_iterator&lt;<span class="hljs-type">char</span>&gt;(file)), std::istreambuf_iterator&lt;<span class="hljs-type">char</span>&gt;())</span></span>;<br>            <span class="hljs-keyword">return</span> content;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>2. 使用示例</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::string filepath = <span class="hljs-string">&quot;example.txt&quot;</span>;<br><br>    std::string content = FileUtil::<span class="hljs-built_in">read</span>(filepath);<br><br>    <span class="hljs-keyword">if</span> (!content.<span class="hljs-built_in">empty</span>()) &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;File content:\n&quot;</span> &lt;&lt; content &lt;&lt; std::endl;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Failed to read file.&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3. 实现一个通用的文件写入函数</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">FileUtil</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">write</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; filepath, <span class="hljs-type">const</span> std::string&amp; content)</span> </span>&#123;<br>        <span class="hljs-function">std::ofstream <span class="hljs-title">file</span><span class="hljs-params">(filepath)</span></span>;<br>        <span class="hljs-keyword">if</span> (file) &#123;<br>            file &lt;&lt; content;<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>4. 使用示例</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::string filepath = <span class="hljs-string">&quot;example.txt&quot;</span>;<br>    std::string content = <span class="hljs-string">&quot;This is an example.&quot;</span>;<br><br>    FileUtil::<span class="hljs-built_in">write</span>(filepath, content);<br><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;File written successfully.&quot;</span> &lt;&lt; std::endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>结论：</strong></p><p>通用工具类可以帮助我们简化许多常见的任务，例如文件操作。在C++中，我们可以编写这样的工具类来提高代码的可重用性和可维护性。</p>]]></content>
      
      
      <categories>
          
          <category> C++通用工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 文件操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++通用工具类：日期时间处理</title>
      <link href="/2023/09/18/C-%E9%80%9A%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB%EF%BC%9A%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86/"/>
      <url>/2023/09/18/C-%E9%80%9A%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB%EF%BC%9A%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="标题：C-通用工具类：日期时间处理"><strong>标题：C++通用工具类：日期时间处理</strong></h2><p><strong>简介：</strong>日期时间处理是许多应用程序中常见的任务之一。在C++中，我们可以编写通用的工具类来简化日期时间的操作。</p><p><strong>正文：</strong></p><p><strong>1. 实现一个通用的日期时间格式化函数</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctime&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DateTimeUtil</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">static</span> std::string <span class="hljs-title">format</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; format, <span class="hljs-type">const</span> std::<span class="hljs-type">time_t</span>&amp; time)</span> </span>&#123;<br>        <span class="hljs-type">char</span> buffer[<span class="hljs-number">80</span>];<br>        std::tm* timeinfo = std::<span class="hljs-built_in">localtime</span>(&amp;time);<br>        std::<span class="hljs-built_in">strftime</span>(buffer, <span class="hljs-built_in">sizeof</span>(buffer), format.<span class="hljs-built_in">c_str</span>(), timeinfo);<br>        <span class="hljs-keyword">return</span> buffer;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>2. 使用示例</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::<span class="hljs-type">time_t</span> currentTime = std::<span class="hljs-built_in">time</span>(<span class="hljs-number">0</span>);<br>    std::string format = <span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>;<br><br>    std::string formattedTime = DateTimeUtil::format(format, currentTime);<br><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Current time: &quot;</span> &lt;&lt; formattedTime &lt;&lt; std::endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3. 实现一个通用的日期时间解析函数</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DateTimeUtil</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">static</span> std::<span class="hljs-type">time_t</span> <span class="hljs-title">parse</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; datetime, <span class="hljs-type">const</span> std::string&amp; format)</span> </span>&#123;<br>        std::tm timeinfo = &#123;&#125;;<br>        <span class="hljs-function">std::istringstream <span class="hljs-title">stream</span><span class="hljs-params">(datetime)</span></span>;<br>        stream &gt;&gt; std::<span class="hljs-built_in">get_time</span>(&amp;timeinfo, format.<span class="hljs-built_in">c_str</span>());<br>        <span class="hljs-keyword">return</span> std::<span class="hljs-built_in">mktime</span>(&amp;timeinfo);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>4. 使用示例</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::string datetime = <span class="hljs-string">&quot;2023-09-16 15:30:00&quot;</span>;<br>    std::string format = <span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>;<br><br>    std::<span class="hljs-type">time_t</span> parsedTime = DateTimeUtil::<span class="hljs-built_in">parse</span>(datetime, format);<br><br>    <span class="hljs-keyword">if</span> (parsedTime != <span class="hljs-number">-1</span>) &#123;<br>        std::string formattedTime = DateTimeUtil::format(format, parsedTime);<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Parsed time: &quot;</span> &lt;&lt; formattedTime &lt;&lt; std::endl;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Failed to parse datetime.&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>结论：</strong></p><p>通用工具类可以帮助我们简化许多常见的任务，例如日期时间处理。在C++中，我们可以编写这样的工具类来提高代码的可重用性和可维护性。</p>]]></content>
      
      
      <categories>
          
          <category> C++通用工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 日期时间处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++通用工具类：字符串处理</title>
      <link href="/2023/09/18/C-%E9%80%9A%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB%EF%BC%9A%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/"/>
      <url>/2023/09/18/C-%E9%80%9A%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB%EF%BC%9A%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="标题：C-通用工具类：字符串处理"><strong>标题：C++通用工具类：字符串处理</strong></h2><p><strong>简介：</strong>字符串处理是许多应用程序中常见的任务之一。在C++中，我们可以通过编写通用的工具类来简化这一过程。</p><p><strong>正文：</strong></p><p><strong>1. 实现一个通用的字符串拆分函数</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sstream&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">StringUtil</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">static</span> std::vector&lt;std::string&gt; <span class="hljs-title">split</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; str, <span class="hljs-type">char</span> delimiter)</span> </span>&#123;<br>        std::vector&lt;std::string&gt; tokens;<br>        <span class="hljs-function">std::istringstream <span class="hljs-title">stream</span><span class="hljs-params">(str)</span></span>;<br>        std::string token;<br>        <span class="hljs-keyword">while</span> (std::<span class="hljs-built_in">getline</span>(stream, token, delimiter)) &#123;<br>            tokens.<span class="hljs-built_in">push_back</span>(token);<br>        &#125;<br>        <span class="hljs-keyword">return</span> tokens;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>2. 使用示例</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::string input = <span class="hljs-string">&quot;Hello,World,OpenAI&quot;</span>;<br>    <span class="hljs-type">char</span> delimiter = <span class="hljs-string">&#x27;,&#x27;</span>;<br><br>    std::vector&lt;std::string&gt; tokens = StringUtil::<span class="hljs-built_in">split</span>(input, delimiter);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> std::string&amp; token : tokens) &#123;<br>        std::cout &lt;&lt; token &lt;&lt; std::endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3. 实现一个通用的字符串替换函数</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">StringUtil</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">static</span> std::string <span class="hljs-title">replace</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; str, <span class="hljs-type">const</span> std::string&amp; target, <span class="hljs-type">const</span> std::string&amp; replacement)</span> </span>&#123;<br>        std::string result = str;<br>        <span class="hljs-type">size_t</span> position = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> ((position = result.<span class="hljs-built_in">find</span>(target, position)) != std::string::npos) &#123;<br>            result.<span class="hljs-built_in">replace</span>(position, target.<span class="hljs-built_in">length</span>(), replacement);<br>            position += replacement.<span class="hljs-built_in">length</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>4. 使用示例</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::string input = <span class="hljs-string">&quot;Hello, World! Hello, OpenAI!&quot;</span>;<br>    std::string target = <span class="hljs-string">&quot;Hello&quot;</span>;<br>    std::string replacement = <span class="hljs-string">&quot;Hi&quot;</span>;<br><br>    std::string result = StringUtil::<span class="hljs-built_in">replace</span>(input, target, replacement);<br><br>    std::cout &lt;&lt; result &lt;&lt; std::endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>结论：</strong></p><p>通用工具类可以帮助我们简化许多常见的任务，例如字符串处理。在C++中，我们可以编写这样的工具类来提高代码的可重用性和可维护性。</p>]]></content>
      
      
      <categories>
          
          <category> C++通用工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 字符串处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中的设计模式：桥接模式</title>
      <link href="/2023/09/18/C-%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/09/18/C-%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="标题：C-中的设计模式：桥接模式"><strong>标题：C++中的设计模式：桥接模式</strong></h2><p><strong>简介：</strong>桥接模式是一种常用的设计模式，它将抽象部分与实现部分分离，使它们可以独立地变化。</p><p><strong>正文：</strong></p><p><strong>1. 桥接模式的定义</strong></p><p>桥接模式包括两个维度：Abstraction（抽象）和Implementor（实现）。抽象包含一个指向实现的指针，它定义了抽象部分的接口。实现定义了实现部分的接口。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Implementor</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">operationImpl</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteImplementorA</span> : <span class="hljs-keyword">public</span> Implementor &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">operationImpl</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Concrete Implementor A\n&quot;</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteImplementorB</span> : <span class="hljs-keyword">public</span> Implementor &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">operationImpl</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Concrete Implementor B\n&quot;</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Abstraction</span> &#123;<br><span class="hljs-keyword">protected</span>:<br>    Implementor* implementor;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Abstraction</span>(Implementor* impl) : <span class="hljs-built_in">implementor</span>(impl) &#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">operation</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>2. 具体实现</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">RefinedAbstraction</span> : <span class="hljs-keyword">public</span> Abstraction &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">using</span> Abstraction::Abstraction;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">operation</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        implementor-&gt;<span class="hljs-built_in">operationImpl</span>();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>3. 桥接模式的应用</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ConcreteImplementorA implA;<br>    ConcreteImplementorB implB;<br><br>    <span class="hljs-function">RefinedAbstraction <span class="hljs-title">abstractionA</span><span class="hljs-params">(&amp;implA)</span></span>;<br>    <span class="hljs-function">RefinedAbstraction <span class="hljs-title">abstractionB</span><span class="hljs-params">(&amp;implB)</span></span>;<br><br>    abstractionA.<span class="hljs-built_in">operation</span>();<br>    abstractionB.<span class="hljs-built_in">operation</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>4. 桥接模式的应用场景</strong></p><p>桥接模式常用于以下场景：</p><ul><li>当一个类存在两个独立变化的维度时，可以将其分为抽象和实现两部分。</li><li>当一个类需要在运行时选择实现时，可以将实现作为参数传递给抽象类。</li></ul><p><strong>结论：</strong></p><p>桥接模式是一种常用的设计模式，它将抽象部分与实现部分分离，使它们可以独立地变化。在C++中，可以通过定义抽象类和实现类来实现桥接模式。桥接模式常用于需要处理两个独立变化维度的场景。</p>]]></content>
      
      
      <categories>
          
          <category> C++中的设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 桥接模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中的设计模式：原型模式</title>
      <link href="/2023/09/18/C-%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/09/18/C-%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="标题：C-中的设计模式：原型模式"><strong>标题：C++中的设计模式：原型模式</strong></h2><p><strong>简介：</strong>原型模式是一种常用的设计模式，它允许创建新对象的同时又不需要知道其具体的类。</p><p><strong>正文：</strong></p><p><strong>1. 原型模式的定义</strong></p><p>原型模式包括两个角色：Prototype（原型）和ConcretePrototype（具体原型）。原型是一个抽象类，其中定义了一个克隆自身的接口，具体原型继承自原型，并实现了克隆接口。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Prototype</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> Prototype* <span class="hljs-title">clone</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcretePrototype</span> : <span class="hljs-keyword">public</span> Prototype &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">Prototype* <span class="hljs-title">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">ConcretePrototype</span>(*<span class="hljs-keyword">this</span>);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>2. 具体实现</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ConcretePrototype prototype;<br>    ConcretePrototype* clone = <span class="hljs-built_in">dynamic_cast</span>&lt;ConcretePrototype*&gt;(prototype.<span class="hljs-built_in">clone</span>());<br><br>    <span class="hljs-keyword">if</span> (clone) &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Clone created successfully\n&quot;</span>;<br>        <span class="hljs-keyword">delete</span> clone;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Clone failed\n&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3. 原型模式的应用</strong></p><p>原型模式常用于以下场景：</p><ul><li>当一个系统需要独立于其内容创建对象时。</li><li>当一个对象只知道其接口，但需要在运行时指定其类时。</li></ul><p><strong>4. 原型模式与工厂模式的比较</strong></p><p>原型模式与工厂模式都用于创建对象，但它们的关注点不同。工厂模式关注于如何创建对象，而原型模式关注于如何克隆对象。</p><p><strong>结论：</strong></p><p>原型模式是一种常用的设计模式，它允许创建新对象的同时又不需要知道其具体的类。在C++中，可以通过定义原型和具体原型类，以及实现克隆接口来实现原型模式。原型模式常用于需要独立于其内容创建对象的场景。</p>]]></content>
      
      
      <categories>
          
          <category> C++中的设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 原型模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中的设计模式：中介者模式</title>
      <link href="/2023/09/18/C-%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/09/18/C-%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="标题：C-中的设计模式：中介者模式"><strong>标题：C++中的设计模式：中介者模式</strong></h2><p><strong>简介：</strong>中介者模式是一种常用的设计模式，它通过将对象间的交互行为集中在中介者对象中来减少对象之间的直接依赖关系。</p><p><strong>正文：</strong></p><p><strong>1. 中介者模式的定义</strong></p><p>中介者模式包括两个角色：Mediator（中介者）和Colleague（同事）。中介者负责定义一个接口用于与各同事对象通信，每个同事对象都包含一个对中介者对象的引用。同事对象通过调用中介者的方法来与其他同事对象进行通信。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Colleague</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Mediator</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">send</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; message, Colleague* colleague)</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Colleague</span> &#123;<br><span class="hljs-keyword">protected</span>:<br>    Mediator* mediator;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Colleague</span>(Mediator* m) : <span class="hljs-built_in">mediator</span>(m) &#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">receive</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; message)</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>2. 具体实现</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteMediator</span> : <span class="hljs-keyword">public</span> Mediator &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">send</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; message, Colleague* colleague)</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        colleague-&gt;<span class="hljs-built_in">receive</span>(message);<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteColleagueA</span> : <span class="hljs-keyword">public</span> Colleague &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">using</span> Colleague::Colleague;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">receive</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; message)</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Colleague A received: &quot;</span> &lt;&lt; message &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">send</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; message)</span> </span>&#123;<br>        mediator-&gt;<span class="hljs-built_in">send</span>(message, <span class="hljs-keyword">this</span>);<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteColleagueB</span> : <span class="hljs-keyword">public</span> Colleague &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">using</span> Colleague::Colleague;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">receive</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; message)</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Colleague B received: &quot;</span> &lt;&lt; message &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">send</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; message)</span> </span>&#123;<br>        mediator-&gt;<span class="hljs-built_in">send</span>(message, <span class="hljs-keyword">this</span>);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>3. 具体应用</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ConcreteMediator mediator;<br>    <span class="hljs-function">ConcreteColleagueA <span class="hljs-title">colleagueA</span><span class="hljs-params">(&amp;mediator)</span></span>;<br>    <span class="hljs-function">ConcreteColleagueB <span class="hljs-title">colleagueB</span><span class="hljs-params">(&amp;mediator)</span></span>;<br><br>    colleagueA.<span class="hljs-built_in">send</span>(<span class="hljs-string">&quot;Hello from Colleague A&quot;</span>);<br>    colleagueB.<span class="hljs-built_in">send</span>(<span class="hljs-string">&quot;Hi from Colleague B&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>4. 中介者模式的应用</strong></p><p>中介者模式常用于以下场景：</p><ul><li>当对象间的交互行为变得复杂，且需要减少对象间的直接依赖关系时。</li><li>当一组对象之间存在相互通信，但是耦合度过高时。</li></ul><p><strong>结论：</strong></p><p>中介者模式是一种常用的设计模式，它通过将对象间的交互行为集中在中介者对象中来减少对象之间的直接依赖关系。在C++中，可以通过定义中介者和同事的抽象类，以及具体的中介者和同事来实现中介者模式。中介者模式常用于需要减少对象之间直接依赖关系的场景。</p>]]></content>
      
      
      <categories>
          
          <category> C++中的设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 中介者模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中的设计模式：组合模式</title>
      <link href="/2023/09/18/C-%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/09/18/C-%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="标题：C-中的设计模式：组合模式"><strong>标题：C++中的设计模式：组合模式</strong></h2><p><strong>简介：</strong>组合模式是一种常用的设计模式，它允许将对象组合成树形结构以表示&quot;部分-整体&quot;的层次结构。</p><p><strong>正文：</strong></p><p><strong>1. 组合模式的定义</strong></p><p>组合模式包括三个角色：Component（组件）、Leaf（叶子节点）和Composite（复合节点）。组件是所有节点的抽象类，它可以包含叶子节点或复合节点。叶子节点表示树的最终节点，它不能包含其他节点。复合节点包含其他节点，可以是叶子节点或其他复合节点。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Component</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">operation</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Component* c)</span> </span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(Component* c)</span> </span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> Component* <span class="hljs-title">getChild</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>; &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Leaf</span> : <span class="hljs-keyword">public</span> Component &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">operation</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Leaf operation\n&quot;</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Composite</span> : <span class="hljs-keyword">public</span> Component &#123;<br><span class="hljs-keyword">private</span>:<br>    std::vector&lt;Component*&gt; children;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">operation</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Composite operation\n&quot;</span>;<br>        <span class="hljs-keyword">for</span> (Component* c : children) &#123;<br>            c-&gt;<span class="hljs-built_in">operation</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Component* c)</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        children.<span class="hljs-built_in">push_back</span>(c);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(Component* c)</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        <span class="hljs-keyword">auto</span> it = std::<span class="hljs-built_in">find</span>(children.<span class="hljs-built_in">begin</span>(), children.<span class="hljs-built_in">end</span>(), c);<br>        <span class="hljs-keyword">if</span> (it != children.<span class="hljs-built_in">end</span>()) &#123;<br>            children.<span class="hljs-built_in">erase</span>(it);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function">Component* <span class="hljs-title">getChild</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (index &gt;= <span class="hljs-number">0</span> &amp;&amp; index &lt; children.<span class="hljs-built_in">size</span>()) &#123;<br>            <span class="hljs-keyword">return</span> children[index];<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>2. 具体实现</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Leaf leaf1, leaf2, leaf3;<br>    Composite composite1, composite2;<br><br>    composite<span class="hljs-number">1.</span><span class="hljs-built_in">add</span>(&amp;leaf1);<br>    composite<span class="hljs-number">1.</span><span class="hljs-built_in">add</span>(&amp;leaf2);<br><br>    composite<span class="hljs-number">2.</span><span class="hljs-built_in">add</span>(&amp;composite1);<br>    composite<span class="hljs-number">2.</span><span class="hljs-built_in">add</span>(&amp;leaf3);<br><br>    composite<span class="hljs-number">2.</span><span class="hljs-built_in">operation</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3. 组合模式的应用</strong></p><p>组合模式常用于以下场景：</p><ul><li>当需要表示对象的&quot;部分-整体&quot;层次结构时。</li><li>当希望用户忽略叶子节点和复合节点之间的差异时。</li></ul><p><strong>4. 组合模式与访问者模式的结合</strong></p><p>组合模式通常与访问者模式结合使用，以便在对复杂对象结构进行操作时能够轻松地扩展功能。</p><p><strong>结论：</strong></p><p>组合模式是一种常用的设计模式，它允许将对象组合成树形结构以表示&quot;部分-整体&quot;的层次结构。在C++中，可以通过定义组件、叶子节点和复合节点的抽象类，以及具体的组件、叶子节点和复合节点来实现组合模式。组合模式常用于需要表示对象的层次结构的场景。</p>]]></content>
      
      
      <categories>
          
          <category> C++中的设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 组合模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中的设计模式：访问者模式</title>
      <link href="/2023/09/18/C-%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/09/18/C-%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="标题：C-中的设计模式：访问者模式"><strong>标题：C++中的设计模式：访问者模式</strong></h2><p><strong>简介：</strong>访问者模式是一种常用的设计模式，它允许在不改变对象结构的前提下定义作用于对象元素的新操作。</p><p><strong>正文：</strong></p><p><strong>1. 访问者模式的定义</strong></p><p>访问者模式包括两个角色：Visitor（访问者）和Element（元素）。访问者定义了对每个元素的访问操作，而元素定义了一个accept方法，用于接收访问者的访问。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Visitor</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Element</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">accept</span><span class="hljs-params">(Visitor&amp; v)</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteElementA</span> : <span class="hljs-keyword">public</span> Element &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">accept</span><span class="hljs-params">(Visitor&amp; v)</span> <span class="hljs-keyword">override</span></span>;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteElementB</span> : <span class="hljs-keyword">public</span> Element &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">accept</span><span class="hljs-params">(Visitor&amp; v)</span> <span class="hljs-keyword">override</span></span>;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Visitor</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">visitConcreteElementA</span><span class="hljs-params">(ConcreteElementA&amp; elementA)</span> </span>= <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">visitConcreteElementB</span><span class="hljs-params">(ConcreteElementB&amp; elementB)</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>2. 具体实现</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ConcreteElementA::accept</span><span class="hljs-params">(Visitor&amp; v)</span> </span>&#123;<br>    v.<span class="hljs-built_in">visitConcreteElementA</span>(*<span class="hljs-keyword">this</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ConcreteElementB::accept</span><span class="hljs-params">(Visitor&amp; v)</span> </span>&#123;<br>    v.<span class="hljs-built_in">visitConcreteElementB</span>(*<span class="hljs-keyword">this</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3. 访问者模式的应用</strong></p><p>访问者模式常用于以下场景：</p><ul><li>当一个对象的行为取决于其类以及它所处的环境时。</li><li>当需要对一个对象的结构进行操作，且不希望暴露对象的内部细节时。</li></ul><p><strong>4. 访问者模式与组合模式的结合</strong></p><p>访问者模式通常与组合模式结合使用，以便在对复杂对象结构进行操作时能够轻松地扩展功能。</p><p><strong>结论：</strong></p><p>访问者模式是一种常用的设计模式，它允许在不改变对象结构的前提下定义作用于对象元素的新操作。在C++中，可以通过定义访问者和元素的抽象类，以及具体的访问者和元素来实现访问者模式。访问者模式常用于需要对对象结构进行操作的场景。</p>]]></content>
      
      
      <categories>
          
          <category> C++中的设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 访问者模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中的设计模式：命令模式</title>
      <link href="/2023/09/18/C-%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/09/18/C-%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="标题：C-中的设计模式：命令模式"><strong>标题：C++中的设计模式：命令模式</strong></h2><p><strong>简介：</strong>命令模式是一种常用的设计模式，它将一个请求封装成一个对象，使得可以用不同的请求对客户进行参数化。</p><p><strong>正文：</strong></p><p><strong>1. 命令模式的定义</strong></p><p>命令模式包括四个角色：Command（命令）、Receiver（接收者）、Invoker（调用者）和Client（客户端）。命令对象负责封装请求，接收者执行具体的操作，调用者发起请求，客户端创建并配置命令对象。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Receiver</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">action</span><span class="hljs-params">()</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Receiver is performing action.\n&quot;</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Command</span> &#123;<br><span class="hljs-keyword">protected</span>:<br>    Receiver* receiver;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Command</span>(Receiver* rec) : <span class="hljs-built_in">receiver</span>(rec) &#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">execute</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteCommand</span> : <span class="hljs-keyword">public</span> Command &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">ConcreteCommand</span>(Receiver* rec) : <span class="hljs-built_in">Command</span>(rec) &#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">execute</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        receiver-&gt;<span class="hljs-built_in">action</span>();<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Invoker</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    Command* command;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setCommand</span><span class="hljs-params">(Command* cmd)</span> </span>&#123;<br>        command = cmd;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">executeCommand</span><span class="hljs-params">()</span> </span>&#123;<br>        command-&gt;<span class="hljs-built_in">execute</span>();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>2. 具体实现</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Receiver receiver;<br>    <span class="hljs-function">ConcreteCommand <span class="hljs-title">command</span><span class="hljs-params">(&amp;receiver)</span></span>;<br>    Invoker invoker;<br><br>    invoker.<span class="hljs-built_in">setCommand</span>(&amp;command);<br>    invoker.<span class="hljs-built_in">executeCommand</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3. 命令模式的应用</strong></p><p>命令模式常用于以下场景：</p><ul><li>需要将请求的发送者和接收者解耦。</li><li>需要对请求进行排队、记录请求日志等操作。</li></ul><p><strong>4. 命令模式与策略模式的比较</strong></p><p>命令模式与策略模式有些相似，它们都将算法封装成对象，可以在运行时动态切换。但它们的关注点不同，策略模式关注于整体算法的替换，而命令模式关注于请求的发送者和接收者的解耦。</p><p><strong>结论：</strong></p><p>命令模式是一种常用的设计模式，它将一个请求封装成一个对象，使得可以用不同的请求对客户进行参数化。在C++中，可以通过定义命令、接收者和调用者来实现命令模式。命令模式常用于需要将请求的发送者和接收者解耦的场景。</p>]]></content>
      
      
      <categories>
          
          <category> C++中的设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 命令模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中的设计模式：备忘录模式</title>
      <link href="/2023/09/18/C-%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/09/18/C-%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="标题：C-中的设计模式：备忘录模式"><strong>标题：C++中的设计模式：备忘录模式</strong></h2><p><strong>简介：</strong>备忘录模式是一种常用的设计模式，它允许在不破坏封装的前提下保存和恢复对象的内部状态。</p><p><strong>正文：</strong></p><p><strong>1. 备忘录模式的定义</strong></p><p>备忘录模式包括三个角色：Originator（发起人）、Memento（备忘录）和Caretaker（负责人）。发起人负责创建备忘录和恢复状态，备忘录负责保存状态，负责人负责管理备忘录。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Memento</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    std::string state;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Memento</span>(<span class="hljs-type">const</span> std::string&amp; s) : <span class="hljs-built_in">state</span>(s) &#123;&#125;<br><br>    <span class="hljs-function">std::string <span class="hljs-title">getState</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> state;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Originator</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    std::string state;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setState</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; s)</span> </span>&#123;<br>        state = s;<br>    &#125;<br><br>    <span class="hljs-function">std::string <span class="hljs-title">getState</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> state;<br>    &#125;<br><br>    <span class="hljs-function">Memento <span class="hljs-title">createMemento</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Memento</span>(state);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">restoreFromMemento</span><span class="hljs-params">(<span class="hljs-type">const</span> Memento&amp; m)</span> </span>&#123;<br>        state = m.<span class="hljs-built_in">getState</span>();<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Caretaker</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    Memento memento;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">saveMemento</span><span class="hljs-params">(<span class="hljs-type">const</span> Memento&amp; m)</span> </span>&#123;<br>        memento = m;<br>    &#125;<br><br>    <span class="hljs-function">Memento <span class="hljs-title">retrieveMemento</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> memento;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>2. 具体实现</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Originator originator;<br>    Caretaker caretaker;<br><br>    <span class="hljs-comment">// 设置状态并保存备忘录</span><br>    originator.<span class="hljs-built_in">setState</span>(<span class="hljs-string">&quot;State 1&quot;</span>);<br>    caretaker.<span class="hljs-built_in">saveMemento</span>(originator.<span class="hljs-built_in">createMemento</span>());<br><br>    <span class="hljs-comment">// 修改状态</span><br>    originator.<span class="hljs-built_in">setState</span>(<span class="hljs-string">&quot;State 2&quot;</span>);<br><br>    <span class="hljs-comment">// 恢复状态</span><br>    originator.<span class="hljs-built_in">restoreFromMemento</span>(caretaker.<span class="hljs-built_in">retrieveMemento</span>());<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Current state: &quot;</span> &lt;&lt; originator.<span class="hljs-built_in">getState</span>() &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3. 备忘录模式的应用</strong></p><p>备忘录模式常用于以下场景：</p><ul><li>需要在不破坏对象封装的前提下保存和恢复其内部状态。</li><li>需要提供撤销操作。</li></ul><p><strong>4. C++中的标准备忘录模式</strong></p><p>在C++中，标准库提供了<code>std::memento</code>和<code>std::care_taker</code>来实现备忘录模式，例如<code>std::undoable</code>。</p><p><strong>结论：</strong></p><p>备忘录模式是一种常用的设计模式，它允许在不破坏封装的前提下保存和恢复对象的内部状态。在C++中，可以通过定义发起人、备忘录和负责人来实现备忘录模式。备忘录模式常用于需要提供撤销操作的场景。</p>]]></content>
      
      
      <categories>
          
          <category> C++中的设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 备忘录模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中的设计模式：状态模式</title>
      <link href="/2023/09/18/C-%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/09/18/C-%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="标题：C-中的设计模式：状态模式"><strong>标题：C++中的设计模式：状态模式</strong></h2><p><strong>简介：</strong>状态模式是一种常用的设计模式，它允许一个对象在其内部状态改变时改变其行为。</p><p><strong>正文：</strong></p><p><strong>1. 状态模式的定义</strong></p><p>状态模式包括三个角色：Context（上下文）、State（状态）和具体的状态实现类。上下文包含一个指向当前状态的引用，可以在运行时改变状态。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">State</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">handle</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteStateA</span> : <span class="hljs-keyword">public</span> State &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">handle</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;State A\n&quot;</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteStateB</span> : <span class="hljs-keyword">public</span> State &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">handle</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;State B\n&quot;</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Context</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    State* currentState;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Context</span>(State* initialState) : <span class="hljs-built_in">currentState</span>(initialState) &#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setState</span><span class="hljs-params">(State* newState)</span> </span>&#123;<br>        currentState = newState;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">request</span><span class="hljs-params">()</span> </span>&#123;<br>        currentState-&gt;<span class="hljs-built_in">handle</span>();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>2. 具体实现</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ConcreteStateA stateA;<br>    ConcreteStateB stateB;<br><br>    <span class="hljs-function">Context <span class="hljs-title">context</span><span class="hljs-params">(&amp;stateA)</span></span>;<br>    context.<span class="hljs-built_in">request</span>();<br><br>    context.<span class="hljs-built_in">setState</span>(&amp;stateB);<br>    context.<span class="hljs-built_in">request</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3. 状态模式的应用</strong></p><p>状态模式常用于以下场景：</p><ul><li>当一个对象的行为取决于其内部状态，并且可以在运行时动态改变状态时。</li><li>当一个对象需要根据其状态执行不同的操作时。</li></ul><p><strong>4. 状态模式与策略模式的比较</strong></p><p>状态模式与策略模式有些相似，它们都允许对象在运行时改变其行为。但它们的关注点不同，策略模式关注于整体算法的替换，而状态模式关注于对象内部状态的切换。</p><p><strong>结论：</strong></p><p>状态模式是一种常用的设计模式，它允许一个对象在其内部状态改变时改变其行为。在C++中，可以通过定义抽象状态类和具体状态类，以及一个包含状态引用的上下文类来实现状态模式。状态模式可以使得对象在运行时根据内部状态改变其行为。</p>]]></content>
      
      
      <categories>
          
          <category> C++中的设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 状态模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中的设计模式：策略模式</title>
      <link href="/2023/09/18/C-%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/09/18/C-%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="标题：C-中的设计模式：策略模式"><strong>标题：C++中的设计模式：策略模式</strong></h2><p><strong>简介：</strong>策略模式是一种常用的设计模式，它定义了一族算法，使得它们可以互相替换，使得算法的变化不会影响到使用算法的客户。</p><p><strong>正文：</strong></p><p><strong>1. 策略模式的定义</strong></p><p>策略模式包括三个角色：Context（上下文）、Strategy（策略）和具体的策略实现类。上下文包含一个指向策略的引用，可以在运行时替换具体的策略。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Strategy</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">algorithm</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteStrategyA</span> : <span class="hljs-keyword">public</span> Strategy &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">algorithm</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Using Strategy A\n&quot;</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteStrategyB</span> : <span class="hljs-keyword">public</span> Strategy &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">algorithm</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Using Strategy B\n&quot;</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Context</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    Strategy* strategy;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Context</span>(Strategy* s) : <span class="hljs-built_in">strategy</span>(s) &#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setStrategy</span><span class="hljs-params">(Strategy* s)</span> </span>&#123;<br>        strategy = s;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">execute</span><span class="hljs-params">()</span> </span>&#123;<br>        strategy-&gt;<span class="hljs-built_in">algorithm</span>();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>2. 具体实现</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ConcreteStrategyA strategyA;<br>    ConcreteStrategyB strategyB;<br><br>    <span class="hljs-function">Context <span class="hljs-title">context</span><span class="hljs-params">(&amp;strategyA)</span></span>;<br>    context.<span class="hljs-built_in">execute</span>();<br><br>    context.<span class="hljs-built_in">setStrategy</span>(&amp;strategyB);<br>    context.<span class="hljs-built_in">execute</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3. 策略模式的应用</strong></p><p>策略模式常用于以下场景：</p><ul><li>当一个问题有多个解决策略，且可以动态切换时。</li><li>当需要在不同情况下使用不同的算法时。</li></ul><p><strong>4. 策略模式与工厂模式的结合</strong></p><p>策略模式通常与工厂模式结合使用，以便在运行时动态选择合适的策略。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">StrategyFactory</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">static</span> Strategy* <span class="hljs-title">createStrategy</span><span class="hljs-params">(<span class="hljs-type">char</span> type)</span> </span>&#123;<br>        <span class="hljs-keyword">switch</span> (type) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;A&#x27;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">ConcreteStrategyA</span>();<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;B&#x27;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">ConcreteStrategyB</span>();<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>结论：</strong></p><p>策略模式是一种常用的设计模式，它定义了一族算法，使得它们可以互相替换，使得算法的变化不会影响到使用算法的客户。在C++中，可以通过定义抽象策略类和具体策略类，以及一个包含策略引用的上下文类来实现策略模式。策略模式通常与工厂模式结合使用，以便在运行时动态选择合适的策略。</p>]]></content>
      
      
      <categories>
          
          <category> C++中的设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 策略模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中的设计模式：装饰者模式</title>
      <link href="/2023/09/18/C-%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/09/18/C-%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="标题：C-中的设计模式：装饰者模式"><strong>标题：C++中的设计模式：装饰者模式</strong></h2><p><strong>简介：</strong>装饰者模式是一种常用的设计模式，它允许动态地给一个对象添加额外的功能。</p><p><strong>正文：</strong></p><p><strong>1. 装饰者模式的定义</strong></p><p>装饰者模式有两个关键角色：Component（组件）和 Decorator（装饰者）。组件是一个抽象类，定义了基本的操作，可以有一个具体的实现。装饰者也是一个抽象类，继承自组件，它包含了一个指向组件的引用，并且会将所有操作委派给组件。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Component</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">operation</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteComponent</span> : <span class="hljs-keyword">public</span> Component &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">operation</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;ConcreteComponent operation\n&quot;</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Decorator</span> : <span class="hljs-keyword">public</span> Component &#123;<br><span class="hljs-keyword">private</span>:<br>    Component* component;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Decorator</span>(Component* comp) : <span class="hljs-built_in">component</span>(comp) &#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">operation</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        component-&gt;<span class="hljs-built_in">operation</span>();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>2. 具体实现</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Component* comp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ConcreteComponent</span>();<br>    comp-&gt;<span class="hljs-built_in">operation</span>();<br><br>    Component* decoratedComp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Decorator</span>(comp);<br>    decoratedComp-&gt;<span class="hljs-built_in">operation</span>();<br><br>    <span class="hljs-keyword">delete</span> decoratedComp; <span class="hljs-comment">// 注意需要释放内存</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3. 装饰者模式的应用</strong></p><p>装饰者模式常用于以下场景：</p><ul><li>在不影响其他对象的情况下，动态地给一个对象添加功能。</li><li>需要扩展一个类的功能，但是通过继承会导致类的数量激增。</li></ul><p><strong>4. C++中的标准装饰者模式</strong></p><p>在C++中，可以使用标准库中的装饰者模式，如<code>std::ifstream</code>和<code>std::ofstream</code>等。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fstream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">std::ofstream <span class="hljs-title">file</span><span class="hljs-params">(<span class="hljs-string">&quot;example.txt&quot;</span>)</span></span>;<br>    file &lt;&lt; <span class="hljs-string">&quot;Hello, world!\n&quot;</span>;<br>    file.<span class="hljs-built_in">close</span>();<br><br>    <span class="hljs-function">std::ifstream <span class="hljs-title">inputFile</span><span class="hljs-params">(<span class="hljs-string">&quot;example.txt&quot;</span>)</span></span>;<br>    std::string line;<br>    <span class="hljs-keyword">while</span> (std::<span class="hljs-built_in">getline</span>(inputFile, line)) &#123;<br>        std::cout &lt;&lt; line &lt;&lt; std::endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>结论：</strong></p><p>装饰者模式是一种常用的设计模式，它允许动态地给一个对象添加额外的功能。在C++中，可以通过定义抽象组件和抽象装饰者来实现装饰者模式。标准库中的一些类也使用了装饰者模式，以提供额外的功能。</p>]]></content>
      
      
      <categories>
          
          <category> C++中的设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 装饰者模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中的设计模式：适配器模式</title>
      <link href="/2023/09/18/C-%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/09/18/C-%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="标题：C-中的设计模式：适配器模式"><strong>标题：C++中的设计模式：适配器模式</strong></h2><p><strong>简介：</strong>适配器模式是一种常用的设计模式，它允许接口不兼容的类能够一起工作。</p><p><strong>正文：</strong></p><p><strong>1. 适配器模式的定义</strong></p><p>适配器模式有三个角色：目标接口（Target）、被适配者（Adaptee）和适配器（Adapter）。适配器将被适配者的接口转换成目标接口，使得两者能够协同工作。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Target</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">request</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Adaptee</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">specificRequest</span><span class="hljs-params">()</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Specific request\n&quot;</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Adapter</span> : <span class="hljs-keyword">public</span> Target &#123;<br><span class="hljs-keyword">private</span>:<br>    Adaptee* adaptee;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Adapter</span>(Adaptee* a) : <span class="hljs-built_in">adaptee</span>(a) &#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">request</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        adaptee-&gt;<span class="hljs-built_in">specificRequest</span>();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>2. 具体实现</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Adaptee adaptee;<br>    <span class="hljs-function">Adapter <span class="hljs-title">adapter</span><span class="hljs-params">(&amp;adaptee)</span></span>;<br>    adapter.<span class="hljs-built_in">request</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3. 对象适配器与类适配器</strong></p><p>在适配器模式中，有两种实现方式：对象适配器和类适配器。</p><p>对象适配器使用组合来连接目标接口与被适配者，而类适配器使用多重继承。</p><p><strong>4. 适配器模式的应用</strong></p><p>适配器模式常用于以下场景：</p><ul><li>在不修改现有类的情况下，使其与其他接口协同工作。</li><li>将多个类的接口整合成一个统一的接口，以提供更简洁的接口。</li></ul><p><strong>结论：</strong></p><p>适配器模式是一种常用的设计模式，它允许接口不兼容的类能够一起工作。在C++中，可以通过适配器将被适配者的接口转换成目标接口，从而实现两者的协同工作。</p>]]></content>
      
      
      <categories>
          
          <category> C++中的设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 适配器模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中的设计模式：观察者模式</title>
      <link href="/2023/09/18/C-%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/09/18/C-%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="标题：C-中的设计模式：观察者模式"><strong>标题：C++中的设计模式：观察者模式</strong></h2><p><strong>简介：</strong>观察者模式是一种常用的设计模式，它定义了对象之间的一对多依赖关系，当一个对象状态发生改变时，所有依赖于它的对象都会得到通知并自动更新。</p><p><strong>正文：</strong></p><p><strong>1. 观察者模式的定义</strong></p><p>观察者模式包括两个角色：Subject（主题）和Observer（观察者）。主题维护一组观察者，并提供方法用于添加、移除和通知观察者。观察者定义了一个更新方法，用于在接收到通知时更新自身状态。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Observer</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Subject</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    std::vector&lt;Observer*&gt; observers;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addObserver</span><span class="hljs-params">(Observer* obs)</span> </span>&#123;<br>        observers.<span class="hljs-built_in">push_back</span>(obs);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">removeObserver</span><span class="hljs-params">(Observer* obs)</span> </span>&#123;<br>        <span class="hljs-keyword">auto</span> it = std::<span class="hljs-built_in">find</span>(observers.<span class="hljs-built_in">begin</span>(), observers.<span class="hljs-built_in">end</span>(), obs);<br>        <span class="hljs-keyword">if</span> (it != observers.<span class="hljs-built_in">end</span>()) &#123;<br>            observers.<span class="hljs-built_in">erase</span>(it);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">notifyObservers</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (Observer* obs : observers) &#123;<br>            obs-&gt;<span class="hljs-built_in">update</span>();<br>        &#125;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Observer</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>2. 具体实现</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteObserverA</span> : <span class="hljs-keyword">public</span> Observer &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;ConcreteObserverA received update\n&quot;</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteObserverB</span> : <span class="hljs-keyword">public</span> Observer &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;ConcreteObserverB received update\n&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3. 观察者模式的应用</strong></p><p>观察者模式常用于以下场景：</p><ul><li>当一个对象的状态发生改变时，需要通知其他对象进行相应的更新。</li><li>当一个对象需要将自身的变化通知给一组对象时。</li></ul><p><strong>4. C++中的标准观察者模式</strong></p><p>在C++中，标准库提供了<code>std::observable</code>和<code>std::observer</code>来实现观察者模式，例如<code>std::vector</code>和<code>std::function</code>。</p><p><strong>结论：</strong></p><p>观察者模式是一种常用的设计模式，它定义了对象之间的一对多依赖关系，当一个对象状态发生改变时，所有依赖于它的对象都会得到通知并自动更新。在C++中，可以通过定义主题和观察者的抽象类，以及具体的主题和观察者来实现观察者模式。观察者模式常用于需要将对象的变化通知给一组对象的场景。</p>]]></content>
      
      
      <categories>
          
          <category> C++中的设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 观察者模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中的设计模式：工厂模式</title>
      <link href="/2023/09/18/C-%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/09/18/C-%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="标题：C-中的设计模式：工厂模式"><strong>标题：C++中的设计模式：工厂模式</strong></h2><p><strong>简介：</strong>工厂模式是一种常用的设计模式，它提供了一种创建对象的接口，但允许子类决定实例化的类。</p><p><strong>正文：</strong></p><p><strong>1. 工厂模式的定义</strong></p><p>工厂模式包括三个角色：Product（产品）、ConcreteProduct（具体产品）和Factory（工厂）。工厂类负责创建产品的实例，而具体的产品类负责实现产品的具体行为。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Product</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">operation</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteProductA</span> : <span class="hljs-keyword">public</span> Product &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">operation</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Product A\n&quot;</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteProductB</span> : <span class="hljs-keyword">public</span> Product &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">operation</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Product B\n&quot;</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Factory</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> Product* <span class="hljs-title">createProduct</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteFactoryA</span> : <span class="hljs-keyword">public</span> Factory &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">Product* <span class="hljs-title">createProduct</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">ConcreteProductA</span>();<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteFactoryB</span> : <span class="hljs-keyword">public</span> Factory &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">Product* <span class="hljs-title">createProduct</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">ConcreteProductB</span>();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>2. 具体实现</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ConcreteFactoryA factoryA;<br>    ConcreteFactoryB factoryB;<br><br>    Product* productA = factoryA.<span class="hljs-built_in">createProduct</span>();<br>    Product* productB = factoryB.<span class="hljs-built_in">createProduct</span>();<br><br>    productA-&gt;<span class="hljs-built_in">operation</span>();<br>    productB-&gt;<span class="hljs-built_in">operation</span>();<br><br>    <span class="hljs-keyword">delete</span> productA;<br>    <span class="hljs-keyword">delete</span> productB;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3. 工厂模式的应用</strong></p><p>工厂模式常用于以下场景：</p><ul><li>当一个类不知道它必须创建的对象的类时。</li><li>当一个类希望将对象的创建延迟到其子类时。</li></ul><p><strong>4. 工厂模式的扩展：抽象工厂模式</strong></p><p>抽象工厂模式提供了一种创建一系列相关或相互依赖对象的接口，而无需指定它们的具体类。</p><p><strong>结论：</strong></p><p>工厂模式是一种常用的设计模式，它提供了一种创建对象的接口，但允许子类决定实例化的类。在C++中，可以通过定义产品、具体产品和工厂来实现工厂模式。工厂模式常用于需要将对象的创建与具体业务逻辑分离的场景。</p>]]></content>
      
      
      <categories>
          
          <category> C++中的设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 工厂模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中的设计模式：单例模式</title>
      <link href="/2023/09/17/C-%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/09/17/C-%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="标题：C-中的设计模式：单例模式"><strong>标题：C++中的设计模式：单例模式</strong></h2><p><strong>简介：</strong>单例模式是一种常用的设计模式，它确保一个类只有一个实例，并提供一个全局访问点。</p><p><strong>正文：</strong></p><p><strong>1. 单例模式的定义</strong></p><p>单例模式保证一个类只有一个实例，并提供一个访问该实例的全局入口。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">static</span> Singleton* instance;<br>    <span class="hljs-built_in">Singleton</span>() &#123;&#125; <span class="hljs-comment">// 私有构造函数</span><br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">static</span> Singleton* <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!instance) &#123;<br>            instance = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Singleton</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>2. 单例模式的实现</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Singleton* Singleton::instance = <span class="hljs-literal">nullptr</span>; <span class="hljs-comment">// 静态成员变量需要在类外初始化</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Singleton* obj1 = Singleton::<span class="hljs-built_in">getInstance</span>();<br>    Singleton* obj2 = Singleton::<span class="hljs-built_in">getInstance</span>();<br><br>    <span class="hljs-keyword">if</span> (obj1 == obj2) &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;obj1 and obj2 are the same instance\n&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;obj1 and obj2 are different instances\n&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3. 单例模式的应用</strong></p><p>单例模式常用于以下场景：</p><ul><li>当一个类只能有一个实例，并且需要在全局范围内提供访问点时。</li><li>当需要控制资源的分配，以避免多次创建相同对象时。</li></ul><p><strong>4. 单例模式的线程安全实现</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">static</span> Singleton* instance;<br>    <span class="hljs-built_in">Singleton</span>() &#123;&#125;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">static</span> Singleton* <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!instance) &#123;<br>            <span class="hljs-function">std::lock_guard&lt;std::mutex&gt; <span class="hljs-title">lock</span><span class="hljs-params">(mutex)</span></span>; <span class="hljs-comment">// 加锁</span><br>            <span class="hljs-keyword">if</span> (!instance) &#123;<br>                instance = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Singleton</span>();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br><br>    <span class="hljs-type">static</span> std::mutex mutex; <span class="hljs-comment">// 互斥锁</span><br>&#125;;<br><br>Singleton* Singleton::instance = <span class="hljs-literal">nullptr</span>;<br>std::mutex Singleton::mutex;<br></code></pre></td></tr></table></figure><p><strong>结论：</strong></p><p>单例模式是一种常用的设计模式，它确保一个类只有一个实例，并提供一个全局访问点。在C++中，可以通过将构造函数私有化、提供一个静态成员变量以及一个静态方法来实现单例模式。单例模式常用于需要确保只有一个实例存在的场景。</p>]]></content>
      
      
      <categories>
          
          <category> C++中的设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 单例模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中的异常处理与错误处理</title>
      <link href="/2023/09/17/C-%E4%B8%AD%E7%9A%84%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E4%B8%8E%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
      <url>/2023/09/17/C-%E4%B8%AD%E7%9A%84%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E4%B8%8E%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="标题：C-中的异常处理与错误处理"><strong>标题：C++中的异常处理与错误处理</strong></h2><p><strong>简介：</strong>异常处理是在程序运行时发生错误时采取的一种机制，它允许程序在异常发生时进行相应的处理，而不是直接导致程序崩溃。</p><p><strong>正文：</strong></p><p><strong>1. 异常的基本概念</strong></p><p>在C++中，异常是一种程序运行时错误的信号，它可以是一个对象、一个基本数据类型或者一个指针。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// 可能抛出异常的代码</span><br>&#125; <span class="hljs-built_in">catch</span> (ExceptionType&amp; e) &#123;<br>    <span class="hljs-comment">// 处理异常的代码</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2. 异常的抛出</strong></p><p>可以使用<code>throw</code>关键字抛出异常。通常情况下，抛出的是一个异常对象。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">myFunction</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-comment">/* 发生错误的条件 */</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-built_in">MyException</span>(<span class="hljs-string">&quot;发生错误&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3. 异常的捕获</strong></p><p>异常的捕获由<code>try</code>块和相应的<code>catch</code>块组成。当<code>try</code>块中的代码发生异常时，控制权会转移到与异常类型匹配的<code>catch</code>块中。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-built_in">myFunction</span>();<br>&#125; <span class="hljs-built_in">catch</span> (MyException&amp; e) &#123;<br>    <span class="hljs-comment">// 处理异常的代码</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>4. 异常类型的继承关系</strong></p><p>异常可以通过继承的方式建立类型的层次结构，从而使得我们可以通过基类的<code>catch</code>块来捕获派生类的异常。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseException</span> &#123;&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DerivedException</span> : <span class="hljs-keyword">public</span> BaseException &#123;&#125;;<br><br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-comment">/* 发生DerivedException条件 */</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-built_in">DerivedException</span>();<br>    &#125;<br>&#125; <span class="hljs-built_in">catch</span> (BaseException&amp; e) &#123;<br>    <span class="hljs-comment">// 可以捕获BaseException及其派生类的异常</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>5. 使用标准异常</strong></p><p>C++标准库提供了一些标准异常类，它们继承自<code>std::exception</code>类，可以用来处理各种常见的异常情况。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-comment">/* 发生标准异常条件 */</span>) &#123;<br>        <span class="hljs-keyword">throw</span> std::<span class="hljs-built_in">runtime_error</span>(<span class="hljs-string">&quot;发生运行时错误&quot;</span>);<br>    &#125;<br>&#125; <span class="hljs-built_in">catch</span> (<span class="hljs-type">const</span> std::exception&amp; e) &#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;捕获到异常：&quot;</span> &lt;&lt; e.<span class="hljs-built_in">what</span>() &lt;&lt; std::endl;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>6. 自定义异常类</strong></p><p>可以通过继承<code>std::exception</code>类来定义自己的异常类，从而实现对特定异常的处理。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyException</span> : <span class="hljs-keyword">public</span> std::exception &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">MyException</span>(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* message) : <span class="hljs-built_in">message</span>(message) &#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span>* <span class="hljs-title">what</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-title">throw</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> message.<span class="hljs-built_in">c_str</span>();<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    std::string message;<br>&#125;;<br><br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-comment">/* 发生自定义异常条件 */</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-built_in">MyException</span>(<span class="hljs-string">&quot;发生自定义异常&quot;</span>);<br>    &#125;<br>&#125; <span class="hljs-built_in">catch</span> (<span class="hljs-type">const</span> MyException&amp; e) &#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;捕获到自定义异常：&quot;</span> &lt;&lt; e.<span class="hljs-built_in">what</span>() &lt;&lt; std::endl;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>结论：</strong></p><p>异常处理是C++中重要的错误处理机制，它允许程序在发生错误时进行相应的处理，而不是直接导致程序崩溃。通过<code>try-catch</code>块可以捕获异常并进行相应的处理，同时也可以定义自己的异常类来处理特定的异常情况。</p>]]></content>
      
      
      <categories>
          
          <category> c++中的那些事 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 异常处理与错误处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中的设计模式与最佳实践</title>
      <link href="/2023/09/17/C-%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
      <url>/2023/09/17/C-%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="标题：C-中的设计模式与最佳实践"><strong>标题：C++中的设计模式与最佳实践</strong></h2><p><strong>简介：</strong>设计模式是解决特定类型问题的通用可重用解决方案，而最佳实践是在开发过程中积累的一些优良经验和技巧。</p><p><strong>正文：</strong></p><p><strong>1. 单例模式（Singleton Pattern）</strong></p><p>单例模式确保一个类只有一个实例，并提供一个全局访问点。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">static</span> Singleton&amp; <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-type">static</span> Singleton instance;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-built_in">Singleton</span>() &#123;&#125;<br>    <span class="hljs-built_in">Singleton</span>(<span class="hljs-type">const</span> Singleton&amp;);<br>    Singleton&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> Singleton&amp;);<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>2. 工厂模式（Factory Pattern）</strong></p><p>工厂模式用于创建对象，隐藏了对象的创建逻辑。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Product</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">operation</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteProduct</span> : <span class="hljs-keyword">public</span> Product &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">operation</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 具体产品的操作</span><br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Factory</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> Product* <span class="hljs-title">createProduct</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteFactory</span> : <span class="hljs-keyword">public</span> Factory &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> Product* <span class="hljs-title">createProduct</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">ConcreteProduct</span>();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>3. 观察者模式（Observer Pattern）</strong></p><p>观察者模式定义了一种一对多的依赖关系，当一个对象的状态发生变化时，所有依赖于它的对象都会得到通知。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Observer</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteObserver</span> : <span class="hljs-keyword">public</span> Observer &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 观察者的更新操作</span><br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Subject</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">attach</span><span class="hljs-params">(Observer* observer)</span> </span>&#123;<br>        observers.<span class="hljs-built_in">push_back</span>(observer);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">notify</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (Observer* observer : observers) &#123;<br>            observer-&gt;<span class="hljs-built_in">update</span>();<br>        &#125;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    std::vector&lt;Observer*&gt; observers;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>4. RAII（资源获取即初始化）</strong></p><p>RAII是一种C++编程的重要理念，通过在对象的构造函数中获取资源，利用析构函数在对象生命周期结束时释放资源。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Resource</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Resource</span>() &#123;<br>        <span class="hljs-comment">// 获取资源</span><br>    &#125;<br><br>    ~<span class="hljs-built_in">Resource</span>() &#123;<br>        <span class="hljs-comment">// 释放资源</span><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>5. 异常安全性（Exception Safety）</strong></p><p>在C++中，保证程序在发生异常时不会泄露资源或者处于不稳定状态是非常重要的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// 可能抛出异常的代码</span><br>&#125; <span class="hljs-built_in">catch</span> (<span class="hljs-type">const</span> std::exception&amp; e) &#123;<br>    <span class="hljs-comment">// 异常处理逻辑</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>结论：</strong></p><p>设计模式是解决特定类型问题的通用可重用解决方案，而最佳实践是在开发过程中积累的一些优良经验和技巧。通过应用设计模式和遵循最佳实践，可以提高代码的可读性、可维护性和稳定性。</p><p>**后面会出专栏，敬请期待 **</p>]]></content>
      
      
      <categories>
          
          <category> c++中的那些事 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 设计模式与最佳实践 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中的代码优化与性能调优</title>
      <link href="/2023/09/17/C-%E4%B8%AD%E7%9A%84%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96%E4%B8%8E%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/"/>
      <url>/2023/09/17/C-%E4%B8%AD%E7%9A%84%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96%E4%B8%8E%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/</url>
      
        <content type="html"><![CDATA[<h2 id="标题：C-中的代码优化与性能调优"><strong>标题：C++中的代码优化与性能调优</strong></h2><p><strong>简介：</strong>代码优化和性能调优是提升程序运行效率和响应速度的关键步骤，特别对于大型项目或需要高性能的应用来说至关重要。</p><p><strong>正文：</strong></p><p><strong>1. 选择合适的数据结构和算法</strong></p><p>选择适当的数据结构和算法是保证程序高效运行的基础，它们直接影响到程序的执行速度和内存消耗。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 例子：选择合适的容器</span><br>std::vector&lt;<span class="hljs-type">int</span>&gt; vec; <span class="hljs-comment">// 适用于动态大小的数组</span><br>std::list&lt;<span class="hljs-type">int</span>&gt; lst;   <span class="hljs-comment">// 适用于频繁的插入和删除操作</span><br></code></pre></td></tr></table></figure><p><strong>2. 避免频繁的内存分配和释放</strong></p><p>频繁的内存分配和释放会增加程序的开销，可以通过使用对象池、预分配内存等方式来避免。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 例子：使用对象池</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjectPool</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">Object* <span class="hljs-title">allocate</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (freeList.<span class="hljs-built_in">empty</span>()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            Object* obj = freeList.<span class="hljs-built_in">back</span>();<br>            freeList.<span class="hljs-built_in">pop_back</span>();<br>            <span class="hljs-keyword">return</span> obj;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">deallocate</span><span class="hljs-params">(Object* obj)</span> </span>&#123;<br>        freeList.<span class="hljs-built_in">push_back</span>(obj);<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    std::vector&lt;Object*&gt; freeList;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>3. 减少函数调用开销</strong></p><p>函数调用会带来一定的开销，尤其在循环内部。可以考虑将一些短小的函数内联。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 例子：内联函数</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>4. 使用多线程和并行编程</strong></p><p>在多核处理器上，使用多线程可以充分利用硬件资源，提高程序的并发性和性能。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 例子：使用std::thread进行多线程编程</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;thread&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">myThreadFunction</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 线程执行的任务</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">std::thread <span class="hljs-title">myThread</span><span class="hljs-params">(myThreadFunction)</span></span>;<br>    myThread.<span class="hljs-built_in">join</span>(); <span class="hljs-comment">// 等待线程执行完毕</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>5. 进行性能测试和分析</strong></p><p>使用性能测试工具和分析器来评估程序的性能，并找出性能瓶颈所在。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 例子：使用GNU gprof进行性能分析</span><br><span class="hljs-comment">// 编译时加入-g选项，运行程序后使用gprof进行分析</span><br></code></pre></td></tr></table></figure><p><strong>结论：</strong></p><p>代码优化和性能调优是保证程序高效运行的关键步骤，特别对于大型项目或需要高性能的应用来说至关重要。通过选择合适的数据结构和算法、避免频繁的内存分配和释放、减少函数调用开销等方法，可以有效提升程序的性能。</p>]]></content>
      
      
      <categories>
          
          <category> c++中的那些事 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 代码优化 </tag>
            
            <tag> 性能调优 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中的代码测试与质量保证</title>
      <link href="/2023/09/17/C-%E4%B8%AD%E7%9A%84%E4%BB%A3%E7%A0%81%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%B4%A8%E9%87%8F%E4%BF%9D%E8%AF%81/"/>
      <url>/2023/09/17/C-%E4%B8%AD%E7%9A%84%E4%BB%A3%E7%A0%81%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%B4%A8%E9%87%8F%E4%BF%9D%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h2 id="标题：C-中的代码测试与质量保证"><strong>标题：C++中的代码测试与质量保证</strong></h2><p><strong>简介：</strong>代码测试和质量保证是保证软件稳定性和可靠性的关键步骤，它们包括单元测试、集成测试、静态分析等。</p><p><strong>正文：</strong></p><p><strong>1. 单元测试（Unit Testing）</strong></p><p>单元测试是针对程序中最小的可测试单元（如函数、方法）进行测试的过程，旨在确保每个单元的功能正常运行。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 例子：使用Google Test进行单元测试</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;gtest/gtest.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br><br><span class="hljs-built_in">TEST</span>(AddTest, PositiveNumbers) &#123;<br>    <span class="hljs-built_in">EXPECT_EQ</span>(<span class="hljs-built_in">add</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>), <span class="hljs-number">5</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span> </span>&#123;<br>    testing::<span class="hljs-built_in">InitGoogleTest</span>(&amp;argc, argv);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">RUN_ALL_TESTS</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2. 集成测试（Integration Testing）</strong></p><p>集成测试是将各个模块或单元组合在一起进行测试，以确保它们在整体系统中协同工作。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 例子：模拟集成测试</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;my_module1.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;my_module2.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> result1 = my_module1::<span class="hljs-built_in">function1</span>();<br>    <span class="hljs-type">int</span> result2 = my_module2::<span class="hljs-built_in">function2</span>();<br>    <span class="hljs-comment">// 检查结果</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3. 静态分析（Static Analysis）</strong></p><p>静态分析工具可以在不运行程序的情况下检查源代码，找出潜在的问题和错误。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 例子：使用Clang Static Analyzer进行静态分析</span><br><span class="hljs-comment">// 命令行使用：clang --analyze source.c</span><br></code></pre></td></tr></table></figure><p><strong>4. 代码审查（Code Review）</strong></p><p>代码审查是通过仔细检查代码来找出错误、改进代码质量的一种方法，通常通过团队成员相互审查来进行。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 例子：代码审查实践</span><br><span class="hljs-comment">// 团队成员A：提出改进意见</span><br><span class="hljs-comment">// 团队成员B：回复并讨论</span><br></code></pre></td></tr></table></figure><p><strong>5. 自动化构建与持续集成（CI/CD）</strong></p><p>自动化构建和持续集成是确保每次代码提交都能进行自动化测试和部署的重要手段。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 例子：使用Jenkins进行持续集成</span><br><span class="hljs-comment">// 配置Jenkins任务，将单元测试、集成测试等步骤自动化执行</span><br></code></pre></td></tr></table></figure><p><strong>结论：</strong></p><p>代码测试和质量保证是保证软件稳定性和可靠性的关键步骤，它们包括单元测试、集成测试、静态分析、代码审查、自动化构建与持续集成等。通过这些步骤，可以确保代码质量和功能的稳定性。</p>]]></content>
      
      
      <categories>
          
          <category> c++中的那些事 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 代码测试与质量保证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中的图形用户界面(GUI)与图形库</title>
      <link href="/2023/09/17/C-%E4%B8%AD%E7%9A%84%E5%9B%BE%E5%BD%A2%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2-GUI-%E4%B8%8E%E5%9B%BE%E5%BD%A2%E5%BA%93/"/>
      <url>/2023/09/17/C-%E4%B8%AD%E7%9A%84%E5%9B%BE%E5%BD%A2%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2-GUI-%E4%B8%8E%E5%9B%BE%E5%BD%A2%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="标题：C-中的图形用户界面-GUI-与图形库"><strong>标题：C++中的图形用户界面(GUI)与图形库</strong></h2><p><strong>简介：</strong>图形用户界面（Graphical User Interface, GUI）是现代软件开发中的重要组成部分，它允许用户通过图形化界面与程序交互。</p><p><strong>正文：</strong></p><p><strong>1. GUI库的选择</strong></p><p>C++中有许多可以用于创建图形用户界面的库，例如Qt、GTK、wxWidgets等。以下是使用Qt库创建一个简单窗口的示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QApplication&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QWidget&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span> </span>&#123;<br>    <span class="hljs-function">QApplication <span class="hljs-title">app</span><span class="hljs-params">(argc, argv)</span></span>;<br><br>    QWidget window;<br>    window.<span class="hljs-built_in">resize</span>(<span class="hljs-number">250</span>, <span class="hljs-number">150</span>);<br>    window.<span class="hljs-built_in">setWindowTitle</span>(<span class="hljs-string">&quot;Simple Window&quot;</span>);<br>    window.<span class="hljs-built_in">show</span>();<br><br>    <span class="hljs-keyword">return</span> app.<span class="hljs-built_in">exec</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2. 事件与信号槽</strong></p><p>GUI编程中，事件（Event）是用户对程序的操作，例如点击按钮、输入文本等。信号槽（Signal-Slot）机制允许对象间进行通信。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">QPushButton* button = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QPushButton</span>(<span class="hljs-string">&quot;Click Me&quot;</span>);<br>QObject::<span class="hljs-built_in">connect</span>(button, &amp;QPushButton::clicked, [=]() &#123;<br>    <span class="hljs-built_in">qDebug</span>() &lt;&lt; <span class="hljs-string">&quot;Button Clicked&quot;</span>;<br>&#125;);<br></code></pre></td></tr></table></figure><p><strong>3. 布局管理器</strong></p><p>布局管理器用于定义控件在窗口中的位置和大小，以适应不同大小的窗口。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">QHBoxLayout* layout = <span class="hljs-keyword">new</span> QHBoxLayout;<br>layout-&gt;<span class="hljs-built_in">addWidget</span>(button1);<br>layout-&gt;<span class="hljs-built_in">addWidget</span>(button2);<br>window.<span class="hljs-built_in">setLayout</span>(layout);<br></code></pre></td></tr></table></figure><p><strong>4. 绘图与图形库</strong></p><p>除了GUI库，C++还提供了许多用于图形绘制的库，如SFML、OpenGL等。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;SFML/Graphics.hpp&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">sf::RenderWindow <span class="hljs-title">window</span><span class="hljs-params">(sf::VideoMode(<span class="hljs-number">800</span>, <span class="hljs-number">600</span>), <span class="hljs-string">&quot;SFML Window&quot;</span>)</span></span>;<br>    <span class="hljs-keyword">while</span> (window.<span class="hljs-built_in">isOpen</span>()) &#123;<br>        sf::Event event;<br>        <span class="hljs-keyword">while</span> (window.<span class="hljs-built_in">pollEvent</span>(event)) &#123;<br>            <span class="hljs-keyword">if</span> (event.type == sf::Event::Closed)<br>                window.<span class="hljs-built_in">close</span>();<br>        &#125;<br>        window.<span class="hljs-built_in">clear</span>();<br>        <span class="hljs-comment">// 绘制图形</span><br>        window.<span class="hljs-built_in">display</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>5. Web界面开发与Web框架</strong></p><p>C++也可以用于Web界面开发，可以使用Web框架如CppCMS、Wt等。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cppcms/application.h&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">my_app</span> : <span class="hljs-keyword">public</span> cppcms::application &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">my_app</span>(cppcms::service&amp; srv) : cppcms::<span class="hljs-built_in">application</span>(srv) &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">(std::string url)</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>结论：</strong></p><p>图形用户界面是现代软件开发的重要组成部分，它提供了直观的交互方式。C++提供了许多可以用于创建图形用户界面的库和图形绘制的库，可以根据项目需求选择合适的库进行开发。</p>]]></content>
      
      
      <categories>
          
          <category> c++中的那些事 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 图形用户界面(GUI) </tag>
            
            <tag> 图形库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中的嵌入式系统与物联网</title>
      <link href="/2023/09/17/C-%E4%B8%AD%E7%9A%84%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B8%8E%E7%89%A9%E8%81%94%E7%BD%91/"/>
      <url>/2023/09/17/C-%E4%B8%AD%E7%9A%84%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B8%8E%E7%89%A9%E8%81%94%E7%BD%91/</url>
      
        <content type="html"><![CDATA[<h2 id="标题：C-中的嵌入式系统与物联网"><strong>标题：C++中的嵌入式系统与物联网</strong></h2><p><strong>简介：</strong>嵌入式系统和物联网是现代科技中不可或缺的一部分，它们涉及到各种设备和传感器的连接和控制。</p><p><strong>正文：</strong></p><p><strong>1. 嵌入式系统基础</strong></p><p>嵌入式系统是一种特殊用途的计算机系统，通常用于控制和处理嵌入在各种设备中的任务。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 使用Arduino平台进行嵌入式开发</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">pinMode</span>(LED_BUILTIN, OUTPUT);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">digitalWrite</span>(LED_BUILTIN, HIGH);<br>    <span class="hljs-built_in">delay</span>(<span class="hljs-number">1000</span>);<br>    <span class="hljs-built_in">digitalWrite</span>(LED_BUILTIN, LOW);<br>    <span class="hljs-built_in">delay</span>(<span class="hljs-number">1000</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2. 物联网与传感器连接</strong></p><p>物联网是指通过互联网将各种设备连接在一起，实现数据的交互和控制。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 使用C++连接传感器并上传数据</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fstream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">std::ifstream <span class="hljs-title">sensorData</span><span class="hljs-params">(<span class="hljs-string">&quot;sensor_data.txt&quot;</span>)</span></span>;<br>    <span class="hljs-type">int</span> value;<br>    sensorData &gt;&gt; value;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Sensor Value: &quot;</span> &lt;&lt; value &lt;&lt; std::endl;<br>    <span class="hljs-comment">// 将数据上传至服务器</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3. 通信协议与数据传输</strong></p><p>在物联网中，设备之间需要使用各种通信协议来进行数据传输，如MQTT、CoAP等。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 使用MQTT进行设备间通信</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;mosquitto.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">mosquitto</span>* mosq = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-built_in">mosquitto_lib_init</span>();<br>    mosq = <span class="hljs-built_in">mosquitto_new</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-built_in">mosquitto_connect</span>(mosq, <span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">1883</span>, <span class="hljs-number">60</span>);<br>    <span class="hljs-built_in">mosquitto_publish</span>(mosq, <span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;topic&quot;</span>, <span class="hljs-built_in">strlen</span>(<span class="hljs-string">&quot;message&quot;</span>), <span class="hljs-string">&quot;message&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">false</span>);<br>    <span class="hljs-built_in">mosquitto_destroy</span>(mosq);<br>    <span class="hljs-built_in">mosquitto_lib_cleanup</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>4. 嵌入式系统中的实时操作系统（RTOS）</strong></p><p>实时操作系统是一种用于控制实时应用程序的操作系统，通常用于嵌入式系统中。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 使用FreeRTOS进行嵌入式开发</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;FreeRTOS.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;task.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">vTaskFunction</span><span class="hljs-params">(<span class="hljs-type">void</span>* pvParameters)</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">// 任务逻辑</span><br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">xTaskCreate</span>(vTaskFunction, <span class="hljs-string">&quot;Task&quot;</span>, configMINIMAL_STACK_SIZE, <span class="hljs-literal">NULL</span>, tskIDLE_PRIORITY, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-built_in">vTaskStartScheduler</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>5. 嵌入式系统中的低功耗设计</strong></p><p>在物联网中，许多设备需要考虑功耗问题，以保证长时间的使用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 低功耗设计示例</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ArduinoLowPower.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 初始化代码</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 代码逻辑</span><br>    LowPower.<span class="hljs-built_in">sleep</span>(<span class="hljs-number">60000</span>); <span class="hljs-comment">// 休眠1分钟</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>结论：</strong></p><p>嵌入式系统和物联网是现代科技的重要组成部分，它们涉及到各种设备和传感器的连接、控制和数据交互。C++作为一门灵活且强大的编程语言，在嵌入式系统和物联网的开发中也起到了重要作用。</p>]]></content>
      
      
      <categories>
          
          <category> c++中的那些事 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 嵌入式系统 </tag>
            
            <tag> 物联网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中的网络编程与套接字</title>
      <link href="/2023/09/17/C-%E4%B8%AD%E7%9A%84%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%B8%8E%E5%A5%97%E6%8E%A5%E5%AD%97/"/>
      <url>/2023/09/17/C-%E4%B8%AD%E7%9A%84%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%B8%8E%E5%A5%97%E6%8E%A5%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h2 id="标题：C-中的网络编程与套接字"><strong>标题：C++中的网络编程与套接字</strong></h2><p><strong>简介：</strong>网络编程是现代软件开发中的重要组成部分，它允许程序通过网络进行通信，实现远程连接和数据传输。</p><p><strong>正文：</strong></p><p><strong>1. 套接字基础</strong></p><p>套接字（socket）是实现网络通信的一种机制，它允许计算机通过网络进行数据传输。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;arpa/inet.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> serverSocket = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (serverSocket == <span class="hljs-number">-1</span>) &#123;<br>        std::cerr &lt;&lt; <span class="hljs-string">&quot;Failed to create socket&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span> serverAddress;<br>    serverAddress.sin_family = AF_INET;<br>    serverAddress.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">8080</span>);<br>    serverAddress.sin_addr.s_addr = INADDR_ANY;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">bind</span>(serverSocket, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;serverAddress, <span class="hljs-built_in">sizeof</span>(serverAddress)) == <span class="hljs-number">-1</span>) &#123;<br>        std::cerr &lt;&lt; <span class="hljs-string">&quot;Failed to bind socket&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-built_in">close</span>(serverSocket);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">listen</span>(serverSocket, <span class="hljs-number">5</span>) == <span class="hljs-number">-1</span>) &#123;<br>        std::cerr &lt;&lt; <span class="hljs-string">&quot;Failed to listen on socket&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-built_in">close</span>(serverSocket);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-type">int</span> clientSocket = <span class="hljs-built_in">accept</span>(serverSocket, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">if</span> (clientSocket == <span class="hljs-number">-1</span>) &#123;<br>        std::cerr &lt;&lt; <span class="hljs-string">&quot;Failed to accept connection&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-built_in">close</span>(serverSocket);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-type">char</span> message[] = <span class="hljs-string">&quot;Hello, client!&quot;</span>;<br>    <span class="hljs-built_in">send</span>(clientSocket, message, <span class="hljs-built_in">strlen</span>(message), <span class="hljs-number">0</span>);<br><br>    <span class="hljs-built_in">close</span>(clientSocket);<br>    <span class="hljs-built_in">close</span>(serverSocket);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2. 客户端与服务器</strong></p><p>网络通信通常涉及到客户端和服务器两端。服务器负责接受连接和处理请求，客户端负责发起连接和发送请求。</p><p><strong>3. HTTP请求与响应</strong></p><p>HTTP是一种应用层协议，用于在Web浏览器和服务器之间传递数据。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp">GET /index.html HTTP/<span class="hljs-number">1.1</span><br>Host: www.example.com<br><br>HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK<br>Content-Type: text/html<br><br>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Example Page&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;h1&gt;Hello, World!&lt;/h1&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p><strong>4. 使用第三方库简化网络编程</strong></p><p>C++标准库并不提供直接的网络编程支持，但可以使用第三方库（如Boost.Asio）来简化网络编程。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/asio.hpp&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    boost::asio::io_context ioContext;<br>    boost::asio::ip::<span class="hljs-function">tcp::acceptor <span class="hljs-title">acceptor</span><span class="hljs-params">(ioContext, boost::asio::ip::tcp::endpoint(boost::asio::ip::tcp::v4(), <span class="hljs-number">8080</span>))</span></span>;<br><br>    boost::asio::ip::<span class="hljs-function">tcp::socket <span class="hljs-title">socket</span><span class="hljs-params">(ioContext)</span></span>;<br>    acceptor.<span class="hljs-built_in">accept</span>(socket);<br><br>    std::string message = <span class="hljs-string">&quot;Hello, client!&quot;</span>;<br>    boost::asio::<span class="hljs-built_in">write</span>(socket, boost::asio::<span class="hljs-built_in">buffer</span>(message));<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>结论：</strong></p><p>网络编程是现代软件开发的重要组成部分，它允许程序通过网络进行通信，实现远程连接和数据传输。了解套接字的基本使用和HTTP通信原理是进行网络编程的基础。</p>]]></content>
      
      
      <categories>
          
          <category> c++中的那些事 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 网络编程 </tag>
            
            <tag> 套接字 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中的并发编程与多线程控制</title>
      <link href="/2023/09/17/C-%E4%B8%AD%E7%9A%84%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B8%8E%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
      <url>/2023/09/17/C-%E4%B8%AD%E7%9A%84%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B8%8E%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="标题：C-中的并发编程与多线程控制"><strong>标题：C++中的并发编程与多线程控制</strong></h2><p><strong>简介：</strong>并发编程允许程序同时执行多个任务，而不是按顺序一个接一个地执行。C++提供了多线程支持，使得并发编程变得容易。</p><p><strong>正文：</strong></p><p><strong>1. 多线程基础</strong></p><p>C++标准库提供了 <code>std::thread</code> 类来支持多线程编程。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;thread&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">myThreadFunction</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 线程执行的任务</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">std::thread <span class="hljs-title">myThread</span><span class="hljs-params">(myThreadFunction)</span></span>;<br>    myThread.<span class="hljs-built_in">join</span>(); <span class="hljs-comment">// 等待线程执行完毕</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2. 线程同步与互斥量</strong></p><p>在多线程环境中，需要注意共享资源的访问控制，以避免竞态条件和数据竞争。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;mutex&gt;</span></span><br><br>std::mutex mtx;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">threadSafeFunction</span><span class="hljs-params">()</span> </span>&#123;<br>    mtx.<span class="hljs-built_in">lock</span>(); <span class="hljs-comment">// 加锁</span><br>    <span class="hljs-comment">// 访问共享资源</span><br>    mtx.<span class="hljs-built_in">unlock</span>(); <span class="hljs-comment">// 解锁</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3. 条件变量</strong></p><p>条件变量用于在线程之间进行通信，允许一个线程在满足特定条件之前等待。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;condition_variable&gt;</span></span><br><br>std::mutex mtx;<br>std::condition_variable cv;<br><span class="hljs-type">bool</span> dataReady = <span class="hljs-literal">false</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">producer</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 生产数据</span><br>    <span class="hljs-function">std::unique_lock&lt;std::mutex&gt; <span class="hljs-title">lock</span><span class="hljs-params">(mtx)</span></span>;<br>    dataReady = <span class="hljs-literal">true</span>;<br>    cv.<span class="hljs-built_in">notify_one</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">consumer</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">std::unique_lock&lt;std::mutex&gt; <span class="hljs-title">lock</span><span class="hljs-params">(mtx)</span></span>;<br>    cv.<span class="hljs-built_in">wait</span>(lock, []&#123; <span class="hljs-keyword">return</span> dataReady; &#125;);<br>    <span class="hljs-comment">// 使用数据</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>4. 异步任务与<code>std::async</code></strong></p><p>C++11引入了 <code>std::async</code> 来支持异步任务的执行。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;future&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">myTask</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 执行任务</span><br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::future&lt;<span class="hljs-type">int</span>&gt; fut = std::<span class="hljs-built_in">async</span>(myTask);<br>    <span class="hljs-type">int</span> result = fut.<span class="hljs-built_in">get</span>(); <span class="hljs-comment">// 获取任务结果</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>5. 线程池</strong></p><p>线程池是一种管理和复用线程的机制，可以有效地管理大量的任务。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;thread&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><br>std::queue&lt;std::function&lt;<span class="hljs-type">void</span>()&gt;&gt; taskQueue;<br>std::vector&lt;std::thread&gt; threads;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">workerThread</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>        std::function&lt;<span class="hljs-type">void</span>()&gt; task;<br>        &#123;<br>            <span class="hljs-function">std::unique_lock&lt;std::mutex&gt; <span class="hljs-title">lock</span><span class="hljs-params">(mtx)</span></span>;<br>            cv.<span class="hljs-built_in">wait</span>(lock, []&#123; <span class="hljs-keyword">return</span> !taskQueue.<span class="hljs-built_in">empty</span>(); &#125;);<br>            task = std::<span class="hljs-built_in">move</span>(taskQueue.<span class="hljs-built_in">front</span>());<br>            taskQueue.<span class="hljs-built_in">pop</span>();<br>        &#125;<br>        <span class="hljs-built_in">task</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>结论：</strong></p><p>并发编程是现代软件开发中的重要组成部分，它可以提高程序的性能和响应能力。但同时也引入了并发控制的问题，需要谨慎处理。通过使用多线程、互斥量、条件变量等工具，可以实现安全、高效的并发编程。</p>]]></content>
      
      
      <categories>
          
          <category> c++中的那些事 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 并发编程 </tag>
            
            <tag> 多线程控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中的面向对象编程与设计模式</title>
      <link href="/2023/09/17/C-%E4%B8%AD%E7%9A%84%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/09/17/C-%E4%B8%AD%E7%9A%84%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="标题：C-中的面向对象编程与设计模式"><strong>标题：C++中的面向对象编程与设计模式</strong></h2><p><strong>简介：</strong>面向对象编程（Object-Oriented Programming, OOP）是一种程序设计范式，它将程序组织为对象的集合，每个对象拥有特定的属性和行为。设计模式是一些通用的解决问题的方式。</p><p><strong>正文：</strong></p><p><strong>1. 类与对象</strong></p><p>类是定义了数据和方法的模板，对象是类的实例。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    std::string name;<br>    <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">introduce</span><span class="hljs-params">()</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Name: &quot;</span> &lt;&lt; name &lt;&lt; <span class="hljs-string">&quot;, Age: &quot;</span> &lt;&lt; age &lt;&lt; std::endl;<br>    &#125;<br>&#125;;<br><br>Person person1;<br>person<span class="hljs-number">1.</span>name = <span class="hljs-string">&quot;John&quot;</span>;<br>person<span class="hljs-number">1.</span>age = <span class="hljs-number">30</span>;<br>person<span class="hljs-number">1.</span><span class="hljs-built_in">introduce</span>();<br></code></pre></td></tr></table></figure><p><strong>2. 封装与继承</strong></p><p>封装是将数据和操作封装在一个单元中，只暴露必要的接口。继承允许一个类继承另一个类的属性和方法。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> : <span class="hljs-keyword">public</span> Person &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> studentID;<br>&#125;;<br><br>Student student1;<br>student<span class="hljs-number">1.</span>name = <span class="hljs-string">&quot;Jane&quot;</span>;<br>student<span class="hljs-number">1.</span>age = <span class="hljs-number">20</span>;<br>student<span class="hljs-number">1.</span>studentID = <span class="hljs-number">12345</span>;<br>student<span class="hljs-number">1.</span><span class="hljs-built_in">introduce</span>();<br></code></pre></td></tr></table></figure><p><strong>3. 多态与虚函数</strong></p><p>多态允许一个方法具有多个形式，虚函数是在基类中声明为虚函数的函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Drawing Shape&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span> : <span class="hljs-keyword">public</span> Shape &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Drawing Circle&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>4. 设计模式</strong></p><p>设计模式是解决特定类型问题的通用方法。例如，单例模式、工厂模式、观察者模式等。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-built_in">Singleton</span>() &#123;&#125;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">static</span> Singleton&amp; <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-type">static</span> Singleton instance;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>5. RAII与智能指针</strong></p><p>RAII是一种资源管理的编程技巧，智能指针是RAII的一种实现方式，它可以自动释放资源。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::unique_ptr&lt;<span class="hljs-type">int</span>&gt; smartPtr = std::<span class="hljs-built_in">make_unique</span>&lt;<span class="hljs-type">int</span>&gt;(<span class="hljs-number">5</span>);<br></code></pre></td></tr></table></figure><p><strong>结论：</strong></p><p>面向对象编程是一种强大的程序设计范式，它将程序组织为对象的集合，使得代码更加模块化和易于维护。设计模式提供了一些通用的解决问题的方式，可以在软件开发中得到应用。</p>]]></content>
      
      
      <categories>
          
          <category> c++中的那些事 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 面向对象编程 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中的文件操作和输入输出流</title>
      <link href="/2023/09/17/C-%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E5%92%8C%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%B5%81/"/>
      <url>/2023/09/17/C-%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E5%92%8C%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h2 id="标题：C-中的文件操作和输入输出流"><strong>标题：C++中的文件操作和输入输出流</strong></h2><p><strong>简介：</strong>文件操作和输入输出流是C++中处理文件和数据流的重要部分，它们允许程序读取和写入文件，进行数据的持久化存储。</p><p><strong>正文：</strong></p><p><strong>1. 文件读写基础</strong></p><p>C++提供了 <code>fstream</code> 类来进行文件的读写操作。它包括了 <code>ifstream</code>（用于读取文件）、<code>ofstream</code>（用于写入文件）和 <code>fstream</code>（可以同时读写文件）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fstream&gt;</span></span><br><br><span class="hljs-function">std::ofstream <span class="hljs-title">outFile</span><span class="hljs-params">(<span class="hljs-string">&quot;myfile.txt&quot;</span>)</span></span>;<br>outFile &lt;&lt; <span class="hljs-string">&quot;写入文件内容&quot;</span> &lt;&lt; std::endl;<br>outFile.<span class="hljs-built_in">close</span>();<br><br><span class="hljs-function">std::ifstream <span class="hljs-title">inFile</span><span class="hljs-params">(<span class="hljs-string">&quot;myfile.txt&quot;</span>)</span></span>;<br>std::string line;<br><span class="hljs-keyword">while</span> (std::<span class="hljs-built_in">getline</span>(inFile, line)) &#123;<br>    std::cout &lt;&lt; line &lt;&lt; std::endl;<br>&#125;<br>inFile.<span class="hljs-built_in">close</span>();<br></code></pre></td></tr></table></figure><p><strong>2. 文本文件与二进制文件</strong></p><p>文本文件以可读的字符形式存储，可以用文本编辑器打开查看。二进制文件以二进制数据形式存储，不能直接以文本形式打开。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 文本文件写入</span><br><span class="hljs-function">std::ofstream <span class="hljs-title">textFile</span><span class="hljs-params">(<span class="hljs-string">&quot;textfile.txt&quot;</span>)</span></span>;<br>textFile &lt;&lt; <span class="hljs-string">&quot;Hello, Text File!&quot;</span> &lt;&lt; std::endl;<br>textFile.<span class="hljs-built_in">close</span>();<br><br><span class="hljs-comment">// 二进制文件写入</span><br><span class="hljs-function">std::ofstream <span class="hljs-title">binaryFile</span><span class="hljs-params">(<span class="hljs-string">&quot;binaryfile.bin&quot;</span>, std::ios::binary)</span></span>;<br><span class="hljs-type">int</span> data = <span class="hljs-number">42</span>;<br>binaryFile.<span class="hljs-built_in">write</span>(<span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-type">char</span>*&gt;(&amp;data), <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>));<br>binaryFile.<span class="hljs-built_in">close</span>();<br></code></pre></td></tr></table></figure><p><strong>3. 文件流的异常处理</strong></p><p>在文件操作中，可能会出现打开失败、写入失败等情况，可以通过异常处理来处理这些情况。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::ofstream file;<br>file.<span class="hljs-built_in">exceptions</span>(std::ofstream::failbit | std::ofstream::badbit);<br><span class="hljs-keyword">try</span> &#123;<br>    file.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;myfile.txt&quot;</span>);<br>    file &lt;&lt; <span class="hljs-string">&quot;写入文件内容&quot;</span> &lt;&lt; std::endl;<br>    file.<span class="hljs-built_in">close</span>();<br>&#125; <span class="hljs-built_in">catch</span> (<span class="hljs-type">const</span> std::exception&amp; e) &#123;<br>    std::cerr &lt;&lt; <span class="hljs-string">&quot;Error: &quot;</span> &lt;&lt; e.<span class="hljs-built_in">what</span>() &lt;&lt; std::endl;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>4. 输入输出流操作符重载</strong></p><p>可以通过重载输入输出运算符 <code>&lt;&lt;</code> 和 <code>&gt;&gt;</code> 来实现自定义类型的输入输出。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    std::string name;<br>    <span class="hljs-type">int</span> age;<br>    <br>    <span class="hljs-keyword">friend</span> std::ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(std::ostream&amp; os, <span class="hljs-type">const</span> Person&amp; person) &#123;<br>        os &lt;&lt; <span class="hljs-string">&quot;Name: &quot;</span> &lt;&lt; person.name &lt;&lt; <span class="hljs-string">&quot;, Age: &quot;</span> &lt;&lt; person.age;<br>        <span class="hljs-keyword">return</span> os;<br>    &#125;<br><br>    <span class="hljs-keyword">friend</span> std::istream&amp; <span class="hljs-keyword">operator</span>&gt;&gt;(std::istream&amp; is, Person&amp; person) &#123;<br>        is &gt;&gt; person.name &gt;&gt; person.age;<br>        <span class="hljs-keyword">return</span> is;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>结论：</strong></p><p>文件操作和输入输出流是C++中进行数据持久化存储的重要部分。通过使用 <code>fstream</code> 类和输入输出流操作符的重载，可以实现对文件的读写操作。</p>]]></content>
      
      
      <categories>
          
          <category> c++中的那些事 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 文件操作 </tag>
            
            <tag> 输入输出流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中的STL容器与算法</title>
      <link href="/2023/09/17/C-%E4%B8%AD%E7%9A%84STL%E5%AE%B9%E5%99%A8%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
      <url>/2023/09/17/C-%E4%B8%AD%E7%9A%84STL%E5%AE%B9%E5%99%A8%E4%B8%8E%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="标题：C-中的STL容器与算法"><strong>标题：C++中的STL容器与算法</strong></h2><p><strong>简介：</strong>STL（Standard Template Library）是C++标准库的一部分，提供了丰富的容器和算法，可以极大地提升程序开发效率和代码质量。</p><p><strong>正文：</strong></p><p><strong>1. 容器</strong></p><p>STL提供了多种容器，每种容器都有不同的特性和适用场景。</p><ul><li><strong>vector：</strong> 动态数组，支持快速随机访问。</li><li><strong>list：</strong> 双向链表，支持高效的插入和删除。</li><li><strong>set：</strong> 基于红黑树的集合，元素有序且唯一。</li><li><strong>map：</strong> 基于红黑树的映射表，键值对存储。</li><li><strong>queue：</strong> 队列，先进先出。</li><li><strong>stack：</strong> 栈，后进先出。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><br>std::vector&lt;<span class="hljs-type">int</span>&gt; vec = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br>std::map&lt;std::string, <span class="hljs-type">int</span>&gt; myMap = &#123;&#123;<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-number">3</span>&#125;, &#123;<span class="hljs-string">&quot;banana&quot;</span>, <span class="hljs-number">2</span>&#125;&#125;;<br></code></pre></td></tr></table></figure><p><strong>2. 算法</strong></p><p>STL提供了大量的算法，可以用于对容器进行各种操作。</p><ul><li><strong>排序算法：</strong> <code>std::sort</code>, <code>std::stable_sort</code>, <code>std::partial_sort</code>等。</li><li><strong>查找算法：</strong> <code>std::find</code>, <code>std::binary_search</code>, <code>std::lower_bound</code>等。</li><li><strong>算术算法：</strong> <code>std::accumulate</code>, <code>std::inner_product</code>, <code>std::transform</code>等。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;numeric&gt;</span></span><br><br>std::vector&lt;<span class="hljs-type">int</span>&gt; vec = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br><span class="hljs-type">int</span> sum = std::<span class="hljs-built_in">accumulate</span>(vec.<span class="hljs-built_in">begin</span>(), vec.<span class="hljs-built_in">end</span>(), <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p><strong>3. 迭代器</strong></p><p>迭代器是STL的一个关键概念，它提供了一种访问容器元素的通用方式。</p><ul><li><strong>正向迭代器：</strong> <code>begin()</code>, <code>end()</code></li><li><strong>反向迭代器：</strong> <code>rbegin()</code>, <code>rend()</code></li><li><strong>随机访问迭代器：</strong> <code>std::vector</code>, <code>std::deque</code>等支持</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::vector&lt;<span class="hljs-type">int</span>&gt; vec = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> it = vec.<span class="hljs-built_in">begin</span>(); it != vec.<span class="hljs-built_in">end</span>(); ++it) &#123;<br>    <span class="hljs-comment">// 使用迭代器访问元素</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>结论：</strong></p><p>STL提供了丰富的容器和算法，可以大幅提升C++程序的开发效率和代码质量。熟练使用STL可以使代码更简洁、高效且易于维护。</p>]]></content>
      
      
      <categories>
          
          <category> c++中的那些事 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> STL容器 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中的多线程编程与并发控制</title>
      <link href="/2023/09/17/C-%E4%B8%AD%E7%9A%84%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E4%B8%8E%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/"/>
      <url>/2023/09/17/C-%E4%B8%AD%E7%9A%84%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E4%B8%8E%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="标题：C-中的多线程编程与并发控制"><strong>标题：C++中的多线程编程与并发控制</strong></h2><p><strong>简介：</strong>多线程编程是现代软件开发中的重要组成部分，它允许程序同时执行多个任务，提高了程序的性能和响应能力。但同时也引入了并发控制的问题，需要谨慎处理。</p><p><strong>正文：</strong></p><p><strong>1. 线程的基本概念</strong></p><p>线程是程序中的基本执行单元，它可以独立执行任务。C++标准库提供了 <code>std::thread</code> 类来支持线程的创建和管理。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;thread&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">myThreadFunction</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 线程执行的任务</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">std::thread <span class="hljs-title">myThread</span><span class="hljs-params">(myThreadFunction)</span></span>;<br>    myThread.<span class="hljs-built_in">join</span>(); <span class="hljs-comment">// 等待线程执行完毕</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2. 并发控制</strong></p><p>在多线程环境中，需要注意共享资源的访问控制，以避免竞态条件和数据竞争。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;mutex&gt;</span></span><br><br>std::mutex mtx;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">threadSafeFunction</span><span class="hljs-params">()</span> </span>&#123;<br>    mtx.<span class="hljs-built_in">lock</span>(); <span class="hljs-comment">// 加锁</span><br>    <span class="hljs-comment">// 访问共享资源</span><br>    mtx.<span class="hljs-built_in">unlock</span>(); <span class="hljs-comment">// 解锁</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3. 同步原语</strong></p><p>C++标准库提供了多种同步原语，如互斥量（<code>std::mutex</code>）、条件变量（<code>std::condition_variable</code>）等，用于实现线程间的同步和通信。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;condition_variable&gt;</span></span><br><br>std::mutex mtx;<br>std::condition_variable cv;<br><span class="hljs-type">bool</span> dataReady = <span class="hljs-literal">false</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">producer</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 生产数据</span><br>    <span class="hljs-function">std::unique_lock&lt;std::mutex&gt; <span class="hljs-title">lock</span><span class="hljs-params">(mtx)</span></span>;<br>    dataReady = <span class="hljs-literal">true</span>;<br>    cv.<span class="hljs-built_in">notify_one</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">consumer</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">std::unique_lock&lt;std::mutex&gt; <span class="hljs-title">lock</span><span class="hljs-params">(mtx)</span></span>;<br>    cv.<span class="hljs-built_in">wait</span>(lock, []&#123; <span class="hljs-keyword">return</span> dataReady; &#125;);<br>    <span class="hljs-comment">// 使用数据</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>4. 异步任务</strong></p><p>C++11引入了 <code>std::async</code> 来支持异步任务的执行，它返回一个 <code>std::future</code> 对象，可以用于获取任务的结果。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;future&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">myTask</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 执行任务</span><br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::future&lt;<span class="hljs-type">int</span>&gt; fut = std::<span class="hljs-built_in">async</span>(myTask);<br>    <span class="hljs-type">int</span> result = fut.<span class="hljs-built_in">get</span>(); <span class="hljs-comment">// 获取任务结果</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>结论：</strong></p><p>多线程编程是现代软件开发的重要技能，它可以提高程序的性能和响应能力。然而，同时也引入了并发控制的问题，需要谨慎处理。使用互斥量、条件变量等同步原语可以保证共享资源的安全访问。</p>]]></content>
      
      
      <categories>
          
          <category> c++中的那些事 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 多线程编程 </tag>
            
            <tag> 并发控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中的模板元编程和泛型编程</title>
      <link href="/2023/09/17/C-%E4%B8%AD%E7%9A%84%E6%A8%A1%E6%9D%BF%E5%85%83%E7%BC%96%E7%A8%8B%E5%92%8C%E6%B3%9B%E5%9E%8B%E7%BC%96%E7%A8%8B/"/>
      <url>/2023/09/17/C-%E4%B8%AD%E7%9A%84%E6%A8%A1%E6%9D%BF%E5%85%83%E7%BC%96%E7%A8%8B%E5%92%8C%E6%B3%9B%E5%9E%8B%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="标题：C-中的模板元编程和泛型编程"><strong>标题：C++中的模板元编程和泛型编程</strong></h2><p><strong>简介：</strong>模板元编程（Template Metaprogramming, TMP）和泛型编程（Generic Programming）是C++中强大的编程技巧，它们允许在编译时进行高度抽象和代码生成。</p><p><strong>正文：</strong></p><p><strong>1. 模板基础</strong></p><p>模板是一种通用的代码容器，可以用于生成特定类型或值的代码。它可以用于函数、类和变量。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function">T <span class="hljs-title">add</span><span class="hljs-params">(T a, T b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2. 模板特化</strong></p><p>模板特化允许为特定的类型提供定制的实现。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;&gt;<br><span class="hljs-type">int</span> <span class="hljs-built_in">add</span>&lt;<span class="hljs-type">int</span>&gt;(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b) &#123;<br>    <span class="hljs-keyword">return</span> a + b + <span class="hljs-number">10</span>; <span class="hljs-comment">// 为整数类型提供特殊实现</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3. 模板元编程</strong></p><p>模板元编程是一种在编译时生成代码的技术，通过递归展开模板实例来实现。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-type">int</span> N&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Factorial</span> &#123;<br>    <span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">int</span> value = N * Factorial&lt;N - <span class="hljs-number">1</span>&gt;::value;<br>&#125;;<br><br><span class="hljs-keyword">template</span> &lt;&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Factorial</span>&lt;<span class="hljs-number">0</span>&gt; &#123;<br>    <span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">int</span> value = <span class="hljs-number">1</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>4. 可变模板参数</strong></p><p>C++11引入了可变模板参数，允许模板接受可变数量的参数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span>... Args&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(Args... args)</span> </span>&#123;<br>    (cout &lt;&lt; ... &lt;&lt; args) &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>5. 泛型算法</strong></p><p>STL（Standard Template Library）提供了许多泛型算法，它们可以用于不同类型的容器。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::vector&lt;<span class="hljs-type">int</span>&gt; vec = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br>std::for_each(vec.<span class="hljs-built_in">begin</span>(), vec.<span class="hljs-built_in">end</span>(), [](<span class="hljs-type">int</span>&amp; n)&#123; cout &lt;&lt; n &lt;&lt; <span class="hljs-string">&quot; &quot;</span>; &#125;);<br></code></pre></td></tr></table></figure><p><strong>结论：</strong></p><p>模板元编程和泛型编程是C++中的高级技术，它们允许在编译时进行高度抽象和代码生成。模板提供了一种通用的代码容器，使得代码可以适用于不同的类型和值。</p>]]></content>
      
      
      <categories>
          
          <category> c++中的那些事 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 模板元编程 </tag>
            
            <tag> 泛型编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中的智能指针和内存管理</title>
      <link href="/2023/09/17/C-%E4%B8%AD%E7%9A%84%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88%E5%92%8C%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
      <url>/2023/09/17/C-%E4%B8%AD%E7%9A%84%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88%E5%92%8C%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="标题：C-中的智能指针和内存管理"><strong>标题：C++中的智能指针和内存管理</strong></h2><p><strong>简介：</strong>在C++中，手动管理内存是一个容易出错且容易导致内存泄漏的任务。智能指针是一种特殊的指针类，可以自动管理内存生命周期，大大减少了内存管理的复杂性。</p><p><strong>正文：</strong></p><p><strong>1. 原始指针 vs. 智能指针</strong></p><p>原始指针是直接指向内存地址的指针，需要手动释放内存。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span>* rawPtr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">5</span>);<br><span class="hljs-comment">// 使用 rawPtr</span><br><span class="hljs-keyword">delete</span> rawPtr; <span class="hljs-comment">// 手动释放内存</span><br></code></pre></td></tr></table></figure><p>智能指针是一个包装了原始指针的类，它会在超出作用域时自动释放内存。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::unique_ptr&lt;<span class="hljs-type">int</span>&gt; smartPtr = std::<span class="hljs-built_in">make_unique</span>&lt;<span class="hljs-type">int</span>&gt;(<span class="hljs-number">5</span>);<br><span class="hljs-comment">// 不需要手动释放内存</span><br></code></pre></td></tr></table></figure><p><strong>2. unique_ptr</strong></p><p><code>std::unique_ptr</code> 是一个独占所有权的智能指针，它确保只有一个指针可以指向特定的资源。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::unique_ptr&lt;<span class="hljs-type">int</span>&gt; uniquePtr = std::<span class="hljs-built_in">make_unique</span>&lt;<span class="hljs-type">int</span>&gt;(<span class="hljs-number">10</span>);<br></code></pre></td></tr></table></figure><p><strong>3. shared_ptr</strong></p><p><code>std::shared_ptr</code> 允许多个指针共享对同一资源的所有权。它使用引用计数来跟踪资源的引用次数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::shared_ptr&lt;<span class="hljs-type">int</span>&gt; sharedPtr1 = std::<span class="hljs-built_in">make_shared</span>&lt;<span class="hljs-type">int</span>&gt;(<span class="hljs-number">20</span>);<br>std::shared_ptr&lt;<span class="hljs-type">int</span>&gt; sharedPtr2 = sharedPtr1; <span class="hljs-comment">// 共享所有权</span><br></code></pre></td></tr></table></figure><p><strong>4. weak_ptr</strong></p><p><code>std::weak_ptr</code> 是 <code>std::shared_ptr</code> 的弱引用，它不会增加引用计数。它通常用于避免循环引用的问题。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::shared_ptr&lt;<span class="hljs-type">int</span>&gt; sharedPtr = std::<span class="hljs-built_in">make_shared</span>&lt;<span class="hljs-type">int</span>&gt;(<span class="hljs-number">30</span>);<br>std::weak_ptr&lt;<span class="hljs-type">int</span>&gt; weakPtr = sharedPtr;<br></code></pre></td></tr></table></figure><p><strong>5. RAII（资源获取即初始化）</strong></p><p>RAII 是一种C++编程技巧，它利用了对象的生命周期来管理资源。智能指针是RAII的一个典型应用。</p><p><strong>结论：</strong></p><p>使用智能指针可以极大地简化C++中的内存管理，避免内存泄漏和悬空指针等问题。<code>std::unique_ptr</code> 用于独占资源，<code>std::shared_ptr</code> 用于共享资源，而 <code>std::weak_ptr</code> 则用于弱引用，避免循环引用。</p>]]></content>
      
      
      <categories>
          
          <category> c++中的那些事 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 内存管理 </tag>
            
            <tag> 智能指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中的面向对象编程基础</title>
      <link href="/2023/09/17/C-%E4%B8%AD%E7%9A%84%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/09/17/C-%E4%B8%AD%E7%9A%84%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="标题：C-中的面向对象编程基础"><strong>标题：C++中的面向对象编程基础</strong></h2><p><strong>简介：</strong>面向对象编程（Object-Oriented Programming, OOP）是软件开发中一个重要的编程范式，它以对象为核心，通过封装、继承和多态等概念来组织代码，提高了代码的重用性和可维护性。</p><p><strong>正文：</strong></p><p><strong>1. 类与对象</strong></p><p>在C++中，类是面向对象编程的基础。一个类是一个模板，用于创建具有相似属性和行为的对象。对象是类的实例，它包含了类定义的数据和函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-comment">// 成员变量</span><br>    string name;<br>    <span class="hljs-type">int</span> age;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 构造函数</span><br>    <span class="hljs-built_in">Person</span>(string n, <span class="hljs-type">int</span> a) : <span class="hljs-built_in">name</span>(n), <span class="hljs-built_in">age</span>(a) &#123;&#125;<br><br>    <span class="hljs-comment">// 成员函数</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">introduce</span><span class="hljs-params">()</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;我叫&quot;</span> &lt;&lt; name &lt;&lt; <span class="hljs-string">&quot;，今年&quot;</span> &lt;&lt; age &lt;&lt; <span class="hljs-string">&quot;岁。&quot;</span> &lt;&lt; endl;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>2. 封装</strong></p><p>封装是OOP的一个重要概念，它将数据和操作数据的方法捆绑在一起。类通过将成员变量和成员函数定义在同一个作用域内来实现封装。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BankAccount</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">double</span> balance;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">deposit</span><span class="hljs-params">(<span class="hljs-type">double</span> amount)</span> </span>&#123;<br>        balance += amount;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">withdraw</span><span class="hljs-params">(<span class="hljs-type">double</span> amount)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (amount &lt;= balance) &#123;<br>            balance -= amount;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;余额不足。&quot;</span> &lt;&lt; endl;<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>3. 继承</strong></p><p>继承允许一个类（子类）继承另一个类（父类）的属性和行为。子类可以添加新的成员变量和成员函数，也可以重写父类的成员函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> : <span class="hljs-keyword">public</span> Person &#123;<br><span class="hljs-keyword">private</span>:<br>    string major;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Student</span>(string n, <span class="hljs-type">int</span> a, string m) : <span class="hljs-built_in">Person</span>(n, a), <span class="hljs-built_in">major</span>(m) &#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">introduce</span><span class="hljs-params">()</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;我叫&quot;</span> &lt;&lt; name &lt;&lt; <span class="hljs-string">&quot;，今年&quot;</span> &lt;&lt; age &lt;&lt; <span class="hljs-string">&quot;岁，专业是&quot;</span> &lt;&lt; major &lt;&lt; <span class="hljs-string">&quot;。&quot;</span> &lt;&lt; endl;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>4. 多态</strong></p><p>多态允许使用相同的接口来处理不同类型的对象。在C++中，可以通过虚函数（virtual function）实现多态。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;绘制形状。&quot;</span> &lt;&lt; endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span> : <span class="hljs-keyword">public</span> Shape &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;绘制圆形。&quot;</span> &lt;&lt; endl;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>结论：</strong></p><p>面向对象编程是C++中的重要特性，它提供了一种结构化和灵活的方式来组织和管理代码。通过封装、继承和多态等概念，我们可以构建出模块化、可扩展和易维护的程序。</p>]]></content>
      
      
      <categories>
          
          <category> c++中的那些事 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 面向对象基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中的多态讲解与示例</title>
      <link href="/2023/02/23/C-%E4%B8%AD%E7%9A%84%E5%A4%9A%E6%80%81%E8%AE%B2%E8%A7%A3%E4%B8%8E%E7%A4%BA%E4%BE%8B/"/>
      <url>/2023/02/23/C-%E4%B8%AD%E7%9A%84%E5%A4%9A%E6%80%81%E8%AE%B2%E8%A7%A3%E4%B8%8E%E7%A4%BA%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h1>C++中的多态讲解与示例</h1><p>在 C++ 中，多态是指同一个函数名可以具有不同的实现方式和行为的特性。这意味着，同一个函数名可以在不同的情况下具有不同的含义，以实现更灵活的编程。</p><p>C++ 中的多态分为静态多态和动态多态两种形式。静态多态又称为函数重载（Function Overloading），通过在同一个作用域内声明具有相同函数名但参数列表不同的多个函数，实现了同一个函数名可以具有多种不同的实现方式。</p><p>动态多态则是通过虚函数（Virtual Function）和继承（Inheritance）来实现的。在父类中定义虚函数，在子类中覆盖（Override）这个虚函数，从而实现了同一个函数名在不同子类对象上具有不同的行为。</p><p>下面是一个简单的例子来说明动态多态的概念：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span> &#123;<br>   <span class="hljs-keyword">protected</span>:<br>      <span class="hljs-type">int</span> width, height;<br><br>   <span class="hljs-keyword">public</span>:<br>      <span class="hljs-built_in">Shape</span>(<span class="hljs-type">int</span> a = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> b = <span class="hljs-number">0</span>) &#123;<br>         width = a;<br>         height = b;<br>      &#125;<br><br>      <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">int</span> <span class="hljs-title">area</span><span class="hljs-params">()</span> </span>&#123;<br>         cout &lt;&lt; <span class="hljs-string">&quot;Parent class area :&quot;</span> &lt;&lt; endl;<br>         <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>      &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Rectangle</span>: <span class="hljs-keyword">public</span> Shape &#123;<br>   <span class="hljs-keyword">public</span>:<br>      <span class="hljs-built_in">Rectangle</span>(<span class="hljs-type">int</span> a = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> b = <span class="hljs-number">0</span>):<span class="hljs-built_in">Shape</span>(a, b) &#123; &#125;<br><br>      <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">area</span> <span class="hljs-params">()</span> </span>&#123;<br>         cout &lt;&lt; <span class="hljs-string">&quot;Rectangle class area :&quot;</span> &lt;&lt; endl;<br>         <span class="hljs-keyword">return</span> (width * height);<br>      &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Triangle</span>: <span class="hljs-keyword">public</span> Shape &#123;<br>   <span class="hljs-keyword">public</span>:<br>      <span class="hljs-built_in">Triangle</span>(<span class="hljs-type">int</span> a = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> b = <span class="hljs-number">0</span>):<span class="hljs-built_in">Shape</span>(a, b) &#123; &#125;<br><br>      <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">area</span> <span class="hljs-params">()</span> </span>&#123;<br>         cout &lt;&lt; <span class="hljs-string">&quot;Triangle class area :&quot;</span> &lt;&lt; endl;<br>         <span class="hljs-keyword">return</span> (width * height / <span class="hljs-number">2</span>);<br>      &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>   Shape *shape;<br>   <span class="hljs-function">Rectangle <span class="hljs-title">rec</span><span class="hljs-params">(<span class="hljs-number">10</span>,<span class="hljs-number">7</span>)</span></span>;<br>   <span class="hljs-function">Triangle  <span class="hljs-title">tri</span><span class="hljs-params">(<span class="hljs-number">10</span>,<span class="hljs-number">5</span>)</span></span>;<br><br>   <span class="hljs-comment">// 矩形对象</span><br>   shape = &amp;rec;<br>   <span class="hljs-comment">// 调用矩形的求面积函数 area</span><br>   shape-&gt;<span class="hljs-built_in">area</span>();<br><br>   <span class="hljs-comment">// 三角形对象</span><br>   shape = &amp;tri;<br>   <span class="hljs-comment">// 调用三角形的求面积函数 area</span><br>   shape-&gt;<span class="hljs-built_in">area</span>();<br><br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的例子中，我们定义了一个 Shape 类作为父类，然后定义了 Rectangle 和 Triangle 类作为子类。在 Shape 类中定义了一个虚函数 area，Rectangle 和 Triangle 类都重写了这个虚函数并提供了不同的实现。</p><p>在 main 函数中，我们定义了一个指向 Shape 类的指针，然后将它分别指向 Rectangle 和 Triangle 类的对象，并调用它们的 area 函数。由于 area 函数是虚函数，所以在运行时会根据指针指向的对象类型来确定具体调用哪个子类的 area 函数。这就实现了多态。</p><p>静态多态可以通过函数重载实现。函数重载指的是在同一作用域内，函数名相同但参数列表不同的函数。编译器根据传入的参数类型和数量确定使用哪个函数。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Printing an integer: &quot;</span> &lt;&lt; x &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-type">double</span> x)</span> </span>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Printing a double: &quot;</span> &lt;&lt; x &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">42</span>);<br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">3.14</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的例子中，我们定义了两个名为<code>print</code>的函数，分别接受<code>int</code>和<code>double</code>类型的参数。在<code>main</code>函数中，我们分别调用了这两个函数并传入了不同类型的参数，编译器会根据参数类型的不同自动选择使用对应的函数。这就是静态多态的一个例子。</p>]]></content>
      
      
      <categories>
          
          <category> c++中的那些事 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 多态的概念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rust学习笔记（续）：所有权和生命周期</title>
      <link href="/2023/02/23/Rust%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E7%BB%AD%EF%BC%89%EF%BC%9A%E9%97%AE%E9%A2%98%E8%A7%A3%E7%AD%94/"/>
      <url>/2023/02/23/Rust%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E7%BB%AD%EF%BC%89%EF%BC%9A%E9%97%AE%E9%A2%98%E8%A7%A3%E7%AD%94/</url>
      
        <content type="html"><![CDATA[<h1>Rust学习笔记（续）：所有权和生命周期</h1><blockquote><p>Rust 中的所有权和引用有什么作用？</p></blockquote><hr><p>在 Rust 中，所有权和引用是 Rust 语言最独特的特性之一，也是保障 Rust 内存安全的重要机制。所有权和引用的概念，可以简单理解为在 Rust 中管理内存的方式。</p><p>在 Rust 中，所有值都有一个被称为所有者（owner）的变量。当这个变量离开作用域时，这个值也会被销毁。这种方式被称为所有权（ownership），它确保了在编译时没有野指针（dangling pointers）、二次释放（double free）等内存安全问题。比如：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello&quot;</span>); <span class="hljs-comment">// s 是 String 类型的变量，也是所有者</span><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, s); <span class="hljs-comment">// 输出 hello</span><br>&#125; <span class="hljs-comment">// 这里 s 离开作用域，String 类型的值也会被销毁</span><br></code></pre></td></tr></table></figure><p>在 Rust 中，变量可以通过引用（reference）来访问值，而不获取其所有权。引用是指向值的指针，但是它不会拥有值，而是只借用（borrow）值。借用分为可变借用和不可变借用两种。可变借用（mutable borrow）是对值进行修改的借用，只能有一个可变借用，不可变借用（immutable borrow）则可以有多个。比如：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">len</span> = <span class="hljs-title function_ invoke__">calculate_length</span>(&amp;s); <span class="hljs-comment">// 传递一个对 s 的引用</span><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;The length of &#x27;&#123;&#125;&#x27; is &#123;&#125;.&quot;</span>, s, len); <span class="hljs-comment">// 这里再次使用 s，不需要获取所有权</span><br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">calculate_length</span>(s: &amp;<span class="hljs-type">String</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">usize</span> &#123; <span class="hljs-comment">// 函数接收一个 String 类型的引用</span><br>    s.<span class="hljs-title function_ invoke__">len</span>()<br>&#125;<br></code></pre></td></tr></table></figure><p>以上代码中，<code>calculate_length</code> 函数接收一个 <code>String</code> 类型的引用 <code>s</code>，并返回其长度。在 <code>main</code> 函数中，我们用 <code>&amp;s</code> 来传递 <code>s</code> 的引用，并获取其长度，最终再次使用 <code>s</code> 输出字符串。在这个过程中，<code>main</code> 函数并没有获取 <code>s</code> 的所有权，而是通过引用的方式使用它，这也保证了内存的安全性。</p><p>总之，在 Rust 中，所有权和引用机制是 Rust 语言独特的特性，它们能够在编译时保障内存安全性，使得 Rust 语言在系统编程和嵌入式领域有着广泛的应用。</p><hr><blockquote><p>生命周期是什么？在 Rust 中如何注明生命周期？</p></blockquote><hr><p>生命周期（lifetime）是 Rust 中的一个概念，用于描述变量、引用等的生存期。在 Rust 中，每个变量都有一个生命周期，它表示这个变量的有效范围，也就是在何时可以被访问，在何时应该被销毁。</p><p>Rust 的生命周期注解用于声明引用的生命周期，也可以用于泛型类型。生命周期注解使用单引号 <code>'</code> 来标识，如 <code>'a</code>、<code>'b</code> 等。注解的位置通常在变量名之后，以表示这个变量所引用的对象的生命周期。例如：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">foo</span>&lt;<span class="hljs-symbol">&#x27;a</span>&gt;(x: &amp;<span class="hljs-symbol">&#x27;a</span> <span class="hljs-type">i32</span>, y: &amp;<span class="hljs-symbol">&#x27;a</span> <span class="hljs-type">i32</span>) <span class="hljs-punctuation">-&gt;</span> &amp;<span class="hljs-symbol">&#x27;a</span> <span class="hljs-type">i32</span> &#123;<br>    <span class="hljs-keyword">if</span> x &gt; y &#123;<br>        x<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        y<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的代码中，<code>foo</code> 函数有一个生命周期参数 <code>'a</code>，表示返回值的生命周期应该和参数 <code>x</code> 和 <code>y</code> 的生命周期中最小的那个相同。也就是说，返回的引用必须满足它所指向的对象在 <code>x</code> 和 <code>y</code> 中的最小生命周期内都是有效的。</p><p>生命周期注解通常在函数签名中使用，以帮助编译器推断引用的生命周期。使用生命周期注解可以避免一些常见的内存错误，例如悬垂指针（dangling pointer）和引用非法内存的情况。</p><p>需要注意的是，生命周期注解并不会改变变量本身的生命周期，它只是用于帮助编译器分析引用的生命周期。在 Rust 中，变量的生命周期由作用域和所有权规则来决定，这是 Rust 的另一个核心特性。</p><hr><blockquote><p>如何避免所有权问题？可以给出一个例子说明吗？</p></blockquote><hr><p>避免所有权问题的一种常见方法是使用引用，特别是使用不可变引用。通过使用引用，可以传递变量的值而不是拥有它的所有权，从而避免潜在的所有权问题。</p><p>例如，在 Rust 中，考虑以下代码：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">len</span> = <span class="hljs-title function_ invoke__">calculate_length</span>(s);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;The length of the string is &#123;&#125;.&quot;</span>, len);<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">calculate_length</span>(s: <span class="hljs-type">String</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">usize</span> &#123;<br>    s.<span class="hljs-title function_ invoke__">len</span>()<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码创建了一个名为 <code>s</code> 的 <code>String</code> 类型变量，并将其传递给 <code>calculate_length</code> 函数。但是，这里的问题是 <code>s</code> 的所有权被传递给了函数，因此在函数中不能再使用 <code>s</code> 变量。因此，当尝试调用 <code>s.len()</code> 时，编译器会报错。</p><p>要避免这个问题，可以将 <code>calculate_length</code> 函数的参数改为一个不可变引用。这样，可以传递变量的引用而不是它的所有权：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">len</span> = <span class="hljs-title function_ invoke__">calculate_length</span>(&amp;s);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;The length of the string is &#123;&#125;.&quot;</span>, len);<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">calculate_length</span>(s: &amp;<span class="hljs-type">String</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">usize</span> &#123;<br>    s.<span class="hljs-title function_ invoke__">len</span>()<br>&#125;<br></code></pre></td></tr></table></figure><p>现在，<code>calculate_length</code> 函数的参数是一个指向 <code>String</code> 类型变量的不可变引用。由于该函数没有获得 <code>s</code> 的所有权，因此可以安全地在函数中访问 <code>s</code> 的属性和方法，而不会导致编译器错误。</p>]]></content>
      
      
      <categories>
          
          <category> Rust学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust学习笔记 </tag>
            
            <tag> Rust </tag>
            
            <tag> 所有权和生命周期 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rust学习笔记（进阶）以路由转发项目为例</title>
      <link href="/2023/02/16/Rust%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89%E4%BB%A5%E8%B7%AF%E7%94%B1%E8%BD%AC%E5%8F%91%E9%A1%B9%E7%9B%AE%E4%B8%BA%E4%BE%8B/"/>
      <url>/2023/02/16/Rust%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89%E4%BB%A5%E8%B7%AF%E7%94%B1%E8%BD%AC%E5%8F%91%E9%A1%B9%E7%9B%AE%E4%B8%BA%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h1>Rust学习笔记（进阶）以路由转发项目为例</h1><p>非常好，现在你已经学习了 Rust 语言的基础知识，并且了解了 Rust 项目的开发和发布。接下来，我建议你继续深入学习 Rust，掌握更多的高级特性和实践经验。</p><p>以下是一些推荐的 Rust 学习资源和进阶主题：</p><h3 id="Rust-学习资源">Rust 学习资源</h3><ol><li><p><a href="https://doc.rust-lang.org/book/">The Rust Programming Language book</a>：Rust 官方出品的入门教程，详细介绍了 Rust 语言的基础知识和高级特性，非常适合初学者学习。</p></li><li><p><a href="https://doc.rust-lang.org/stable/rust-by-example/">Rust by Example</a>：Rust 官方出品的在线教程，通过实际例子演示 Rust 的用法和特性，适合进一步学习 Rust。</p></li><li><p><a href="https://rust-lang-nursery.github.io/rust-cookbook/">Rust Cookbook</a>：Rust 社区开发的代码示例集合，包括各种 Rust 编程场景和问题的解决方案。</p></li><li><p><a href="https://rust.cc/">Rust语言中文社区</a>：Rust 中文社区，提供 Rust 相关的学习资料和讨论区，以及 Rust 应用和生态系统的最新动态。</p></li><li><p><a href="https://rustlang-cn.org/">Rust中文文档</a>：Rust 官方文档的中文翻译版本，详细介绍了 Rust 语言和生态系统的各个方面。</p></li></ol><h3 id="Rust-进阶主题">Rust 进阶主题</h3><ol><li><p>高级数据类型：Rust 支持许多高级数据类型，例如 trait、枚举、元组、数组等，这些数据类型在 Rust 编程中具有重要的作用，可以让你写出更加高效、安全和灵活的代码。</p></li><li><p>高性能计算：Rust 语言的性能非常高，可以用于编写各种高性能计算程序，例如科学计算、机器学习、游戏开发等领域。</p></li><li><p>Web 开发：Rust 生态系统中有许多优秀的 Web 框架和工具，例如 Rocket、Actix、Warp 等，可以用于编写高性能、安全和可扩展的 Web 应用程序。</p></li><li><p>操作系统开发：Rust 语言非常适合用于操作系统和底层系统编程，可以通过 Rust 编写更加高效、安全和可靠的操作系统和系统库。</p></li><li><p>区块链和加密货币：Rust 语言在区块链和加密货币领域有着广泛的应用，例如 Bitcoin、Parity、Solana 等项目都是用 Rust 编写的。</p></li></ol><p>希望这些资源和主题能够帮助你进一步深入学习Rust.</p><p>当你学习 Rust 的基础知识后，最好的学习方法之一是实践项目。以下是几个简单的项目，可以帮助你深度了解 Rust 的实践经验和应用场景。</p><ol><li><p>用 Rust 实现一个命令行工具：可以尝试使用 Rust 开发一个命令行工具，例如文件搜索工具、文件加密工具、下载器等。这将帮助你熟悉 Rust 的标准库、命令行参数解析、文件 I/O 等核心功能。</p></li><li><p>用 Rust 实现一个 Web 服务：可以尝试使用 Rust 开发一个简单的 Web 服务，例如静态文件服务器、API 服务、博客系统等。这将帮助你熟悉 Rust 的 Web 生态系统、HTTP 服务器框架、数据库连接、模板引擎等技术。</p></li><li><p>用 Rust 实现一个数据结构：可以尝试使用 Rust 实现一个常见的数据结构，例如链表、堆栈、队列、树等。这将帮助你熟悉 Rust 的语言特性、泛型编程、内存安全性等技术。</p></li><li><p>用 Rust 实现一个游戏：可以尝试使用 Rust 开发一个简单的游戏，例如扫雷、2048、贪吃蛇等。这将帮助你熟悉 Rust 的游戏开发生态系统、图形库、事件循环、游戏逻辑等技术。</p></li></ol><p>以上这些项目可以作为你进一步深入学习 Rust 的起点，它们具有不同的难度和应用场景，你可以选择适合自己的项目来学习和实践。除此之外，Rust 社区中也有许多优秀的开源项目和教程，可以帮助你学习和实践 Rust，希望你在 Rust 的学习中取得进一步的进展。</p><p>如果你已经学会了 Rust 的基础语法和常用库，接下来可以尝试做一些更具挑战性的项目来深入了解 Rust 的高级特性和生态系统。</p><p>以下是一些进阶项目的示例：</p><ol><li><p>开发一个异步网络应用：Rust 对于异步编程提供了很好的支持，你可以尝试使用 Rust 开发一个异步网络应用，例如实时聊天室、Websocket 服务器等。在这个项目中，你需要熟悉 Rust 的异步编程模型、Future、Tokio 等库。</p></li><li><p>开发一个虚拟机或编译器：Rust 具有良好的性能和内存安全性，适合用于实现虚拟机或编译器。你可以尝试使用 Rust 实现一个简单的虚拟机或编译器，例如 Brainfuck 解释器、Markdown 编译器等。在这个项目中，你需要熟悉 Rust 的语言特性、代码生成、中间语言等技术。</p></li><li><p>开发一个机器学习应用：Rust 的性能和内存安全性也使其成为机器学习领域的有力竞争者。你可以尝试使用 Rust 开发一个简单的机器学习应用，例如图像分类器、文本分类器等。在这个项目中，你需要熟悉 Rust 的数据处理、线性代数、梯度下降等技术，同时也需要使用 Rust 的机器学习库，例如 ndarray、tangram 等。</p></li><li><p>开发一个游戏引擎：Rust 的性能和内存安全性使其非常适合游戏引擎的开发。你可以尝试使用 Rust 开发一个简单的游戏引擎，例如 2D 平台游戏引擎、3D 游戏引擎等。在这个项目中，你需要熟悉 Rust 的游戏引擎开发生态系统、图形渲染、物理引擎等技术。</p></li></ol><p>这些项目都非常具有挑战性和实用性，可以帮助你深入了解 Rust 的高级特性和应用场景。当然，在完成这些项目之前，你需要具备一定的编程经验和知识储备，因此你需要花费一些时间来学习和实践 Rust。希望你能够善用 Rust 的强大能力，创造出更多有趣的项目。</p><p>现在以 Rust 实现一个路由转发功能的项目，这个项目可以帮助你熟悉 Rust 的网络编程和路由框架的使用。</p><h2 id="项目概述">项目概述</h2><p>在这个项目中，我们将实现一个简单的 HTTP 服务器，该服务器能够接受 HTTP 请求并根据请求的路径进行路由转发。具体来说，我们将实现以下功能：</p><ol><li>监听指定的端口，并接受 HTTP 请求。</li><li>解析 HTTP 请求，获取请求的路径。</li><li>根据请求的路径进行路由转发。</li><li>根据路由规则返回对应的响应。</li></ol><p>在这个项目中，我们将使用 Rust 的标准库以及一些常用的第三方库，包括：</p><ol><li><code>std::net</code>：用于网络编程，监听端口并接受 HTTP 请求。</li><li><code>http</code>：用于解析和构建 HTTP 请求和响应。</li><li><code>router</code>：用于实现路由功能。</li></ol><p>接下来，让我们来一步步实现这个项目。</p><h2 id="步骤一：创建-Rust-项目">步骤一：创建 Rust 项目</h2><p>首先，我们需要创建一个 Rust 项目。在命令行中输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cargo new router<br></code></pre></td></tr></table></figure><p>这将创建一个名为 <code>router</code> 的 Rust 项目，并生成一些默认文件，包括 <code>src/main.rs</code> 文件。</p><h2 id="步骤二：引入依赖库">步骤二：引入依赖库</h2><p>接下来，我们需要在项目中引入需要的依赖库。在 <code>Cargo.toml</code> 文件中添加以下代码：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile">[dependencies]<br>http = <span class="hljs-string">&quot;0.2.1&quot;</span><br>router = <span class="hljs-string">&quot;0.10.0&quot;</span><br></code></pre></td></tr></table></figure><p>这将在项目中引入 <code>http</code> 和 <code>router</code> 两个依赖库。<code>http</code> 用于解析和构建 HTTP 请求和响应，<code>router</code> 用于实现路由功能。</p><h2 id="步骤三：实现-HTTP-服务器">步骤三：实现 HTTP 服务器</h2><p>现在，我们可以开始实现 HTTP 服务器了。在 <code>src/main.rs</code> 文件中，添加以下代码：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::net::&#123;TcpListener, TcpStream&#125;;<br><span class="hljs-keyword">use</span> std::io::prelude::*;<br><span class="hljs-keyword">use</span> http::&#123;Request, Response, StatusCode&#125;;<br><span class="hljs-keyword">use</span> router::Router;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">handle_request</span>(<span class="hljs-keyword">mut</span> stream: TcpStream, router: &amp;Router) &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">buffer</span> = [<span class="hljs-number">0</span>; <span class="hljs-number">1024</span>];<br>    stream.<span class="hljs-title function_ invoke__">read</span>(&amp;<span class="hljs-keyword">mut</span> buffer).<span class="hljs-title function_ invoke__">unwrap</span>();<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">request</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from_utf8_lossy</span>(&amp;buffer[..]);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">request</span> = Request::<span class="hljs-title function_ invoke__">from</span>(request.<span class="hljs-title function_ invoke__">as_ref</span>());<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">response</span> = Response::<span class="hljs-title function_ invoke__">new</span>();<br><br>    <span class="hljs-keyword">match</span> router.<span class="hljs-title function_ invoke__">route</span>(&amp;request.<span class="hljs-title function_ invoke__">method</span>().<span class="hljs-title function_ invoke__">as_str</span>(), request.<span class="hljs-title function_ invoke__">uri</span>().<span class="hljs-title function_ invoke__">path</span>()) &#123;<br>        <span class="hljs-title function_ invoke__">Some</span>(handler) =&gt; &#123;<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">body</span> = (handler)(request);<br>            response.<span class="hljs-title function_ invoke__">set_body</span>(body);<br>            response.<span class="hljs-title function_ invoke__">set_status_code</span>(StatusCode::OK);<br>        &#125;,<br>        <span class="hljs-literal">None</span> =&gt; &#123;<br>            response.<span class="hljs-title function_ invoke__">set_status_code</span>(StatusCode::NOT_FOUND);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">write!</span>(stream, <span class="hljs-string">&quot;&#123;&#125;&quot;</span>, response).<span class="hljs-title function_ invoke__">unwrap</span>();<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">listener</span> = TcpListener::<span class="hljs-title function_ invoke__">bind</span>(<span class="hljs-string">&quot;127.0.0.1:8000&quot;</span>).<span class="hljs-title function_ invoke__">unwrap</span>();<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">router</span> = Router::<span class="hljs-title function_ invoke__">new</span>();<br><br>    <span class="hljs-comment">// Add route handlers here</span><br>    router.<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&quot;/&quot;</span>, |request| <span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;Hello, world!&quot;</span>));<br>    <br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">stream</span> <span class="hljs-keyword">in</span> listener.<span class="hljs-title function_ invoke__">incoming</span>() &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">stream</span> = stream.<span class="hljs-title function_ invoke__">unwrap</span>();<br>        <span class="hljs-title function_ invoke__">handle_request</span>(stream, &amp;router);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里我们使用了一个 <code>for</code> 循环，不断地从 <code>TcpListener</code> 中获取新的连接，并将连接交给 <code>handle_request</code> 函数处理。</p><h2 id="步骤四：实现路由功能">步骤四：实现路由功能</h2><p>现在，我们需要实现路由功能。我们可以使用第三方库 <code>router</code> 来实现路由功能。在 <code>main</code> 函数中，我们创建了一个名为 <code>router</code> 的 <code>Router</code> 对象，并使用 <code>router.get</code> 方法为根路径添加一个路由处理器。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">router</span> = Router::<span class="hljs-title function_ invoke__">new</span>();<br>router.<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&quot;/&quot;</span>, |request| <span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;Hello, world!&quot;</span>));<br></code></pre></td></tr></table></figure><p>这里我们使用了 <code>router.get</code> 方法来为根路径添加一个路由处理器。这个路由处理器是一个闭包，接受一个 <code>Request</code> 对象作为参数，并返回一个字符串作为响应体。</p><p>现在，我们需要在 <code>handle_request</code> 函数中使用路由器来路由 HTTP 请求。在 <code>handle_request</code> 函数中添加以下代码：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">handle_request</span>(<span class="hljs-keyword">mut</span> stream: TcpStream, router: &amp;Router) &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">buffer</span> = [<span class="hljs-number">0</span>; <span class="hljs-number">1024</span>];<br>    stream.<span class="hljs-title function_ invoke__">read</span>(&amp;<span class="hljs-keyword">mut</span> buffer).<span class="hljs-title function_ invoke__">unwrap</span>();<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">request</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from_utf8_lossy</span>(&amp;buffer[..]);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">request</span> = Request::<span class="hljs-title function_ invoke__">from</span>(request.<span class="hljs-title function_ invoke__">as_ref</span>());<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">response</span> = Response::<span class="hljs-title function_ invoke__">new</span>();<br><br>    <span class="hljs-keyword">match</span> router.<span class="hljs-title function_ invoke__">route</span>(&amp;request.<span class="hljs-title function_ invoke__">method</span>().<span class="hljs-title function_ invoke__">as_str</span>(), request.<span class="hljs-title function_ invoke__">uri</span>().<span class="hljs-title function_ invoke__">path</span>()) &#123;<br>        <span class="hljs-title function_ invoke__">Some</span>(handler) =&gt; &#123;<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">body</span> = (handler)(request);<br>            response.<span class="hljs-title function_ invoke__">set_body</span>(body);<br>            response.<span class="hljs-title function_ invoke__">set_status_code</span>(StatusCode::OK);<br>        &#125;,<br>        <span class="hljs-literal">None</span> =&gt; &#123;<br>            response.<span class="hljs-title function_ invoke__">set_status_code</span>(StatusCode::NOT_FOUND);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">write!</span>(stream, <span class="hljs-string">&quot;&#123;&#125;&quot;</span>, response).<span class="hljs-title function_ invoke__">unwrap</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个代码中，我们首先使用 <code>TcpStream</code> 读取 HTTP 请求的内容，并将请求解析为一个 <code>Request</code> 对象。接着，我们使用路由器的 <code>route</code> 方法来查找匹配的路由处理器，如果找到了匹配的路由处理器，则调用该处理器来生成响应体，并将响应体设置到 <code>Response</code> 对象中。如果没有找到匹配的路由处理器，则设置响应状态码为 <code>NOT_FOUND</code>。最后，我们使用 <code>TcpStream</code> 将响应发送给客户端。</p><h2 id="步骤五：测试项目">步骤五：测试项目</h2><p>最后，我们可以测试一下这个项目是否正常工作。在命令行中运行以下命令：</p><p><code>cargo run</code></p><p>这将启动 HTTP 服务器，并在 <code>127.0.0.1:8000</code> 监听 HTTP 请求。</p><p>现在我们来实现一个简单的路由器。假设我们有一个Web应用程序，它需要根据URL路径路由到不同的处理程序。我们将使用Rust实现路由器功能。</p><p>首先，我们需要添加依赖项。在Cargo.toml中添加以下内容：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile">[dependencies]<br>hyper = <span class="hljs-string">&quot;0.14&quot;</span><br>route-recognizer = <span class="hljs-string">&quot;0.3&quot;</span><br></code></pre></td></tr></table></figure><ul><li><code>hyper</code> 是一个 Rust 的 HTTP 库，用于处理 HTTP 请求和响应。</li><li><code>route-recognizer</code> 是一个用于识别和解析 URL 的库，我们将使用它来实现路由。</li></ul><p>接下来，我们将编写代码来处理HTTP请求并路由到不同的处理程序。在 <code>src/main.rs</code> 中添加以下代码：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> hyper::&#123;Body, Request, Response, Server&#125;;<br><span class="hljs-keyword">use</span> hyper::service::&#123;make_service_fn, service_fn&#125;;<br><span class="hljs-keyword">use</span> route_recognizer::Router;<br><span class="hljs-keyword">use</span> std::convert::Infallible;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">router</span>(req: Request&lt;Body&gt;, router: &amp;Router&lt;<span class="hljs-type">Box</span>&lt;<span class="hljs-keyword">dyn</span> <span class="hljs-title function_ invoke__">Fn</span>(Request&lt;Body&gt;) <span class="hljs-punctuation">-&gt;</span> Response&lt;Body&gt;&gt;&gt;) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;Response&lt;Body&gt;, Infallible&gt; &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">path</span> = req.<span class="hljs-title function_ invoke__">uri</span>().<span class="hljs-title function_ invoke__">path</span>().<span class="hljs-title function_ invoke__">to_owned</span>();<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">params</span> = std::collections::HashMap::<span class="hljs-title function_ invoke__">new</span>();<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">Some</span>(handler) = router.<span class="hljs-title function_ invoke__">recognize</span>(&amp;path) &#123;<br>        <span class="hljs-keyword">for</span> (key, value) <span class="hljs-keyword">in</span> handler.params.<span class="hljs-title function_ invoke__">iter</span>() &#123;<br>            params.<span class="hljs-title function_ invoke__">insert</span>(key.<span class="hljs-title function_ invoke__">to_owned</span>(), value.<span class="hljs-title function_ invoke__">to_owned</span>());<br>        &#125;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">response</span> = (handler.handler)(req);<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">Ok</span>(response);<br>    &#125;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">not_found</span> = Response::<span class="hljs-title function_ invoke__">builder</span>()<br>        .<span class="hljs-title function_ invoke__">status</span>(<span class="hljs-number">404</span>)<br>        .<span class="hljs-title function_ invoke__">body</span>(Body::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;Not Found&quot;</span>))<br>        .<span class="hljs-title function_ invoke__">unwrap</span>();<br>    <span class="hljs-title function_ invoke__">Ok</span>(not_found)<br>&#125;<br><br><span class="hljs-meta">#[tokio::main]</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">router</span> = Router::<span class="hljs-title function_ invoke__">new</span>();<br>    router.<span class="hljs-title function_ invoke__">add</span>(<span class="hljs-string">&quot;/hello/:name&quot;</span>, <span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">new</span>(|req| &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">name</span> = req.<span class="hljs-title function_ invoke__">uri</span>().<span class="hljs-title function_ invoke__">path</span>().<span class="hljs-title function_ invoke__">split</span>(<span class="hljs-string">&#x27;/&#x27;</span>).<span class="hljs-title function_ invoke__">last</span>().<span class="hljs-title function_ invoke__">unwrap</span>();<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">body</span> = <span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;Hello, &#123;&#125;!&quot;</span>, name).<span class="hljs-title function_ invoke__">into</span>();<br>        Response::<span class="hljs-title function_ invoke__">new</span>(body)<br>    &#125;));<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">make_svc</span> = <span class="hljs-title function_ invoke__">make_service_fn</span>(|_conn| &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">router</span> = router.<span class="hljs-title function_ invoke__">clone</span>();<br>        <span class="hljs-keyword">async</span> <span class="hljs-keyword">move</span> &#123;<br>            Ok::&lt;_, Infallible&gt;(<span class="hljs-title function_ invoke__">service_fn</span>(<span class="hljs-keyword">move</span> |req| &#123;<br>                <span class="hljs-title function_ invoke__">router</span>(req, &amp;router)<br>            &#125;))<br>        &#125;<br>    &#125;);<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">addr</span> = ([<span class="hljs-number">127</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>], <span class="hljs-number">3000</span>).<span class="hljs-title function_ invoke__">into</span>();<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">server</span> = Server::<span class="hljs-title function_ invoke__">bind</span>(&amp;addr).<span class="hljs-title function_ invoke__">serve</span>(make_svc);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Listening on http://&#123;&#125;&quot;</span>, addr);<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">Err</span>(e) = server.<span class="hljs-keyword">await</span> &#123;<br>        <span class="hljs-built_in">eprintln!</span>(<span class="hljs-string">&quot;server error: &#123;&#125;&quot;</span>, e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>让我们来逐行分析一下代码：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> hyper::&#123;Body, Request, Response, Server&#125;;<br><span class="hljs-keyword">use</span> hyper::service::&#123;make_service_fn, service_fn&#125;;<br><span class="hljs-keyword">use</span> route_recognizer::Router;<br><span class="hljs-keyword">use</span> std::convert::Infallible;<br></code></pre></td></tr></table></figure><p>我们导入了所有需要的库。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">async</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">router</span>(req: Request&lt;Body&gt;, router: &amp;Router&lt;<span class="hljs-type">Box</span>&lt;<span class="hljs-keyword">dyn</span> <span class="hljs-title function_ invoke__">Fn</span>(Request&lt;Body&gt;) <span class="hljs-punctuation">-&gt;</span> Response&lt;Body&gt;&gt;&gt;) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;Response&lt;Body&gt;, Infallible&gt; &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">path</span> = req.<span class="hljs-title function_ invoke__">uri</span>().<span class="hljs-title function_ invoke__">path</span>().<span class="hljs-title function_ invoke__">to_owned</span>();<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">params</span> = std::collections::HashMap::<span class="hljs-title function_ invoke__">new</span>();<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">Some</span>(handler) = router.<span class="hljs-title function_ invoke__">recognize</span>(&amp;path) &#123;<br>        <span class="hljs-keyword">for</span> (key, value) <span class="hljs-keyword">in</span> handler.params.<span class="hljs-title function_ invoke__">iter</span>() &#123;<br>            params.<span class="hljs-title function_ invoke__">insert</span>(key.<span class="hljs-title function_ invoke__">to_owned</span>(), value.<span class="hljs-title function_ invoke__">to_owned</span>());<br>        &#125;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">response</span> = (handler.handler)(req<br></code></pre></td></tr></table></figure><p>下一步，我们将实现一个用于处理路由的函数，该函数将根据请求路径调用相应的处理函数。</p><p>首先，我们将定义一个<code>Route</code>结构体，该结构体将具有两个字段：<code>path</code>表示路径，<code>handler</code>表示处理该路径的函数。我们还需要为该结构体实现一个<code>new</code>函数，以方便创建新的<code>Route</code>实例。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Route</span> &#123;<br>    path: <span class="hljs-type">String</span>,<br>    handler: <span class="hljs-title function_ invoke__">fn</span>(Request) <span class="hljs-punctuation">-&gt;</span> Response,<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Route</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(path: &amp;<span class="hljs-type">str</span>, handler: <span class="hljs-title function_ invoke__">fn</span>(Request) <span class="hljs-punctuation">-&gt;</span> Response) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span> &#123;<br>        Route &#123;<br>            path: path.<span class="hljs-title function_ invoke__">to_string</span>(),<br>            handler,<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来，我们将定义一个<code>Router</code>结构体，该结构体将包含一个<code>Vec</code>，用于存储所有已定义的路由。我们还需要为该结构体实现一个<code>add_route</code>函数，以添加新的路由。<code>Router</code>结构体还需要一个<code>handle</code>函数，该函数将根据请求路径调用相应的处理函数。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Router</span> &#123;<br>    routes: <span class="hljs-type">Vec</span>&lt;Route&gt;,<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Router</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>() <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span> &#123;<br>        Router &#123; routes: <span class="hljs-built_in">vec!</span>[] &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">add_route</span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>, path: &amp;<span class="hljs-type">str</span>, handler: <span class="hljs-title function_ invoke__">fn</span>(Request) <span class="hljs-punctuation">-&gt;</span> Response) &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">route</span> = Route::<span class="hljs-title function_ invoke__">new</span>(path, handler);<br>        <span class="hljs-keyword">self</span>.routes.<span class="hljs-title function_ invoke__">push</span>(route);<br>    &#125;<br><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">handle</span>(&amp;<span class="hljs-keyword">self</span>, req: Request) <span class="hljs-punctuation">-&gt;</span> Response &#123;<br>        <span class="hljs-keyword">for</span> <span class="hljs-variable">route</span> <span class="hljs-keyword">in</span> &amp;<span class="hljs-keyword">self</span>.routes &#123;<br>            <span class="hljs-keyword">if</span> route.path == req.path &#123;<br>                <span class="hljs-keyword">return</span> route.<span class="hljs-title function_ invoke__">handler</span>(req);<br>            &#125;<br>        &#125;<br><br>        Response::<span class="hljs-title function_ invoke__">new</span>(StatusCode::NOT_FOUND)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在我们可以在主函数中创建一个<code>Router</code>实例，并添加一些路由。对于每个请求，我们只需要使用<code>router.handle</code>函数来处理该请求即可。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">router</span> = Router::<span class="hljs-title function_ invoke__">new</span>();<br><br>    router.<span class="hljs-title function_ invoke__">add_route</span>(<span class="hljs-string">&quot;/&quot;</span>, index);<br>    router.<span class="hljs-title function_ invoke__">add_route</span>(<span class="hljs-string">&quot;/about&quot;</span>, about);<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">server</span> = Server::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-string">&quot;127.0.0.1:8080&quot;</span>);<br>    server.<span class="hljs-title function_ invoke__">run</span>(router.handle);<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">index</span>(_req: Request) <span class="hljs-punctuation">-&gt;</span> Response &#123;<br>    Response::<span class="hljs-title function_ invoke__">new</span>(StatusCode::OK)<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">about</span>(_req: Request) <span class="hljs-punctuation">-&gt;</span> Response &#123;<br>    Response::<span class="hljs-title function_ invoke__">new</span>(StatusCode::OK)<br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的代码中，我们创建了一个<code>Router</code>实例，并为路径“/”和“/about”分别添加了处理函数<code>index</code>和<code>about</code>。我们还创建了一个<code>Server</code>实例，并在其<code>run</code>函数中使用<code>router.handle</code>函数来处理请求。</p><p>现在，我们可以使用Rust来实现一个基本的路由转发功能。这个例子展示了如何使用Rust的基本语法和特性来构建一个简单但功能强大的Web应用程序。</p>]]></content>
      
      
      <categories>
          
          <category> Rust学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust学习笔记 </tag>
            
            <tag> Rust </tag>
            
            <tag> Rust进阶 </tag>
            
            <tag> 简单的http项目 </tag>
            
            <tag> 路由转发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rust学习笔记（初级）</title>
      <link href="/2023/02/16/Rust%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%88%9D%E7%BA%A7%EF%BC%89/"/>
      <url>/2023/02/16/Rust%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%88%9D%E7%BA%A7%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1>Rust学习笔记（初级）</h1><p>学习 Rust 语言是一个很有趣的过程，它是一门系统编程语言，被设计为安全、并发和快速的编程语言。我们可以按照以下计划一步步来学习 Rust 语言：</p><h2 id="第一步：安装-Rust-和编辑器">第一步：安装 Rust 和编辑器</h2><p>首先，你需要安装 Rust 编程语言和一个代码编辑器。你可以从官方网站下载并安装 Rust 和 Cargo，Rust 的包管理工具。</p><p>安装 Rust 的方法非常简单，在终端或者命令提示符中输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl --proto <span class="hljs-string">&#x27;=https&#x27;</span> --tlsv1.2 -sSf https://sh.rustup.rs | sh<br></code></pre></td></tr></table></figure><p>接下来，你需要选择 Rust 的默认设置，这通常是安装 stable 版本。安装完成后，你可以通过以下命令检查 Rust 是否成功安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rustc --version<br></code></pre></td></tr></table></figure><p>你还需要安装一个代码编辑器，比如 Visual Studio Code 或者 Sublime Text。选择一个你最喜欢的编辑器，并安装 Rust 插件，这样你就可以开始编写 Rust 代码了。</p><h2 id="第二步：学习-Rust-的基本语法">第二步：学习 Rust 的基本语法</h2><p>在学习 Rust 的基本语法之前，你需要先了解一些 Rust 的基本概念。比如，Rust 中有许多关键字和符号，你需要熟悉它们的含义和用法。</p><p>学习 Rust 的基本语法通常包括以下几个方面：</p><ol><li><p>变量和数据类型：了解 Rust 中的数据类型、变量声明和初始化。</p></li><li><p>运算符：了解 Rust 中的运算符，比如算术运算符、逻辑运算符和比较运算符。</p></li><li><p>控制流语句：了解 Rust 中的控制流语句，比如 if-else 语句、循环语句和 match 表达式。</p></li><li><p>函数和模块：了解 Rust 中的函数和模块的定义和用法。</p></li><li><p>所有权和借用：了解 Rust 中的所有权和借用，这是 Rust 最独特的特性之一。</p></li></ol><p>在学习过程中，你可以通过 Rust 官方文档、Rust 程序设计语言（第二版）等资料来深入了解 Rust 的基本语法。同时，你也可以通过实践来巩固所学内容。</p><h2 id="第三步：学习-Rust-的高级特性">第三步：学习 Rust 的高级特性</h2><p>学习完 Rust 的基本语法之后，你可以开始学习 Rust 的高级特性，比如并发编程、内存安全和宏。这些高级特性可以让你更好地利用 Rust 的优势来编写高质量的程序。</p><p>学习 Rust 的高级特性通常包括以下几个方面：</p><ol><li><p>并发编程：了解 Rust 的并发编程模型和常用的并发编程模式。</p></li><li><p>内存安全：了解 Rust 的内存管理机制和所有权规则，以及如何避免常见的内存安全问题，如空指针和缓冲区溢出。</p></li><li><p>泛型编程：了解 Rust 中的泛型编程和 trait，以及如何使用它们来编写更灵活和可重用的代码。</p></li><li><p>宏：了解 Rust 的宏系统，以及如何使用宏来简化代码和提高代码的可读性。</p></li></ol><p>在学习 Rust 的高级特性时，你可以通过阅读 Rust 官方文档、Rust By Example 等资料来深入了解。同时，你也可以尝试编写一些涉及这些高级特性的小程序来巩固所学内容。</p><h2 id="第四步：实践项目">第四步：实践项目</h2><p>学习 Rust 之后，最好的方式就是实践。尝试编写一些小程序或者项目来巩固所学的内容。你可以从简单的程序开始，例如计算器或者简单的游戏，然后逐渐增加复杂度，挑战自己的技能。</p><p>你可以通过 Rust 社区提供的一些资源来找到一些适合的项目，例如 Rust 编程语言论坛和 Rust 库和框架列表。同时，你也可以自己设计一个项目，并根据需要引入 Rust 生态中的库和框架来实现它。</p><p>在实践项目的过程中，你可以遇到一些问题，这时你可以通过 Rust 社区提供的论坛和问答网站来获取帮助。</p><p>以上就是学习 Rust 的基本学习计划，现在我们开始执行学习计划。</p><h2 id="第一步：安装-Rust">第一步：安装 Rust</h2><p>首先，你需要安装 Rust 工具链。请按照下面的步骤来安装：</p><ol><li>访问 Rust 官网：<a href="https://www.rust-lang.org/zh-CN">https://www.rust-lang.org/zh-CN</a></li><li>点击页面中的 “安装” 按钮。</li><li>根据你的操作系统，选择相应的安装方式并按照说明进行安装。</li></ol><p>安装完成后，可以通过运行下面的命令来检查 Rust 是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rustc --version<br></code></pre></td></tr></table></figure><p>如果你看到了类似下面的输出，那么你已经成功安装了 Rust：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rustc 1.56.0 (a178d0322 2021-11-01)<br></code></pre></td></tr></table></figure><h2 id="第二步：了解-Rust-基本语法">第二步：了解 Rust 基本语法</h2><p>在安装完 Rust 后，我们可以开始学习 Rust 的基本语法了。Rust 的语法比较严谨，但是也比较容易学习。下面是一些你需要学习的基本语法：</p><ol><li><p>变量和数据类型：了解 Rust 中的基本数据类型，例如整数、浮点数、布尔值、字符等，以及如何声明和使用变量。</p></li><li><p>控制流语句：了解 Rust 中的条件语句和循环语句，例如 if、match、while、for 等，以及如何使用它们来控制程序流程。</p></li><li><p>函数和模块：了解如何定义和使用函数，以及如何组织代码成模块。</p></li></ol><p>你可以通过 Rust 官方文档或者 Rust By Example 来学习这些基本语法。</p><p>下面是一些简单的 Rust 代码，可以帮助你入门：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 声明一个变量并赋值</span><br><span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = <span class="hljs-number">42</span>;<br><br><span class="hljs-comment">// 定义一个函数</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">add</span>(x: <span class="hljs-type">i32</span>, y: <span class="hljs-type">i32</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">i32</span> &#123;<br>    x + y<br>&#125;<br><br><span class="hljs-comment">// 使用 match 控制流语句</span><br><span class="hljs-keyword">let</span> <span class="hljs-variable">number</span> = <span class="hljs-number">5</span>;<br><span class="hljs-keyword">match</span> number &#123;<br>    <span class="hljs-number">1</span> =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;one&quot;</span>),<br>    <span class="hljs-number">2</span> =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;two&quot;</span>),<br>    _ =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;other&quot;</span>),<br>&#125;<br></code></pre></td></tr></table></figure><p>请尝试理解上面的代码，并编写一些简单的程序来巩固所学的基本语法。</p><h2 id="第三步：深入学习-Rust-的高级特性">第三步：深入学习 Rust 的高级特性</h2><p>在学习 Rust 的基本语法后，你可以开始学习 Rust 的高级特性。这些特性包括：</p><ol><li>所有权和借用：了解 Rust 的所有权和借用机制，以及如何使用它们来避免内存安全问题。</li></ol><p>Rust 中的所有权和借用机制可以避免出现一些常见的内存安全问题，例如空指针引用、悬垂指针和多重释放等。所有权是 Rust 的一个核心概念，它确保了程序在运行时只有一个所有者拥有某个值。当这个所有者离开作用域时，这个值将被自动释放。借用机制则是一种机制，允许程序以只读或者可变的方式借用某个值的引用。</p><ol start="2"><li>生命周期：了解 Rust 中的生命周期，以及如何使用生命周期来管理所有权和借用。</li></ol><p>Rust 中的生命周期描述了一个值在程序中存在的时长。生命周期通常与借用有关，因为在 Rust 中，需要确保一个引用只能在其引用的值存在的时期内存在。</p><ol start="3"><li>Trait 和泛型：了解 Rust 中的 trait 和泛型机制，以及如何使用它们来编写更灵活和可重用的代码。</li></ol><p>Trait 是 Rust 中的一种特殊类型，它描述了一个类型的行为。泛型则是一种通用的编程技术，它允许编写可重用的代码。Rust 中的 trait 和泛型机制结合在一起，可以让程序员编写更灵活和可重用的代码。</p><ol start="4"><li>异常处理：了解 Rust 中的异常处理机制，以及如何使用它来处理异常情况。</li></ol><p>Rust 中的异常处理机制包括 panic 和 Result 类型。panic 表示一个程序遇到了无法处理的错误，可以在代码中使用 panic! 宏来触发 panic。Result 类型则是一种包含一个值或一个错误的枚举类型，可以用来在函数调用之间传递错误信息。</p><p>你可以通过 Rust 官方文档、Rust By Example 或者 Rust Programming Language 这本书来深入学习 Rust 的高级特性。</p><p>请尝试理解这些高级特性，并编写一些程序来巩固所学内容。</p><h2 id="第四步：安装-Rust">第四步：安装 Rust</h2><p>在学习 Rust 之前，你需要先安装 Rust 环境。Rust 支持多个操作系统，包括 Windows、Linux 和 macOS 等。下面是在不同操作系统下安装 Rust 的方法：</p><h3 id="在-Windows-上安装-Rust">在 Windows 上安装 Rust</h3><p>在 Windows 上安装 Rust，你需要执行以下步骤：</p><ol><li><p>打开 <a href="https://www.rust-lang.org/tools/install">Rust 官方网站</a>。</p></li><li><p>点击页面上的 “Download Rustup” 按钮，下载 Rustup 安装程序。</p></li><li><p>运行 Rustup 安装程序，按照提示进行安装。</p></li><li><p>安装完成后，打开命令行工具，输入 <code>rustc --version</code> 命令，检查 Rust 是否成功安装。</p></li></ol><h3 id="在-Linux-或-macOS-上安装-Rust">在 Linux 或 macOS 上安装 Rust</h3><p>在 Linux 或 macOS 上安装 Rust，你需要执行以下步骤：</p><ol><li><p>打开终端窗口。</p></li><li><p>执行以下命令，下载 Rustup 安装程序：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl --proto <span class="hljs-string">&#x27;=https&#x27;</span> --tlsv1.2 -sSf https://sh.rustup.rs | sh<br></code></pre></td></tr></table></figure></li><li><p>安装 Rustup，按照提示进行安装。</p></li><li><p>安装完成后，打开终端窗口，输入 <code>rustc --version</code> 命令，检查 Rust 是否成功安装。</p></li></ol><h3 id="安装-Rust-IDE">安装 Rust IDE</h3><p>安装好 Rust 后，你可以使用任何文本编辑器编写 Rust 程序，但使用一个好的 IDE 可以提高编码效率。这里介绍一些 Rust IDE：</p><ul><li><p>Visual Studio Code：它是一个免费的开源代码编辑器，可以使用 Rust 插件来开发 Rust 程序。</p></li><li><p>IntelliJ IDEA：它是一个商业化的 IDE，可以使用 Rust 插件来开发 Rust 程序。</p></li><li><p>Rust-analyzer：它是一个轻量级的 Rust IDE，提供了代码自动补全、代码重构等功能。</p></li></ul><p>现在，你已经安装好了 Rust 环境和 Rust IDE，可以开始编写 Rust 程序了。</p><p>下一步我们来学习 Rust 的基本语法。</p><h2 id="第五步：学习-Rust-的基本语法">第五步：学习 Rust 的基本语法</h2><p>在学习 Rust 的基本语法之前，我们先简单介绍一下 Rust 的特点：</p><ul><li><p>Rust 是一门静态类型的编程语言，意味着你需要在编译时指定变量类型，而不是在运行时。</p></li><li><p>Rust 采用所有权模型来管理内存，可以避免内存泄漏和野指针等问题。</p></li><li><p>Rust 采用模式匹配来处理控制流程，可以帮助开发者更好地组织代码逻辑。</p></li></ul><p>接下来我们来学习 Rust 的基本语法：</p><h3 id="变量和数据类型">变量和数据类型</h3><p>在 Rust 中，你需要在声明变量时指定变量类型，否则编译器会报错。例如，下面是一个声明整数变量的示例：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">x</span>: <span class="hljs-type">i32</span> = <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><p>在这个例子中，变量 <code>x</code> 的类型是 <code>i32</code>，它的值是 <code>10</code>。</p><p>除了整数类型，Rust 还支持其他的数据类型，包括浮点数、布尔类型、字符类型、字符串类型等。你可以使用 <code>let</code> 关键字来声明变量，例如：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">x</span>: <span class="hljs-type">f32</span> = <span class="hljs-number">3.14</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-variable">y</span>: <span class="hljs-type">bool</span> = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-variable">c</span>: <span class="hljs-type">char</span> = <span class="hljs-string">&#x27;A&#x27;</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-variable">s</span>: &amp;<span class="hljs-type">str</span> = <span class="hljs-string">&quot;hello, world&quot;</span>;<br></code></pre></td></tr></table></figure><p>其中，<code>f32</code> 表示单精度浮点数，<code>bool</code> 表示布尔类型，<code>char</code> 表示字符类型，<code>&amp;str</code> 表示字符串类型。</p><h3 id="控制流程">控制流程</h3><p>在 Rust 中，你可以使用 <code>if</code>/<code>else</code>、<code>loop</code>、<code>while</code> 和 <code>for</code> 等关键字来控制程序的流程。例如，下面是一个使用 <code>if</code>/<code>else</code> 的示例：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">if</span> x &gt; <span class="hljs-number">0</span> &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;x is positive&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> x &lt; <span class="hljs-number">0</span> &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;x is negative&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;x is zero&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个例子中，我们使用 <code>if</code>/<code>else</code> 来判断变量 <code>x</code> 的值，并输出相应的信息。</p><h3 id="函数">函数</h3><p>在 Rust 中，你可以使用 <code>fn</code> 关键字来定义函数。例如，下面是一个计算斐波那契数列的函数：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">fib</span>(n: <span class="hljs-type">i32</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">i32</span> &#123;<br>    <span class="hljs-keyword">if</span> n &lt;= <span class="hljs-number">1</span> &#123;<br>        <span class="hljs-number">1</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_ invoke__">fib</span>(n - <span class="hljs-number">1</span>) + <span class="hljs-title function_ invoke__">fib</span>(n - <span class="hljs-number">2</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个例子中，函数名为 <code>fib</code>，它接受一个 <code>i32</code> 类型的参数 <code>n</code>，返回一个 <code>i32</code> 类型的值。函数内部使用递归的方式计算斐波那契数列。</p><h3 id="结构体和枚举类型">结构体和枚举类型</h3><p>在 Rust 中，你可以使用结构体和枚举类型来组织复杂的数据结构。结构体用于组织一组相关的数据，例如：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Point</span> &#123;<br>    x: <span class="hljs-type">f32</span>,<br>    y: <span class="hljs-type">f32</span>,<br>&#125;<br><br><span class="hljs-keyword">let</span> <span class="hljs-variable">origin</span> = Point &#123; x: <span class="hljs-number">0.0</span>, y: <span class="hljs-number">0.0</span> &#125;;<br><span class="hljs-keyword">let</span> <span class="hljs-variable">point</span> = Point &#123; x: <span class="hljs-number">1.0</span>, y: <span class="hljs-number">2.0</span> &#125;;<br></code></pre></td></tr></table></figure><p>在这个例子中，我们定义了一个名为 <code>Point</code> 的结构体，它包含两个 <code>f32</code> 类型的字段 <code>x</code> 和 <code>y</code>。我们使用 <code>let</code> 关键字来创建一个 <code>origin</code> 的变量，它的值是 <code>&#123; x: 0.0, y: 0.0 &#125;</code>。我们还创建了一个 <code>point</code> 的变量，它的值是 <code>&#123; x: 1.0, y: 2.0 &#125;</code>。</p><p>枚举类型用于定义一组可能的值，例如：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Color</span> &#123;<br>    Red,<br>    Green,<br>    Blue,<br>&#125;<br><br><span class="hljs-keyword">let</span> <span class="hljs-variable">color</span> = Color::Red;<br></code></pre></td></tr></table></figure><p>在这个例子中，我们定义了一个名为 <code>Color</code> 的枚举类型，它包含三个可能的值 <code>Red</code>、<code>Green</code> 和 <code>Blue</code>。我们使用 <code>let</code> 关键字来创建一个 <code>color</code> 的变量，它的值是 <code>Color::Red</code>。</p><h3 id="Trait">Trait</h3><p>Trait 是 Rust 中的一种特殊类型，它用于定义一组行为或功能，可以被多个类型实现。类似于其他语言中的接口，Trait 可以让你定义一组方法，并在多个类型之间共享这些方法。</p><p>例如，下面是一个定义 <code>Animal</code> Trait 的示例：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">trait</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">make_sound</span>(&amp;<span class="hljs-keyword">self</span>);<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Dog</span>;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Cat</span>;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Animal</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Dog</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">make_sound</span>(&amp;<span class="hljs-keyword">self</span>) &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;woof&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Animal</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Cat</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">make_sound</span>(&amp;<span class="hljs-keyword">self</span>) &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;meow&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个例子中，我们定义了一个 <code>Animal</code> Trait，它包含一个 <code>make_sound</code> 方法。我们还定义了两个类型 <code>Dog</code> 和 <code>Cat</code>，它们都实现了 <code>Animal</code> Trait，并分别实现了自己的 <code>make_sound</code> 方法。</p><p>现在我们已经学习了 Rust 的基本语法，接下来我们将会学习 Rust 的高级特性。</p><h3 id="所有权和生命周期">所有权和生命周期</h3><p>在 Rust 中，每个值都有一个所有者（owner），只有所有者才能控制这个值的生命周期。当所有者超出作用域或被显式释放时，与之关联的值将被销毁。</p><p>例如：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, s);<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个例子中，我们创建了一个 <code>String</code> 类型的变量 <code>s</code>，并在 <code>println!</code> 宏中使用了它。在 <code>println!</code> 宏执行完毕后，<code>s</code> 的所有权会被释放，<code>String</code> 类型的值也会被销毁。</p><p>为了避免所有权问题，Rust 引入了引用（reference）的概念。引用是一个指向值的指针，它不拥有这个值，只是对它进行了借用。引用通过 <code>&amp;</code> 符号来创建，例如：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">len</span> = <span class="hljs-title function_ invoke__">calculate_length</span>(&amp;s);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;The length of &#x27;&#123;&#125;&#x27; is &#123;&#125;.&quot;</span>, s, len);<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">calculate_length</span>(s: &amp;<span class="hljs-type">String</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">usize</span> &#123;<br>    s.<span class="hljs-title function_ invoke__">len</span>()<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个例子中，我们定义了一个名为 <code>calculate_length</code> 的函数，它接收一个 <code>String</code> 类型的引用，并返回它的长度。在 <code>main</code> 函数中，我们首先创建了一个 <code>String</code> 类型的变量 <code>s</code>，然后调用 <code>calculate_length</code> 函数并将它的引用作为参数传递。在 <code>calculate_length</code> 函数中，我们使用 <code>s.len()</code> 方法来计算字符串的长度。</p><p>在这个例子中，我们避免了将 <code>String</code> 类型的所有权传递给函数的问题，因为函数只是对它进行了借用，而不是拥有它。</p><p>在 Rust 中，引用还有一个生命周期（lifetime）的概念。生命周期用于定义引用的有效期，确保引用不会超出它所指向的值的生命周期。</p><p>例如：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">string1</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;long string is long&quot;</span>);<br><br>    &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">string2</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;xyz&quot;</span>);<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">result</span> = <span class="hljs-title function_ invoke__">longest</span>(string1.<span class="hljs-title function_ invoke__">as_str</span>(), string2.<span class="hljs-title function_ invoke__">as_str</span>());<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;The longest string is &#x27;&#123;&#125;&#x27;&quot;</span>, result);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">longest</span>&lt;<span class="hljs-symbol">&#x27;a</span>&gt;(x: &amp;<span class="hljs-symbol">&#x27;a</span> <span class="hljs-type">str</span>, y: &amp;<span class="hljs-symbol">&#x27;a</span> <span class="hljs-type">str</span>) <span class="hljs-punctuation">-&gt;</span> &amp;<span class="hljs-symbol">&#x27;a</span> <span class="hljs-type">str</span> &#123;<br>    <span class="hljs-keyword">if</span> x.<span class="hljs-title function_ invoke__">len</span>() &gt; y.<span class="hljs-title function_ invoke__">len</span>() &#123;<br>        x<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        y<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个例子中，我们定义了一个 <code>longest</code> 函数，它接收两个引用 <code>x</code> 和 <code>y</code>，它们的生命周期被定义为 <code>'a</code>。在函数体中，我们比较了这两个引用所指向的字符串的长度，并返回了长度更长的那个字符串的引用。</p><p>这里使用了生命周期的概念来确保 <code>longest</code> 函数返回的引用的生命周期不会超出 <code>x</code> 和 <code>y</code> 引用所指向的字符串的生命周期。这是因为在函数返回时，函数内部的 <code>string2</code> 变量已经超出了作用域，对应的 <code>String</code> 类型的值已经被销毁。因此，返回的字符串引用必须要确保不会超出 <code>string1</code> 和 <code>string2</code> 的生命周期范围。</p><p>在 Rust 中，生命周期可以通过以下几种方式来注明：</p><ul><li><code>'a</code>：表示一个名为 <code>'a</code> 的生命周期。</li><li><code>&amp;'a</code>：表示一个引用，它的生命周期为 <code>'a</code>。</li><li><code>&amp;'a mut</code>：表示一个可变引用，它的生命周期为 <code>'a</code>。</li></ul><p>为了正确使用生命周期，我们需要理解它们的关系和作用域，并通过合适的方式进行注明和管理。</p><h4 id="提问">提问</h4><ol><li>Rust 中的所有权和引用有什么作用？</li><li>生命周期是什么？在 Rust 中如何注明生命周期？</li><li>如何避免所有权问题？可以给出一个例子说明吗？</li></ol><h2 id="第四部分：高级主题">第四部分：高级主题</h2><p>在前面的学习中，我们已经学习了 Rust 中的基本语法、所有权、生命周期、模块化和并发编程等知识。在本节，我们将继续学习 Rust 中的高级主题。</p><h3 id="1-泛型和-trait">1. 泛型和 trait</h3><p>泛型和 trait 是 Rust 中非常重要的概念，它们可以帮助我们编写可重用的代码，从而减少重复的工作量。</p><p>泛型是指使用参数化类型来编写通用代码的技术。例如，可以使用泛型实现一个通用的栈结构，该栈可以存储任何类型的值。在 Rust 中，使用 <code>&lt;T&gt;</code> 来声明泛型类型，并在函数定义中使用它。</p><p>Trait 是一种类似于接口的概念，它定义了一组方法的集合，用于描述类型的行为。Trait 可以被用来限定泛型参数的类型，从而实现对类型进行约束。在 Rust 中，可以使用 <code>impl Trait</code> 来实现一个 trait，使得一个类型能够拥有这些方法。</p><h4 id="提问-2">提问</h4><ol><li>什么是泛型？如何在 Rust 中使用泛型？</li><li>什么是 trait？如何在 Rust 中定义和使用 trait？</li></ol><h3 id="2-宏">2. 宏</h3><p>宏是 Rust 中非常有用的一种功能，它可以让程序员编写自己的代码生成器。宏可以分为两种：声明式宏和过程式宏。</p><p>声明式宏是一种基于模式匹配的宏，它的输入是一段 Rust 代码，输出是一段 Rust 代码。通过这种方式，可以实现类似于函数调用的语法，但是在编译时会生成相应的代码。</p><p>过程式宏是一种基于编译器的 API 的宏，它可以用于在编译时对 Rust 代码进行操作。过程式宏可以分为三种：自定义派生宏、函数宏和属性宏。每种过程式宏都有不同的应用场景和优势。</p><h4 id="提问-3">提问</h4><ol><li>什么是宏？宏可以用来做什么？</li><li>声明式宏和过程式宏有什么区别？Rust 中有哪些类型的过程式宏？</li></ol><h3 id="3-Unsafe-Rust">3. Unsafe Rust</h3><p>虽然 Rust 是一个安全的语言，但有时候我们需要使用一些不安全的操作，例如对内存进行操作、绕过借用规则等等。为了支持这种操作，Rust 提供了 <code>unsafe</code> 关键字。</p><p>在 Rust 中，<code>unsafe</code> 关键字用于标记不安全的代码块，这样编译器就会关闭一些检查和限制。使用 <code>unsafe</code> 关键字编写的代码需要特别小心，因为这些代码可以造成内存泄漏、段错误等的问题，而且可能会导致安全漏洞。</p><p>在使用 <code>unsafe</code> 代码时，需要遵循一些规则和最佳实践，例如避免未定义行为、正确处理指针、保证数据的同步和并发安全等等。</p><h4 id="提问-4">提问</h4><ol><li>什么是 <code>unsafe</code> 关键字？它用于标记什么样的代码块？</li><li>使用 <code>unsafe</code> 代码需要注意什么？在使用 <code>unsafe</code> 代码时需要遵循哪些规则和最佳实践？</li></ol><h3 id="4-FFI">4. FFI</h3><p>FFI（Foreign Function Interface）是一种机制，可以让不同的语言之间进行交互。Rust 提供了强大的 FFI 支持，可以与其他语言进行无缝集成。</p><p>在 Rust 中，可以使用 <code>extern</code> 关键字声明一个外部函数，从而使其可以被其他语言调用。同时，还可以使用 <code>#[no_mangle]</code> 属性来防止 Rust 编译器重命名函数名称。另外，Rust 还提供了 C 兼容的数据类型和 API，从而使得与 C 语言的交互变得非常方便。</p><h4 id="提问-5">提问</h4><ol><li>什么是 FFI？为什么需要 FFI？</li><li>在 Rust 中如何使用 FFI？Rust 提供了哪些机制来方便与其他语言进行交互？</li></ol><h3 id="5-生命周期和内存模型">5. 生命周期和内存模型</h3><p>在 Rust 中，所有权和生命周期是管理内存的关键概念。通过这些机制，Rust 确保程序运行时的内存安全和正确性。</p><p>在 Rust 中，内存被分为堆和栈。堆是用于存储动态分配的数据的区域，而栈是用于存储局部变量和函数参数的区域。Rust 通过所有权和生命周期来管理堆和栈中的内存。</p><p>所有权是指对于任何一个值，都有一个拥有它的变量。当该变量超出作用域时，它所拥有的值就会被自动释放。生命周期是指值存在的时间，它决定了值在内存中的存活时间。</p><p>通过生命周期和所有权的机制，Rust 可以避免许多内存相关的问题，例如空指针、野指针、内存泄漏等等。</p><h4 id="提问-6">提问</h4><ol><li>在 Rust 中，内存被分为哪两种类型？每种类型分别用来存储什么样的数据？</li><li>所有权和生命周期是如何管理内存的？它们有什么优势？</li></ol><h3 id="6-并发编程">6. 并发编程</h3><p>并发编程是现代计算机科学中非常重要的话题之一。在 Rust 中，可以使用线程和通道来实现并发编程。</p><p>线程是一种执行路径，它可以让程序同时执行多个任务。</p><p>在 Rust 中，可以使用标准库中的 <code>std::thread</code> 模块来创建线程。通过 <code>std::thread::spawn</code> 函数，可以创建一个新的线程并启动它的执行。同时，还可以使用 <code>std::sync</code> 模块提供的互斥锁和条件变量来实现线程之间的同步和通信。</p><p>除了线程和通道，Rust 还提供了一种更加高级的并发编程模型，即 <code>async/await</code>。<code>async/await</code> 是一种基于协程的并发编程模型，它允许在单个线程上同时执行多个异步任务，并通过 <code>await</code> 关键字来实现非阻塞式的等待。</p><h4 id="提问-7">提问</h4><ol><li>什么是线程？如何在 Rust 中创建和启动线程？</li><li>Rust 中如何实现线程之间的同步和通信？</li><li>什么是 <code>async/await</code>？它是如何实现并发编程的？</li></ol><h2 id="实践项目">实践项目</h2><p>在学习 Rust 语言的过程中，最好的方式就是尝试实现一些实际的项目。以下是一些适合初学者尝试的 Rust 项目：</p><ol><li><p>Web 应用程序：使用 Rust 和一些流行的 Web 框架（例如 <code>actix-web</code>）构建一个 Web 应用程序，实现用户认证、数据存储和页面渲染等功能。</p></li><li><p>命令行工具：使用 Rust 编写一个命令行工具，实现文件操作、系统管理等功能。</p></li><li><p>游戏：使用 Rust 和一些游戏引擎（例如 <code>amethyst</code>）构建一个简单的 2D 或 3D 游戏。</p></li><li><p>系统编程：使用 Rust 编写一些系统级别的程序，例如操作系统、文件系统或网络协议等。</p></li></ol><p>以上是一些适合初学者尝试的 Rust 项目，你可以根据自己的兴趣和实际情况选择其中的一个或多个进行实践。实践过程中，可以结合本教程中的知识点，不断地学习和探索 Rust 语言的各种特性和用法。</p><p>当你完成了一个项目之后，可以考虑将其发布到 Rust 社区中，以便其他人也可以使用和学习。以下是一些 Rust 社区中的项目发布平台：</p><ol><li><p><a href="https://crates.io/">crates.io</a>：Rust 社区中最流行的项目发布平台，类似于 Node.js 的 npm 和 Python 的 PyPI。</p></li><li><p><a href="https://github.com/">GitHub</a>：一个流行的代码托管和版本控制平台，可以将你的 Rust 项目发布到 GitHub 上，并通过 GitHub Pages 构建和部署文档。</p></li><li><p><a href="https://gitlab.com/">GitLab</a>：类似于 GitHub 的另一个代码托管和版本控制平台。</p></li><li><p><a href="https://launchpad.net/">Launchpad</a>：一个 Ubuntu Linux 发行版使用的软件包构建和发布平台，可以用于发布 Rust 项目的 Ubuntu 软件包。</p></li><li><p><a href="https://aur.archlinux.org/">AUR</a>：一个 Arch Linux 社区维护的软件包构建和发布平台，可以用于发布 Rust 项目的 Arch Linux 软件包。</p></li></ol><p>以上是一些 Rust 项目发布平台，你可以根据自己的需求和偏好选择其中的一个或多个进行使用。</p><p>另外，参与 Rust 社区中的开源项目也是一个非常好的学习 Rust 的方式。在 Rust 社区中，有许多优秀的开源项目，例如 Rust 标准库、Rust 编译器、Cargo 等。通过参与这些项目的开发和维护，可以学习到 Rust 的最佳实践、代码规范和工具链等方面的知识。</p><h4 id="提问-8">提问</h4><ol><li>Rust 社区中最流行的项目发布平台是什么？如何将 Rust 项目发布到这个平台上？</li><li>Rust 社区中有哪些优秀的开源项目？如何参与这些项目的开发和维护？</li></ol><h2 id="总结">总结</h2><p>本教程介绍了 Rust 语言的基本语法、数据类型、控制结构、函数和模块、错误处理、面向对象编程、泛型、迭代器和闭包、并发编程以及实践项目等方面的知识。通过学习本教程，你应该可以掌握 Rust 语言的基础知识，并能够使用 Rust 编写一些实际的项目。</p><p>当然，Rust 语言的学习是一个持续不断的过程。在实践过程中，你会遇到许多问题和挑战，需要不断地学习和探索。同时，也要多参与 Rust 社区中的讨论和活动，结识更多的 Rust 爱好者和开发者，共同推动 Rust 语言的发展和应用。</p><p>祝你学习愉快！</p>]]></content>
      
      
      <categories>
          
          <category> Rust学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust学习笔记 </tag>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跟着ChatGPT学C++：第二课</title>
      <link href="/2023/02/16/%E8%B7%9F%E7%9D%80ChatGPT%E5%AD%A6C-%EF%BC%9A%E7%AC%AC%E4%BA%8C%E8%AF%BE/"/>
      <url>/2023/02/16/%E8%B7%9F%E7%9D%80ChatGPT%E5%AD%A6C-%EF%BC%9A%E7%AC%AC%E4%BA%8C%E8%AF%BE/</url>
      
        <content type="html"><![CDATA[<h1>跟着ChatGPT学C++：第二课</h1><p>请根据昨天的内容继续您的课堂讲解</p><p>好的，让我们继续深入学习C++函数。</p><p>在C++中，函数的实现可以在函数定义的位置之前或之后，但函数声明必须在函数使用之前。函数声明是函数的一个前置声明，它指定了函数的名称、参数列表和返回值类型。函数声明通常放在头文件中，以便在多个源文件中使用该函数。</p><p>下面是一个例子，其中我们在头文件中声明了函数add，并在源文件中定义了它：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 头文件 add.h</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span>;<br><br><span class="hljs-comment">// 源文件 add.cpp</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;add.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的例子中，我们在头文件add.h中声明了函数add，指定了它的名称、参数列表和返回值类型。然后我们在源文件add.cpp中定义了函数add，实现了函数的具体逻辑。</p><p>另外，在C++中，函数可以被定义为内联函数。内联函数通常用于一些简单的计算，它们的定义和声明可以同时出现在头文件中，编译器会将内联函数的实现直接插入到调用它的代码中，从而减少函数调用的开销，提高程序的执行效率。</p><p>下面是一个例子，其中我们定义了一个名为inline_add的内联函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 头文件 inline_add.h</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">inline_add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br><br><span class="hljs-comment">// 源文件 main.cpp</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;inline_add.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">10</span>, b = <span class="hljs-number">20</span>;<br>    <span class="hljs-type">int</span> c = <span class="hljs-built_in">inline_add</span>(a, b);<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;The sum of &quot;</span> &lt;&lt; a &lt;&lt; <span class="hljs-string">&quot; and &quot;</span> &lt;&lt; b &lt;&lt; <span class="hljs-string">&quot; is &quot;</span> &lt;&lt; c &lt;&lt; std::endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的例子中，我们在头文件inline_add.h中定义了一个名为inline_add的内联函数，然后在源文件main.cpp中调用了它，并将返回值赋给变量c。由于inline_add是内联函数，编译器会将函数的实现直接插入到main函数中，从而提高程序的执行效率。</p><p>除了普通函数和内联函数之外，C++还支持函数模板。函数模板是一种通用的函数定义，它可以在不指定具体类型的情况下定义函数，然后根据实际情况进行具体化。函数模板通常用于处理多种不同类型的数据，从而提高代码的复用性和可维护性。</p><p>下面是一个例子，其中我们定义了一个名为max的函数模板：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-comment">// 定义一个名为max的函数模板，它可以比较两个任意类型的值，返回较大的值</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function">T <span class="hljs-title">max</span><span class="hljs-params">(T a, T b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> a &gt; b ? a : b;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">10</span>, b = <span class="hljs-number">20</span>;<br>    <span class="hljs-type">int</span> c = <span class="hljs-built_in">max</span>(a, b);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;最大值为：%d&quot;</span>,c);<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来我们可以讲一下 C++ 中的面向对象编程（Object-Oriented Programming, OOP）。OOP 是一种编程范式，其中程序是由对象组成的，每个对象包含其自身的数据和函数（方法），以及与其他对象进行交互的方式。</p><p>在 C++ 中，可以通过类来定义对象。类是一种用户自定义的数据类型，可以包含数据成员和函数成员。数据成员存储对象的状态，函数成员则定义对象的行为。同时，类可以作为模板，用于创建多个对象。</p><p>下面我们来看一个简单的例子，假设我们想定义一个点（Point）的类：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span> &#123;<br>  <span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> x, y;<br><br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Point</span>(<span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> y = <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">this</span>-&gt;x = x;<br>      <span class="hljs-keyword">this</span>-&gt;y = y;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getX</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> x; &#125;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getY</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> y; &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setX</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123; <span class="hljs-keyword">this</span>-&gt;x = x; &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setY</span><span class="hljs-params">(<span class="hljs-type">int</span> y)</span> </span>&#123; <span class="hljs-keyword">this</span>-&gt;y = y; &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>这个类中包含了两个私有的数据成员 x 和 y，以及四个公有的函数成员 getX、getY、setX 和 setY。其中 getX 和 getY 函数是访问函数，用于获取点的坐标；setX 和 setY 函数是修改函数，用于设置点的坐标。在类的定义中，使用关键字 <code>private</code> 和 <code>public</code> 来指定数据成员和函数成员的访问权限。</p><p>我们可以使用这个类来创建多个点对象：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">Point <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)</span></span>;<br><span class="hljs-function">Point <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>)</span></span>;<br></code></pre></td></tr></table></figure><p>现在，我们可以使用点对象的函数成员来操作这些点了。例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">p<span class="hljs-number">1.</span><span class="hljs-built_in">setX</span>(<span class="hljs-number">3</span>);<br>p<span class="hljs-number">1.</span><span class="hljs-built_in">setY</span>(<span class="hljs-number">4</span>);<br><span class="hljs-type">int</span> x = p<span class="hljs-number">1.</span><span class="hljs-built_in">getX</span>();<br><span class="hljs-type">int</span> y = p<span class="hljs-number">1.</span><span class="hljs-built_in">getY</span>();<br></code></pre></td></tr></table></figure><p>这些操作都是通过对象来完成的，这正是 OOP 的核心思想。同时，由于类的封装性，我们可以在类的实现中修改数据成员的类型、数据的存储方式等等，而无需对外部代码做任何修改，这极大地提高了代码的可维护性。</p><p>另一个重要的 OOP 概念是继承（Inheritance）。继承允许我们创建一个新类，从现有的类派生而来，并继承现有类的数据成员和函数成员，同时可以添加新的数据成员和函数成员，或重写现有的函数成员。</p><p>在 C++ 中，可以使用关键字 <code>class</code> 和 <code>public</code> 来表示继承关系。例如，我们可以定义一个 Circle 类，从 Point 类派生而来：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span> : <span class="hljs-keyword">public</span> Point &#123;<br>  <span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> radius;<br><br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Circle</span>(<span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> y = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> radius = <span class="hljs-number">0</span>)<br>        : <span class="hljs-built_in">Point</span>(x, y), <span class="hljs-built_in">radius</span>(radius) &#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getRadius</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> radius; &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setRadius</span><span class="hljs-params">(<span class="hljs-type">int</span> radius)</span> </span>&#123; <span class="hljs-keyword">this</span>-&gt;radius = radius; &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">getArea</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-number">3.14</span> * radius * radius; &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>在这个类中，我们使用关键字 <code>public</code> 来指定 Circle 类从 Point 类派生而来，并继承了 Point 类的所有公有成员（getX、getY、setX、setY）。同时，我们添加了一个新的数据成员 radius 和两个新的函数成员 getRadius 和 setRadius，以及一个计算圆面积的函数 getArea。通过继承 Point 类，我们可以直接在 Circle 类中使用 Point 类中定义的 getX 和 getY 函数，无需重新编写这些代码。</p><p>我们还可以通过重写基类的函数来实现多态（Polymorphism）。例如，我们可以重写 Point 类中的 getDistance 函数，让它计算圆心到另一个点的距离：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span> : <span class="hljs-keyword">public</span> Point &#123;<br>  <span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> radius;<br><br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Circle</span>(<span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> y = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> radius = <span class="hljs-number">0</span>)<br>        : <span class="hljs-built_in">Point</span>(x, y), <span class="hljs-built_in">radius</span>(radius) &#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getRadius</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> radius; &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setRadius</span><span class="hljs-params">(<span class="hljs-type">int</span> radius)</span> </span>&#123; <span class="hljs-keyword">this</span>-&gt;radius = radius; &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">getArea</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-number">3.14</span> * radius * radius; &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">getDistance</span><span class="hljs-params">(<span class="hljs-type">const</span> Point&amp; other)</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-type">int</span> dx = <span class="hljs-built_in">getX</span>() - other.<span class="hljs-built_in">getX</span>();<br>        <span class="hljs-type">int</span> dy = <span class="hljs-built_in">getY</span>() - other.<span class="hljs-built_in">getY</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">sqrt</span>(dx * dx + dy * dy) - radius;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>在这个例子中，我们重写了 Point 类中的 getDistance 函数，使它返回圆心到另一个点的距离减去半径。这种方式称为“覆盖”（Overriding），因为我们覆盖了基类的函数实现。</p><p>这样，我们就可以创建 Circle 类的对象，并使用 Circle 类中定义的函数和数据成员，同时也可以使用 Point 类中定义的函数和数据成员。</p><p>继承和多态是 C++ 中非常重要的 OOP 概念，可以帮助我们更好地组织和管理程序代码，提高代码的重用性和可维护性。</p><p>当你理解函数、继承和多态时，你就掌握了 C++ 中的面向对象编程的核心概念。</p><p>函数是一段代码，它接受输入参数、执行一些操作，并返回一个值。在 C++ 中，函数是一个代码块，可以在程序中多次调用。函数让我们可以把代码分成模块，降低代码的复杂性，提高代码的重用性。</p><p>继承是一种机制，允许我们创建新的类，这些类可以使用现有类的数据和函数。继承允许我们从已有的类中派生出新的类，而无需重复编写相同的代码。派生类继承了基类的属性和方法，并且可以在其中添加新的属性和方法。</p><p>多态是一种 OOP 概念，指的是在运行时决定使用哪个函数的能力。多态可以让我们以统一的方式操作不同类型的对象，提高代码的可读性和可维护性。C++ 中的多态通常通过虚函数来实现。</p><p>虚函数是在基类中定义的一种特殊函数，它可以被派生类重写。在使用虚函数时，编译器会动态地绑定函数的调用，这样在运行时才能确定使用哪个函数。这个过程称为动态绑定或后期绑定。</p><p>例如，我们可以定义一个 Animal 基类和一个 Dog 派生类，其中 Animal 类中定义了一个虚函数 makeSound，而 Dog 类中覆盖了这个函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">makeSound</span><span class="hljs-params">()</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;This is an animal&quot;</span> &lt;&lt; endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> : <span class="hljs-keyword">public</span> Animal &#123;<br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">makeSound</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Bark!&quot;</span> &lt;&lt; endl;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>在这个例子中，我们使用 virtual 关键字将 makeSound 函数声明为虚函数。在 Dog 类中，我们使用 override 关键字重写了 makeSound 函数，使它输出字符串 “Bark!”。现在，我们可以使用 Animal 类的指针或引用来访问 Dog 对象中的 makeSound 函数，例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">Animal* animal = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Dog</span>();<br>animal-&gt;<span class="hljs-built_in">makeSound</span>(); <span class="hljs-comment">// 输出 &quot;Bark!&quot;</span><br></code></pre></td></tr></table></figure><p>这个例子中，我们定义了一个 Animal 类型的指针，将它指向一个 Dog 对象。在调用 makeSound 函数时，虽然我们使用的是 Animal 类型的指针，但实际上调用的是 Dog 类中的 makeSound 函数。这种行为就是多态。</p><p>谢谢老师，我大致明白了一点</p><p>很好，如果还有任何不理解的地方，可以随时向我提问，我会尽力解答。</p><p>老师，请继续您的讲解，我会认真学的</p><p>好的，接下来我们来深入了解一下函数、继承和多态的概念和用法。</p><h2 id="函数">函数</h2><p>函数是一段可重复使用的代码块，它接收一定数量的参数并执行特定的任务。函数的主要作用是将程序的功能模块化，使得代码更加简洁、易于维护和扩展。</p><p>在 C++ 中，函数定义的语法格式如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">return_type <span class="hljs-title">function_name</span><span class="hljs-params">(parameter_list)</span> </span>&#123;<br>    <span class="hljs-comment">// 函数体</span><br>    <span class="hljs-keyword">return</span> return_value;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中，<code>return_type</code> 表示函数的返回值类型，<code>function_name</code> 是函数的名称，<code>parameter_list</code> 是函数的参数列表，函数体中的语句会执行一些操作并返回一个值，最后使用 <code>return</code> 语句返回这个值。</p><p>例如，下面的代码定义了一个名为 <code>add</code> 的函数，它接受两个 <code>int</code> 类型的参数，并返回它们的和：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    <span class="hljs-type">int</span> sum = a + b;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br></code></pre></td></tr></table></figure><p>在调用函数时，我们需要按照定义的参数列表传递参数，并使用返回值。</p><p>例如，下面的代码调用了 <code>add</code> 函数，并将返回值赋给变量 <code>result</code>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> result = <span class="hljs-built_in">add</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><h2 id="继承">继承</h2><p>继承是一种面向对象编程中的重要概念，它允许一个类从另一个类中继承属性和方法。继承的主要作用是提高代码的可重用性和灵活性，减少代码的重复。</p><p>在 C++ 中，可以使用关键字 <code>class</code> 或 <code>struct</code> 来定义一个类。一个类可以从另一个类中继承属性和方法，语法格式如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">derived_class_name</span> : access_specifier base_class_name &#123;<br>    <span class="hljs-comment">// 成员变量和方法</span><br>&#125;<br></code></pre></td></tr></table></figure><p>其中，<code>derived_class_name</code> 表示子类的名称，<code>access_specifier</code> 是访问控制符，它可以是 <code>public</code>、<code>protected</code> 或 <code>private</code>，用来控制基类中成员的访问权限。<code>base_class_name</code> 表示基类的名称，子类继承基类的成员变量和方法。</p><p>例如，下面的代码定义了一个基类 <code>Shape</code>，它包含了一个成员变量 <code>color</code> 和两个虚函数 <code>area()</code> 和 <code>perimeter()</code>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    string color;<br><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">double</span> <span class="hljs-title">area</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">double</span> <span class="hljs-title">perimeter</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>在 <code>Shape</code> 类中，我们使用 <code>virtual</code> 关键字定义了两个虚函数，这意味着它们可以被子类重写。同时，我们将这两个函数设置为纯虚函数，这意味着我们不能在 <code>Shape</code> 类中实现这两个函数，而是需要在子类中实现。</p><h2 id="类和对象">类和对象</h2><p>在 C++ 中，我们可以通过类来定义自己的数据类型，而通过对象来使用这些数据类型。一个类定义了一组属性和方法，它们共同构成了一个抽象的概念。在使用类时，我们首先需要创建这个类的一个实例，也就是一个对象。我们可以使用类的构造函数来创建一个对象，同时也可以在类的析构函数中定义对象的销毁逻辑。</p><p>例如，我们可以定义一个 <code>Person</code> 类来表示一个人的基本信息：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    string name;<br>    <span class="hljs-type">int</span> age;<br>    string gender;<br><br>    <span class="hljs-comment">// 构造函数</span><br>    <span class="hljs-built_in">Person</span>(string name, <span class="hljs-type">int</span> age, string gender) &#123;<br>        <span class="hljs-keyword">this</span>-&gt;name = name;<br>        <span class="hljs-keyword">this</span>-&gt;age = age;<br>        <span class="hljs-keyword">this</span>-&gt;gender = gender;<br>    &#125;<br><br>    <span class="hljs-comment">// 析构函数</span><br>    ~<span class="hljs-built_in">Person</span>() &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Person &quot;</span> &lt;&lt; name &lt;&lt; <span class="hljs-string">&quot; is destroyed&quot;</span> &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-comment">// 方法</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sayHello</span><span class="hljs-params">()</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Hello, my name is &quot;</span> &lt;&lt; name &lt;&lt; <span class="hljs-string">&quot;, and I am &quot;</span> &lt;&lt; age &lt;&lt; <span class="hljs-string">&quot; years old.&quot;</span> &lt;&lt; endl;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>在这个类中，我们定义了三个属性：姓名、年龄和性别，以及一个构造函数、一个析构函数和一个 <code>sayHello</code> 方法。通过构造函数我们可以创建一个 <code>Person</code> 对象，如下所示：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-number">25</span>, <span class="hljs-string">&quot;Female&quot;</span>)</span></span>;<br></code></pre></td></tr></table></figure><p>我们可以通过 <code>.</code> 运算符访问对象的属性和方法，如下所示：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">p<span class="hljs-number">1.</span><span class="hljs-built_in">sayHello</span>();  <span class="hljs-comment">// Hello, my name is Alice, and I am 25 years old.</span><br></code></pre></td></tr></table></figure><h2 id="继承-2">继承</h2><p>在面向对象编程中，继承是一种重要的概念，它允许我们创建一个新的类，这个新的类拥有了原来类的所有属性和方法，同时还可以定义自己的属性和方法。在 C++ 中，我们使用 <code>class</code> 关键字来定义一个类的继承关系。</p><p>例如，我们可以定义一个 <code>Student</code> 类来继承 <code>Person</code> 类：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> : <span class="hljs-keyword">public</span> Person &#123;<br><span class="hljs-keyword">public</span>:<br>    string id;<br><br>    <span class="hljs-comment">// 构造函数</span><br>    <span class="hljs-built_in">Student</span>(string name, <span class="hljs-type">int</span> age, string gender, string id) : <span class="hljs-built_in">Person</span>(name, age, gender) &#123;<br>        <span class="hljs-keyword">this</span>-&gt;id = id;<br>    &#125;<br><br>    <span class="hljs-comment">// 方法</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sayHello</span><span class="hljs-params">()</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Hello, my name is &quot;</span> &lt;&lt; name &lt;&lt; <span class="hljs-string">&quot;, and I am a student. My student ID is &quot;</span> &lt;&lt; id &lt;&lt; <span class="hljs-string">&quot;.&quot;</span> &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">study</span><span class="hljs-params">()</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;I am studying.&quot;</span> &lt;&lt; endl;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>在这个类中，我们继承了 <code>Person</code> 类，并新增了一个属性 <code>id</code> 和一个方法 <code>study</code>。我们可以使用 <code>:</code> 运算符来初始化基类的成员，如上面的构造函数中的 <code>Person(name, age, gender)</code>。</p><p>现在我们可以创建一个 <code>Student</code> 对象来测试一下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">Student <span class="hljs-title">s1</span><span class="hljs-params">(<span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&quot;Male&quot;</span>, <span class="hljs-string">&quot;202</span></span></span><br></code></pre></td></tr></table></figure><p>在 C++ 中，继承可以分为公有继承、私有继承和保护继承三种形式。</p><p>公有继承是最常用的一种继承形式。在公有继承中，基类中的公有成员和保护成员都可以在派生类中使用，而基类中的私有成员只能在基类中使用，不能在派生类中使用。在派生类对象中，基类部分和派生类部分是独立的两个部分，它们各自拥有自己的成员变量和成员函数。</p><p>私有继承和公有继承类似，不同之处在于基类中的所有成员都是私有的。在私有继承中，基类的公有成员和保护成员在派生类中都变成了私有成员，因此只能在派生类内部使用，不能被派生类的对象直接访问。</p><p>保护继承和私有继承类似，不同之处在于基类中的保护成员在派生类中是保护的，而公有成员仍然是公有的。在保护继承中，基类的公有成员在派生类中仍然是公有成员，但不能被派生类的对象直接访问，只能在派生类内部使用。</p><p>在继承中，派生类可以访问基类的公有成员和保护成员，但不能访问基类的私有成员。如果派生类需要访问基类的私有成员，可以使用访问控制符来定义一些公有的或保护的成员函数，让这些函数可以访问基类的私有成员，而派生类再通过调用这些函数来访问基类的私有成员。</p><p>多态是面向对象编程中的一个重要概念，它可以让不同的对象对同一个消息做出不同的响应。C++ 中的多态有两种实现方式：虚函数和模板函数。</p><p>虚函数是指在基类中定义一个虚函数，在派生类中重新定义该函数。当基类的指针或引用指向派生类对象时，调用该虚函数时将根据指向的实际对象的类型来决定调用哪个版本的虚函数。使用虚函数可以实现动态多态性。</p><p>模板函数是一种在编译时实现的多态。它通过使用模板参数来实现对不同数据类型的支持，编译器会自动根据实际参数类型生成对应的函数。使用模板函数可以实现静态多态性。</p><p>谢谢老师，请继续您的下一节课</p><p>好的，请问你想学习什么主题呢？我可以针对你的需求来讲解。</p><p>老师，C++您教完了吗？如果没教完，请继续教我</p><p>C++ 是一个非常广泛且深入的编程语言，我们在之前的课程中只是简单地介绍了一些基础的语法和概念。如果你有兴趣，我们可以继续深入学习 C++，探索更多高级的主题，例如模板、STL库、多线程编程、异常处理等。请问你对哪个主题感兴趣？</p><p>老师，有没有跟网络编程相关的主题？</p><p>当然有，C++ 是一门强大的编程语言，可以用于开发各种类型的应用程序，包括网络应用程序。下面是一些跟网络编程相关的主题：</p><ol><li><p>Socket 编程：Socket 是一种通信协议，可以用来在网络中进行数据交换。Socket 编程是指使用 C++ 编写应用程序，通过 Socket 与其他计算机进行通信。</p></li><li><p>HTTP/HTTPS 编程：HTTP/HTTPS 是 Web 应用程序中最常用的协议之一，C++ 可以使用 HTTP/HTTPS 协议来实现网络编程。</p></li><li><p>TCP/IP 编程：TCP/IP 是互联网协议的核心，C++ 可以使用 TCP/IP 协议来实现网络编程。</p></li><li><p>UDP 编程：UDP 是一种面向无连接的通信协议，它可以用来在网络中发送和接收数据包。C++ 可以使用 UDP 协议来实现网络编程。</p></li></ol><p>这些主题都比较复杂，需要一定的编程经验和技能才能掌握。如果你已经具备了 C++ 的基础知识，我可以向你介绍一些网络编程的基础概念，例如 Socket 编程、TCP/IP 编程等，以帮助你更好地了解网络编程。</p><p>老师请继续讲解</p><p>好的，以下是一些跟网络编程相关的基础概念，希望能对你有所帮助：</p><ol><li><p>Socket 编程：Socket 是一种通信协议，是实现网络编程的基础。在 C++ 中，Socket 编程需要使用操作系统提供的 API，如 Windows Sockets（Winsock）和 Berkeley Sockets。通过这些 API，可以创建一个套接字（socket），并使用其提供的方法来建立连接、发送和接收数据。</p></li><li><p>TCP/IP 协议：TCP/IP 是互联网协议的核心。TCP（Transmission Control Protocol）是一种可靠的面向连接的协议，用于在网络中传输数据，而 IP（Internet Protocol）则是一种无连接的协议，用于在网络中路由数据包。在 C++ 中，可以使用 TCP/IP 协议来进行网络编程。</p></li><li><p>UDP 协议：UDP（User Datagram Protocol）是一种面向无连接的协议，可以用于在网络中发送和接收数据包。相比 TCP，UDP 更加简单，但不保证数据的可靠性。</p></li><li><p>HTTP/HTTPS 协议：HTTP（Hypertext Transfer Protocol）是 Web 应用程序中最常用的协议之一，用于在 Web 浏览器和 Web 服务器之间传输数据。HTTPS 则是基于 SSL/TLS 协议的安全 HTTP，用于保护数据的隐私和完整性。</p></li></ol><p>以上是一些基础的网络编程概念，你可以进一步了解这些概念，然后通过使用 C++ 的 Socket 编程接口来实现网络应用程序。</p><p>老师，请讲解一下C++模板的主题</p><p>C++模板是一种用于生成通用代码的特殊语言机制。它们允许您编写一次代码，然后在编译时将其应用于不同类型的数据，从而提高了代码的复用性和可读性。</p><p>在C++中，模板有两种类型：类模板和函数模板。</p><p>类模板允许您定义通用类，它们可以在多种不同的类型上进行实例化。类模板通常使用一个或多个类型参数作为模板参数，用于指定类定义中使用的类型。以下是一个示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyVector</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    T* data;<br>    <span class="hljs-type">int</span> size;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">MyVector</span>() &#123;<br>        data = <span class="hljs-keyword">new</span> T[<span class="hljs-number">10</span>];<br>        size = <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-comment">// ...</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>这里定义了一个名为MyVector的类模板，它有一个类型参数T，表示容器中的元素类型。在类定义中，使用T代替实际类型。然后，可以在需要使用MyVector的地方实例化它：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">MyVector&lt;<span class="hljs-type">int</span>&gt; v1;      <span class="hljs-comment">// 实例化一个 MyVector&lt;int&gt; 类型的对象</span><br>MyVector&lt;<span class="hljs-type">double</span>&gt; v2;   <span class="hljs-comment">// 实例化一个 MyVector&lt;double&gt; 类型的对象</span><br></code></pre></td></tr></table></figure><p>函数模板允许您定义通用函数，它们可以在多种不同的类型上进行调用。函数模板通常使用一个或多个类型参数作为模板参数，用于指定函数定义中使用的类型。以下是一个示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function">T <span class="hljs-title">max</span><span class="hljs-params">(T a, T b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> a &gt; b ? a : b;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里定义了一个名为max的函数模板，它有一个类型参数T，表示比较的数据类型。在函数定义中，使用T代替实际类型。然后，可以在需要比较的地方调用它：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>, b = <span class="hljs-number">20</span>;<br><span class="hljs-type">int</span> max_value = <span class="hljs-built_in">max</span>(a, b);    <span class="hljs-comment">// 调用 max&lt;int&gt;(a, b)</span><br></code></pre></td></tr></table></figure><p>需要注意的是，模板定义通常放在头文件中，以便在多个文件中使用。模板是在编译时实例化的，因此头文件中必须包含所有模板定义的实现。</p>]]></content>
      
      
      <categories>
          
          <category> 跟着ChatGPT学C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ChatGPT </tag>
            
            <tag> C++教程 </tag>
            
            <tag> C++学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跟着ChatGPT学C++：第一课</title>
      <link href="/2023/02/15/%E8%B7%9F%E7%9D%80ChatGPT%E5%AD%A6C-%EF%BC%9A%E7%AC%AC%E4%B8%80%E8%AF%BE/"/>
      <url>/2023/02/15/%E8%B7%9F%E7%9D%80ChatGPT%E5%AD%A6C-%EF%BC%9A%E7%AC%AC%E4%B8%80%E8%AF%BE/</url>
      
        <content type="html"><![CDATA[<h1>跟着ChatGPT学C++：第一课</h1><p>**我：**你好</p><hr><p>**ChatGPT：**你好！有什么我可以帮助你的吗？</p><hr><p>**我：**从现在开始，您将扮演我的老师，从零开始教我C++</p><hr><p>**ChatGPT：**好的，我很乐意成为你的老师，并帮助你学习C++！C++ 是一种广泛使用的编程语言，应用于各种领域，包括系统编程、游戏开发、图形界面设计、科学计算等等。它是一种通用的高级编程语言，具有强大的控制能力和高效的执行速度。</p><p>在开始学习 C++ 之前，你需要了解一些基本概念，比如计算机编程的基本原理和编程语言的基础知识。你需要了解的一些基本概念包括：</p><ul><li>数据类型：C++ 中的每个值都具有一种数据类型，比如整数、浮点数、字符等等。</li><li>变量：在程序中，你需要为数据类型分配内存空间，并给这些空间取一个名字，这个名字就是变量名。</li><li>运算符：C++ 支持各种运算符，例如算术运算符、比较运算符、逻辑运算符等等。</li><li>控制结构：C++ 中有多种控制结构，例如条件语句、循环语句等等，它们可以控制程序的执行流程。</li></ul><p>如果你已经掌握了这些基本概念，那么你就可以开始学习 C++ 的语法和语言特性了。下面是一些你需要学习的主要主题：</p><ul><li>输入和输出：C++ 中的标准输入输出流（cin 和 cout）可以让程序与用户进行交互，并从用户那里获取输入或输出结果。</li><li>函数：函数是一个可重用的代码块，它可以接收参数并返回值。在 C++ 中，函数通常用于组织程序，并使程序更易于阅读和维护。</li><li>数组和指针：数组和指针是 C++ 中的重要概念，它们可以让你管理和操作大量数据。</li><li>类和对象：类和对象是 C++ 中的核心概念之一，它们可以让你组织和抽象数据，并在程序中创建可重用的代码模块。</li><li>继承和多态：继承和多态是 C++ 中面向对象编程的两个基本概念，它们可以让你创建更具有结构化和模块化的程序。</li></ul><p>这只是 C++ 的一个基本概览，如果你想更深入地了解 C++，你还需要了解更多的主题，比如模板、STL（标准模板库）等等。</p><hr><p>**我：**老师，能否详细一点，慢慢的给我讲，零基础该从什么开始呢？</p><hr><p>**ChatGPT：**当你零基础学习C++的时候，最好从最基本的概念开始学习，然后逐渐深入。这里我列出了一些建议的学习步骤，希望能对你有所帮助：</p><ol><li><p>安装和配置C++开发环境 你需要下载并安装一个C++开发环境，比如Visual Studio、Code::Blocks或Eclipse等等。配置好环境后，你可以开始创建C++项目并编写代码了。</p></li><li><p>学习基本语法和控制结构 你需要学习C++的基本语法和控制结构，包括变量、数据类型、运算符、条件语句、循环语句等等。你可以从学习这些基本知识开始，通过练习来掌握它们。</p></li><li><p>学习函数 C++中的函数是一种可重用的代码块，它可以接收参数并返回值。你需要学习如何定义和调用函数，以及如何将函数组合起来，构建出一个有组织的程序。</p></li><li><p>学习数组和指针 数组和指针是C++中的重要概念，它们可以让你管理和操作大量数据。你需要学习如何定义和使用数组，以及如何通过指针访问数组中的元素。</p></li><li><p>学习类和对象 类和对象是C++中的核心概念之一，它们可以让你组织和抽象数据，并在程序中创建可重用的代码模块。你需要学习如何定义和使用类和对象，以及如何实现类之间的继承和多态。</p></li><li><p>练习和项目 最后，你需要通过实际的练习和项目来巩固和应用所学的知识。你可以找一些简单的练习题或小项目，比如实现一个简单的计算器或猜数字游戏，来提高你的编程能力和实践经验。</p></li></ol><p>总之，C++是一门非常强大和复杂的编程语言，需要花费一定的时间和精力来学习和掌握。但只要你保持耐心和持之以恒的态度，相信你一定能够掌握C++编程，成为一名优秀的程序员。</p><hr><p>**我：**好的老师，请开启您的第一堂课</p><hr><p>**ChatGPT：**好的，那么我们来开始第一堂课吧！在这堂课中，我将为你介绍C++的基本语法和程序结构。</p><p>C++程序的基本结构如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 这里是程序的主体部分</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这是一个简单的C++程序，它包括了两个主要的部分：</p><ol><li><p>头文件：在程序的开头，我们使用<code>#include</code>指令来包含头文件，以便在程序中使用库函数。在上面的例子中，我们包含了<code>&lt;iostream&gt;</code>头文件，它包含了C++中输入和输出流的定义。</p></li><li><p>主函数：在C++中，每个程序必须有一个主函数<code>main()</code>，它是程序的入口点。在上面的例子中，我们定义了一个返回整数类型值的主函数<code>main()</code>，其中<code>//</code>表示注释，是一些解释代码作用的文字。</p></li></ol><p>现在，我们来看一下C++中的一些基本语法：</p><ol><li>变量：在C++中，变量是存储数据值的一种方式。要定义一个变量，需要指定变量的数据类型和名称。例如：</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> a;        <span class="hljs-comment">// 定义一个整型变量a</span><br><span class="hljs-type">float</span> b;      <span class="hljs-comment">// 定义一个浮点型变量b</span><br><span class="hljs-type">char</span> c;       <span class="hljs-comment">// 定义一个字符型变量c</span><br></code></pre></td></tr></table></figure><ol start="2"><li>数据类型：C++中有多种数据类型，包括整型、浮点型、字符型、布尔型等等。每种数据类型都有一定的取值范围和所占字节数。例如：</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> i = <span class="hljs-number">10</span>;      <span class="hljs-comment">// 定义一个整型变量i，并初始化为10</span><br><span class="hljs-type">float</span> f = <span class="hljs-number">3.14</span>;  <span class="hljs-comment">// 定义一个浮点型变量f，并初始化为3.14</span><br><span class="hljs-type">char</span> ch = <span class="hljs-string">&#x27;a&#x27;</span>;   <span class="hljs-comment">// 定义一个字符型变量ch，并初始化为&#x27;a&#x27;</span><br><span class="hljs-type">bool</span> flag = <span class="hljs-literal">true</span>;<span class="hljs-comment">// 定义一个布尔型变量flag，并初始化为true</span><br></code></pre></td></tr></table></figure><ol start="3"><li>运算符：在C++中，有多种运算符可以用来进行基本的数学和逻辑运算。例如：</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>, b = <span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> c = a + b;      <span class="hljs-comment">// 加法运算，c的值为15</span><br><span class="hljs-type">int</span> d = a * b;      <span class="hljs-comment">// 乘法运算，d的值为50</span><br><span class="hljs-type">bool</span> e = (a &gt; b);   <span class="hljs-comment">// 大于运算，e的值为true</span><br></code></pre></td></tr></table></figure><ol start="4"><li>控制结构：C++中有多种控制结构可以用来控制程序的执行流程，包括条件语句和循环语句。例如：</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">if</span> (a &gt; b) &#123;<br>    <span class="hljs-comment">// 如果a大于b，执行下面的代码块</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;a is greater than b&quot;</span> &lt;&lt; endl;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 如果a不大于b，执行下面的代码块</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;a is less than or equal to b&quot;</span> &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>**我：**继续</p><hr><p>**ChatGPT：**好的，下面我们再来看一些C++中的基本语法：</p><ol start="5"><li>函数：在C++中，函数是一段独立的代码块，可以接受输入参数并返回一个值。函数可以用来封装和重复使用代码。例如：</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    <span class="hljs-comment">// 这是一个加法函数，接受两个整型参数a和b，并返回它们的和</span><br>    <span class="hljs-type">int</span> sum = a + b;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br><br><span class="hljs-type">int</span> result = <span class="hljs-built_in">add</span>(<span class="hljs-number">10</span>, <span class="hljs-number">5</span>);    <span class="hljs-comment">// 调用add函数，传入参数10和5，返回结果15</span><br></code></pre></td></tr></table></figure><ol start="6"><li>数组：在C++中，数组是一种用来存储多个相同类型元素的数据结构。数组的元素可以通过索引访问，索引从0开始。例如：</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> arr[<span class="hljs-number">5</span>];         <span class="hljs-comment">// 定义一个包含5个整型元素的数组</span><br>arr[<span class="hljs-number">0</span>] = <span class="hljs-number">10</span>;        <span class="hljs-comment">// 设置第一个元素的值为10</span><br>arr[<span class="hljs-number">1</span>] = <span class="hljs-number">20</span>;        <span class="hljs-comment">// 设置第二个元素的值为20</span><br><span class="hljs-type">int</span> sum = arr[<span class="hljs-number">0</span>] + arr[<span class="hljs-number">1</span>];  <span class="hljs-comment">// 计算第一个和第二个元素的和，sum的值为30</span><br></code></pre></td></tr></table></figure><ol start="7"><li>指针：在C++中，指针是一种用来存储变量地址的数据类型。指针可以用来访问和修改变量的值，还可以用来动态分配内存。例如：</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;         <span class="hljs-comment">// 定义一个整型变量a，并初始化为10</span><br><span class="hljs-type">int</span> *p = &amp;a;        <span class="hljs-comment">// 定义一个整型指针p，并将它指向a的地址</span><br>*p = <span class="hljs-number">20</span>;            <span class="hljs-comment">// 修改指针所指向的变量a的值为20</span><br>cout &lt;&lt; a &lt;&lt; endl;  <span class="hljs-comment">// 输出a的值为20</span><br></code></pre></td></tr></table></figure><p>以上是C++中一些基本语法的介绍，它们是你学习C++编程的基础。在下一节课中，我们将进一步讨论这些基本语法的应用，并学习如何使用C++来实现简单的程序。</p><hr><p>**我：**谢谢老师，请开启您的第二节课</p><hr><p><strong>ChatGPT：</strong> 好的，本节课我们将进一步学习如何使用C++来实现程序，包括输入输出、控制语句和循环语句。</p><ol><li>输入输出：在C++中，可以使用输入输出流（iostream）来实现程序的输入输出。输入流用于从标准输入设备（比如键盘）中读取数据，输出流用于向标准输出设备（比如屏幕）中输出数据。例如：</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> num;<br>    cout &lt;&lt; <span class="hljs-string">&quot;请输入一个整数：&quot;</span> &lt;&lt; endl;   <span class="hljs-comment">// 输出提示信息</span><br>    cin &gt;&gt; num;                           <span class="hljs-comment">// 从键盘读取一个整数，并赋值给变量num</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;你输入的整数是：&quot;</span> &lt;&lt; num &lt;&lt; endl;   <span class="hljs-comment">// 输出变量num的值</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>控制语句：在C++中，可以使用if语句和switch语句来控制程序的执行流程。if语句用于根据某个条件判断是否执行某个代码块，switch语句用于根据某个值选择执行哪个代码块。例如：</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> age = <span class="hljs-number">20</span>;<br><span class="hljs-keyword">if</span> (age &gt;= <span class="hljs-number">18</span>) &#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;你已经成年了&quot;</span> &lt;&lt; endl;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;你还未成年&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-type">int</span> day = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">switch</span> (day) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        cout &lt;&lt; <span class="hljs-string">&quot;星期一&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>        cout &lt;&lt; <span class="hljs-string">&quot;星期二&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>        cout &lt;&lt; <span class="hljs-string">&quot;星期三&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        cout &lt;&lt; <span class="hljs-string">&quot;未知日期&quot;</span> &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>循环语句：在C++中，可以使用for循环、while循环和do-while循环来实现代码的重复执行。for循环和while循环都是根据某个条件来控制循环的执行次数，do-while循环先执行一次循环体，然后再根据某个条件来决定是否继续执行循环。例如：</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;当前是第&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot;次循环&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (j &lt;= <span class="hljs-number">5</span>) &#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;当前是第&quot;</span> &lt;&lt; j &lt;&lt; <span class="hljs-string">&quot;次循环&quot;</span> &lt;&lt; endl;<br>    j++;<br>&#125;<br><br><span class="hljs-type">int</span> k = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">do</span> &#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;当前是第&quot;</span> &lt;&lt; k &lt;&lt; <span class="hljs-string">&quot;次循环&quot;</span> &lt;&lt; endl;<br>    k++;<br>&#125; <span class="hljs-keyword">while</span> (k &lt;= <span class="hljs-number">5</span>);<br></code></pre></td></tr></table></figure><p>以上是C++中的一些基本语法，它们是你学习C++编程的基础。在下一节课中，我们将介绍如何使用C++来实现常见的数据结构和算法。</p><hr><p>**我：**谢谢老师，请继续</p><hr><p>**ChatGPT：**好的，下面是本节课的其他内容：</p><ol start="4"><li>函数：在C++中，可以使用函数来实现对代码的封装和重用。函数是一段独立的代码块，它可以接收一些输入参数，然后执行一些操作，并返回一个输出值。例如：</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br><br><span class="hljs-type">int</span> result = <span class="hljs-built_in">sum</span>(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;3 + 4 = &quot;</span> &lt;&lt; result &lt;&lt; endl;<br></code></pre></td></tr></table></figure><p>上面的代码定义了一个名为sum的函数，它接收两个int类型的参数a和b，然后返回它们的和。在调用sum函数时，传入了参数3和4，然后将返回值赋给了变量result。</p><ol start="5"><li>数组：在C++中，可以使用数组来存储多个相同类型的数据。数组可以一维或多维。例如：</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> numbers[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>    cout &lt;&lt; numbers[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br><br><span class="hljs-type">int</span> matrix[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>] = &#123;&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;, &#123;<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; j++) &#123;<br>        cout &lt;&lt; matrix[i][j] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    cout &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的代码定义了一个一维数组numbers和一个二维数组matrix，并且使用了for循环来遍历数组中的元素并输出它们的值。</p><ol start="6"><li>指针：在C++中，可以使用指针来表示某个变量在内存中的地址。指针可以用来访问变量的值、传递参数以及动态分配内存等。例如：</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> number = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span>* p = &amp;number;<br>cout &lt;&lt; <span class="hljs-string">&quot;number的值为：&quot;</span> &lt;&lt; number &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;number的地址为：&quot;</span> &lt;&lt; &amp;number &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;p指向的值为：&quot;</span> &lt;&lt; *p &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;p指向的地址为：&quot;</span> &lt;&lt; p &lt;&lt; endl;<br><br>*p = <span class="hljs-number">20</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;number的值变为：&quot;</span> &lt;&lt; number &lt;&lt; endl;<br></code></pre></td></tr></table></figure><p>上面的代码定义了一个名为p的指针，它指向变量number的地址。通过*p可以访问number的值，通过p可以修改number的值。</p><p>这些内容是C++编程中比较基础的内容，希望对你有帮助。在下一节课中，我们将继续学习更深入的C++知识，包括面向对象编程、模板和异常处理等。</p><hr><p>**我：**老师，我有问题，指针可以放入函数或者类的地址吗？</p><hr><p>**ChatGPT：**是的，指针可以存储函数或类的地址。</p><p>对于函数指针，可以使用以下方式定义：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 定义一个函数指针类型</span><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">int</span> <span class="hljs-params">(*func_ptr)</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span></span>;<br><br><span class="hljs-comment">// 定义一个函数，接受一个函数指针类型的参数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">apply</span><span class="hljs-params">(func_ptr func, <span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">func</span>(a, b);<br>&#125;<br><br><span class="hljs-comment">// 定义两个函数，分别实现加法和乘法</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">multiply</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> a * b;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 定义函数指针变量并初始化为加法函数的地址</span><br>    func_ptr p = add;<br><br>    <span class="hljs-comment">// 使用函数指针变量调用apply函数，并传入加法函数和两个参数</span><br>    <span class="hljs-type">int</span> result = <span class="hljs-built_in">apply</span>(p, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;3 + 4 = &quot;</span> &lt;&lt; result &lt;&lt; endl;<br><br>    <span class="hljs-comment">// 将函数指针变量修改为乘法函数的地址</span><br>    p = multiply;<br><br>    <span class="hljs-comment">// 再次使用函数指针变量调用apply函数，并传入乘法函数和两个参数</span><br>    result = <span class="hljs-built_in">apply</span>(p, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;3 * 4 = &quot;</span> &lt;&lt; result &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的代码中，我们首先定义了一个函数指针类型func_ptr，它指向一个函数，该函数接受两个int类型的参数并返回一个int类型的值。然后我们定义了一个apply函数，它接受一个func_ptr类型的参数和两个int类型的参数，该函数会调用传入的函数指针来进行计算。最后我们定义了两个函数add和multiply，分别实现加法和乘法的功能。在main函数中，我们首先定义一个函数指针变量p，并将它初始化为add函数的地址，然后使用apply函数调用p指向的函数来进行加法计算，并输出结果。接着我们将p指向multiply函数的地址，再次使用apply函数调用p指向的函数进行乘法计算，并输出结果。</p><p>对于类指针，可以使用以下方式定义：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;MyClass::func()&quot;</span> &lt;&lt; endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    MyClass obj;<br>    MyClass* p = &amp;obj;<br><br>    p-&gt;<span class="hljs-built_in">func</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的代码中，我们首先定义了一个名为MyClass的类，并定义了一个名为func的成员函数。然后我们定义了一个MyClass类型的对象obj，并定义了一个指向obj的指针p。最后，我们使用箭头运算符-&gt;来调用p指向的对象的func成员函数。</p><p>总之，指针可以存储函数或类的地址，并且可以使用它们来调用相应的函数或成员函数。</p><p>谢谢老师，我知道了。老师，那数组的实现方式是什么？地址吗？</p><p>是的，数组的实现方式是使用内存中一段连续的地址来存储多个相同类型的数据。我们可以使用指针来访问数组中的元素，因为数组名本身就是数组第一个元素的地址。</p><p>例如，如果我们定义一个整型数组a，那么a[0]表示数组中的第一个元素，a[1]表示数组中的第二个元素，以此类推。我们也可以通过使用指针来访问数组中的元素，如下所示：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> a[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br><span class="hljs-type">int</span>* p = a; <span class="hljs-comment">// 将p指向数组a的第一个元素</span><br><br>cout &lt;&lt; <span class="hljs-string">&quot;a[0] = &quot;</span> &lt;&lt; a[<span class="hljs-number">0</span>] &lt;&lt; endl; <span class="hljs-comment">// 输出数组的第一个元素</span><br>cout &lt;&lt; <span class="hljs-string">&quot;*p = &quot;</span> &lt;&lt; *p &lt;&lt; endl; <span class="hljs-comment">// 输出p指向的元素，即数组的第一个元素</span><br><br><span class="hljs-comment">// 使用指针遍历数组</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;a[&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot;] = &quot;</span> &lt;&lt; *(p + i) &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的代码中，我们定义了一个名为a的整型数组，并将它初始化为{1, 2, 3, 4, 5}。然后我们定义了一个名为p的指针，并将它指向数组a的第一个元素。我们可以通过*p来获取p指向的元素，即数组的第一个元素。此外，我们还可以使用指针遍历数组，通过指针的算术运算来访问数组中的每个元素。</p><p>需要注意的是，在使用指针访问数组元素时，要确保指针所指向的内存地址是合法的。例如，在上面的代码中，p指向数组a的第一个元素，因此我们可以使用*(p + i)来访问数组a中的第i个元素。但是如果p指向了数组a之外的内存地址，或者指向了未初始化的内存地址，那么这样的操作就是非法的，可能会导致程序崩溃或产生不可预测的结果。</p><hr><p>**我：**谢谢老师，请问for和while两个循环哪个更高效？在嵌入式开发中老师更推荐使用哪一个？</p><hr><p>**ChatGPT：**在一般的情况下，for循环和while循环的效率是相同的，因为它们的本质相同，只是语法不同。在使用时，应该根据实际情况选择合适的循环结构，无论是for循环还是while循环都可以达到相同的效果。</p><p>在嵌入式开发中，由于嵌入式设备资源有限，因此代码的效率和性能非常重要。在一些特殊的场景下，使用for循环可能比while循环更高效。原因是，for循环通常是用来迭代已知次数的循环，编译器可以对for循环进行优化，生成更高效的机器代码。而while循环通常是用来迭代未知次数的循环，因此在一些场景下可能会比for循环稍微慢一些。</p><p>总的来说，使用for循环还是while循环并没有明显的优劣之分，应该根据具体情况选择合适的循环结构。在一般的情况下，我们可以根据个人习惯和代码风格来选择，不必过于纠结。但在嵌入式开发中，为了达到更高的效率和性能，可以根据具体情况选择使用for循环或while循环。</p><p>谢谢老师，请您开始下一节课的讲解</p><p>好的，接下来我们来讲一下C++中的函数。</p><p>在C++中，函数是一个独立的代码块，可以执行特定的任务。函数可以有输入参数和返回值，也可以没有参数和返回值。函数可以重载，即在同一个作用域中可以定义多个同名的函数，但是它们的参数列表必须不同。这样可以让函数名具有更加灵活的表现力，以适应不同的使用场景。</p><p>下面是一个简单的C++函数的例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-comment">// 定义一个名为sum的函数，它有两个参数a和b，返回值为a和b的和</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">10</span>, b = <span class="hljs-number">20</span>;<br>    <span class="hljs-type">int</span> c = <span class="hljs-built_in">sum</span>(a, b);<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;The sum of &quot;</span> &lt;&lt; a &lt;&lt; <span class="hljs-string">&quot; and &quot;</span> &lt;&lt; b &lt;&lt; <span class="hljs-string">&quot; is &quot;</span> &lt;&lt; c &lt;&lt; std::endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的例子中，我们定义了一个名为sum的函数，它有两个参数a和b，返回值为a和b的和。在main函数中，我们调用了sum函数，将a和b作为参数传递给sum函数，并将sum函数的返回值赋给变量c。然后我们使用std::cout语句输出了计算结果。</p><p>函数的定义通常包括函数的类型、函数名、参数列表和函数体。函数类型用于指定函数的返回值类型，函数名用于唯一标识函数，参数列表用于指定函数的输入参数类型和名称，函数体包含了函数的具体实现代码。</p><p>函数的参数列表可以包含零个或多个参数，参数之间使用逗号分隔。每个参数包括参数类型和参数名。参数类型指定了参数的数据类型，参数名用于在函数体中引用参数的值。函数的返回值类型可以是任何C++数据类型，也可以是void类型，表示函数没有返回值。</p><p>函数体中的代码可以访问函数的参数和局部变量。局部变量是在函数体内定义的变量，只能在函数体内部访问，函数执行结束后会被销毁。函数可以访问全局变量，但是在函数内部不应该定义与全局变量同名的局部变量，因为这样会隐藏全局变量，导致程序出现错误。</p>]]></content>
      
      
      <categories>
          
          <category> 跟着ChatGPT学C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ChatGPT </tag>
            
            <tag> C++教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【破解教程】极路由器进阶教程：搭建交叉编译在路由器中运行自己的程序</title>
      <link href="/2022/12/10/%E3%80%90%E7%A0%B4%E8%A7%A3%E6%95%99%E7%A8%8B%E3%80%91%E6%9E%81%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9B%E9%98%B6%E6%95%99%E7%A8%8B%EF%BC%9A%E6%90%AD%E5%BB%BA%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E5%9C%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E4%B8%AD%E8%BF%90%E8%A1%8C%E8%87%AA%E5%B7%B1%E7%9A%84%E7%A8%8B%E5%BA%8F/"/>
      <url>/2022/12/10/%E3%80%90%E7%A0%B4%E8%A7%A3%E6%95%99%E7%A8%8B%E3%80%91%E6%9E%81%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BF%9B%E9%98%B6%E6%95%99%E7%A8%8B%EF%BC%9A%E6%90%AD%E5%BB%BA%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E5%9C%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E4%B8%AD%E8%BF%90%E8%A1%8C%E8%87%AA%E5%B7%B1%E7%9A%84%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1>极路由器进阶教程：搭建交叉编译在路由器中运行自己的程序</h1><h2 id="准备工作">准备工作</h2><p>上一篇文章已经讲解了极路由器如何获取权限，永久开放ssh的22端口，并知道了极路由器的架构为MIPS架构。通过已知内容，我们开始搭建交叉编译工具链。</p><p>软件：</p><ol><li><p>Ubuntu或者其他Linux系统（我这里使用的是基于WSL的Ubuntu20.4）</p></li><li><p>MIPS编译工具链一套（包含g++与gcc）</p></li></ol><p>**注：**非常坑的是，极路由内的系统Hiwifi是基于openwrt的二次开发，普通的mips-linux-gun的交叉编译链生成的ELF执行文件在该系统下不可执行，并不被支持。所以要费一番功夫去手动编译openwrt系统然后手动提取，或者从网上找openwrt的系统工具包提取。</p><p>硬件：</p><ol><li><p>电脑一台</p></li><li><p>被破解的极路由器一台</p></li></ol><h2 id="开始搭建">开始搭建</h2><p>首先在ubuntu上安装一些东西</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install libncurses5-dev gawk flex build-essential qemu-user <br></code></pre></td></tr></table></figure><p>获取Openwrt的源代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone git://git.openwrt.org/openwrt/openwrt.git <br></code></pre></td></tr></table></figure><p>编译源代码,默认配置即可,不需要勾选什么</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd openwrt<br><br>make menuconfig<br></code></pre></td></tr></table></figure><p>编译,耗时特别长,可以忙些别的事情</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nice make -j16 <br></code></pre></td></tr></table></figure><p>一切无错的情况下,会在staging_dir目录下列出三个目录:</p><blockquote><p>host</p></blockquote><blockquote><p>target-mips_34kc_uClibc-0.9.33.2</p></blockquote><blockquote><p>toolchain-mips_34kc_gcc-4.8-linaro_uClibc-0.9.33.2</p></blockquote><p><strong>以上的安装过程时间太长，步骤太多。为此我直接提取出来toolchain文件，你们下载解压后，从这里开始执行一下步骤即可</strong><strong>提取版toolchain文件的下载地址：<a href="/download/OpenWrt-Toolchain-ramips-for-mipsel_24kec+dsp-gcc-4.8-linaro_uClibc-0.9.33.2.tar.bz2">点我下载，因为在github上下载较慢，文件也不大，请耐心等待</a></strong></p><p>将toolchain加到PATH里面</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi ~/.bashrc<br></code></pre></td></tr></table></figure><p>按 i 键开始添加内容，将下面的内容添加到最后面。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">export STAGING_DIR=&#123;你自己的安装路径（最好写成绝对路径）&#125;OpenWrt/toolchain/bin/<br>export PATH=$STAGING_DIR/:$PATH<br></code></pre></td></tr></table></figure><p>以上工作做好之后测试一下下,如下即为正常。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">mipsel-openwrt-linux-gcc -v</span><br>Reading specs from /home/lsx/misp-openwrt/OpenWrt/toolchain/bin/../lib/gcc/mipsel-openwrt-linux-uclibc/4.8.3/specs<br>COLLECT_GCC=mipsel-openwrt-linux-uclibc-gcc.bin......省略................<br></code></pre></td></tr></table></figure><h2 id="测试">测试</h2><p>写一个最简单的hello world，命名test.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  std::cout &lt;&lt; <span class="hljs-string">&quot;Hello, World!&quot;</span> &lt;&lt; std::endl;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>然后使用交叉编译一下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mipsel-openwrt-linux-gcc test.cpp -o test<br></code></pre></td></tr></table></figure><p>在该文件目录下就会生成一个可执行文件test</p><p>将该文件通过Sftp传入到极路由器中运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">加权限</span><br>chmod +x test<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">运行</span><br>./test<br></code></pre></td></tr></table></figure><p>然后就能看到执行结果了。如图：</p><p><img src="/images/2022-12-10-01.png" alt="upload successful"></p><p><strong>PS:</strong> 不会用Sftp看我之前的博文。</p><p>下一篇文章，讲一下交叉编译tcpdump这个抓包工具。</p>]]></content>
      
      
      <categories>
          
          <category> 破解教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 破解教程 </tag>
            
            <tag> 极路由破解进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【破解教程】破解极路由器教程</title>
      <link href="/2022/12/08/%E3%80%90%E7%A0%B4%E8%A7%A3%E6%95%99%E7%A8%8B%E3%80%91%E7%A0%B4%E8%A7%A3%E6%9E%81%E8%B7%AF%E7%94%B1%E5%99%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2022/12/08/%E3%80%90%E7%A0%B4%E8%A7%A3%E6%95%99%E7%A8%8B%E3%80%91%E7%A0%B4%E8%A7%A3%E6%9E%81%E8%B7%AF%E7%94%B1%E5%99%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1>破解极路由器教程</h1><h2 id="1-准备工作">1.准备工作</h2><p>硬件：</p><ol><li><p>极路由器一台</p></li><li><p>电脑一台</p></li></ol><p>软件：</p><ol><li><p>MobaXterm</p></li><li><p>浏览器</p></li></ol><h2 id="2-开始破解">2.开始破解</h2><p>因为极路由公司已经倒闭，无法通过官方的途径获取权限开启ssh的22端口。不过有一位大佬出了一个网页，利用local_token uuid 算出cloud_token来开启路由器保留的调试模式。</p><p>在调试模式下即可顺利连接极路由器，从而开启ssh的22端口。</p><p>该大佬网址：<a href="http://www.hiwifi.wtf/">http://www.hiwifi.wtf/</a></p><p>首先你要先用电脑连接上该WiFi，然后打开上方的网址。</p><p>如图：</p><p><img src="/images/2022-12-8-01.png" alt="upload successful"></p><p>点击获取local_token : <a href="http://www.4006024680.com/local-ssh/">点我也可以获取</a></p><p>如图：</p><p><img src="/images/2022-12-8-02.png" alt="upload successful"></p><p>复制第一个框里的文本信息，将其填入大佬网页的对应位置。注意极路由调试工具窗口不要关闭！！</p><p>紧接着获取uuid <a href="http://www.4006024680.com/cgi-bin/turbo/proxy/router_info">点我也可以获取</a></p><p>如图中所圈：</p><p><img src="/images/2022-12-8-03.png" alt="upload successful"></p><p>将图中圈起来的uuid，也就是双引号里面的字符复制到大佬网页的指定位置。</p><p>然后点击提交，会获得cloud_token.</p><p>如图：</p><p><img src="/images/2022-12-8-04.png" alt="upload successful"></p><p>然后将cloud_token后面的字符复制到极路由调试工具窗口的页面，将字符填在第二个输入框中，点提交。</p><p>如图：</p><p><img src="/images/2022-12-8-05.png" alt="upload successful"></p><p>然后会出现一个弹出框，如果一次不行就多点几次提交。</p><p>出现Success: ssh port is 22表示已经开启了ssh的22端口。</p><p>如图：</p><p><img src="/images/2022-12-8-06.png" alt="upload successful"></p><p>注意：该窗口不要关闭，下面我来教你如何让ssh端口处于长期打开，且开机自启。</p><h2 id="3-配置ssh的22端口常开（开机自启）">3.配置ssh的22端口常开（开机自启）</h2><p>因为上一步只是开启了临时ssh的22端口，要想常开需要对系统做一些配置。</p><p>通过MobaXterm的ssh连接：</p><p>主机名：192.168.199.1</p><p>用户名：root</p><p>密码：你的路由器管理密码</p><p>端口：22</p><p>进入系统后执行命令：</p><pre><code class="hljs">/etc/init.d/dropbear enable</code></pre><p>如图：</p><p><img src="/images/2022-12-8-07.png" alt="upload successful"></p><p>然后你就可以随时登录极路由的系统了。</p><h2 id="4-进阶操作">4.进阶操作</h2><p>因为极路由的linux属于超级阉割版，只有寥寥几行命令集。为此少了需要可玩性，为此需要了解该系统的硬件架构，用对应的编译链编译自己想要实现的程序功能。（需要吐槽的是，这个linux被阉割的也太干净了！！！）</p><p>如图：</p><p><img src="/images/2022-12-8-08.png" alt="upload successful"></p><p>只有这么多基础的命令，不过没关系，只要知道架构就能找到对应的编译链，就可以实现很多功能了。</p><p>在终端命令中输入：</p><pre><code class="hljs">uname -a</code></pre><p>便可以查看系统架构。</p><p>如图：</p><p><img src="/images/2022-8-09.png" alt="upload successful"></p><p>由上图可以看出该linux系统创建的时间2017年，架构为mips。</p><p>找到mips架构的编译链便可以在该路由器中跑自己写的程序了。</p><p>关于mips编译链我放在以后专门出一个文章讲解，并带上一个工程。</p><p>结束！！！</p>]]></content>
      
      
      <categories>
          
          <category> 破解教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 破解教程 </tag>
            
            <tag> 嵌入式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【嵌入式笔记1】PC端开发常用工具简介</title>
      <link href="/2022/12/02/%E3%80%90%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%AC%94%E8%AE%B01%E3%80%91PC%E7%AB%AF%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/"/>
      <url>/2022/12/02/%E3%80%90%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%AC%94%E8%AE%B01%E3%80%91PC%E7%AB%AF%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h1>【嵌入式笔记1】PC端开发常用工具简介</h1><h2 id="一-编译环境的搭建">一.编译环境的搭建</h2><h3 id="1-编译工具">1 编译工具</h3><p>编译链：目前我所接触到的编译器工具链一共有三个，Linux通用编译链，arm编译链，FT编译链（特定飞腾芯片）。</p><p>ARM芯片编译链工具如下图：<img src="/images/2022-12-2-01.png" alt="uploaded!">该工具链包含了编译该芯片程序的gcc与g++环境。</p><p>Linux通用环境下编译链（X86芯片）如下图：<img src="/images/2022-12-2-02.pmg.png" alt="uploaded!"></p><p>飞腾芯片编译链工具如下图：<img src="/images/2022-12-2-03.png" alt="uploaded!">该工具链包含了编译该芯片程序的gcc与g++环境。</p><p>WSL：本程序中运行环境为Linux，所以程序内需要用到许多Linux的库文件。又因为虚拟机相对而言卡顿且不易于管理和操作。所以WSL的优势就体现出来了。WSL是Windows的一种Linux容器，较于虚拟机具有启动快速流畅，方便对Linux文件系统的管理，文件传输更为方便。（可以在Windows文件系统下对其进行操作）剪切板互通，可以随意粘贴和复制等等。<img src="/images/2022-12-2-04.png" alt="windows本地目录文件"><img src="/images/2022-12-2-05.png" alt="uploaded!"></p><p>Clion：因为长时间使用该软件，对该软件相较于其他软件熟悉，故此使用该软件作为编译开发的IDE。该IDE配合WSL开发将会非常便捷，在windows环境下开发Linux环境的应用程序不需要导入Linux的库文件，该ide可以自己检索。<img src="/images/2022-12-2-06.png" alt="uploaded!"><img src="/images/2022-12-2-07.ping.png" alt="uploaded!">针对不同编译链可以在CMake中进行指定编译。如上图，下文也会给出样例。</p><p>Cmake：该程序是用于管理和自动生成makefile的工具，对于大型项目来说，项目的体积越大，makefile的编写就越复杂，从而不利于维护和修改。而Cmake可以读入所有的源文件，自动生成makefile，且该工具具有跨平台的特性。</p><h3 id="2-编译环境配置">2 编译环境配置</h3><p>首先导入代码或者新建Clion工程，在IDE中配置Clion的编译链。（如图，该软件会自动检测WSL中的编译环境）<img src="/images/2022-12-2-06.png" alt="uploaded!"></p><p>编译链配置好后，开始编写cmakelists.text文档，有一点需要注意，在编写cmakelists.text时需要指定一下编译器。如：</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs leaf"><span class="hljs-punctuation">#</span><span class="hljs-keyword">FT</span><br>set(CMAKE_C_COMPILER &quot;/bin/aarch64-linux-gnu-gcc&quot;)<br>set(CMAKE_CXX_COMPILER &quot;/bin/aarch64-linux-gnu-g++&quot;)<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">arm</span><br><span class="hljs-punctuation">#</span><span class="hljs-keyword">set</span><span class="hljs-params">(<span class="hljs-variable">CMAKE_C_COMPILER</span> <span class="hljs-string">&quot;/bin/arm-linux-gnueabihf-gcc&quot;</span>)</span><br><span class="hljs-punctuation">#</span><span class="hljs-keyword">set</span><span class="hljs-params">(<span class="hljs-variable">CMAKE_CXX_COMPILER</span> <span class="hljs-string">&quot;/bin/arm-linux-gnueabihf-g++&quot;</span>)</span><br></code></pre></td></tr></table></figure><p>cmakelists.text在IDE中也可以自动生成，略作修改即可。</p><p>本项目完整的cmakelists.text内容如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">cmake_minimum_required</span><span class="hljs-params">(VERSION <span class="hljs-number">3.16</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">project</span><span class="hljs-params">(XiaoxinIPDetectionTool)</span></span><br><br><span class="hljs-function"><span class="hljs-title">set</span><span class="hljs-params">(CMAKE_CXX_STANDARD <span class="hljs-number">14</span>)</span></span><br><br><span class="hljs-function"><span class="hljs-title">FIND_PACKAGE</span><span class="hljs-params">(OpenMP REQUIRED)</span></span><br><span class="hljs-keyword">if</span> (OPENMP_FOUND)<br>    <span class="hljs-built_in">message</span>(<span class="hljs-string">&quot;OPENMP FOUND&quot;</span>)<br>    <span class="hljs-built_in">set</span>(CMAKE_C_FLAGS <span class="hljs-string">&quot;$&#123;CMAKE_C_FLAGS&#125; $&#123;OpenMP_C_FLAGS&#125;&quot;</span>)<br>    <span class="hljs-built_in">set</span>(CMAKE_CXX_FLAGS <span class="hljs-string">&quot;$&#123;CMAKE_CXX_FLAGS&#125; $&#123;OpenMP_CXX_FLAGS&#125;&quot;</span>)<br>    <span class="hljs-built_in">set</span>(CMAKE_EXE_LINKER_FLAGS <span class="hljs-string">&quot;$&#123;CMAKE_EXE_LINKER_FLAGS&#125; $&#123;OpenMP_EXE_LINKER_FLAGS&#125;&quot;</span>)<br><br>endif ()<br><br><span class="hljs-selector-id">#FT</span><br><span class="hljs-selector-id">#set</span>(CMAKE_C_COMPILER <span class="hljs-string">&quot;/bin/aarch64-linux-gnu-gcc&quot;</span>)<br><span class="hljs-selector-id">#set</span>(CMAKE_CXX_COMPILER <span class="hljs-string">&quot;/bin/aarch64-linux-gnu-g++&quot;</span>)<br><br><span class="hljs-selector-id">#arm</span><br><span class="hljs-selector-id">#set</span>(CMAKE_C_COMPILER <span class="hljs-string">&quot;/bin/arm-linux-gnueabihf-gcc&quot;</span>)<br><span class="hljs-selector-id">#set</span>(CMAKE_CXX_COMPILER <span class="hljs-string">&quot;/bin/arm-linux-gnueabihf-g++&quot;</span>)<br><br><br><span class="hljs-function"><span class="hljs-title">include_directories</span><span class="hljs-params">(.)</span></span><br><span class="hljs-function"><span class="hljs-title">include_directories</span><span class="hljs-params">(PublicPackage)</span></span><br>......略过...ide可自动生成<br><span class="hljs-function"><span class="hljs-title">include_directories</span><span class="hljs-params">(PublicPackage/Tools)</span></span><br><br><span class="hljs-built_in">add_executable</span>(XiaoxinIPDetectionTool<br>        ......可通过ide自动生成，该处略过本项目的文件树<br>        iner_ip<span class="hljs-selector-class">.cpp</span><br>        iner_ip<span class="hljs-selector-class">.h</span><br>        <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.cpp</span><br>        view_ip<span class="hljs-selector-class">.cpp</span><br>        view_ip<span class="hljs-selector-class">.h</span> <br>        TestDataTransmission<span class="hljs-selector-class">.cpp</span> <br>        TestDataTransmission<span class="hljs-selector-class">.h</span> <br>        Iperf<span class="hljs-selector-class">.cpp</span> <br>        Iperf.h)<br><br></code></pre></td></tr></table></figure><p>完成上述步骤即可编译成执行文件。</p><h3 id="3-调试-测试工具">3 调试/测试工具</h3><p>MobaXterm：该软件极力推荐，功能很多很全。一般板卡测试都使用串口，这里视测试环境情况而定。例如54所机箱较为靠里，串口线短，笔记本无处安放，连落脚的地方都很小，所以可以将板卡拓展出来的控制网口接交换机，笔记本也接交换机通过ssh去远程控制，可以同时控制多个终端。</p><p>SSH ：先通过串口工具登入板卡的kylin系统，在系统中启动ssh服务。命令如下：</p><pre><code class="hljs">systemctl start sshd          开启SSH服务syatemctl is-enabled sshd   设置开启启动ssh服务</code></pre><p>其他的Linux版本开启的方法大致略同，偶有差别可百度/谷歌解决。如果没有ssh服务，可以通过包管理器进行安装openssh.</p><p>连接ssh使用方法：打开MobaXterm，点击左上角。如图</p><p><img src="/images/2022-12-2-08.png" alt="uploaded!"></p><p>在选择ssh</p><p><img src="/images/2022-12-2-09.png" alt="uploaded!"></p><p>记住板卡的IP和用户名和登录密码输入进去</p><p><img src="/images/2022-12-2-10.png" alt="uploaded!"></p><p>即可登录板卡命令终端界面。</p><p><img src="/images/2022-12-2-11.png" alt="uploaded!"></p><p>1.当你成功连接板卡的命令终端界面后，会在窗口的左侧生成一个sftp的窗口，可以方便文件传输和软件的更新。2.在窗口的中间时可以远程控制板卡系统的命令终端窗口。3.在窗口的下方还有一个小栏，会生成监控板卡系统信息的内容。注：需要注意的是，每一个ssh用户都是一个独立的用户空间，也就是说你可以在同一个IP打开多个远程窗口，这些远程窗口在进程之间互不相通。也就是你在第一个ssh窗口打开了一个程序，你在第二个窗口却无法看到它。Ps命令也无法看到它。</p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【嵌入式笔记0】嵌入式技术栈分析</title>
      <link href="/2022/11/17/%E3%80%90%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%AC%94%E8%AE%B00%E3%80%91%E5%B5%8C%E5%85%A5%E5%BC%8F%E6%8A%80%E6%9C%AF%E6%A0%88%E5%88%86%E6%9E%90/"/>
      <url>/2022/11/17/%E3%80%90%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%AC%94%E8%AE%B00%E3%80%91%E5%B5%8C%E5%85%A5%E5%BC%8F%E6%8A%80%E6%9C%AF%E6%A0%88%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1>嵌入式技术栈分析</h1><h2 id="嵌入式开发流程">嵌入式开发流程</h2><p><img src="/images/2022-11-17/2022-11-17-cg449pxsfq.png" alt="流程图"></p><p>一般来说，嵌入式开发的基本流程如下图所示。我们“从下往上”讲解。</p><h3 id="1、画原理图">1、画原理图</h3><p>大学的时候因为一些特殊的原因，接触过电路设计以及硬件开发的知识。但研究并不深，也未曾想到自己会从事嵌入式开发，所以工作时只能花大量时间将其补上。</p><p>言归正传，画原理图首先是需要有原理图库，也可以自己构建元器件图，当然也可以从别人那里拷贝。有了原理图库，就开始画原理图。画原理图需要你有很扎实的电路、数电、模电、电力电子基础，需要会设计电路原理，需要会器件选型，熟悉芯片的最小系统，熟悉常用的电源电路，熟悉基本的滤波电路和运算放大电路。</p><p>下面是我从网上随便找的原理图，可做参考。</p><p><img src="/images/2022-11-17/2022-11-17-R-C.png" alt="R-C"></p><h3 id="2、画PCB图">2、画PCB图</h3><p>原理图画好了以后，开始画PCB板，Printed Circuit Board，印制电路板。画PCB板子，首先是根据选型的元器件，查看元器件的数据手册，根据元器件真实封装大小画出PCB元器件库。有了PCB元器件库，就开始画PCB，画PCB需要你懂如何走线（比如不可以走直角），如何进行强弱电分离，如何避免电源对信号的干扰，如何处理EMI、EMC，如何对高频信号进行蛇形等长走线，专门干这个的叫layout工程师（有时候还需要画多层板，更难）。以上两步常用的软件有AD、PADS、Cadence Allegro等。</p><p>如果说原理图是对电路板的逻辑设计，那PCB就是对电路板的实现设计。这里主要目标是针对如何更好的实现电路板，让其更加符合理想化。围绕的问题在于元器件大小，元器件排布，走线之间影响最小等等。</p><p>因为最近比较关注嘉立创的开源项目，一个迷你的小电视，在此截个PCB图以作参考。</p><p><img src="/images/2022-11-17/2022-11-17-215454.png" alt="2022-11-17-215454"></p><h3 id="3、打板与焊接">3、打板与焊接</h3><p>打板就是将板子给做出来，而PCB设计便是对板子的设计。PCB画好了以后，可以发给厂家打板生产（如嘉立创，每个月都有两次免费打板的机会），板子回来以后，进行焊接。焊接也是一个技术活，最难的是焊接芯片，其他元器件都好焊。这个因为没有实际动手操作过，就不多说了。</p><h3 id="4、嵌入式软件设计（系统移植）">4、嵌入式软件设计（系统移植）</h3><p>本人工作的主要内容便在这个环节。</p><p>当确定经过测试硬件没有问题后，板子需要交到软件工程师手中进行设计与开发。因为windows系统太过于臃肿，所以板载系统都是Linux（Linux系统不仅小，还可以经过剪裁和二次开发使其更符合相关业务）。</p><p>关于嵌入式设计，还有一个新技术，这也是我工作后才知道的FPGA开发设计。该技术具有其特殊性，在可编程芯片上才有这项技术。FPGA本质上其实也算是软件层面的，或者说是硬件到软件过度层面的。因为所用的电子元器件具有特殊性，为可编程芯片。所以该芯片的引脚和功能出厂时并未固定死，也就留出来一定的设计空间。但其实也受限于硬件，硬件从成样后便固定死了，所以FPGA的设计被局限于产品芯片的引脚等。（FPGA刚学没多久，这些都是自接触以来的个人理解，如有错误请评论，我会及时修正）</p><p>嵌入式软件设计有单片机的程序设计（一般是C语言）和系统移植的Linux软件开发（这个语言就很很广泛了，但C/C++因为更近低层，性能更强，所以用的更多）。</p><p>嵌入式Linux软件开发分为：系统移植，驱动编写，程序开发，固件烧写等。</p><p>因为从事的工作涉及到特定的芯片以及该芯片相关的技术与软件，所以后续的嵌入式学习笔记将以工作所需技术为主进行编写。</p><h3 id="5、通讯协议的定制与测试">5、通讯协议的定制与测试</h3><p>该步骤其实是和上一节同步进行的，因为在写程序的时候往往就开始针对通信协议进行商讨和制定。而我写代码的主要内容便是围绕着这些协议，编写UDP承载或者TCP（很少用），然后针对数据进行各种位运算，一层层的给数据套上自定义的协议头等等，这里计算机网络相关的知识就显得尤为重要。</p><h2 id="总结">总结</h2><p>如果让我说整个嵌入式技术栈中哪一步最难？我个人觉得局限性越大的技术越难，因为你要在极小的设计空间内完成业务的设计流程，是一件很费脑细胞的一件事。</p><p>在这里，我认为难度：硬件&gt;FPGA&gt;软件开发。</p><p>软件的优势在于开源社区，网上具有许多资料，学习门槛低。</p><p>FPGA在不同芯片中具有不同的设计，相关资料少，如果针对较为流行通用的芯片（例如赛灵思）进行学习难度应该不是太大，但不限于一类芯片时，各种芯片之间的区别，兼容性等等能让你头疼。例如我最近在做从赛灵思跨度到复旦微的国产化就问题不断。</p><p>硬件的开发相关的学习资料就更少了，除此之外硬件出BUG在网上是很难去搜索答案的，需要许多工具去检验（例如万用表。频谱仪，示波器等等）而且硬件的学习成本极高。（各类元器件都好贵的，一个好的频谱仪和示波器价格都贵的吓人）</p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++项目】从零开始写一个局域网聊天室07：跨系统兼容Linux的设计</title>
      <link href="/2022/11/12/%E3%80%90C-%E9%A1%B9%E7%9B%AE%E3%80%91%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%86%99%E4%B8%80%E4%B8%AA%E5%B1%80%E5%9F%9F%E7%BD%91%E8%81%8A%E5%A4%A9%E5%AE%A407%EF%BC%9A%E5%85%BC%E5%AE%B9Linux%E7%9A%84%E8%AE%BE%E8%AE%A1/"/>
      <url>/2022/11/12/%E3%80%90C-%E9%A1%B9%E7%9B%AE%E3%80%91%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%86%99%E4%B8%80%E4%B8%AA%E5%B1%80%E5%9F%9F%E7%BD%91%E8%81%8A%E5%A4%A9%E5%AE%A407%EF%BC%9A%E5%85%BC%E5%AE%B9Linux%E7%9A%84%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h1>【C++项目】从零开始写一个局域网聊天室07：跨系统兼容Linux的设计</h1><h2 id="1-说明">1.说明</h2><p>因为windows环境下与linux环境下的网络编程存在差异，当你想将windows下的系统移植到Linux环境中编译运行时，需要修改许多内容。为了方便移植，增加其跨平台特性，可以在代码中添加宏进行判断，从而提高软件兼容性。</p><h2 id="2-代码">2.代码</h2><p>因为在写代码的时候，将讲解都以注释的方式写在代码里，这里将不再重复，直接看代码注释。</p><h3 id="2-1-Server端">2.1 Server端</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/*</span><br><span class="hljs-comment">author: 连思鑫</span><br><span class="hljs-comment">time: 2022-11-12</span><br><span class="hljs-comment">跨系统兼容Linux的设计</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">//宏判断运行环境</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN32</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _WINSOCK_DEPRECATED_NO_WARNINGS</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> WIN32_LEAN_AND_MEAN</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;WinSock2.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span> <span class="hljs-comment">//uni std</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;arpa/inet.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SOCKET int </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INVALID_SOCKET   (SOCKET)(~0)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SOCKET_ERROR             (-1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;iostream&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">/*使用报文的方式进行传输*/</span><br><span class="hljs-comment">//数据头</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">CMD</span><br>&#123;<br>CMD_LOGIN,<br>CMD_LOGIN_RESULT,<br>CMD_LOGINOUT,<br>CMD_LOGINOUT_RESULT,<br>CMD_NEW_USER_JOIN,<br>CMD_ERROR<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DataHeader</span><br>&#123;<br><span class="hljs-type">short</span> dataLength;<span class="hljs-comment">//数据长度 </span><br><span class="hljs-type">short</span> cmd;<span class="hljs-comment">//命令</span><br>&#125;;<br><span class="hljs-comment">//DataPackage</span><br><span class="hljs-comment">//包体</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Login</span> : <span class="hljs-keyword">public</span> DataHeader<br>&#123;<br><span class="hljs-comment">//DataHeader header;</span><br><span class="hljs-built_in">Login</span>()<br>&#123;<br>dataLength = <span class="hljs-built_in">sizeof</span>(Login);<br>cmd = CMD_LOGIN;<br>&#125;<br><span class="hljs-type">char</span> userName[<span class="hljs-number">32</span>];<br><span class="hljs-type">char</span> PassWord[<span class="hljs-number">32</span>];<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LoginResult</span> : <span class="hljs-keyword">public</span> DataHeader<br>&#123;<br><span class="hljs-built_in">LoginResult</span>()<br>&#123;<br>dataLength = <span class="hljs-built_in">sizeof</span>(LoginResult);<br>cmd = CMD_LOGIN_RESULT;<br>result = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> result;<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LoginOut</span> : <span class="hljs-keyword">public</span> DataHeader<br>&#123;<br><span class="hljs-built_in">LoginOut</span>()<br>&#123;<br>dataLength = <span class="hljs-built_in">sizeof</span>(LoginOut);<br>cmd = CMD_LOGINOUT;<br>&#125;<br><span class="hljs-type">char</span> userName[<span class="hljs-number">32</span>];<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LoginOutResult</span> : <span class="hljs-keyword">public</span> DataHeader<br>&#123;<br><span class="hljs-built_in">LoginOutResult</span>()<br>&#123;<br>dataLength = <span class="hljs-built_in">sizeof</span>(LoginOutResult);<br>cmd = CMD_LOGINOUT_RESULT;<br>result = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> result;<br>&#125;;<br><span class="hljs-comment">//新客户端加入</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">NewUserJoin</span> : <span class="hljs-keyword">public</span> DataHeader<br>&#123;<br><span class="hljs-built_in">NewUserJoin</span>()<br>&#123;<br>dataLength = <span class="hljs-built_in">sizeof</span>(NewUserJoin);<br>cmd = CMD_NEW_USER_JOIN;<br>sock = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> sock;<br>&#125;;<br><span class="hljs-comment">//创建一个全局的容器</span><br>vector&lt;SOCKET&gt; g_clients;<br><br><span class="hljs-comment">//创建一个函数进行处理</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">processor</span><span class="hljs-params">(SOCKET _cSocket)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//使用缓冲区来接受数据</span><br><span class="hljs-type">char</span> szRecv[<span class="hljs-number">1024</span>] = &#123;&#125;;<br><span class="hljs-comment">//5 接收客户端请求数据</span><br><span class="hljs-type">int</span> nLen = (<span class="hljs-type">int</span>)<span class="hljs-built_in">recv</span>(_cSocket, (<span class="hljs-type">char</span>*)&amp;szRecv, <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br><span class="hljs-comment">//拆包 和 分包</span><br><span class="hljs-comment">/*拆包和分包的作用主要是用在服务端接受数据时一次接受数据过长 和 过短的情况*/</span><br>DataHeader* header = (DataHeader*)szRecv;<br><span class="hljs-keyword">if</span> (nLen &lt;= <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;客户端&lt;Socket = %d&gt;已经退出, 任务结束。\n&quot;</span>, _cSocket);<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-comment">//printf(&quot;收到命令: %d 数据长度：%d\n&quot;, header.cmd, header.dataLength);</span><br><span class="hljs-comment">/*判断所收到的数据*/</span> <span class="hljs-comment">//多客户端进行收发数据的情况下使用</span><br> <span class="hljs-comment">//if (nLen &gt; sizeof(DataHeader))</span><br> <span class="hljs-comment">//&#123;</span><br> <span class="hljs-comment">//&#125;</span><br><span class="hljs-keyword">switch</span> (header-&gt;cmd)<br>&#123;<br><span class="hljs-keyword">case</span> CMD_LOGIN:<br>&#123;<br><span class="hljs-built_in">recv</span>(_cSocket, szRecv + <span class="hljs-built_in">sizeof</span>(DataHeader), header-&gt;dataLength - <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br>Login* login = (Login*)szRecv;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;收到客户端&lt;Socket = %d&gt;请求:CMD_LOGIN 数据长度：%d userName = %s passWord = %s\n&quot;</span>, _cSocket, login-&gt;dataLength, login-&gt;userName, login-&gt;PassWord);<br><span class="hljs-comment">//忽略判断用户名密码是否正确的过程</span><br>LoginResult ret;<br><span class="hljs-comment">//send(_cSocket, (char*)&amp;header, sizeof(DataHeader), 0);</span><br><span class="hljs-built_in">send</span>(_cSocket, (<span class="hljs-type">char</span>*)&amp;ret, <span class="hljs-built_in">sizeof</span>(LoginResult), <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> CMD_LOGINOUT:<br>&#123;<br><span class="hljs-built_in">recv</span>(_cSocket, szRecv + <span class="hljs-built_in">sizeof</span>(DataHeader), header-&gt;dataLength - <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br>LoginOut *loginout = (LoginOut*)szRecv;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;收到命令:CMD_LOGINOUT 数据长度：%d userName = %s\n&quot;</span>, loginout-&gt;dataLength, loginout-&gt;userName);<br><span class="hljs-comment">//忽略判断用户名密码是否正确的过程</span><br>LoginOutResult ret;<br><span class="hljs-comment">//send(_cSocket, (char*)&amp;header, sizeof(DataHeader), 0);</span><br><span class="hljs-built_in">send</span>(_cSocket, (<span class="hljs-type">char</span>*)&amp;ret, <span class="hljs-built_in">sizeof</span>(LoginOutResult), <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>&#123;<br>DataHeader header = &#123; <span class="hljs-number">0</span>, CMD_ERROR &#125;;<br><span class="hljs-built_in">send</span>(_cSocket, (<span class="hljs-type">char</span>*)&amp;header, <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">/*启动Windows socket 2.x环境*/</span><br><span class="hljs-comment">//版本号</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN32</span><br>WORD ver = <span class="hljs-built_in">MAKEWORD</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br>WSADATA dat;<br><span class="hljs-comment">//socket网络编程启动函数</span><br><span class="hljs-built_in">WSAStartup</span>(ver, &amp;dat);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-comment">//---------------------------</span><br><span class="hljs-comment">//--用Socket API建立简易TCP服务端</span><br><span class="hljs-comment">//1、建立一个socket  套接字 （windows） linux上指的是指针</span><br><span class="hljs-comment">/*socket(</span><br><span class="hljs-comment">_In_ int af,(表示什么类型的套接字)</span><br><span class="hljs-comment">_In_ int type,(数据流)</span><br><span class="hljs-comment">_In_ int protocol</span><br><span class="hljs-comment">);*/</span><br><span class="hljs-comment">//IPV4的网络套接字 AF_INET</span><br><span class="hljs-comment">//IPV6的网络套接字 AF_INET6</span><br>SOCKET _sock = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, IPPROTO_TCP);<br><span class="hljs-type">char</span> msgBuf[] = <span class="hljs-string">&quot;Hello, I&#x27;m Server.\n&quot;</span>;<br><span class="hljs-comment">//2、bind 绑定用于接收客户端链接的网络端口</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">bind(</span><br><span class="hljs-comment">_In_ SOCKET s,</span><br><span class="hljs-comment">_In_reads_bytes_(namelen) const struct sockaddr FAR * name,</span><br><span class="hljs-comment">_In_ int namelen</span><br><span class="hljs-comment">);</span><br><span class="hljs-comment">*/</span><br>sockaddr_in _sin = &#123;&#125;;<br>_sin.sin_family = AF_INET;<span class="hljs-comment">//ipv4</span><br>_sin.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">4567</span>);<span class="hljs-comment">//端口号 由于主机和网络的数据类型不同 因此需要进行转换 使用 host to net unsigned short</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN32</span><br>_sin.sin_addr.S_un.S_addr = INADDR_ANY;<span class="hljs-comment">//inet_addr(&quot;127.0.0.1&quot;);//服务器的ip地址 INADDR_ANY本机所有的Ip地址都可以访问 一般这样</span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>_sin.sin_addr.s_addr = INADDR_ANY;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-comment">//有可能绑定失败</span><br><span class="hljs-keyword">if</span> (SOCKET_ERROR == <span class="hljs-built_in">bind</span>(_sock, (sockaddr*)&amp;_sin, <span class="hljs-built_in">sizeof</span>(_sin)))<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;错误，绑定网络端口失败...\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;绑定端口成功...\n&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//3、listen 监听网络端口</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">listen(</span><br><span class="hljs-comment">_In_ SOCKET s,</span><br><span class="hljs-comment">_In_ int backlog</span><br><span class="hljs-comment">);*/</span><br><span class="hljs-keyword">if</span> (SOCKET_ERROR == <span class="hljs-built_in">listen</span>(_sock, <span class="hljs-number">5</span>))<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;错误，监听网络端口失败...\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;监听网络端口成功...\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>&#123;<br><span class="hljs-comment">// 伯克利 BSD socket windows上第一个参数无意义</span><br><span class="hljs-comment">//linux 表示描述符加1</span><br><span class="hljs-comment">/*处理多客户端类型</span><br><span class="hljs-comment">select(</span><br><span class="hljs-comment">_In_ int nfds,</span><br><span class="hljs-comment">_Inout_opt_ fd_set FAR * readfds,//可读</span><br><span class="hljs-comment">_Inout_opt_ fd_set FAR * writefds,//可写</span><br><span class="hljs-comment">_Inout_opt_ fd_set FAR * exceptfds,//异常</span><br><span class="hljs-comment">_In_opt_ const struct timeval FAR * timeout//查询延迟</span><br><span class="hljs-comment">);*/</span><br>fd_set fdRead;<span class="hljs-comment">//描述符(socket)集合</span><br>fd_set fdWrite;<br>fd_set fdExp;<br><br><span class="hljs-built_in">FD_ZERO</span>(&amp;fdRead);<span class="hljs-comment">//清空fd_set集合类型的数据 其实就是将fd_count 置为0</span><br><span class="hljs-built_in">FD_ZERO</span>(&amp;fdWrite);<span class="hljs-comment">//清理集合</span><br><span class="hljs-built_in">FD_ZERO</span>(&amp;fdExp);<br><span class="hljs-comment">//typedef struct fd_set &#123;</span><br><span class="hljs-comment">//u_int fd_count; 数量              /* how many are SET? */</span><br><span class="hljs-comment">//SOCKET  fd_array[FD_SETSIZE(64)];   /* an array of SOCKETs */</span><br><span class="hljs-comment">//&#125; fd_set;</span><br><br><span class="hljs-built_in">FD_SET</span>(_sock, &amp;fdRead);<span class="hljs-comment">//将描述符加入集合中</span><br><span class="hljs-built_in">FD_SET</span>(_sock, &amp;fdWrite);<br><span class="hljs-built_in">FD_SET</span>(_sock, &amp;fdExp);<br>SOCKET maxSock = _sock;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> n = (<span class="hljs-type">int</span>)g_clients.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; n &gt;= <span class="hljs-number">0</span>; n--)<br>&#123;<br><span class="hljs-built_in">FD_SET</span>(g_clients[n], &amp;fdRead);<span class="hljs-comment">//放入可读数据中查询 是否有可读数据</span><br><span class="hljs-keyword">if</span> (maxSock &lt; g_clients[n])<br>&#123;<br><span class="hljs-comment">//找到所有描述符中的最大描述符</span><br>maxSock = g_clients[n];<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//nfds是一个整数值 是指fd_set集合中所有描述符(socket)的范围 而不是数量 </span><br><span class="hljs-comment">//既是所有文件描述符最大值+1 在windows中这个参数可以写0</span><br><span class="hljs-comment">//最后一个参数写成NULL表示一直阻塞在此等待</span><br>timeval t = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">0</span> &#125;;<span class="hljs-comment">//时间变量 &amp;t 最大为1秒</span><br><br> <span class="hljs-comment">//struct timeval &#123;</span><br> <span class="hljs-comment">//long    tv_sec;         /* seconds */</span><br> <span class="hljs-comment">//long    tv_usec;        /* and microseconds */&#125;;</span><br><span class="hljs-type">int</span> ret = <span class="hljs-built_in">select</span>(maxSock + <span class="hljs-number">1</span>, &amp;fdRead, &amp;fdWrite, &amp;fdExp, &amp;t);<br><span class="hljs-comment">/*_sock + 1能够 使得在linux上正常使用*/</span><br><br><span class="hljs-comment">/*以上方式为阻塞方式，如果没有客户端进入将阻塞在此处*/</span><br><span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;select任务结束。\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<span class="hljs-comment">//表示出错 跳出循环</span><br>&#125;<br><span class="hljs-comment">//如果这个socket可读的话表示 有客户端已经连接进来了</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">FD_ISSET</span>(_sock, &amp;fdRead))<span class="hljs-comment">//判断描述符是否在集合中</span><br>&#123;<br><span class="hljs-comment">//清理</span><br><span class="hljs-built_in">FD_CLR</span>(_sock, &amp;fdRead);<br><span class="hljs-comment">//4、accept 等待接收客户端链接</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">accept(</span><br><span class="hljs-comment">_In_ SOCKET s,</span><br><span class="hljs-comment">_Out_writes_bytes_opt_(*addrlen) struct sockaddr FAR * addr,</span><br><span class="hljs-comment">_Inout_opt_ int FAR * addrlen</span><br><span class="hljs-comment">);*/</span><br><span class="hljs-comment">//accept 等待接受客户端连接</span><br>sockaddr_in clientAddr = &#123;&#125;;<br><span class="hljs-type">int</span> nAddrLen = <span class="hljs-built_in">sizeof</span>(sockaddr_in);<br>SOCKET _cSocket = INVALID_SOCKET;<br><span class="hljs-comment">//nAddrLen类型是windows和linux之间不一样的</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN32</span><br>_cSocket = <span class="hljs-built_in">accept</span>(_sock, (sockaddr*)&amp;clientAddr, &amp;nAddrLen);<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>_cSocket = <span class="hljs-built_in">accept</span>(_sock, (sockaddr*)&amp;clientAddr, (<span class="hljs-type">socklen_t</span>*)&amp;nAddrLen);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-keyword">if</span> (INVALID_SOCKET == _cSocket)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;错误，接收到无效客户端SOCKET...\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//有新客户端加入群发给所有用户 类似像聊天室 或者狼人杀类型</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> n = (<span class="hljs-type">int</span>)g_clients.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; n &gt;= <span class="hljs-number">0</span>; n--)<br>&#123;<br>NewUserJoin userJoin;<br><span class="hljs-comment">//发送给现有的每个客户端</span><br><span class="hljs-built_in">send</span>(g_clients[n], (<span class="hljs-type">const</span> <span class="hljs-type">char</span>*)&amp;userJoin, <span class="hljs-built_in">sizeof</span>(NewUserJoin), <span class="hljs-number">0</span>);<br>&#125;<br>g_clients.<span class="hljs-built_in">push_back</span>(_cSocket);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;新客户端加入: socket = %d IP = %s \n&quot;</span>, _cSocket, <span class="hljs-built_in">inet_ntoa</span>(clientAddr.sin_addr));<span class="hljs-comment">//inet_ntoa转换为可读地址</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> n = (<span class="hljs-type">int</span>)g_clients.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; n &gt;= <span class="hljs-number">0</span>; n--)<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">FD_ISSET</span>(g_clients[n], &amp;fdRead))<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">processor</span>(g_clients[n]) == <span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-keyword">auto</span> iter = g_clients.<span class="hljs-built_in">begin</span>() + n;<br><span class="hljs-keyword">if</span> (iter != g_clients.<span class="hljs-built_in">end</span>())<br>&#123;<br>g_clients.<span class="hljs-built_in">erase</span>(iter);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">//printf(&quot;空闲时间处理其他业务\n&quot;);</span><br>&#125;<br><span class="hljs-comment">//以防万一退出程序时 将所有套接字进行清理</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN32</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> n = (<span class="hljs-type">int</span>)g_clients.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; n &gt;= <span class="hljs-number">0</span>; n--)<br>&#123;<br><span class="hljs-built_in">closesocket</span>(g_clients[n]);<br>&#125;<br><span class="hljs-comment">//5、send 向客户端发送一条数据</span><br><span class="hljs-comment">/*send(</span><br><span class="hljs-comment">_In_ SOCKET s,</span><br><span class="hljs-comment">_In_reads_bytes_(len) const char FAR * buf,</span><br><span class="hljs-comment">_In_ int len,</span><br><span class="hljs-comment">_In_ int flags</span><br><span class="hljs-comment">);*/</span><br><span class="hljs-comment">//char msgBuf[] = &quot;Hello, I&#x27;m Server.&quot;;</span><br><span class="hljs-comment">//+1表示将结尾符一并发送过去</span><br><span class="hljs-comment">//send(_cSocket, msgBuf, strlen(msgBuf) + 1, 0);</span><br><br><span class="hljs-comment">//6、关闭套接字closesocket</span><br><span class="hljs-built_in">closesocket</span>(_sock);<br><br><span class="hljs-comment">//---------------------------</span><br><span class="hljs-built_in">WSACleanup</span>();<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> n = (<span class="hljs-type">int</span>)g_clients.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; n &gt;= <span class="hljs-number">0</span>; n--)<br>&#123;<br><span class="hljs-built_in">close</span>(g_clients[n]);<br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;已退出，任务结束\n&quot;</span>);<br><span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-Client端">2.2 Client端</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/*</span><br><span class="hljs-comment">author: 连思鑫</span><br><span class="hljs-comment">Time: 2022-11-12</span><br><span class="hljs-comment">跨平台客户端</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">/*client代码可以跨linux windows macos使用*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> WIN32_LEAN_AND_MEAN</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _WINSOCK_DEPRECATED_NO_WARNINGS</span><br><br><span class="hljs-comment">//进行系统判断 是什么系统就使用什么包</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN32</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;WinSock2.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span> <span class="hljs-comment">//uni std</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;arpa/inet.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SOCKET int </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INVALID_SOCKET   (SOCKET)(~0)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SOCKET_ERROR             (-1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;thread&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;iostream&quot;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">CMD</span><br>&#123;<br>CMD_LOGIN,<br>CMD_LOGIN_RESULT,<br>CMD_LOGINOUT,<br>CMD_LOGINOUT_RESULT,<br>CMD_NEW_USER_JOIN,<br>CMD_ERROR<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DataHeader</span><br>&#123;<br><span class="hljs-type">short</span> dataLength;<span class="hljs-comment">//数据长度 </span><br><span class="hljs-type">short</span> cmd;<span class="hljs-comment">//命令</span><br>&#125;;<br><span class="hljs-comment">//DataPackage</span><br><span class="hljs-comment">//包体</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Login</span> : <span class="hljs-keyword">public</span> DataHeader<br>&#123;<br><span class="hljs-comment">//DataHeader header;</span><br><span class="hljs-built_in">Login</span>()<br>&#123;<br>dataLength = <span class="hljs-built_in">sizeof</span>(Login);<br>cmd = CMD_LOGIN;<br>&#125;<br><span class="hljs-type">char</span> userName[<span class="hljs-number">32</span>];<br><span class="hljs-type">char</span> PassWord[<span class="hljs-number">32</span>];<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LoginResult</span> : <span class="hljs-keyword">public</span> DataHeader<br>&#123;<br><span class="hljs-built_in">LoginResult</span>()<br>&#123;<br>dataLength = <span class="hljs-built_in">sizeof</span>(LoginResult);<br>cmd = CMD_LOGIN_RESULT;<br>result = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> result;<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LoginOut</span> : <span class="hljs-keyword">public</span> DataHeader<br>&#123;<br><span class="hljs-built_in">LoginOut</span>()<br>&#123;<br>dataLength = <span class="hljs-built_in">sizeof</span>(LoginOut);<br>cmd = CMD_LOGINOUT;<br>&#125;<br><span class="hljs-type">char</span> userName[<span class="hljs-number">32</span>];<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LoginOutResult</span> : <span class="hljs-keyword">public</span> DataHeader<br>&#123;<br><span class="hljs-built_in">LoginOutResult</span>()<br>&#123;<br>dataLength = <span class="hljs-built_in">sizeof</span>(LoginOutResult);<br>cmd = CMD_LOGINOUT_RESULT;<br>result = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> result;<br>&#125;;<br><span class="hljs-comment">//新客户端加入</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">NewUserJoin</span> : <span class="hljs-keyword">public</span> DataHeader<br>&#123;<br><span class="hljs-built_in">NewUserJoin</span>()<br>&#123;<br>dataLength = <span class="hljs-built_in">sizeof</span>(NewUserJoin);<br>cmd = CMD_NEW_USER_JOIN;<br>sock = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> sock;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">processor</span><span class="hljs-params">(SOCKET _cSocket)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//使用缓冲区来接受数据</span><br><span class="hljs-type">char</span> szRecv[<span class="hljs-number">1024</span>] = &#123;&#125;;<br><span class="hljs-comment">//5 接收客户端请求数据</span><br><span class="hljs-type">int</span> nLen = <span class="hljs-built_in">recv</span>(_cSocket, (<span class="hljs-type">char</span>*)&amp;szRecv, <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br><span class="hljs-comment">//拆包 和 分包</span><br><span class="hljs-comment">/*拆包和分包的作用主要是用在服务端接受数据时一次接受数据过长 和 过短的情况*/</span><br>DataHeader* header = (DataHeader*)szRecv;<br><span class="hljs-keyword">if</span> (nLen &lt;= <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;与服务器断开连接, 任务结束。\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-comment">//printf(&quot;收到命令: %d 数据长度：%d\n&quot;, header.cmd, header.dataLength);</span><br><span class="hljs-comment">/*判断所收到的数据*/</span> <span class="hljs-comment">//多客户端进行收发数据的情况下使用</span><br> <span class="hljs-comment">//if (nLen &gt; sizeof(DataHeader))</span><br> <span class="hljs-comment">//&#123;</span><br> <span class="hljs-comment">//&#125;</span><br><span class="hljs-keyword">switch</span> (header-&gt;cmd)<br>&#123;<br><span class="hljs-keyword">case</span> CMD_LOGIN_RESULT:<br>&#123;<br><span class="hljs-built_in">recv</span>(_cSocket, szRecv + <span class="hljs-built_in">sizeof</span>(DataHeader), header-&gt;dataLength - <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br>LoginResult* login = (LoginResult*)szRecv;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;收到服务端消息:CMD_LOGIN_RESULT 数据长度：%d \n&quot;</span>, login-&gt;dataLength);<br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> CMD_LOGINOUT_RESULT:<br>&#123;<br><span class="hljs-built_in">recv</span>(_cSocket, szRecv + <span class="hljs-built_in">sizeof</span>(DataHeader), header-&gt;dataLength - <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br>LoginOutResult* loginout = (LoginOutResult*)szRecv;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;收到服务端消息:CMD_LOGINOUT_RESULT 数据长度：%d \n&quot;</span>, loginout-&gt;dataLength);<br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> CMD_NEW_USER_JOIN:<br>&#123;<br><span class="hljs-built_in">recv</span>(_cSocket, szRecv + <span class="hljs-built_in">sizeof</span>(DataHeader), header-&gt;dataLength - <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br>NewUserJoin* userJoin = (NewUserJoin*)szRecv;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;收到服务端消息:CMD_NEW_USER_JOIN 数据长度：%d \n&quot;</span>, userJoin-&gt;dataLength);<br>&#125;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-type">bool</span> g_bRun = <span class="hljs-literal">true</span>;<br><span class="hljs-comment">//将输入命令分离出来</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cmdThread</span><span class="hljs-params">(SOCKET sock)</span> </span>&#123;<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>&#123;<br><span class="hljs-type">char</span> cmdBuf[<span class="hljs-number">256</span>] = &#123;&#125;;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, cmdBuf);<br><span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == <span class="hljs-built_in">strcmp</span>(cmdBuf, <span class="hljs-string">&quot;exit&quot;</span>))<br>&#123;<br>g_bRun = <span class="hljs-literal">false</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;退出cmdThread线程\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == <span class="hljs-built_in">strcmp</span>(cmdBuf, <span class="hljs-string">&quot;login&quot;</span>))<br>&#123;<br>Login login;<br><span class="hljs-built_in">strcpy</span>(login.userName, <span class="hljs-string">&quot;zjj&quot;</span>);<br><span class="hljs-built_in">strcpy</span>(login.PassWord, <span class="hljs-string">&quot;969513&quot;</span>);<br><span class="hljs-built_in">send</span>(sock, (<span class="hljs-type">const</span> <span class="hljs-type">char</span>*)&amp;login, <span class="hljs-built_in">sizeof</span>(login), <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == <span class="hljs-built_in">strcmp</span>(cmdBuf, <span class="hljs-string">&quot;logout&quot;</span>))<br>&#123;<br>LoginOut logout;<br><span class="hljs-built_in">strcpy</span>(logout.userName, <span class="hljs-string">&quot;zjj&quot;</span>);<br><span class="hljs-built_in">send</span>(sock, (<span class="hljs-type">const</span> <span class="hljs-type">char</span>*)&amp;logout, <span class="hljs-built_in">sizeof</span>(logout), <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;不支持的命令\n&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN32</span><br><span class="hljs-comment">/*启动Windows socket 2.x环境*/</span><br><span class="hljs-comment">//版本号</span><br>WORD ver = <span class="hljs-built_in">MAKEWORD</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br>WSADATA dat;<br><span class="hljs-comment">//socket网络编程启动函数</span><br><span class="hljs-built_in">WSAStartup</span>(ver, &amp;dat);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-comment">//---------------------------</span><br><span class="hljs-comment">//用Socket API建立简易TCP客户端</span><br><span class="hljs-comment">//1、建立一个socket</span><br>SOCKET _sock = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (INVALID_SOCKET == _sock)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;错误，建立Socket失败...\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;建立socket成功...\n&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//2、链接服务器 connect</span><br>sockaddr_in _sin = &#123;&#125;;<span class="hljs-comment">//将结构体初始化</span><br>_sin.sin_family = AF_INET;<span class="hljs-comment">//ipv4</span><br>_sin.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">4567</span>);<span class="hljs-comment">//将网络转换为成无符号类型</span><br><span class="hljs-comment">//linux修改的地方</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN32</span><br>_sin.sin_addr.S_un.S_addr = <span class="hljs-built_in">inet_addr</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>_sin.sin_addr.s_addr = <span class="hljs-built_in">inet_addr</span>(<span class="hljs-string">&quot;192.168.137.1&quot;</span>);<br><span class="hljs-comment">//_sin.sin_addr.s_addr = inet_addr(&quot;192.168.25.1&quot;);</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-type">int</span> ret = <span class="hljs-built_in">connect</span>(_sock, (sockaddr*)&amp;_sin, <span class="hljs-built_in">sizeof</span>(sockaddr_in)); <span class="hljs-comment">//使用sizeof(sockaddr_in)类型更安全</span><br><span class="hljs-keyword">if</span> (SOCKET_ERROR == ret)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;错误，链接服务器失败...\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;链接服务器成功...\n&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//启动线程</span><br><span class="hljs-function">thread <span class="hljs-title">t1</span><span class="hljs-params">(cmdThread, _sock)</span></span>;<br>t<span class="hljs-number">1.</span><span class="hljs-built_in">detach</span>();<span class="hljs-comment">//将其与主线程进行分离</span><br><br><span class="hljs-keyword">while</span> (g_bRun)<br>&#123;<br>fd_set fdReads;<br><span class="hljs-built_in">FD_ZERO</span>(&amp;fdReads);<br><span class="hljs-built_in">FD_SET</span>(_sock, &amp;fdReads);<br>timeval t = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">0</span> &#125;;<br><span class="hljs-type">int</span> ret = <span class="hljs-built_in">select</span>(_sock + <span class="hljs-number">1</span>, &amp;fdReads, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, &amp;t);<br><span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;select任务结束！！！\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">FD_ISSET</span>(_sock, &amp;fdReads))<br>&#123;<br><span class="hljs-built_in">FD_CLR</span>(_sock, &amp;fdReads);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">processor</span>(_sock) == <span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;select任务结束2\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-comment">//线程thread 如果在程序执行的过程中加入scanf那么程序将会阻塞</span><br><span class="hljs-comment">//printf(&quot;空闲时间处理其他业务\n&quot;);</span><br><span class="hljs-comment">//Sleep(1000);</span><br>&#125;<br><br><span class="hljs-comment">//7 关闭套节字closesocket</span><br><span class="hljs-comment">//---------------------------</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN32</span><br><span class="hljs-built_in">closesocket</span>(_sock);<span class="hljs-comment">//windows下使用</span><br><span class="hljs-built_in">WSACleanup</span>();<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-built_in">close</span>(_sock);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;已退出.\n&quot;</span>);<br><span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="效果演示">效果演示</h2><p>Linux环境为WSL容器Ubuntu（运行成功！！）<img src="/images/2022-11-12-1.png" alt="Linux环境下的server"></p><p>完整展示：</p><p><img src="/images/2022-11-12-02.png" alt="uploaded!"></p><p>这样就形成了一个简单的多用户聊天室功能，且跨平台。server运行在Linux容器内，client运行在windows11环境中。后续可以用QT写UI美化。</p>]]></content>
      
      
      <categories>
          
          <category> 从零开始写一个聊天室系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++项目 </tag>
            
            <tag> 从零开始写一个局域网聊天室 </tag>
            
            <tag> 服务器编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【c++项目】从零开始写一个局域网聊天室06：网络编程线程</title>
      <link href="/2022/09/29/%E3%80%90c-%E9%A1%B9%E7%9B%AE%E3%80%91%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%86%99%E4%B8%80%E4%B8%AA%E5%B1%80%E5%9F%9F%E7%BD%91%E8%81%8A%E5%A4%A9%E5%AE%A406%EF%BC%9A%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E7%BA%BF%E7%A8%8B/"/>
      <url>/2022/09/29/%E3%80%90c-%E9%A1%B9%E7%9B%AE%E3%80%91%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%86%99%E4%B8%80%E4%B8%AA%E5%B1%80%E5%9F%9F%E7%BD%91%E8%81%8A%E5%A4%A9%E5%AE%A406%EF%BC%9A%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1>【c++项目】从零开始写一个局域网聊天室06：网络编程线程</h1><p>基本上每句代码都写有注释，这里就不罗嗦了。</p><h2 id="Server端">Server端</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment">Time ：2022-9-29</span><br><span class="hljs-comment">Author: 连思鑫</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> WIN32_LEAN_AND_MEAN</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _WINSOCK_DEPRECATED_NO_WARNINGS</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;WinSock2.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;iostream&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">/*使用报文协议的方式进行传输*/</span><br><span class="hljs-comment">//数据头</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">CMD</span><br>&#123;<br>CMD_LOGIN,<br>CMD_LOGIN_RESULT,<br>CMD_LOGINOUT,<br>CMD_LOGINOUT_RESULT,<br>CMD_NEW_USER_JOIN,<br>CMD_ERROR<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DataHeader</span><br>&#123;<br><span class="hljs-type">short</span> dataLength;<span class="hljs-comment">//数据长度 </span><br><span class="hljs-type">short</span> cmd;<span class="hljs-comment">//命令</span><br>&#125;;<br><span class="hljs-comment">//DataPackage</span><br><span class="hljs-comment">//包体</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Login</span> : <span class="hljs-keyword">public</span> DataHeader<br>&#123;<br><span class="hljs-comment">//DataHeader header;</span><br><span class="hljs-built_in">Login</span>() <br>&#123;<br>dataLength = <span class="hljs-built_in">sizeof</span>(Login);<br>cmd = CMD_LOGIN;<br>&#125;<br><span class="hljs-type">char</span> userName[<span class="hljs-number">32</span>];<br><span class="hljs-type">char</span> PassWord[<span class="hljs-number">32</span>];<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LoginResult</span> : <span class="hljs-keyword">public</span> DataHeader<br>&#123;<br><span class="hljs-built_in">LoginResult</span>()<br>&#123;<br>dataLength = <span class="hljs-built_in">sizeof</span>(LoginResult);<br>cmd = CMD_LOGIN_RESULT;<br>result = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> result;<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LoginOut</span> : <span class="hljs-keyword">public</span> DataHeader<br>&#123;<br><span class="hljs-built_in">LoginOut</span>()<br>&#123;<br>dataLength = <span class="hljs-built_in">sizeof</span>(LoginOut);<br>cmd = CMD_LOGINOUT;<br>&#125;<br><span class="hljs-type">char</span> userName[<span class="hljs-number">32</span>];<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LoginOutResult</span> : <span class="hljs-keyword">public</span> DataHeader<br>&#123;<br><span class="hljs-built_in">LoginOutResult</span>()<br>&#123;<br>dataLength = <span class="hljs-built_in">sizeof</span>(LoginOutResult);<br>cmd = CMD_LOGINOUT_RESULT;<br>result = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> result;<br>&#125;;<br><span class="hljs-comment">//新客户端加入</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">NewUserJoin</span> : <span class="hljs-keyword">public</span> DataHeader<br>&#123;<br><span class="hljs-built_in">NewUserJoin</span>()<br>&#123;<br>dataLength = <span class="hljs-built_in">sizeof</span>(NewUserJoin);<br>cmd = CMD_NEW_USER_JOIN;<br>sock = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> sock;<br>&#125;;<br><span class="hljs-comment">//创建一个全局的容器</span><br>vector&lt;SOCKET&gt; g_clients;<br><br><span class="hljs-comment">//创建一个函数进行处理</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">processor</span><span class="hljs-params">(SOCKET _cSocket)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//使用缓冲区来接受数据</span><br><span class="hljs-type">char</span> szRecv[<span class="hljs-number">1024</span>] = &#123;&#125;;<br><span class="hljs-comment">//5 接收客户端请求数据</span><br><span class="hljs-type">int</span> nLen = <span class="hljs-built_in">recv</span>(_cSocket, (<span class="hljs-type">char</span>*)&amp;szRecv, <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br><span class="hljs-comment">//拆包 和 分包</span><br><span class="hljs-comment">/*拆包和分包的作用主要是用在服务端接受数据时一次接受数据过长 和 过短的情况*/</span><br>DataHeader* header = (DataHeader*)szRecv;<br><span class="hljs-keyword">if</span> (nLen &lt;= <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;客户端&lt;Socket = %d&gt;已经退出, 任务结束。\n&quot;</span>, _cSocket);<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-comment">//printf(&quot;收到命令: %d 数据长度：%d\n&quot;, header.cmd, header.dataLength);</span><br><span class="hljs-comment">/*判断所收到的数据*/</span> <span class="hljs-comment">//多客户端进行收发数据的情况下使用</span><br><span class="hljs-comment">//if (nLen &gt; sizeof(DataHeader))</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-keyword">switch</span> (header-&gt;cmd)<br>&#123;<br><span class="hljs-keyword">case</span> CMD_LOGIN:<br>&#123;<br><span class="hljs-built_in">recv</span>(_cSocket, szRecv + <span class="hljs-built_in">sizeof</span>(DataHeader), header-&gt;dataLength - <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br>Login* login = (Login*)szRecv;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;收到客户端&lt;Socket = %d&gt;请求:CMD_LOGIN 数据长度：%d userName = %s passWord = %s\n&quot;</span>,_cSocket, login-&gt;dataLength, login-&gt;userName, login-&gt;PassWord);<br><span class="hljs-comment">//忽略判断用户名密码是否正确的过程</span><br>LoginResult ret;<br><span class="hljs-comment">//send(_cSocket, (char*)&amp;header, sizeof(DataHeader), 0);</span><br><span class="hljs-built_in">send</span>(_cSocket, (<span class="hljs-type">char</span>*)&amp;ret, <span class="hljs-built_in">sizeof</span>(LoginResult), <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> CMD_LOGINOUT:<br>&#123;<br><span class="hljs-built_in">recv</span>(_cSocket, szRecv + <span class="hljs-built_in">sizeof</span>(DataHeader), header-&gt;dataLength - <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br>LoginOut *loginout = (LoginOut*)szRecv;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;收到命令:CMD_LOGINOUT 数据长度：%d userName = %s\n&quot;</span>, loginout-&gt;dataLength, loginout-&gt;userName);<br><span class="hljs-comment">//忽略判断用户名密码是否正确的过程</span><br>LoginOutResult ret;<br><span class="hljs-comment">//send(_cSocket, (char*)&amp;header, sizeof(DataHeader), 0);</span><br><span class="hljs-built_in">send</span>(_cSocket, (<span class="hljs-type">char</span>*)&amp;ret, <span class="hljs-built_in">sizeof</span>(LoginOutResult), <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>&#123;<br>DataHeader header = &#123; <span class="hljs-number">0</span>, CMD_ERROR &#125;;<br><span class="hljs-built_in">send</span>(_cSocket, (<span class="hljs-type">char</span>*)&amp;header, <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">/*启动Windows socket 2.x环境*/</span><br><span class="hljs-comment">//版本号</span><br>WORD ver = <span class="hljs-built_in">MAKEWORD</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br>WSADATA dat;<br><span class="hljs-comment">//socket网络编程启动函数</span><br><span class="hljs-built_in">WSAStartup</span>(ver, &amp;dat);<br><span class="hljs-comment">//---------------------------</span><br><span class="hljs-comment">//--用Socket API建立简易TCP服务端</span><br><span class="hljs-comment">//1、建立一个socket  套接字 （windows） linux上指的是指针</span><br><span class="hljs-comment">/*socket(</span><br><span class="hljs-comment">_In_ int af,(表示什么类型的套接字)</span><br><span class="hljs-comment">_In_ int type,(数据流)</span><br><span class="hljs-comment">_In_ int protocol</span><br><span class="hljs-comment">);*/</span><br><span class="hljs-comment">//IPV4的网络套接字 AF_INET</span><br><span class="hljs-comment">//IPV6的网络套接字 AF_INET6</span><br>SOCKET _sock =  <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, IPPROTO_TCP);<br><span class="hljs-type">char</span> msgBuf[] = <span class="hljs-string">&quot;Hello, I&#x27;m Server.\n&quot;</span>;<br><span class="hljs-comment">//2、bind 绑定用于接收客户端链接的网络端口</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">bind(</span><br><span class="hljs-comment">_In_ SOCKET s,</span><br><span class="hljs-comment">_In_reads_bytes_(namelen) const struct sockaddr FAR * name,</span><br><span class="hljs-comment">_In_ int namelen</span><br><span class="hljs-comment">);</span><br><span class="hljs-comment">*/</span><br>sockaddr_in _sin = &#123;&#125;;<br>_sin.sin_family = AF_INET;<span class="hljs-comment">//ipv4</span><br>_sin.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">4567</span>);<span class="hljs-comment">//端口号 由于主机和网络的数据类型不同 因此需要进行转换 使用 host to net unsigned short</span><br>_sin.sin_addr.S_un.S_addr = INADDR_ANY;<span class="hljs-comment">//inet_addr(&quot;127.0.0.1&quot;);//服务器的ip地址 INADDR_ANY本机所有的Ip地址都可以访问 一般这样</span><br><span class="hljs-comment">//有可能绑定失败</span><br><span class="hljs-keyword">if</span> (SOCKET_ERROR == <span class="hljs-built_in">bind</span>(_sock, (sockaddr*)&amp;_sin, <span class="hljs-built_in">sizeof</span>(_sin))) <br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;错误，绑定网络端口失败...\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;绑定端口成功...\n&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//3、listen 监听网络端口</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">listen(</span><br><span class="hljs-comment">_In_ SOCKET s,</span><br><span class="hljs-comment">_In_ int backlog</span><br><span class="hljs-comment">);*/</span><br><span class="hljs-keyword">if</span> (SOCKET_ERROR == <span class="hljs-built_in">listen</span>(_sock, <span class="hljs-number">5</span>))<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;错误，监听网络端口失败...\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;监听网络端口成功...\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>&#123;<br><span class="hljs-comment">// 伯克利 BSD socket windows上第一个参数无意义</span><br><span class="hljs-comment">//linux 表示描述符加1</span><br><span class="hljs-comment">/*处理多客户端类型</span><br><span class="hljs-comment">select(</span><br><span class="hljs-comment">_In_ int nfds,</span><br><span class="hljs-comment">_Inout_opt_ fd_set FAR * readfds,//可读</span><br><span class="hljs-comment">_Inout_opt_ fd_set FAR * writefds,//可写</span><br><span class="hljs-comment">_Inout_opt_ fd_set FAR * exceptfds,//异常</span><br><span class="hljs-comment">_In_opt_ const struct timeval FAR * timeout//查询延迟</span><br><span class="hljs-comment">);*/</span><br>fd_set fdRead;<span class="hljs-comment">//描述符(socket)集合</span><br>fd_set fdWrite;<br>fd_set fdExp;<br><br><span class="hljs-built_in">FD_ZERO</span>(&amp;fdRead);<span class="hljs-comment">//清空fd_set集合类型的数据 其实就是将fd_count 置为0</span><br><span class="hljs-built_in">FD_ZERO</span>(&amp;fdWrite);<span class="hljs-comment">//清理集合</span><br><span class="hljs-built_in">FD_ZERO</span>(&amp;fdExp);<br><span class="hljs-comment">//typedef struct fd_set &#123;</span><br><span class="hljs-comment">//u_int fd_count; 数量              /* how many are SET? */</span><br><span class="hljs-comment">//SOCKET  fd_array[FD_SETSIZE(64)];   /* an array of SOCKETs */</span><br><span class="hljs-comment">//&#125; fd_set;</span><br><br><span class="hljs-built_in">FD_SET</span>(_sock, &amp;fdRead);<span class="hljs-comment">//将描述符加入集合中</span><br><span class="hljs-built_in">FD_SET</span>(_sock, &amp;fdWrite);<br><span class="hljs-built_in">FD_SET</span>(_sock, &amp;fdExp);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> n = (<span class="hljs-type">int</span>)g_clients.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; n &gt;= <span class="hljs-number">0</span>; n --)<br>&#123;<br><span class="hljs-built_in">FD_SET</span>(g_clients[n], &amp;fdRead);<span class="hljs-comment">//放入可读数据中查询 是否有可读数据</span><br>&#125;<br><span class="hljs-comment">//nfds是一个整数值 是指fd_set集合中所有描述符(socket)的范围 而不是数量 </span><br><span class="hljs-comment">//既是所有文件描述符最大值+1 在windows中这个参数可以写0</span><br><span class="hljs-comment">//最后一个参数写成NULL表示一直阻塞在此等待</span><br>timeval t = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;;<span class="hljs-comment">//时间变量 &amp;t 最大为1秒</span><br><span class="hljs-comment">//struct timeval &#123;</span><br><span class="hljs-comment">//long    tv_sec;         /* seconds */</span><br><span class="hljs-comment">//long    tv_usec;        /* and microseconds */&#125;;</span><br><span class="hljs-type">int</span> ret = <span class="hljs-built_in">select</span>(_sock + <span class="hljs-number">1</span>, &amp;fdRead, &amp;fdWrite, &amp;fdExp, &amp;t);<br><span class="hljs-comment">/*以上方式为阻塞方式，如果没有客户端进入将阻塞在此处*/</span><br><span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;select任务结束。\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<span class="hljs-comment">//表示出错 跳出循环</span><br>&#125;<br><span class="hljs-comment">//如果这个socket可读的话表示 有客户端已经连接进来了</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">FD_ISSET</span>(_sock, &amp;fdRead))<span class="hljs-comment">//判断描述符是否在集合中</span><br>&#123;<br><span class="hljs-comment">//清理</span><br><span class="hljs-built_in">FD_CLR</span>(_sock, &amp;fdRead);<br><span class="hljs-comment">//4、accept 等待接收客户端链接</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">accept(</span><br><span class="hljs-comment">_In_ SOCKET s,</span><br><span class="hljs-comment">_Out_writes_bytes_opt_(*addrlen) struct sockaddr FAR * addr,</span><br><span class="hljs-comment">_Inout_opt_ int FAR * addrlen</span><br><span class="hljs-comment">);*/</span><br><span class="hljs-comment">//accept 等待接受客户端连接</span><br>sockaddr_in clientAddr = &#123;&#125;;<br><span class="hljs-type">int</span> nAddrLen = <span class="hljs-built_in">sizeof</span>(sockaddr_in);<br>SOCKET _cSocket = INVALID_SOCKET;<br>_cSocket = <span class="hljs-built_in">accept</span>(_sock, (sockaddr*)&amp;clientAddr, &amp;nAddrLen);<br><span class="hljs-keyword">if</span> (INVALID_SOCKET == _cSocket)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;错误，接收到无效客户端SOCKET...\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//有新客户端加入群发给所有用户 类似像聊天室 或者狼人杀类型</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> n = (<span class="hljs-type">int</span>)g_clients.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; n &gt;= <span class="hljs-number">0</span>; n--)<br>&#123;<br>NewUserJoin userJoin;<br><span class="hljs-comment">//发送给现有的每个客户端</span><br><span class="hljs-built_in">send</span>(g_clients[n], (<span class="hljs-type">const</span> <span class="hljs-type">char</span>*)&amp;userJoin, <span class="hljs-built_in">sizeof</span>(NewUserJoin), <span class="hljs-number">0</span>);<br>&#125;<br>g_clients.<span class="hljs-built_in">push_back</span>(_cSocket);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;新客户端加入: socket = %d IP = %s \n&quot;</span>, _cSocket, <span class="hljs-built_in">inet_ntoa</span>(clientAddr.sin_addr));<span class="hljs-comment">//inet_ntoa转换为可读地址</span><br>&#125;<br><br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> n = <span class="hljs-number">0</span>; n &lt; fdRead.fd_count; n++)<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">processor</span>(fdRead.fd_array[n]) == <span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-keyword">auto</span> iter = <span class="hljs-built_in">find</span>(g_clients.<span class="hljs-built_in">begin</span>(), g_clients.<span class="hljs-built_in">end</span>(), fdRead.fd_array[n]);<br><span class="hljs-keyword">if</span> (iter != g_clients.<span class="hljs-built_in">end</span>())<br>&#123;<br>g_clients.<span class="hljs-built_in">erase</span>(iter);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">//printf(&quot;空闲时间处理其他业务\n&quot;);</span><br>&#125;<br><span class="hljs-comment">//以防万一退出程序时 将所有套接字进行清理</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> n = g_clients.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; n &gt; <span class="hljs-number">0</span>; n --)<br>&#123;<br><span class="hljs-built_in">closesocket</span>(g_clients[n]);<br>&#125;<br><span class="hljs-comment">//5、send 向客户端发送一条数据</span><br><span class="hljs-comment">/*send(</span><br><span class="hljs-comment">_In_ SOCKET s,</span><br><span class="hljs-comment">_In_reads_bytes_(len) const char FAR * buf,</span><br><span class="hljs-comment">_In_ int len,</span><br><span class="hljs-comment">_In_ int flags</span><br><span class="hljs-comment">);*/</span><br><span class="hljs-comment">//char msgBuf[] = &quot;Hello, I&#x27;m Server.&quot;;</span><br><span class="hljs-comment">//+1表示将结尾符一并发送过去</span><br><span class="hljs-comment">//send(_cSocket, msgBuf, strlen(msgBuf) + 1, 0);</span><br><br><span class="hljs-comment">//6、关闭套接字closesocket</span><br><span class="hljs-built_in">closesocket</span>(_sock);<br><br><span class="hljs-comment">//---------------------------</span><br><span class="hljs-built_in">WSACleanup</span>();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;已退出，任务结束\n&quot;</span>);<br><span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="Client端">Client端</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment">Time ：2022-9-29</span><br><span class="hljs-comment">Author: 连思鑫</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> WIN32_LEAN_AND_MEAN</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _WINSOCK_DEPRECATED_NO_WARNINGS</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;WinSock2.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;thread&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;iostream&quot;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">CMD</span><br>&#123;<br>CMD_LOGIN,<br>CMD_LOGIN_RESULT,<br>CMD_LOGINOUT,<br>CMD_LOGINOUT_RESULT,<br>CMD_NEW_USER_JOIN,<br>CMD_ERROR<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DataHeader</span><br>&#123;<br><span class="hljs-type">short</span> dataLength;<span class="hljs-comment">//数据长度 </span><br><span class="hljs-type">short</span> cmd;<span class="hljs-comment">//命令</span><br>&#125;;<br><span class="hljs-comment">//DataPackage</span><br><span class="hljs-comment">//包体</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Login</span> : <span class="hljs-keyword">public</span> DataHeader<br>&#123;<br><span class="hljs-comment">//DataHeader header;</span><br><span class="hljs-built_in">Login</span>()<br>&#123;<br>dataLength = <span class="hljs-built_in">sizeof</span>(Login);<br>cmd = CMD_LOGIN;<br>&#125;<br><span class="hljs-type">char</span> userName[<span class="hljs-number">32</span>];<br><span class="hljs-type">char</span> PassWord[<span class="hljs-number">32</span>];<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LoginResult</span> : <span class="hljs-keyword">public</span> DataHeader<br>&#123;<br><span class="hljs-built_in">LoginResult</span>()<br>&#123;<br>dataLength = <span class="hljs-built_in">sizeof</span>(LoginResult);<br>cmd = CMD_LOGIN_RESULT;<br>result = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> result;<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LoginOut</span> : <span class="hljs-keyword">public</span> DataHeader<br>&#123;<br><span class="hljs-built_in">LoginOut</span>()<br>&#123;<br>dataLength = <span class="hljs-built_in">sizeof</span>(LoginOut);<br>cmd = CMD_LOGINOUT;<br>&#125;<br><span class="hljs-type">char</span> userName[<span class="hljs-number">32</span>];<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LoginOutResult</span> : <span class="hljs-keyword">public</span> DataHeader<br>&#123;<br><span class="hljs-built_in">LoginOutResult</span>()<br>&#123;<br>dataLength = <span class="hljs-built_in">sizeof</span>(LoginOutResult);<br>cmd = CMD_LOGINOUT_RESULT;<br>result = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> result;<br>&#125;;<br><span class="hljs-comment">//新客户端加入</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">NewUserJoin</span> : <span class="hljs-keyword">public</span> DataHeader<br>&#123;<br><span class="hljs-built_in">NewUserJoin</span>()<br>&#123;<br>dataLength = <span class="hljs-built_in">sizeof</span>(NewUserJoin);<br>cmd = CMD_NEW_USER_JOIN;<br>sock = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> sock;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">processor</span><span class="hljs-params">(SOCKET _cSocket)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//使用缓冲区来接受数据</span><br><span class="hljs-type">char</span> szRecv[<span class="hljs-number">1024</span>] = &#123;&#125;;<br><span class="hljs-comment">//5 接收客户端请求数据</span><br><span class="hljs-type">int</span> nLen = <span class="hljs-built_in">recv</span>(_cSocket, (<span class="hljs-type">char</span>*)&amp;szRecv, <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br><span class="hljs-comment">//拆包 和 分包</span><br><span class="hljs-comment">/*拆包和分包的作用主要是用在服务端接受数据时一次接受数据过长 和 过短的情况*/</span><br>DataHeader* header = (DataHeader*)szRecv;<br><span class="hljs-keyword">if</span> (nLen &lt;= <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;与服务器断开连接, 任务结束。\n&quot;</span>, _cSocket);<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-comment">//printf(&quot;收到命令: %d 数据长度：%d\n&quot;, header.cmd, header.dataLength);</span><br><span class="hljs-comment">/*判断所收到的数据*/</span> <span class="hljs-comment">//多客户端进行收发数据的情况下使用</span><br> <span class="hljs-comment">//if (nLen &gt; sizeof(DataHeader))</span><br> <span class="hljs-comment">//&#123;</span><br> <span class="hljs-comment">//&#125;</span><br><span class="hljs-keyword">switch</span> (header-&gt;cmd)<br>&#123;<br><span class="hljs-keyword">case</span> CMD_LOGIN_RESULT:<br>&#123;<br><span class="hljs-built_in">recv</span>(_cSocket, szRecv + <span class="hljs-built_in">sizeof</span>(DataHeader), header-&gt;dataLength - <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br>LoginResult* login = (LoginResult*)szRecv;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;收到服务端消息:CMD_LOGIN_RESULT 数据长度：%d \n&quot;</span>, login-&gt;dataLength);<br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> CMD_LOGINOUT_RESULT:<br>&#123;<br><span class="hljs-built_in">recv</span>(_cSocket, szRecv + <span class="hljs-built_in">sizeof</span>(DataHeader), header-&gt;dataLength - <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br>LoginOutResult* loginout = (LoginOutResult*)szRecv;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;收到服务端消息:CMD_LOGINOUT_RESULT 数据长度：%d \n&quot;</span>, loginout-&gt;dataLength);<br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> CMD_NEW_USER_JOIN:<br>&#123;<br><span class="hljs-built_in">recv</span>(_cSocket, szRecv + <span class="hljs-built_in">sizeof</span>(DataHeader), header-&gt;dataLength - <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br>NewUserJoin* userJoin = (NewUserJoin*)szRecv;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;收到服务端消息:CMD_NEW_USER_JOIN 数据长度：%d \n&quot;</span>, userJoin-&gt;dataLength);<br>&#125;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-type">bool</span> g_bRun = <span class="hljs-literal">true</span>;<br><span class="hljs-comment">//将输入命令分离出来</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cmdThread</span><span class="hljs-params">(SOCKET sock)</span> </span>&#123;<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>&#123;<br><span class="hljs-type">char</span> cmdBuf[<span class="hljs-number">256</span>] = &#123;&#125;;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, cmdBuf);<br><span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == <span class="hljs-built_in">strcmp</span>(cmdBuf, <span class="hljs-string">&quot;exit&quot;</span>))<br>&#123;<br>g_bRun = <span class="hljs-literal">false</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;退出cmdThread线程\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == <span class="hljs-built_in">strcmp</span>(cmdBuf, <span class="hljs-string">&quot;login&quot;</span>))<br>&#123;<br>Login login;<br><span class="hljs-built_in">strcpy</span>(login.userName, <span class="hljs-string">&quot;zjj&quot;</span>);<br><span class="hljs-built_in">strcpy</span>(login.PassWord, <span class="hljs-string">&quot;969513&quot;</span>);<br><span class="hljs-built_in">send</span>(sock, (<span class="hljs-type">const</span> <span class="hljs-type">char</span>*)&amp;login, <span class="hljs-built_in">sizeof</span>(login), <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == <span class="hljs-built_in">strcmp</span>(cmdBuf, <span class="hljs-string">&quot;logout&quot;</span>))<br>&#123;<br>LoginOut logout;<br><span class="hljs-built_in">strcpy</span>(logout.userName, <span class="hljs-string">&quot;zjj&quot;</span>);<br><span class="hljs-built_in">send</span>(sock, (<span class="hljs-type">const</span> <span class="hljs-type">char</span>*)&amp;logout, <span class="hljs-built_in">sizeof</span>(logout), <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;不支持的命令\n&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">/*启动Windows socket 2.x环境*/</span><br><span class="hljs-comment">//版本号</span><br>WORD ver = <span class="hljs-built_in">MAKEWORD</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br>WSADATA dat;<br><span class="hljs-comment">//socket网络编程启动函数</span><br><span class="hljs-built_in">WSAStartup</span>(ver, &amp;dat);<br><span class="hljs-comment">//---------------------------</span><br><span class="hljs-comment">//用Socket API建立简易TCP客户端</span><br><span class="hljs-comment">//1、建立一个socket</span><br>SOCKET _sock = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (INVALID_SOCKET == _sock)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;错误，建立Socket失败...\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;建立socket成功...\n&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//2、链接服务器 connect</span><br>sockaddr_in _sin = &#123;&#125;;<span class="hljs-comment">//将结构体初始化</span><br>_sin.sin_family = AF_INET;<span class="hljs-comment">//ipv4</span><br>_sin.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">4567</span>);<span class="hljs-comment">//将网络转换为成无符号类型</span><br>_sin.sin_addr.S_un.S_addr = <span class="hljs-built_in">inet_addr</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>);<br><span class="hljs-type">int</span> ret = <span class="hljs-built_in">connect</span>(_sock, (sockaddr*)&amp;_sin, <span class="hljs-built_in">sizeof</span>(sockaddr_in)); <span class="hljs-comment">//使用sizeof(sockaddr_in)类型更安全</span><br><span class="hljs-keyword">if</span> (SOCKET_ERROR == ret)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;错误，链接服务器失败...\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;链接服务器成功...\n&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//启动线程</span><br><span class="hljs-function">thread <span class="hljs-title">t1</span><span class="hljs-params">(cmdThread, _sock)</span></span>;<br>t<span class="hljs-number">1.</span><span class="hljs-built_in">detach</span>();<span class="hljs-comment">//将其与主线程进行分离</span><br><br><span class="hljs-keyword">while</span> (g_bRun)<br>&#123;<br>fd_set fdReads;<br><span class="hljs-built_in">FD_ZERO</span>(&amp;fdReads);<br><span class="hljs-built_in">FD_SET</span>(_sock, &amp;fdReads);<br>timeval t = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">0</span> &#125;;<br><span class="hljs-type">int</span> ret = <span class="hljs-built_in">select</span>(_sock, &amp;fdReads, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, &amp;t);<br><span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;select任务结束！！！\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">FD_ISSET</span>(_sock, &amp;fdReads))<br>&#123;<br><span class="hljs-built_in">FD_CLR</span>(_sock, &amp;fdReads);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">processor</span>(_sock) == <span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;select任务结束2\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-comment">//线程thread 如果在程序执行的过程中加入scanf那么程序将会阻塞</span><br><span class="hljs-comment">//printf(&quot;空闲时间处理其他业务\n&quot;);</span><br><span class="hljs-comment">//Sleep(1000);</span><br>&#125;<br><br><span class="hljs-comment">//7 关闭套节字closesocket</span><br><span class="hljs-built_in">closesocket</span>(_sock);<br><span class="hljs-comment">//---------------------------</span><br><span class="hljs-built_in">WSACleanup</span>();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;已退出.\n&quot;</span>);<br><span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 从零开始写一个聊天室系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络编程 </tag>
            
            <tag> C++项目 </tag>
            
            <tag> socket服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【c++项目】从零开始写一个局域网聊天室05：客户端升级为select模型</title>
      <link href="/2022/09/08/%E3%80%90c-%E9%A1%B9%E7%9B%AE%E3%80%91%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%86%99%E4%B8%80%E4%B8%AA%E5%B1%80%E5%9F%9F%E7%BD%91%E8%81%8A%E5%A4%A9%E5%AE%A405%EF%BC%9A%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%8D%87%E7%BA%A7%E4%B8%BAselect%E6%A8%A1%E5%9E%8B/"/>
      <url>/2022/09/08/%E3%80%90c-%E9%A1%B9%E7%9B%AE%E3%80%91%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%86%99%E4%B8%80%E4%B8%AA%E5%B1%80%E5%9F%9F%E7%BD%91%E8%81%8A%E5%A4%A9%E5%AE%A405%EF%BC%9A%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%8D%87%E7%BA%A7%E4%B8%BAselect%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="【c-项目】从零开始写一个局域网聊天室05：客户端升级为select模型">【c++项目】从零开始写一个局域网聊天室05：客户端升级为select模型</h2><p>详细的过程以及讲解我都以注释的形式写在代码里，这里就不啰嗦了。</p><h3 id="server端">server端</h3><p>server.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment">author: 连思鑫</span><br><span class="hljs-comment">2022-09-08</span><br><span class="hljs-comment">客户端升级为select模型</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> WIN32_LEAN_AND_MEAN</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _WINSOCK_DEPRECATED_NO_WARNINGS</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;WinSock2.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;iostream&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">/*使用报文的方式进行传输*/</span><br><span class="hljs-comment">//数据头</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">CMD</span><br>&#123;<br>CMD_LOGIN,<br>CMD_LOGIN_RESULT,<br>CMD_LOGINOUT,<br>CMD_LOGINOUT_RESULT,<br>CMD_NEW_USER_JOIN,<br>CMD_ERROR<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DataHeader</span><br>&#123;<br><span class="hljs-type">short</span> dataLength;<span class="hljs-comment">//数据长度 </span><br><span class="hljs-type">short</span> cmd;<span class="hljs-comment">//命令</span><br>&#125;;<br><span class="hljs-comment">//DataPackage</span><br><span class="hljs-comment">//包体</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Login</span> : <span class="hljs-keyword">public</span> DataHeader<br>&#123;<br><span class="hljs-comment">//DataHeader header;</span><br><span class="hljs-built_in">Login</span>() <br>&#123;<br>dataLength = <span class="hljs-built_in">sizeof</span>(Login);<br>cmd = CMD_LOGIN;<br>&#125;<br><span class="hljs-type">char</span> userName[<span class="hljs-number">32</span>];<br><span class="hljs-type">char</span> PassWord[<span class="hljs-number">32</span>];<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LoginResult</span> : <span class="hljs-keyword">public</span> DataHeader<br>&#123;<br><span class="hljs-built_in">LoginResult</span>()<br>&#123;<br>dataLength = <span class="hljs-built_in">sizeof</span>(LoginResult);<br>cmd = CMD_LOGIN_RESULT;<br>result = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> result;<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LoginOut</span> : <span class="hljs-keyword">public</span> DataHeader<br>&#123;<br><span class="hljs-built_in">LoginOut</span>()<br>&#123;<br>dataLength = <span class="hljs-built_in">sizeof</span>(LoginOut);<br>cmd = CMD_LOGINOUT;<br>&#125;<br><span class="hljs-type">char</span> userName[<span class="hljs-number">32</span>];<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LoginOutResult</span> : <span class="hljs-keyword">public</span> DataHeader<br>&#123;<br><span class="hljs-built_in">LoginOutResult</span>()<br>&#123;<br>dataLength = <span class="hljs-built_in">sizeof</span>(LoginOutResult);<br>cmd = CMD_LOGINOUT_RESULT;<br>result = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> result;<br>&#125;;<br><span class="hljs-comment">//新客户端加入</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">NewUserJoin</span> : <span class="hljs-keyword">public</span> DataHeader<br>&#123;<br><span class="hljs-built_in">NewUserJoin</span>()<br>&#123;<br>dataLength = <span class="hljs-built_in">sizeof</span>(NewUserJoin);<br>cmd = CMD_NEW_USER_JOIN;<br>sock = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> sock;<br>&#125;;<br><span class="hljs-comment">//创建一个全局的容器</span><br>vector&lt;SOCKET&gt; g_clients;<br><br><span class="hljs-comment">//创建一个函数进行处理</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">processor</span><span class="hljs-params">(SOCKET _cSocket)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//使用缓冲区来接受数据</span><br><span class="hljs-type">char</span> szRecv[<span class="hljs-number">1024</span>] = &#123;&#125;;<br><span class="hljs-comment">//5 接收客户端请求数据</span><br><span class="hljs-type">int</span> nLen = <span class="hljs-built_in">recv</span>(_cSocket, (<span class="hljs-type">char</span>*)&amp;szRecv, <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br><span class="hljs-comment">//拆包 和 分包</span><br><span class="hljs-comment">/*拆包和分包的作用主要是用在服务端接受数据时一次接受数据过长 和 过短的情况*/</span><br>DataHeader* header = (DataHeader*)szRecv;<br><span class="hljs-keyword">if</span> (nLen &lt;= <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;客户端&lt;Socket = %d&gt;已经退出, 任务结束。\n&quot;</span>, _cSocket);<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-comment">//printf(&quot;收到命令: %d 数据长度：%d\n&quot;, header.cmd, header.dataLength);</span><br><span class="hljs-comment">/*判断所收到的数据*/</span> <span class="hljs-comment">//多客户端进行收发数据的情况下使用</span><br><span class="hljs-comment">//if (nLen &gt; sizeof(DataHeader))</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-keyword">switch</span> (header-&gt;cmd)<br>&#123;<br><span class="hljs-keyword">case</span> CMD_LOGIN:<br>&#123;<br><span class="hljs-built_in">recv</span>(_cSocket, szRecv + <span class="hljs-built_in">sizeof</span>(DataHeader), header-&gt;dataLength - <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br>Login* login = (Login*)szRecv;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;收到客户端&lt;Socket = %d&gt;请求:CMD_LOGIN 数据长度：%d userName = %s passWord = %s\n&quot;</span>,_cSocket, login-&gt;dataLength, login-&gt;userName, login-&gt;PassWord);<br><span class="hljs-comment">//忽略判断用户名密码是否正确的过程</span><br>LoginResult ret;<br><span class="hljs-comment">//send(_cSocket, (char*)&amp;header, sizeof(DataHeader), 0);</span><br><span class="hljs-built_in">send</span>(_cSocket, (<span class="hljs-type">char</span>*)&amp;ret, <span class="hljs-built_in">sizeof</span>(LoginResult), <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> CMD_LOGINOUT:<br>&#123;<br><span class="hljs-built_in">recv</span>(_cSocket, szRecv + <span class="hljs-built_in">sizeof</span>(DataHeader), header-&gt;dataLength - <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br>LoginOut *loginout = (LoginOut*)szRecv;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;收到命令:CMD_LOGINOUT 数据长度：%d userName = %s\n&quot;</span>, loginout-&gt;dataLength, loginout-&gt;userName);<br><span class="hljs-comment">//忽略判断用户名密码是否正确的过程</span><br>LoginOutResult ret;<br><span class="hljs-comment">//send(_cSocket, (char*)&amp;header, sizeof(DataHeader), 0);</span><br><span class="hljs-built_in">send</span>(_cSocket, (<span class="hljs-type">char</span>*)&amp;ret, <span class="hljs-built_in">sizeof</span>(LoginOutResult), <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>&#123;<br>DataHeader header = &#123; <span class="hljs-number">0</span>, CMD_ERROR &#125;;<br><span class="hljs-built_in">send</span>(_cSocket, (<span class="hljs-type">char</span>*)&amp;header, <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">/*启动Windows socket 2.x环境*/</span><br><span class="hljs-comment">//版本号</span><br>WORD ver = <span class="hljs-built_in">MAKEWORD</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br>WSADATA dat;<br><span class="hljs-comment">//socket网络编程启动函数</span><br><span class="hljs-built_in">WSAStartup</span>(ver, &amp;dat);<br><span class="hljs-comment">//---------------------------</span><br><span class="hljs-comment">//--用Socket API建立简易TCP服务端</span><br><span class="hljs-comment">//1、建立一个socket  套接字 （windows） linux上指的是指针</span><br><span class="hljs-comment">/*socket(</span><br><span class="hljs-comment">_In_ int af,(表示什么类型的套接字)</span><br><span class="hljs-comment">_In_ int type,(数据流)</span><br><span class="hljs-comment">_In_ int protocol</span><br><span class="hljs-comment">);*/</span><br><span class="hljs-comment">//IPV4的网络套接字 AF_INET</span><br><span class="hljs-comment">//IPV6的网络套接字 AF_INET6</span><br>SOCKET _sock =  <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, IPPROTO_TCP);<br><span class="hljs-type">char</span> msgBuf[] = <span class="hljs-string">&quot;Hello, I&#x27;m Server.\n&quot;</span>;<br><span class="hljs-comment">//2、bind 绑定用于接收客户端链接的网络端口</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">bind(</span><br><span class="hljs-comment">_In_ SOCKET s,</span><br><span class="hljs-comment">_In_reads_bytes_(namelen) const struct sockaddr FAR * name,</span><br><span class="hljs-comment">_In_ int namelen</span><br><span class="hljs-comment">);</span><br><span class="hljs-comment">*/</span><br>sockaddr_in _sin = &#123;&#125;;<br>_sin.sin_family = AF_INET;<span class="hljs-comment">//ipv4</span><br>_sin.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">4567</span>);<span class="hljs-comment">//端口号 由于主机和网络的数据类型不同 因此需要进行转换 使用 host to net unsigned short</span><br>_sin.sin_addr.S_un.S_addr = INADDR_ANY;<span class="hljs-comment">//inet_addr(&quot;127.0.0.1&quot;);//服务器的ip地址 INADDR_ANY本机所有的Ip地址都可以访问 一般这样</span><br><span class="hljs-comment">//有可能绑定失败</span><br><span class="hljs-keyword">if</span> (SOCKET_ERROR == <span class="hljs-built_in">bind</span>(_sock, (sockaddr*)&amp;_sin, <span class="hljs-built_in">sizeof</span>(_sin))) <br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;错误，绑定网络端口失败...\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;绑定端口成功...\n&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//3、listen 监听网络端口</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">listen(</span><br><span class="hljs-comment">_In_ SOCKET s,</span><br><span class="hljs-comment">_In_ int backlog</span><br><span class="hljs-comment">);*/</span><br><span class="hljs-keyword">if</span> (SOCKET_ERROR == <span class="hljs-built_in">listen</span>(_sock, <span class="hljs-number">5</span>))<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;错误，监听网络端口失败...\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;监听网络端口成功...\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>&#123;<br><span class="hljs-comment">// 伯克利 BSD socket windows上第一个参数无意义</span><br><span class="hljs-comment">//linux 表示描述符加1</span><br><span class="hljs-comment">/*处理多客户端类型</span><br><span class="hljs-comment">select(</span><br><span class="hljs-comment">_In_ int nfds,</span><br><span class="hljs-comment">_Inout_opt_ fd_set FAR * readfds,//可读</span><br><span class="hljs-comment">_Inout_opt_ fd_set FAR * writefds,//可写</span><br><span class="hljs-comment">_Inout_opt_ fd_set FAR * exceptfds,//异常</span><br><span class="hljs-comment">_In_opt_ const struct timeval FAR * timeout//查询延迟</span><br><span class="hljs-comment">);*/</span><br>fd_set fdRead;<span class="hljs-comment">//描述符(socket)集合</span><br>fd_set fdWrite;<br>fd_set fdExp;<br><br><span class="hljs-built_in">FD_ZERO</span>(&amp;fdRead);<span class="hljs-comment">//清空fd_set集合类型的数据 其实就是将fd_count 置为0</span><br><span class="hljs-built_in">FD_ZERO</span>(&amp;fdWrite);<span class="hljs-comment">//清理集合</span><br><span class="hljs-built_in">FD_ZERO</span>(&amp;fdExp);<br><span class="hljs-comment">//typedef struct fd_set &#123;</span><br><span class="hljs-comment">//u_int fd_count; 数量              /* how many are SET? */</span><br><span class="hljs-comment">//SOCKET  fd_array[FD_SETSIZE(64)];   /* an array of SOCKETs */</span><br><span class="hljs-comment">//&#125; fd_set;</span><br><br><span class="hljs-built_in">FD_SET</span>(_sock, &amp;fdRead);<span class="hljs-comment">//将描述符加入集合中</span><br><span class="hljs-built_in">FD_SET</span>(_sock, &amp;fdWrite);<br><span class="hljs-built_in">FD_SET</span>(_sock, &amp;fdExp);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> n = (<span class="hljs-type">int</span>)g_clients.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; n &gt;= <span class="hljs-number">0</span>; n --)<br>&#123;<br><span class="hljs-built_in">FD_SET</span>(g_clients[n], &amp;fdRead);<span class="hljs-comment">//放入可读数据中查询 是否有可读数据</span><br>&#125;<br><span class="hljs-comment">//nfds是一个整数值 是指fd_set集合中所有描述符(socket)的范围 而不是数量 </span><br><span class="hljs-comment">//既是所有文件描述符最大值+1 在windows中这个参数可以写0</span><br><span class="hljs-comment">//最后一个参数写成NULL表示一直阻塞在此等待</span><br>timeval t = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;;<span class="hljs-comment">//时间变量 &amp;t 最大为1秒</span><br><span class="hljs-comment">//struct timeval &#123;</span><br><span class="hljs-comment">//long    tv_sec;         /* seconds */</span><br><span class="hljs-comment">//long    tv_usec;        /* and microseconds */&#125;;</span><br><span class="hljs-type">int</span> ret = <span class="hljs-built_in">select</span>(_sock + <span class="hljs-number">1</span>, &amp;fdRead, &amp;fdWrite, &amp;fdExp, &amp;t);<br><span class="hljs-comment">/*以上方式为阻塞方式，如果没有客户端进入将阻塞在此处*/</span><br><span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;select任务结束。\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<span class="hljs-comment">//表示出错 跳出循环</span><br>&#125;<br><span class="hljs-comment">//如果这个socket可读的话表示 有客户端已经连接进来了</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">FD_ISSET</span>(_sock, &amp;fdRead))<span class="hljs-comment">//判断描述符是否在集合中</span><br>&#123;<br><span class="hljs-comment">//清理</span><br><span class="hljs-built_in">FD_CLR</span>(_sock, &amp;fdRead);<br><span class="hljs-comment">//4、accept 等待接收客户端链接</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">accept(</span><br><span class="hljs-comment">_In_ SOCKET s,</span><br><span class="hljs-comment">_Out_writes_bytes_opt_(*addrlen) struct sockaddr FAR * addr,</span><br><span class="hljs-comment">_Inout_opt_ int FAR * addrlen</span><br><span class="hljs-comment">);*/</span><br><span class="hljs-comment">//accept 等待接受客户端连接</span><br>sockaddr_in clientAddr = &#123;&#125;;<br><span class="hljs-type">int</span> nAddrLen = <span class="hljs-built_in">sizeof</span>(sockaddr_in);<br>SOCKET _cSocket = INVALID_SOCKET;<br>_cSocket = <span class="hljs-built_in">accept</span>(_sock, (sockaddr*)&amp;clientAddr, &amp;nAddrLen);<br><span class="hljs-keyword">if</span> (INVALID_SOCKET == _cSocket)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;错误，接收到无效客户端SOCKET...\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//有新客户端加入群发给所有用户 类似像聊天室 或者狼人杀类型</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> n = (<span class="hljs-type">int</span>)g_clients.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; n &gt;= <span class="hljs-number">0</span>; n--)<br>&#123;<br>NewUserJoin userJoin;<br><span class="hljs-comment">//发送给现有的每个客户端</span><br><span class="hljs-built_in">send</span>(g_clients[n], (<span class="hljs-type">const</span> <span class="hljs-type">char</span>*)&amp;userJoin, <span class="hljs-built_in">sizeof</span>(NewUserJoin), <span class="hljs-number">0</span>);<br>&#125;<br>g_clients.<span class="hljs-built_in">push_back</span>(_cSocket);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;新客户端加入: socket = %d IP = %s \n&quot;</span>, _cSocket, <span class="hljs-built_in">inet_ntoa</span>(clientAddr.sin_addr));<span class="hljs-comment">//inet_ntoa转换为可读地址</span><br>&#125;<br><br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> n = <span class="hljs-number">0</span>; n &lt; fdRead.fd_count; n++)<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">processor</span>(fdRead.fd_array[n]) == <span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-keyword">auto</span> iter = <span class="hljs-built_in">find</span>(g_clients.<span class="hljs-built_in">begin</span>(), g_clients.<span class="hljs-built_in">end</span>(), fdRead.fd_array[n]);<br><span class="hljs-keyword">if</span> (iter != g_clients.<span class="hljs-built_in">end</span>())<br>&#123;<br>g_clients.<span class="hljs-built_in">erase</span>(iter);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;空闲时间处理其他业务\n&quot;</span>);<br>&#125;<br><span class="hljs-comment">//以防万一退出程序时 将所有套接字进行清理</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> n = g_clients.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; n &gt; <span class="hljs-number">0</span>; n --)<br>&#123;<br><span class="hljs-built_in">closesocket</span>(g_clients[n]);<br>&#125;<br><span class="hljs-comment">//5、send 向客户端发送一条数据</span><br><span class="hljs-comment">/*send(</span><br><span class="hljs-comment">_In_ SOCKET s,</span><br><span class="hljs-comment">_In_reads_bytes_(len) const char FAR * buf,</span><br><span class="hljs-comment">_In_ int len,</span><br><span class="hljs-comment">_In_ int flags</span><br><span class="hljs-comment">);*/</span><br><span class="hljs-comment">//char msgBuf[] = &quot;Hello, I&#x27;m Server.&quot;;</span><br><span class="hljs-comment">//+1表示将结尾符一并发送过去</span><br><span class="hljs-comment">//send(_cSocket, msgBuf, strlen(msgBuf) + 1, 0);</span><br><br><span class="hljs-comment">//6、关闭套接字closesocket</span><br><span class="hljs-built_in">closesocket</span>(_sock);<br><br><span class="hljs-comment">//---------------------------</span><br><span class="hljs-built_in">WSACleanup</span>();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;已退出，任务结束\n&quot;</span>);<br><span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="client端">client端</h3><p>client.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment">author: 连思鑫</span><br><span class="hljs-comment">2022-09-08</span><br><span class="hljs-comment">客户端升级为select模型</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> WIN32_LEAN_AND_MEAN</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _WINSOCK_DEPRECATED_NO_WARNINGS</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;WinSock2.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;iostream&quot;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">CMD</span><br>&#123;<br>CMD_LOGIN,<br>CMD_LOGIN_RESULT,<br>CMD_LOGINOUT,<br>CMD_LOGINOUT_RESULT,<br>CMD_NEW_USER_JOIN,<br>CMD_ERROR<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DataHeader</span><br>&#123;<br><span class="hljs-type">short</span> dataLength;<span class="hljs-comment">//数据长度 </span><br><span class="hljs-type">short</span> cmd;<span class="hljs-comment">//命令</span><br>&#125;;<br><span class="hljs-comment">//DataPackage</span><br><span class="hljs-comment">//包体</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Login</span> : <span class="hljs-keyword">public</span> DataHeader<br>&#123;<br><span class="hljs-comment">//DataHeader header;</span><br><span class="hljs-built_in">Login</span>()<br>&#123;<br>dataLength = <span class="hljs-built_in">sizeof</span>(Login);<br>cmd = CMD_LOGIN;<br>&#125;<br><span class="hljs-type">char</span> userName[<span class="hljs-number">32</span>];<br><span class="hljs-type">char</span> PassWord[<span class="hljs-number">32</span>];<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LoginResult</span> : <span class="hljs-keyword">public</span> DataHeader<br>&#123;<br><span class="hljs-built_in">LoginResult</span>()<br>&#123;<br>dataLength = <span class="hljs-built_in">sizeof</span>(LoginResult);<br>cmd = CMD_LOGIN_RESULT;<br>result = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> result;<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LoginOut</span> : <span class="hljs-keyword">public</span> DataHeader<br>&#123;<br><span class="hljs-built_in">LoginOut</span>()<br>&#123;<br>dataLength = <span class="hljs-built_in">sizeof</span>(LoginOut);<br>cmd = CMD_LOGINOUT;<br>&#125;<br><span class="hljs-type">char</span> userName[<span class="hljs-number">32</span>];<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LoginOutResult</span> : <span class="hljs-keyword">public</span> DataHeader<br>&#123;<br><span class="hljs-built_in">LoginOutResult</span>()<br>&#123;<br>dataLength = <span class="hljs-built_in">sizeof</span>(LoginOutResult);<br>cmd = CMD_LOGINOUT_RESULT;<br>result = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> result;<br>&#125;;<br><span class="hljs-comment">//新客户端加入</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">NewUserJoin</span> : <span class="hljs-keyword">public</span> DataHeader<br>&#123;<br><span class="hljs-built_in">NewUserJoin</span>()<br>&#123;<br>dataLength = <span class="hljs-built_in">sizeof</span>(NewUserJoin);<br>cmd = CMD_NEW_USER_JOIN;<br>sock = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> sock;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">processor</span><span class="hljs-params">(SOCKET _cSocket)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//使用缓冲区来接受数据</span><br><span class="hljs-type">char</span> szRecv[<span class="hljs-number">1024</span>] = &#123;&#125;;<br><span class="hljs-comment">//5 接收客户端请求数据</span><br><span class="hljs-type">int</span> nLen = <span class="hljs-built_in">recv</span>(_cSocket, (<span class="hljs-type">char</span>*)&amp;szRecv, <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br><span class="hljs-comment">//拆包 和 分包</span><br><span class="hljs-comment">/*拆包和分包的作用主要是用在服务端接受数据时一次接受数据过长 和 过短的情况*/</span><br>DataHeader* header = (DataHeader*)szRecv;<br><span class="hljs-keyword">if</span> (nLen &lt;= <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;与服务器断开连接, 任务结束。\n&quot;</span>, _cSocket);<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-comment">//printf(&quot;收到命令: %d 数据长度：%d\n&quot;, header.cmd, header.dataLength);</span><br><span class="hljs-comment">/*判断所收到的数据*/</span> <span class="hljs-comment">//多客户端进行收发数据的情况下使用</span><br> <span class="hljs-comment">//if (nLen &gt; sizeof(DataHeader))</span><br> <span class="hljs-comment">//&#123;</span><br> <span class="hljs-comment">//&#125;</span><br><span class="hljs-keyword">switch</span> (header-&gt;cmd)<br>&#123;<br><span class="hljs-keyword">case</span> CMD_LOGIN_RESULT:<br>&#123;<br><span class="hljs-built_in">recv</span>(_cSocket, szRecv + <span class="hljs-built_in">sizeof</span>(DataHeader), header-&gt;dataLength - <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br>LoginResult* login = (LoginResult*)szRecv;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;收到服务端消息:CMD_LOGIN_RESULT 数据长度：%d \n&quot;</span>, _cSocket, login-&gt;dataLength);<br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> CMD_LOGINOUT_RESULT:<br>&#123;<br><span class="hljs-built_in">recv</span>(_cSocket, szRecv + <span class="hljs-built_in">sizeof</span>(DataHeader), header-&gt;dataLength - <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br>LoginOutResult* loginout = (LoginOutResult*)szRecv;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;收到服务端消息:CMD_LOGINOUT_RESULT 数据长度：%d \n&quot;</span>, _cSocket, loginout-&gt;dataLength);<br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> CMD_NEW_USER_JOIN:<br>&#123;<br><span class="hljs-built_in">recv</span>(_cSocket, szRecv + <span class="hljs-built_in">sizeof</span>(DataHeader), header-&gt;dataLength - <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br>NewUserJoin* userJoin = (NewUserJoin*)szRecv;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;收到服务端消息:CMD_NEW_USER_JOIN 数据长度：%d \n&quot;</span>, _cSocket, userJoin-&gt;dataLength);<br>&#125;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">/*启动Windows socket 2.x环境*/</span><br><span class="hljs-comment">//版本号</span><br>WORD ver = <span class="hljs-built_in">MAKEWORD</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br>WSADATA dat;<br><span class="hljs-comment">//socket网络编程启动函数</span><br><span class="hljs-built_in">WSAStartup</span>(ver, &amp;dat);<br><span class="hljs-comment">//---------------------------</span><br><span class="hljs-comment">//用Socket API建立简易TCP客户端</span><br><span class="hljs-comment">//1、建立一个socket</span><br>SOCKET _sock = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (INVALID_SOCKET == _sock)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;错误，建立Socket失败...\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;建立socket成功...\n&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//2、链接服务器 connect</span><br>sockaddr_in _sin = &#123;&#125;;<span class="hljs-comment">//将结构体初始化</span><br>_sin.sin_family = AF_INET;<span class="hljs-comment">//ipv4</span><br>_sin.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">4567</span>);<span class="hljs-comment">//将网络转换为成无符号类型</span><br>_sin.sin_addr.S_un.S_addr = <span class="hljs-built_in">inet_addr</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>);<br><span class="hljs-type">int</span> ret = <span class="hljs-built_in">connect</span>(_sock, (sockaddr*)&amp;_sin, <span class="hljs-built_in">sizeof</span>(sockaddr_in)); <span class="hljs-comment">//使用sizeof(sockaddr_in)类型更安全</span><br><span class="hljs-keyword">if</span> (SOCKET_ERROR == ret)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;错误，链接服务器失败...\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;链接服务器成功...\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>&#123;<br>fd_set fdReads;<br><span class="hljs-built_in">FD_ZERO</span>(&amp;fdReads);<br><span class="hljs-built_in">FD_SET</span>(_sock, &amp;fdReads);<br>timeval t = &#123; <span class="hljs-number">0</span>, <span class="hljs-number">0</span> &#125;;<br><span class="hljs-type">int</span> ret = <span class="hljs-built_in">select</span>(_sock, &amp;fdReads, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, &amp;t);<br><span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;select任务结束！！！\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">FD_ISSET</span>(_sock, &amp;fdReads))<br>&#123;<br><span class="hljs-built_in">FD_CLR</span>(_sock, &amp;fdReads);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">processor</span>(_sock) == <span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;select任务结束2\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;空闲时间处理其他业务\n&quot;</span>);<br>Login login;<br><span class="hljs-built_in">strcpy</span>(login.userName, <span class="hljs-string">&quot;zjj&quot;</span>);<br><span class="hljs-built_in">strcpy</span>(login.PassWord, <span class="hljs-string">&quot;456451&quot;</span>);<br><span class="hljs-built_in">send</span>(_sock, (<span class="hljs-type">const</span> <span class="hljs-type">char</span>*)&amp;login, <span class="hljs-built_in">sizeof</span>(login), <span class="hljs-number">0</span>);<br><span class="hljs-built_in">Sleep</span>(<span class="hljs-number">1000</span>);<br>&#125;<br><br><span class="hljs-comment">//7 关闭套节字closesocket</span><br><span class="hljs-built_in">closesocket</span>(_sock);<br><span class="hljs-comment">//---------------------------</span><br><span class="hljs-built_in">WSACleanup</span>();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;已退出.\n&quot;</span>);<br><span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="成果展示">成果展示</h3><p><img src="/images/2022-9-8-001.png" alt="upload successful"></p><p>server.exe体验：<a href="/download/q0009.exe">点我下载</a></p><p>client.exe体验：<a href="/download/q0010.exe">点我下载</a></p>]]></content>
      
      
      <categories>
          
          <category> 从零开始写一个聊天室系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++项目 </tag>
            
            <tag> socket编程 </tag>
            
            <tag> 服务器项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【c++项目】从零开始写一个局域网聊天室04：加入select模型处理多客户端</title>
      <link href="/2022/07/04/%E3%80%90c-%E9%A1%B9%E7%9B%AE%E3%80%91%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%86%99%E4%B8%80%E4%B8%AA%E5%B1%80%E5%9F%9F%E7%BD%91%E8%81%8A%E5%A4%A9%E5%AE%A404%EF%BC%9A%E5%8A%A0%E5%85%A5select%E6%A8%A1%E5%9E%8B%E5%A4%84%E7%90%86%E5%A4%9A%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
      <url>/2022/07/04/%E3%80%90c-%E9%A1%B9%E7%9B%AE%E3%80%91%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%86%99%E4%B8%80%E4%B8%AA%E5%B1%80%E5%9F%9F%E7%BD%91%E8%81%8A%E5%A4%A9%E5%AE%A404%EF%BC%9A%E5%8A%A0%E5%85%A5select%E6%A8%A1%E5%9E%8B%E5%A4%84%E7%90%86%E5%A4%9A%E5%AE%A2%E6%88%B7%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="【c-项目】从零开始写一个局域网聊天室04：加入select模型处理多客户端">【c++项目】从零开始写一个局域网聊天室04：加入select模型处理多客户端</h2><p>详细的过程以及讲解我都以注释的形式写在代码里，这里就不啰嗦了。</p><h3 id="server端">server端</h3><p>server.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment">author: 连思鑫</span><br><span class="hljs-comment">2022-07-04</span><br><span class="hljs-comment">加入select模型处理多客户端</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> WIN32_LEAN_AND_MEAN</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _WINSOCK_DEPRECATED_NO_WARNINGS</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;WinSock2.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;iostream&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">/*使用报文的方式进行传输*/</span><br><span class="hljs-comment">//数据头</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">CMD</span><br>&#123;<br>CMD_LOGIN,<br>CMD_LOGIN_RESULT,<br>CMD_LOGINOUT,<br>CMD_LOGINOUT_RESULT,<br>CMD_ERROR<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DataHeader</span><br>&#123;<br><span class="hljs-type">short</span> dataLength;<span class="hljs-comment">//数据长度 </span><br><span class="hljs-type">short</span> cmd;<span class="hljs-comment">//命令</span><br>&#125;;<br><span class="hljs-comment">//DataPackage</span><br><span class="hljs-comment">//包体</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Login</span> : <span class="hljs-keyword">public</span> DataHeader<br>&#123;<br><span class="hljs-comment">//DataHeader header;</span><br><span class="hljs-built_in">Login</span>() <br>&#123;<br>dataLength = <span class="hljs-built_in">sizeof</span>(Login);<br>cmd = CMD_LOGIN;<br>&#125;<br><span class="hljs-type">char</span> userName[<span class="hljs-number">32</span>];<br><span class="hljs-type">char</span> PassWord[<span class="hljs-number">32</span>];<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LoginResult</span> : <span class="hljs-keyword">public</span> DataHeader<br>&#123;<br><span class="hljs-built_in">LoginResult</span>()<br>&#123;<br>dataLength = <span class="hljs-built_in">sizeof</span>(LoginResult);<br>cmd = CMD_LOGIN_RESULT;<br>result = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> result;<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LoginOut</span> : <span class="hljs-keyword">public</span> DataHeader<br>&#123;<br><span class="hljs-built_in">LoginOut</span>()<br>&#123;<br>dataLength = <span class="hljs-built_in">sizeof</span>(LoginOut);<br>cmd = CMD_LOGINOUT;<br>&#125;<br><span class="hljs-type">char</span> userName[<span class="hljs-number">32</span>];<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LoginOutResult</span> : <span class="hljs-keyword">public</span> DataHeader<br>&#123;<br><span class="hljs-built_in">LoginOutResult</span>()<br>&#123;<br>dataLength = <span class="hljs-built_in">sizeof</span>(LoginOutResult);<br>cmd = CMD_LOGINOUT_RESULT;<br>result = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> result;<br>&#125;;<br><span class="hljs-comment">//创建一个全局的容器</span><br>vector&lt;SOCKET&gt; g_clients;<br><br><span class="hljs-comment">//创建一个函数进行处理</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">processor</span><span class="hljs-params">(SOCKET _cSocket)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//使用缓冲区来接受数据</span><br><span class="hljs-type">char</span> szRecv[<span class="hljs-number">1024</span>] = &#123;&#125;;<br><span class="hljs-comment">//5 接收客户端请求数据</span><br><span class="hljs-type">int</span> nLen = <span class="hljs-built_in">recv</span>(_cSocket, (<span class="hljs-type">char</span>*)&amp;szRecv, <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br><span class="hljs-comment">//拆包 和 分包</span><br><span class="hljs-comment">/*拆包和分包的作用主要是用在服务端接受数据时一次接受数据过长 和 过短的情况*/</span><br>DataHeader* header = (DataHeader*)szRecv;<br><span class="hljs-keyword">if</span> (nLen &lt;= <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;客户端已经退出, 任务结束。\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-comment">//printf(&quot;收到命令: %d 数据长度：%d\n&quot;, header.cmd, header.dataLength);</span><br><span class="hljs-comment">/*判断所收到的数据*/</span> <span class="hljs-comment">//多客户端进行收发数据的情况下使用</span><br><span class="hljs-comment">//if (nLen &gt; sizeof(DataHeader))</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-keyword">switch</span> (header-&gt;cmd)<br>&#123;<br><span class="hljs-keyword">case</span> CMD_LOGIN:<br>&#123;<br><span class="hljs-built_in">recv</span>(_cSocket, szRecv + <span class="hljs-built_in">sizeof</span>(DataHeader), header-&gt;dataLength - <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br>Login* login = (Login*)szRecv;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;收到命令:CMD_LOGIN 数据长度：%d userName = %s passWord = %s\n&quot;</span>, login-&gt;dataLength, login-&gt;userName, login-&gt;PassWord);<br><span class="hljs-comment">//忽略判断用户名密码是否正确的过程</span><br>LoginResult ret;<br><span class="hljs-comment">//send(_cSocket, (char*)&amp;header, sizeof(DataHeader), 0);</span><br><span class="hljs-built_in">send</span>(_cSocket, (<span class="hljs-type">char</span>*)&amp;ret, <span class="hljs-built_in">sizeof</span>(LoginResult), <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> CMD_LOGINOUT:<br>&#123;<br><span class="hljs-built_in">recv</span>(_cSocket, szRecv + <span class="hljs-built_in">sizeof</span>(DataHeader), header-&gt;dataLength - <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br>LoginOut *loginout = (LoginOut*)szRecv;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;收到命令:CMD_LOGINOUT 数据长度：%d userName = %s\n&quot;</span>, loginout-&gt;dataLength, loginout-&gt;userName);<br><span class="hljs-comment">//忽略判断用户名密码是否正确的过程</span><br>LoginOutResult ret;<br><span class="hljs-comment">//send(_cSocket, (char*)&amp;header, sizeof(DataHeader), 0);</span><br><span class="hljs-built_in">send</span>(_cSocket, (<span class="hljs-type">char</span>*)&amp;ret, <span class="hljs-built_in">sizeof</span>(LoginOutResult), <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>&#123;<br>DataHeader header = &#123; <span class="hljs-number">0</span>, CMD_ERROR &#125;;<br><span class="hljs-built_in">send</span>(_cSocket, (<span class="hljs-type">char</span>*)&amp;header, <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">/*启动Windows socket 2.x环境*/</span><br><span class="hljs-comment">//版本号</span><br>WORD ver = <span class="hljs-built_in">MAKEWORD</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br>WSADATA dat;<br><span class="hljs-comment">//socket网络编程启动函数</span><br><span class="hljs-built_in">WSAStartup</span>(ver, &amp;dat);<br><span class="hljs-comment">//---------------------------</span><br><span class="hljs-comment">//--用Socket API建立简易TCP服务端</span><br><span class="hljs-comment">//1、建立一个socket  套接字 （windows） linux上指的是指针</span><br><span class="hljs-comment">/*socket(</span><br><span class="hljs-comment">_In_ int af,(表示什么类型的套接字)</span><br><span class="hljs-comment">_In_ int type,(数据流)</span><br><span class="hljs-comment">_In_ int protocol</span><br><span class="hljs-comment">);*/</span><br><span class="hljs-comment">//IPV4的网络套接字 AF_INET</span><br><span class="hljs-comment">//IPV6的网络套接字 AF_INET6</span><br>SOCKET _sock =  <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, IPPROTO_TCP);<br><span class="hljs-type">char</span> msgBuf[] = <span class="hljs-string">&quot;Hello, I&#x27;m Server.\n&quot;</span>;<br><span class="hljs-comment">//2、bind 绑定用于接收客户端链接的网络端口</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">bind(</span><br><span class="hljs-comment">_In_ SOCKET s,</span><br><span class="hljs-comment">_In_reads_bytes_(namelen) const struct sockaddr FAR * name,</span><br><span class="hljs-comment">_In_ int namelen</span><br><span class="hljs-comment">);</span><br><span class="hljs-comment">*/</span><br>sockaddr_in _sin = &#123;&#125;;<br>_sin.sin_family = AF_INET;<span class="hljs-comment">//ipv4</span><br>_sin.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">4567</span>);<span class="hljs-comment">//端口号 由于主机和网络的数据类型不同 因此需要进行转换 使用 host to net unsigned short</span><br>_sin.sin_addr.S_un.S_addr = INADDR_ANY;<span class="hljs-comment">//inet_addr(&quot;127.0.0.1&quot;);//服务器的ip地址 INADDR_ANY本机所有的Ip地址都可以访问 一般这样</span><br><span class="hljs-comment">//有可能绑定失败</span><br><span class="hljs-keyword">if</span> (SOCKET_ERROR == <span class="hljs-built_in">bind</span>(_sock, (sockaddr*)&amp;_sin, <span class="hljs-built_in">sizeof</span>(_sin))) <br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;错误，绑定网络端口失败...\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;绑定端口成功...\n&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//3、listen 监听网络端口</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">listen(</span><br><span class="hljs-comment">_In_ SOCKET s,</span><br><span class="hljs-comment">_In_ int backlog</span><br><span class="hljs-comment">);*/</span><br><span class="hljs-keyword">if</span> (SOCKET_ERROR == <span class="hljs-built_in">listen</span>(_sock, <span class="hljs-number">5</span>))<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;错误，监听网络端口失败...\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;监听网络端口成功...\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>&#123;<br><span class="hljs-comment">// 伯克利 socket windows上第一个参数无意义</span><br><span class="hljs-comment">//linux 表示描述符加1</span><br><span class="hljs-comment">/*处理多客户端类型</span><br><span class="hljs-comment">select(</span><br><span class="hljs-comment">_In_ int nfds,</span><br><span class="hljs-comment">_Inout_opt_ fd_set FAR * readfds,//可读</span><br><span class="hljs-comment">_Inout_opt_ fd_set FAR * writefds,//可写</span><br><span class="hljs-comment">_Inout_opt_ fd_set FAR * exceptfds,//异常</span><br><span class="hljs-comment">_In_opt_ const struct timeval FAR * timeout//查询延迟</span><br><span class="hljs-comment">);*/</span><br>fd_set fdRead;<br>fd_set fdWrite;<br>fd_set fdExp;<br><br><span class="hljs-built_in">FD_ZERO</span>(&amp;fdRead);<span class="hljs-comment">//清空fd_set集合类型的数据 其实就是将fd_count 置为0</span><br><span class="hljs-built_in">FD_ZERO</span>(&amp;fdWrite);<br><span class="hljs-built_in">FD_ZERO</span>(&amp;fdExp);<br><span class="hljs-comment">//typedef struct fd_set &#123;</span><br><span class="hljs-comment">//u_int fd_count; 数量              /* how many are SET? */</span><br><span class="hljs-comment">//SOCKET  fd_array[FD_SETSIZE(64)];   /* an array of SOCKETs */</span><br><span class="hljs-comment">//&#125; fd_set;</span><br><br><span class="hljs-built_in">FD_SET</span>(_sock, &amp;fdRead);<span class="hljs-comment">//可读</span><br><span class="hljs-built_in">FD_SET</span>(_sock, &amp;fdWrite);<br><span class="hljs-built_in">FD_SET</span>(_sock, &amp;fdExp);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> n = (<span class="hljs-type">int</span>)g_clients.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; n &gt;= <span class="hljs-number">0</span>; n --)<br>&#123;<br><span class="hljs-built_in">FD_SET</span>(g_clients[n], &amp;fdRead);<span class="hljs-comment">//放入可读数据中查询 是否有可读数据</span><br>&#125;<br><span class="hljs-comment">//nfds是一个整数值 是指fd_set集合中所有描述符(socket)的范围 而不是数量 </span><br><span class="hljs-comment">//既是所有文件描述符最大值+1 在windows中这个参数可以写0</span><br><span class="hljs-comment">//最后一个参数写成NULL表示一直阻塞在此等待</span><br>timeval t = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<span class="hljs-comment">//时间变量</span><br><span class="hljs-comment">//struct timeval &#123;</span><br><span class="hljs-comment">//long    tv_sec;         /* seconds */</span><br><span class="hljs-comment">//long    tv_usec;        /* and microseconds */&#125;;</span><br><span class="hljs-type">int</span> ret = <span class="hljs-built_in">select</span>(_sock + <span class="hljs-number">1</span>, &amp;fdRead, &amp;fdWrite, &amp;fdExp, &amp;t);<br><span class="hljs-comment">/*以上方式为阻塞方式，如果没有客户端进入将阻塞在此处*/</span><br><span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;select任务结束。\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<span class="hljs-comment">//表示出错 跳出循环</span><br>&#125;<br><span class="hljs-comment">//如果这个socket可读的话表示 有客户端已经连接进来了</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">FD_ISSET</span>(_sock, &amp;fdRead))<br>&#123;<br><span class="hljs-comment">//清理</span><br><span class="hljs-built_in">FD_CLR</span>(_sock, &amp;fdRead);<br><span class="hljs-comment">//4、accept 等待接收客户端链接</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">accept(</span><br><span class="hljs-comment">_In_ SOCKET s,</span><br><span class="hljs-comment">_Out_writes_bytes_opt_(*addrlen) struct sockaddr FAR * addr,</span><br><span class="hljs-comment">_Inout_opt_ int FAR * addrlen</span><br><span class="hljs-comment">);*/</span><br><span class="hljs-comment">//accept 等待接受客户端连接</span><br>sockaddr_in clientAddr = &#123;&#125;;<br><span class="hljs-type">int</span> nAddrLen = <span class="hljs-built_in">sizeof</span>(sockaddr_in);<br>SOCKET _cSocket = INVALID_SOCKET;<br>_cSocket = <span class="hljs-built_in">accept</span>(_sock, (sockaddr*)&amp;clientAddr, &amp;nAddrLen);<br><span class="hljs-keyword">if</span> (INVALID_SOCKET == _cSocket)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;错误，接收到无效客户端SOCKET...\n&quot;</span>);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;新客户端加入: socket = %d IP = %s \n&quot;</span>, _cSocket, <span class="hljs-built_in">inet_ntoa</span>(clientAddr.sin_addr));<span class="hljs-comment">//inet_ntoa转换为可读地址</span><br>g_clients.<span class="hljs-built_in">push_back</span>(_cSocket);<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> n = <span class="hljs-number">0</span>; n &lt; fdRead.fd_count; n++)<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">processor</span>(fdRead.fd_array[n]) == <span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-keyword">auto</span> iter = <span class="hljs-built_in">find</span>(g_clients.<span class="hljs-built_in">begin</span>(), g_clients.<span class="hljs-built_in">end</span>(), fdRead.fd_array[n]);<br><span class="hljs-keyword">if</span> (iter != g_clients.<span class="hljs-built_in">end</span>())<br>&#123;<br>g_clients.<span class="hljs-built_in">erase</span>(iter);<br>&#125;<br>&#125;<br>&#125;<br><br>&#125;<br><span class="hljs-comment">//以防万一退出程序时 将所有套接字进行清理</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> n = g_clients.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; n &gt; <span class="hljs-number">0</span>; n --)<br>&#123;<br><span class="hljs-built_in">closesocket</span>(g_clients[n]);<br>&#125;<br><span class="hljs-comment">//5、send 向客户端发送一条数据</span><br><span class="hljs-comment">/*send(</span><br><span class="hljs-comment">_In_ SOCKET s,</span><br><span class="hljs-comment">_In_reads_bytes_(len) const char FAR * buf,</span><br><span class="hljs-comment">_In_ int len,</span><br><span class="hljs-comment">_In_ int flags</span><br><span class="hljs-comment">);*/</span><br><span class="hljs-comment">//char msgBuf[] = &quot;Hello, I&#x27;m Server.&quot;;</span><br><span class="hljs-comment">//+1表示将结尾符一并发送过去</span><br><span class="hljs-comment">//send(_cSocket, msgBuf, strlen(msgBuf) + 1, 0);</span><br><br><span class="hljs-comment">//6、关闭套接字closesocket</span><br><span class="hljs-built_in">closesocket</span>(_sock);<br><br><span class="hljs-comment">//---------------------------</span><br><span class="hljs-built_in">WSACleanup</span>();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;已退出，任务结束\n&quot;</span>);<br><span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="client端">client端</h3><p>client.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment">author: 连思鑫</span><br><span class="hljs-comment">2022-07-04</span><br><span class="hljs-comment">加入select模型处理多客户端</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> WIN32_LEAN_AND_MEAN</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _WINSOCK_DEPRECATED_NO_WARNINGS</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;WinSock2.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;iostream&quot;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">CMD</span><br>&#123;<br>CMD_LOGIN,<br>CMD_LOGIN_RESULT,<br>CMD_LOGINOUT,<br>CMD_LOGINOUT_RESULT,<br>CMD_ERROR<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DataHeader</span><br>&#123;<br><span class="hljs-type">short</span> dataLength;<span class="hljs-comment">//数据长度</span><br><span class="hljs-type">short</span> cmd;<span class="hljs-comment">//命令</span><br>&#125;;<br><span class="hljs-comment">//DataPackage</span><br><span class="hljs-comment">//包体</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Login</span> : <span class="hljs-keyword">public</span> DataHeader<br>&#123;<br><span class="hljs-comment">//DataHeader header;</span><br><span class="hljs-built_in">Login</span>()<br>&#123;<br>dataLength = <span class="hljs-built_in">sizeof</span>(Login);<br>cmd = CMD_LOGIN;<br>&#125;<br><span class="hljs-type">char</span> userName[<span class="hljs-number">32</span>];<br><span class="hljs-type">char</span> PassWord[<span class="hljs-number">32</span>];<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LoginResult</span> : <span class="hljs-keyword">public</span> DataHeader<br>&#123;<br><span class="hljs-built_in">LoginResult</span>()<br>&#123;<br>dataLength = <span class="hljs-built_in">sizeof</span>(LoginResult);<br>cmd = CMD_LOGIN_RESULT;<br>result = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> result;<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LoginOut</span> : <span class="hljs-keyword">public</span> DataHeader<br>&#123;<br><span class="hljs-built_in">LoginOut</span>()<br>&#123;<br>dataLength = <span class="hljs-built_in">sizeof</span>(LoginOut);<br>cmd = CMD_LOGINOUT;<br>&#125;<br><span class="hljs-type">char</span> userName[<span class="hljs-number">32</span>];<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LoginOutResult</span> : <span class="hljs-keyword">public</span> DataHeader<br>&#123;<br><span class="hljs-built_in">LoginOutResult</span>()<br>&#123;<br>dataLength = <span class="hljs-built_in">sizeof</span>(LoginOutResult);<br>cmd = CMD_LOGINOUT_RESULT;<br>result = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> result;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">/*启动Windows socket 2.x环境*/</span><br><span class="hljs-comment">//版本号</span><br>WORD ver = <span class="hljs-built_in">MAKEWORD</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br>WSADATA dat;<br><span class="hljs-comment">//socket网络编程启动函数</span><br><span class="hljs-built_in">WSAStartup</span>(ver, &amp;dat);<br><span class="hljs-comment">//---------------------------</span><br><span class="hljs-comment">//用Socket API建立简易TCP客户端</span><br><span class="hljs-comment">//1、建立一个socket</span><br>SOCKET _sock = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (INVALID_SOCKET == _sock)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;错误，建立Socket失败...\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;建立socket成功...\n&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//2、链接服务器 connect</span><br>sockaddr_in _sin = &#123;&#125;;<span class="hljs-comment">//将结构体初始化</span><br>_sin.sin_family = AF_INET;<span class="hljs-comment">//ipv4</span><br>_sin.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">4567</span>);<span class="hljs-comment">//将网络转换为成无符号类型</span><br>_sin.sin_addr.S_un.S_addr = <span class="hljs-built_in">inet_addr</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>);<br><span class="hljs-type">int</span> ret = <span class="hljs-built_in">connect</span>(_sock, (sockaddr*)&amp;_sin, <span class="hljs-built_in">sizeof</span>(sockaddr_in)); <span class="hljs-comment">//使用sizeof(sockaddr_in)类型更安全</span><br><span class="hljs-keyword">if</span> (SOCKET_ERROR == ret)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;错误，链接服务器失败...\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;链接服务器成功...\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>&#123;<br><span class="hljs-comment">//3 输入请求命令</span><br><span class="hljs-type">char</span> cmdBuf[<span class="hljs-number">128</span>] = &#123;&#125;;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, cmdBuf);<br><br><span class="hljs-comment">//4 处理请求命令</span><br><span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == <span class="hljs-built_in">strcmp</span>(cmdBuf, <span class="hljs-string">&quot;exit&quot;</span>))<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;收到exit命令，任务结束\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == <span class="hljs-built_in">strcmp</span>(cmdBuf, <span class="hljs-string">&quot;login&quot;</span>))<br>&#123;<br>Login login;<br><span class="hljs-built_in">strcpy</span>(login.userName, <span class="hljs-string">&quot;lsx&quot;</span>);<br><span class="hljs-built_in">strcpy</span>(login.PassWord, <span class="hljs-string">&quot;7758521&quot;</span>);<br><span class="hljs-comment">//DataHeader dh = &#123;sizeof(login), CMD_LOGIN&#125;;</span><br><span class="hljs-comment">//login.userName = &quot;lsx&quot;;</span><br><span class="hljs-comment">//login.PassWord = &quot;7758521&quot;;</span><br><span class="hljs-comment">//5 向服务器发送请求命令</span><br><span class="hljs-comment">//send(_sock, (const char*)&amp;dh, sizeof(dh), 0);</span><br><span class="hljs-built_in">send</span>(_sock, (<span class="hljs-type">const</span> <span class="hljs-type">char</span>*)&amp;login, <span class="hljs-built_in">sizeof</span>(login), <span class="hljs-number">0</span>);<br><span class="hljs-comment">//接收服务器返回的数据</span><br><span class="hljs-comment">//DataHeader retHeader = &#123;&#125;;</span><br>LoginResult loginRet;<br><span class="hljs-comment">//recv(_sock, (char*)&amp;retHeader, sizeof(retHeader), 0);</span><br><span class="hljs-built_in">recv</span>(_sock, (<span class="hljs-type">char</span>*)&amp;loginRet, <span class="hljs-built_in">sizeof</span>(loginRet), <span class="hljs-number">0</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;LoginResult: %d\n&quot;</span>, loginRet.result);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == <span class="hljs-built_in">strcmp</span>(cmdBuf, <span class="hljs-string">&quot;logout&quot;</span>))<br>&#123;<br>LoginOut logout;<br><span class="hljs-built_in">strcpy</span>(logout.userName, <span class="hljs-string">&quot;lsx&quot;</span>);<br><span class="hljs-comment">//DataHeader dh = &#123;sizeof(logout), CMD_LOGINOUT &#125;;</span><br><span class="hljs-comment">//5 向服务器发送请求命令</span><br><span class="hljs-comment">//send(_sock, (const char*)&amp;dh, sizeof(dh), 0);</span><br><span class="hljs-built_in">send</span>(_sock, (<span class="hljs-type">const</span> <span class="hljs-type">char</span>*)&amp;logout, <span class="hljs-built_in">sizeof</span>(logout), <span class="hljs-number">0</span>);<br><span class="hljs-comment">//接收服务器返回的数据</span><br><span class="hljs-comment">//DataHeader retHeader = &#123;&#125;;</span><br>LoginOutResult loginoutRet;<br><span class="hljs-comment">//recv(_sock, (char*)&amp;retHeader, sizeof(retHeader), 0);</span><br><span class="hljs-built_in">recv</span>(_sock, (<span class="hljs-type">char</span>*)&amp;loginoutRet, <span class="hljs-built_in">sizeof</span>(loginoutRet), <span class="hljs-number">0</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;LoginResult: %d\n&quot;</span>, loginoutRet.result);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;不支持的命令，请重新输入。\n&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//7 关闭套节字closesocket</span><br><span class="hljs-built_in">closesocket</span>(_sock);<br><span class="hljs-comment">//---------------------------</span><br><span class="hljs-built_in">WSACleanup</span>();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;已退出.\n&quot;</span>);<br><span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="成果展示">成果展示</h3><p><img src="/images/2022-7-4-0001.png" alt="uploaded!"></p><p>server.exe体验：<a href="/download/q0007.exe">点我下载</a></p><p>client.exe体验：<a href="/download/q0008.exe">点我下载</a></p>]]></content>
      
      
      <categories>
          
          <category> 从零开始写一个聊天室系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++项目 </tag>
            
            <tag> Socket编程 </tag>
            
            <tag> 服务器编写 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言项目】字符串左旋</title>
      <link href="/2022/06/24/%E3%80%90C%E8%AF%AD%E8%A8%80%E9%A1%B9%E7%9B%AE%E3%80%91%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B7%A6%E6%97%8B/"/>
      <url>/2022/06/24/%E3%80%90C%E8%AF%AD%E8%A8%80%E9%A1%B9%E7%9B%AE%E3%80%91%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B7%A6%E6%97%8B/</url>
      
        <content type="html"><![CDATA[<h1>【C语言项目】字符串左旋</h1><h2 id="项目说明">项目说明</h2><p>实现一个函数，可以左旋字符串中的k个字符。</p><p>例如：</p><p>ABCD左旋一个字符得到BCDA</p><p>ABCD左旋两个字符得到CDAB</p><h2 id="代码实现">代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> *  2022-6-24</span><br><span class="hljs-comment"> *  连思鑫</span><br><span class="hljs-comment"> *  字符串左旋</span><br><span class="hljs-comment"> * */</span><br><br><span class="hljs-comment">//实现一个函数，可以左旋字符串中的k个字符。</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//例如：</span><br><span class="hljs-comment">//ABCD左旋一个字符得到BCDA</span><br><span class="hljs-comment">//ABCD左旋两个字符得到CDAB</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;assert.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">char</span>* <span class="hljs-title">strRightReverse</span><span class="hljs-params">(<span class="hljs-type">char</span>* str, <span class="hljs-type">int</span> num)</span> </span>&#123;<br><br><span class="hljs-type">char</span> strAfterReverse[<span class="hljs-number">100</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">char</span>* strReverse = str;<br><span class="hljs-type">char</span>* strNotReverse = str;<br><span class="hljs-type">int</span> i;<br><span class="hljs-type">int</span> length = <span class="hljs-built_in">strlen</span>(str);<br><br><span class="hljs-keyword">if</span> (num &lt; <span class="hljs-number">0</span> || num &gt; <span class="hljs-built_in">strlen</span>(str)) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Illegal input!\n&quot;</span>);<br><span class="hljs-keyword">return</span> str;<br>&#125;<br><br><span class="hljs-comment">//我们先将不左旋的数放进 strReverse 数组中</span><br>strNotReverse += num;<br><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; length - num; i++)<br>strAfterReverse[i] = *strNotReverse++;<br><br><span class="hljs-comment">//再将要左旋的数依次放入数组尾</span><br><span class="hljs-keyword">for</span> (i = length - num; i &lt; length; i++) &#123;<br>strAfterReverse[i] = *strReverse++;<br>&#125;<br>strAfterReverse[length] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br><br><span class="hljs-built_in">strcpy</span>(str, strAfterReverse);<br><br><span class="hljs-keyword">return</span> str;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br><br><span class="hljs-type">char</span> str[<span class="hljs-number">100</span>];<br><span class="hljs-type">int</span> num = <span class="hljs-number">0</span>;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter a string: &quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, str);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter a number: &quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;num);<br><br><span class="hljs-built_in">strRightReverse</span>(str, num);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;output: %s\n&quot;</span>, str);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="效果">效果</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">./test</span><br>Enter a string: abcde<br>Enter a number: 2<br>output: cdeab<br></code></pre></td></tr></table></figure><p><img src="/images/2022-6-24-00009.png" alt="uploaded!"></p>]]></content>
      
      
      <categories>
          
          <category> C语言项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言项目 </tag>
            
            <tag> 字符串左旋 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言项目】字符串旋转判断</title>
      <link href="/2022/06/24/%E3%80%90C%E8%AF%AD%E8%A8%80%E9%A1%B9%E7%9B%AE%E3%80%91%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%97%8B%E8%BD%AC%E5%88%A4%E6%96%AD/"/>
      <url>/2022/06/24/%E3%80%90C%E8%AF%AD%E8%A8%80%E9%A1%B9%E7%9B%AE%E3%80%91%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%97%8B%E8%BD%AC%E5%88%A4%E6%96%AD/</url>
      
        <content type="html"><![CDATA[<h1>字符串旋转</h1><p>写一个函数，判断一个字符串是否为另外一个字符串旋转之后的字符串。</p><p>例如：给定s1 =AABCD和s2 = BCDAA，返回1给定s1=abcd和s2=ACBD，返回0.</p><p>AABCD左旋一个字符得到ABCDAAABCD左旋两个字符得到BCDAAAABCD右旋一个字符得到DAABC</p><h2 id="代码实现">代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> *  2022-6-24</span><br><span class="hljs-comment"> *  连思鑫</span><br><span class="hljs-comment"> *  字符串旋转</span><br><span class="hljs-comment"> * */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;assert.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">strJudge</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* str1, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* str2)</span> </span>&#123;<br><br><span class="hljs-type">char</span>* str2_start = (<span class="hljs-type">char</span>*)str2;<br><br><span class="hljs-comment">//str1 和 str2 不能是空指针</span><br><span class="hljs-built_in">assert</span>(str1 != <span class="hljs-literal">NULL</span> &amp;&amp; str2 != <span class="hljs-literal">NULL</span>);<br><br><span class="hljs-comment">//如果字符串长度是 1 ，这个判断就没有意义了</span><br><span class="hljs-built_in">assert</span>(<span class="hljs-built_in">strlen</span>(str1) != <span class="hljs-number">1</span>);<br><br><span class="hljs-comment">//如果连个字符串长度都不一样，肯定不是</span><br><span class="hljs-keyword">if</span> (!(<span class="hljs-built_in">strlen</span>(str1) == <span class="hljs-built_in">strlen</span>(str2)))<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">//在 str2 中寻找 str1 的第一个元素</span><br><span class="hljs-keyword">while</span> (*str2) &#123;<br><span class="hljs-keyword">if</span> (*str2 == *str1) &#123;<br>++str1;<span class="hljs-comment">// str1 中的第一个元素已经找到，在下一个循环寻找 str1 中的下一个</span><br><span class="hljs-keyword">break</span>;<br>&#125;<br><br>++str2;<br>&#125;<br><span class="hljs-comment">//没有找到，直接返回 0</span><br><span class="hljs-keyword">if</span> (*str2 == <span class="hljs-string">&#x27;\0&#x27;</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">while</span> (*str1) &#123;<br><br>++str2;<br><br><span class="hljs-keyword">if</span> (*str2 == <span class="hljs-string">&#x27;\0&#x27;</span>)<br>str2 = str2_start;<br><br><span class="hljs-keyword">if</span> (!(*str2 == *str1))<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>++str1;<br><br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br><br><span class="hljs-type">char</span> str1[<span class="hljs-number">100</span>];<br><span class="hljs-type">char</span> str2[<span class="hljs-number">100</span>];<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter two strings: &quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s %s&quot;</span>, str1, str2);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">strJudge</span>(str1, str2))<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Yes\n&quot;</span>);<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No\n&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="效果">效果</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">lsx@DESKTOP-LFPDU8K:~$ ./test<br>Enter two strings: AABCD BCDAA<br>Yes<br>lsx@DESKTOP-LFPDU8K:~$ ./test<br>Enter two strings: asdas dsasd<br>No<br></code></pre></td></tr></table></figure><p><img src="/images/2022-6-24-00632.png" alt="uploaded!"></p>]]></content>
      
      
      <categories>
          
          <category> C语言项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言项目 </tag>
            
            <tag> 字符串旋转判断 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言项目】杨辉三角</title>
      <link href="/2022/06/24/%E3%80%90C%E8%AF%AD%E8%A8%80%E9%A1%B9%E7%9B%AE%E3%80%91%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92/"/>
      <url>/2022/06/24/%E3%80%90C%E8%AF%AD%E8%A8%80%E9%A1%B9%E7%9B%AE%E3%80%91%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92/</url>
      
        <content type="html"><![CDATA[<h1>【C语言项目】杨辉三角</h1><p>最近工作较为清闲，写点C语言项目练练手。</p><h2 id="代码">代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> *  2022-6-24</span><br><span class="hljs-comment"> *  连思鑫</span><br><span class="hljs-comment"> *  杨辉三角的实现</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> HEIGHT 10 <span class="hljs-comment">//假设杨辉三角的高度是10</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br><br><span class="hljs-type">int</span> YHtrangle[HEIGHT][HEIGHT] = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-type">int</span> i, j;<br><br><span class="hljs-comment">//计算杨辉三角</span><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; HEIGHT; i++) &#123;<br><br>YHtrangle[i][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<span class="hljs-comment">//每行第一个元素为 1</span><br>YHtrangle[i][i] = <span class="hljs-number">1</span>;<span class="hljs-comment">//每行最后一个元素为 1</span><br><span class="hljs-comment">//需要计算的是从第三行开始，i == 2</span><br><span class="hljs-keyword">for</span> (j = <span class="hljs-number">1</span>; j &lt; i; j++)<br>YHtrangle[i][j] = YHtrangle[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + YHtrangle[i - <span class="hljs-number">1</span>][j];<span class="hljs-comment">// 比如第三行的 2 是 第二行 1 + 1的和，这是杨辉三角的规律</span><br>&#125;<br><br><span class="hljs-comment">//输出杨辉三角</span><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; HEIGHT; i++) &#123;<br><span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt;= i; j++) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, YHtrangle[i][j]);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>升级版</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> *  2022-6-24</span><br><span class="hljs-comment"> *  连思鑫</span><br><span class="hljs-comment"> *  杨辉三角的实现</span><br><span class="hljs-comment"> * */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> HEIGHT 10 <span class="hljs-comment">//如果要修改杨辉三角的高度修改这个参数即可</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ARRLEN HEIGHT + 1 </span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printYH</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[][ARRLEN])</span> </span>&#123;<br><br><span class="hljs-type">int</span> row, col;<br><br><span class="hljs-comment">//这个程序比较方便惯性思维理解，数组的首行首列不用（下标从 1 开始）</span><br><span class="hljs-keyword">for</span> (row = <span class="hljs-number">1</span>; row &lt;= HEIGHT; row++) &#123;<br><br><span class="hljs-keyword">for</span> (col = <span class="hljs-number">1</span>; col &lt;= row; col++) &#123;<br><br><span class="hljs-keyword">if</span> (col == <span class="hljs-number">1</span> || col == row)<br>arr[row][col] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span><br>arr[row][col] = arr[row - <span class="hljs-number">1</span>][col - <span class="hljs-number">1</span>] + arr[row - <span class="hljs-number">1</span>][col];<br><br><span class="hljs-comment">//直接输出计算结果不需要再用另一个循环输出</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, arr[row][col]);<br>&#125;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-comment">//当然这个程序也有缺点，如果你在程序中使用这个数组，你需要时刻记得下标为 0 是不存任何有意义的数据的</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br><br><span class="hljs-type">int</span> YHtrangle[ARRLEN][ARRLEN] = &#123; <span class="hljs-number">0</span> &#125;;<br><br><span class="hljs-built_in">printYH</span>(YHtrangle);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="效果">效果</h2><p><img src="/images/2022-6-24-0003-1.png" alt="uploaded!"></p>]]></content>
      
      
      <categories>
          
          <category> C语言项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> C语言项目 </tag>
            
            <tag> 杨辉三角 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【c++项目】小鑫记单词系统</title>
      <link href="/2022/06/24/%E3%80%90c-%E9%A1%B9%E7%9B%AE%E3%80%91%E5%B0%8F%E9%91%AB%E8%AE%B0%E5%8D%95%E8%AF%8D%E7%B3%BB%E7%BB%9F/"/>
      <url>/2022/06/24/%E3%80%90c-%E9%A1%B9%E7%9B%AE%E3%80%91%E5%B0%8F%E9%91%AB%E8%AE%B0%E5%8D%95%E8%AF%8D%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1>【c++项目】小鑫记单词系统</h1><h2 id="前言">前言</h2><p>四级没过的我快哭了…因此开发了一个记单词的系统。可以录入单词，随机抽取单词记忆，显示单词本等功能。代码写的仓促，有点屎山代码的意味。所以在写代码之前，还是要事先写好开发文档。</p><p>话不多说，放代码。</p><h2 id="代码">代码</h2><p>englishStudy.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    2022-6-24</span><br><span class="hljs-comment">    连思鑫</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;sendEnglish.h&quot;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> num;<br>    sendEnglish sendenglish;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;************************&quot;</span> &lt;&lt; endl;<br>        cout &lt;&lt; <span class="hljs-string">&quot;*     小鑫记单词系统      *&quot;</span> &lt;&lt; endl;<br>        cout &lt;&lt; <span class="hljs-string">&quot;************************&quot;</span> &lt;&lt; endl;<br>        cout &lt;&lt; <span class="hljs-string">&quot;*     1.录入单词         *&quot;</span> &lt;&lt; endl;<br>        cout &lt;&lt; <span class="hljs-string">&quot;*     2.随机学单词       *&quot;</span> &lt;&lt; endl;<br>        cout &lt;&lt; <span class="hljs-string">&quot;*     3.显示单词本       *&quot;</span> &lt;&lt; endl;<br>        cout &lt;&lt; <span class="hljs-string">&quot;*     4.清空单词本       *&quot;</span> &lt;&lt; endl;<br>        cout &lt;&lt; <span class="hljs-string">&quot;*     0.退出            *&quot;</span> &lt;&lt; endl;<br>        cout &lt;&lt; <span class="hljs-string">&quot;************************&quot;</span> &lt;&lt; endl;<br>        cout &lt;&lt; <span class="hljs-string">&quot;请根据编号选择：&quot;</span>;<br>        cin &gt;&gt; num;<br>        <span class="hljs-keyword">switch</span> (num) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            sendenglish.<span class="hljs-built_in">show</span>();<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            sendenglish.<span class="hljs-built_in">rec</span>();<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>            sendenglish.<span class="hljs-built_in">book</span>();<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>            sendenglish.<span class="hljs-built_in">del_book</span>();<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>sendEnglish.h</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    2022-6-24</span><br><span class="hljs-comment">    连思鑫</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ENGLISHSTUDY_SENDENGLISH_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ENGLISHSTUDY_SENDENGLISH_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX 10000</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctime&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//单词结构体</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">English</span> &#123;<br>    string english;<br>    string chinese;<br>&#125;;<br><br><span class="hljs-comment">//单词本结构体</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Englishbook</span> &#123;<br><br>    <span class="hljs-type">int</span> number; <span class="hljs-comment">//单词个数</span><br>    English english[MAX];<span class="hljs-comment">//一万个单词</span><br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">sendEnglish</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//显示</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">send</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//写入</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">rec</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//读取</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">book</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//单词本</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">del_book</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//清空单词本</span><br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-comment">//判断文件是否为空</span><br>    <span class="hljs-type">bool</span> fileIsEmpty;<br><br>&#125;;<br><br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">//ENGLISHSTUDY_SENDENGLISH_H</span></span><br><br></code></pre></td></tr></table></figure><p>sendEnglish.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    2022-6-24</span><br><span class="hljs-comment">    连思鑫</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;sendEnglish.h&quot;</span></span><br>Englishbook englishbook;<br><br><br><span class="hljs-comment">//随机数生成</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">randomNumber</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> </span>&#123;<br>    <span class="hljs-built_in">srand</span>((<span class="hljs-type">int</span>)<span class="hljs-built_in">time</span>(<span class="hljs-number">0</span>));<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">rand</span>() % (num + <span class="hljs-number">1</span>);<br>&#125;<br><br><br><span class="hljs-comment">//C++字符串切片，C++标准库里没有。。。只能自己去实现了。</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> _split(<span class="hljs-type">const</span> string&amp; s, <span class="hljs-type">char</span> delim, vector&lt;string&gt;&amp; elems) &#123;<br>    <span class="hljs-function">stringstream <span class="hljs-title">ss</span><span class="hljs-params">(s)</span></span>;<br>    string item;<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">getline</span>(ss, item, delim))<br>    &#123;<br>        elems.<span class="hljs-built_in">push_back</span>(item);<br>    &#125;<br>&#125;<br><br><span class="hljs-function">vector&lt;string&gt; <span class="hljs-title">split</span><span class="hljs-params">(<span class="hljs-type">const</span> string&amp; s, <span class="hljs-type">char</span> delim)</span> </span>&#123;<br>    vector&lt;string&gt; elems;<br>    _split(s, delim, elems);<br>    <span class="hljs-keyword">return</span> elems;<br>&#125;<br><br><span class="hljs-comment">//:~</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= englishbook.number; ++i) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;-----------------------------------&quot;</span> &lt;&lt; endl;<br>        cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; : &quot;</span> &lt;&lt; englishbook.english[i].english &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; englishbook.english[i].chinese &lt;&lt; endl;<br>        cout &lt;&lt; <span class="hljs-string">&quot;-----------------------------------&quot;</span> &lt;&lt; endl;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sendEnglish::show</span><span class="hljs-params">()</span> </span>&#123;<br>    string s;<br>    <span class="hljs-type">int</span> num = <span class="hljs-number">0</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;*************************&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;* 请输入单词以及该单词的翻译 *&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;*     按回车即可保存       *&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;*     输入0按回车即可结束   *&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;*************************&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;请输入您要输入的英语单词：&quot;</span>;<br>        cin &gt;&gt; s;<br>        <span class="hljs-keyword">if</span> (s == <span class="hljs-string">&quot;0&quot;</span>) &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        englishbook.number = num;<br>        englishbook.english[num].english = s;<br>        cout &lt;&lt; <span class="hljs-string">&quot;请输入该英语的翻译：&quot;</span>;<br>        cin &gt;&gt; englishbook.english[num].chinese;<br>        cout &lt;&lt; <span class="hljs-string">&quot;------------------------&quot;</span> &lt;&lt; endl;<br>        num++;<br>        <span class="hljs-built_in">send</span>();<br>    &#125;<br>    <span class="hljs-built_in">test</span>(); <span class="hljs-comment">//测试单词写入结构体是否成功</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;以上是您录入的新单词，已保存！！&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sendEnglish::send</span><span class="hljs-params">()</span> </span>&#123;<br><br>    ofstream ofs;<br>    ofs.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;english.csv&quot;</span>, ios::out | ios::app); <span class="hljs-comment">// 用追加的方式写文件</span><br>    <span class="hljs-keyword">if</span> (!ofs.<span class="hljs-built_in">is_open</span>()) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;文件没有打开！&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-function">ifstream <span class="hljs-title">ifs</span><span class="hljs-params">(<span class="hljs-string">&quot;english.csv&quot;</span>, ios::in)</span></span>; <span class="hljs-comment">//读文件</span><br>    <span class="hljs-keyword">if</span> (!ifs.<span class="hljs-built_in">is_open</span>())<br>    &#123;<br>        <span class="hljs-keyword">this</span>-&gt;fileIsEmpty = <span class="hljs-literal">true</span>;<br>        cout &lt;&lt; <span class="hljs-string">&quot;文件不存在&quot;</span> &lt;&lt; endl;<br>        ifs.<span class="hljs-built_in">close</span>();<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>   <span class="hljs-type">int</span> s = <span class="hljs-number">0</span>;<br>   string data;<br>   <span class="hljs-keyword">while</span> (<span class="hljs-built_in">getline</span>(ifs,data))<br>    &#123;<br>            s++;<br>    &#125;<br>   ifs.<span class="hljs-built_in">close</span>();<br><br>    <span class="hljs-comment">//将数据 写入到文件中</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= englishbook.number; i++)<br>    &#123;<br>        ofs &lt;&lt; s+i &lt;&lt; <span class="hljs-string">&quot;,&quot;</span> &lt;&lt; englishbook.english[i].english &lt;&lt; <span class="hljs-string">&quot;,&quot;</span> &lt;&lt; englishbook.english[i].chinese &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-comment">//关闭</span><br>    ofs.<span class="hljs-built_in">close</span>();<br>    <span class="hljs-comment">//cout &lt;&lt; &quot;记录已经保存&quot; &lt;&lt; endl;</span><br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sendEnglish::rec</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> num;<br>    <span class="hljs-comment">//memset(&amp;englishbook, 0, sizeof(englishbook)); </span><br>    <span class="hljs-comment">//清空结构体,这个地方加上有bug，字符串会乱码，没搞明白为什么。所以注释掉了，可能不是我这么用的。有知道的大佬可以指点一下。</span><br>    <span class="hljs-function">ifstream <span class="hljs-title">ifs</span><span class="hljs-params">(<span class="hljs-string">&quot;english.csv&quot;</span>, ios::in)</span></span>; <span class="hljs-comment">//读文件</span><br>    <span class="hljs-keyword">if</span> (!ifs.<span class="hljs-built_in">is_open</span>())<br>    &#123;<br>        <span class="hljs-keyword">this</span>-&gt;fileIsEmpty = <span class="hljs-literal">true</span>;<br>        cout &lt;&lt; <span class="hljs-string">&quot;文件不存在&quot;</span> &lt;&lt; endl;<br>        ifs.<span class="hljs-built_in">close</span>();<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    string buff;<br>    <span class="hljs-type">int</span> s = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">getline</span>(ifs, buff))<br>    &#123;<br>        vector&lt;string&gt; data = <span class="hljs-built_in">split</span>(buff, <span class="hljs-string">&#x27;,&#x27;</span>);<br>        <span class="hljs-comment">//for (auto it = begin(data); it != end(data); ++it)</span><br>        <span class="hljs-comment">//&#123;</span><br>        <span class="hljs-comment">//    cout &lt;&lt; *it &lt;&lt; endl;</span><br>        <span class="hljs-comment">//&#125;</span><br>        englishbook.english[s].english = data[<span class="hljs-number">1</span>];<br>        englishbook.english[s].chinese = data[<span class="hljs-number">2</span>];<br>        s++;<br>    &#125;<br>    englishbook.number = s<span class="hljs-number">-1</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;如果想要退出请按0.&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>    &#123;<br>        string chinese;<br>        num = <span class="hljs-built_in">randomNumber</span>(englishbook.number);<br>        <span class="hljs-comment">//cout &lt;&lt; num &lt;&lt; endl;//测试随机数是否生成</span><br>        cout &lt;&lt; <span class="hljs-string">&quot;请写出&quot;</span> &lt;&lt; englishbook.english[num].english &lt;&lt; <span class="hljs-string">&quot;的翻译：&quot;</span>;<br>        cin &gt;&gt; chinese;<br>        <span class="hljs-keyword">if</span> (chinese == <span class="hljs-string">&quot;0&quot;</span>)<br>        &#123;<br>            <span class="hljs-keyword">break</span>;<br><br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (englishbook.english[num].chinese == chinese) &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;回答正确！！&quot;</span> &lt;&lt; endl;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (englishbook.english[num].chinese != chinese)<br>        &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;回答错误！！正确答案是：&quot;</span> &lt;&lt; englishbook.english[num].chinese &lt;&lt; endl;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sendEnglish::book</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">ifstream <span class="hljs-title">ifs</span><span class="hljs-params">(<span class="hljs-string">&quot;english.csv&quot;</span>, ios::in)</span></span>; <span class="hljs-comment">//读文件</span><br>    <span class="hljs-keyword">if</span> (!ifs.<span class="hljs-built_in">is_open</span>())<br>    &#123;<br>        <span class="hljs-keyword">this</span>-&gt;fileIsEmpty = <span class="hljs-literal">true</span>;<br>        cout &lt;&lt; <span class="hljs-string">&quot;文件不存在&quot;</span> &lt;&lt; endl;<br>        ifs.<span class="hljs-built_in">close</span>();<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    string buff;<br>    <span class="hljs-type">int</span> s = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">getline</span>(ifs, buff))<br>    &#123;<br>        vector&lt;string&gt; data = <span class="hljs-built_in">split</span>(buff, <span class="hljs-string">&#x27;,&#x27;</span>);<br>        <span class="hljs-comment">//for (auto it = begin(data); it != end(data); ++it)</span><br>        <span class="hljs-comment">//&#123;</span><br>        <span class="hljs-comment">//    cout &lt;&lt; *it &lt;&lt; endl;</span><br>        <span class="hljs-comment">//&#125;</span><br>        englishbook.english[s].english = data[<span class="hljs-number">1</span>];<br>        englishbook.english[s].chinese = data[<span class="hljs-number">2</span>];<br>        s++;<br>    &#125;<br>    englishbook.number = s - <span class="hljs-number">1</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;已录入单词如下：&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">test</span>();<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sendEnglish::del_book</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> num;<br>    cout &lt;&lt; <span class="hljs-string">&quot;************************&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;您确定要清空单词本吗？&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;是，请输入1&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;否，请输入0&quot;</span> &lt;&lt; endl;<br>    cin &gt;&gt; num;<br>    <span class="hljs-keyword">if</span> (num == <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(num == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-built_in">remove</span>(<span class="hljs-string">&quot;english.csv&quot;</span>);<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h2 id="效果展示">效果展示</h2><p><img src="/images/2022-6-24-0001.png" alt="uploaded!"></p><p><img src="/images/2022-6-24-00002.png" alt="uploaded!"></p><p>可执行程序：<a href="/download/englishStudy.exe">点我下载</a></p>]]></content>
      
      
      <categories>
          
          <category> C++项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++项目 </tag>
            
            <tag> 小鑫记单词系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP详解</title>
      <link href="/2022/06/22/HTTP%E8%AF%A6%E8%A7%A3/"/>
      <url>/2022/06/22/HTTP%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1>HTTP详解</h1><h2 id="一-、基础概念">一 、基础概念</h2><h3 id="请求和响应报文">请求和响应报文</h3><p>客户端发送一个请求报文给服务器，服务器根据请求报文中的信息进行处理，并将处理结果放入响应报文中返回给客户端。</p><p>请求报文结构：</p><ul><li>第一行是包含了请求方法、URL、协议版本；</li><li>接下来的多行都是请求首部 Header，每个首部都有一个首部名称，以及对应的值。</li><li>一个空行用来分隔首部和内容主体 Body</li><li>最后是请求的内容主体</li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">http://www.example.com/</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8<br><span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>max-age=0<br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>www.example.com<br><span class="hljs-attribute">If-Modified-Since</span><span class="hljs-punctuation">: </span>Thu, 17 Oct 2019 07:18:26 GMT<br><span class="hljs-attribute">If-None-Match</span><span class="hljs-punctuation">: </span>&quot;3147526947+gzip&quot;<br><span class="hljs-attribute">Proxy-Connection</span><span class="hljs-punctuation">: </span>keep-alive<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 xxx<br><br><span class="language-apache"><span class="hljs-attribute">param1</span>=<span class="hljs-number">1</span>&amp;param2=<span class="hljs-number">2</span></span><br></code></pre></td></tr></table></figure><p>响应报文结构：</p><ul><li>第一行包含协议版本、状态码以及描述，最常见的是 200 OK 表示请求成功了</li><li>接下来多行也是首部内容</li><li>一个空行分隔首部和内容主体</li><li>最后是响应的内容主体</li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-meta">HTTP/1.1</span> <span class="hljs-number">200</span> OK<br><span class="hljs-attribute">Age</span><span class="hljs-punctuation">: </span>529651<br><span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>max-age=604800<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>keep-alive<br><span class="hljs-attribute">Content-Encoding</span><span class="hljs-punctuation">: </span>gzip<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>648<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>text/html; charset=UTF-8<br><span class="hljs-attribute">Date</span><span class="hljs-punctuation">: </span>Mon, 02 Nov 2020 17:53:39 GMT<br><span class="hljs-attribute">Etag</span><span class="hljs-punctuation">: </span>&quot;3147526947+ident+gzip&quot;<br><span class="hljs-attribute">Expires</span><span class="hljs-punctuation">: </span>Mon, 09 Nov 2020 17:53:39 GMT<br><span class="hljs-attribute">Keep-Alive</span><span class="hljs-punctuation">: </span>timeout=4<br><span class="hljs-attribute">Last-Modified</span><span class="hljs-punctuation">: </span>Thu, 17 Oct 2019 07:18:26 GMT<br><span class="hljs-attribute">Proxy-Connection</span><span class="hljs-punctuation">: </span>keep-alive<br><span class="hljs-attribute">Server</span><span class="hljs-punctuation">: </span>ECS (sjc/16DF)<br><span class="hljs-attribute">Vary</span><span class="hljs-punctuation">: </span>Accept-Encoding<br><span class="hljs-attribute">X-Cache</span><span class="hljs-punctuation">: </span>HIT<br><br><span class="language-xml"><span class="hljs-meta">&lt;!doctype <span class="hljs-keyword">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Example Domain<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml">// 省略... </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><h3 id="URL">URL</h3><p>HTTP 使用 URL（ <strong>U</strong> niform <strong>R</strong>esource <strong>L</strong>ocator，统一资源定位符）来定位资源，它是  URI（<strong>U</strong>niform <strong>R</strong>esource <strong>I</strong>dentifier，统一资源标识符）的子集，URL 在 URI 的基础上增加了定位能力。URI 除了包含 URL，还包含 URN（Uniform Resource Name，统一资源名称），它只是用来定义一个资源的名称，并不具备定位该资源的能力。例如 urn:isbn:0451450523 用来定义一个书籍名称，但是却没有表示怎么找到这本书。</p><div align="center"> <img src="/pics/8441b2c4-dca7-4d6b-8efb-f22efccaf331.png" width="500px"> </div><br><ul><li><a href="https://zh.wikipedia.org/wiki/%E7%BB%9F%E4%B8%80%E8%B5%84%E6%BA%90%E6%A0%87%E5%BF%97%E7%AC%A6">wikipedia：统一资源标志符</a></li><li><a href="https://en.wikipedia.org/wiki/URL">wikipedia: URL</a></li><li><a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.2.2">rfc2616：3.2.2 http URL</a></li><li><a href="https://stackoverflow.com/questions/176264/what-is-the-difference-between-a-uri-a-url-and-a-urn">What is the difference between a URI, a URL and a URN?</a></li></ul><h2 id="二、HTTP-方法">二、HTTP 方法</h2><p>客户端发送的   <strong>请求报文</strong>   第一行为请求行，包含了方法字段。</p><h3 id="GET">GET</h3><blockquote><p>获取资源</p></blockquote><p>当前网络请求中，绝大部分使用的是 GET 方法。</p><h3 id="HEAD">HEAD</h3><blockquote><p>获取报文首部</p></blockquote><p>和 GET 方法类似，但是不返回报文实体主体部分。</p><p>主要用于确认 URL 的有效性以及资源更新的日期时间等。</p><h3 id="POST">POST</h3><blockquote><p>传输实体主体</p></blockquote><p>POST 主要用来传输数据，而 GET 主要用来获取资源。</p><p>更多 POST 与 GET 的比较请见第九章。</p><h3 id="PUT">PUT</h3><blockquote><p>上传文件</p></blockquote><p>由于自身不带验证机制，任何人都可以上传文件，因此存在安全性问题，一般不使用该方法。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html">PUT /new.html HTTP/1.1<br>Host: example.com<br>Content-type: text/html<br>Content-length: 16<br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>New File<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="PATCH">PATCH</h3><blockquote><p>对资源进行部分修改</p></blockquote><p>PUT 也可以用于修改资源，但是只能完全替代原始资源，PATCH 允许部分修改。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html">PATCH /file.txt HTTP/1.1<br>Host: www.example.com<br>Content-Type: application/example<br>If-Match: &quot;e0023aa4e&quot;<br>Content-Length: 100<br><br>[description of changes]<br></code></pre></td></tr></table></figure><h3 id="DELETE">DELETE</h3><blockquote><p>删除文件</p></blockquote><p>与 PUT 功能相反，并且同样不带验证机制。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">DELETE /file.html HTTP/1.1<br></code></pre></td></tr></table></figure><h3 id="OPTIONS">OPTIONS</h3><blockquote><p>查询支持的方法</p></blockquote><p>查询指定的 URL 能够支持的方法。</p><p>会返回 <code>Allow: GET, POST, HEAD, OPTIONS</code> 这样的内容。</p><h3 id="CONNECT">CONNECT</h3><blockquote><p>要求在与代理服务器通信时建立隧道</p></blockquote><p>使用 SSL（Secure Sockets Layer，安全套接层）和 TLS（Transport Layer Security，传输层安全）协议把通信内容加密后经网络隧道传输。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">CONNECT www.example.com:443 HTTP/1.1<br></code></pre></td></tr></table></figure><div align="center"> <img src="/pics/dc00f70e-c5c8-4d20-baf1-2d70014a97e3.jpg" width=""/> </div><br><h3 id="TRACE">TRACE</h3><blockquote><p>追踪路径</p></blockquote><p>服务器会将通信路径返回给客户端。</p><p>发送请求时，在 Max-Forwards 首部字段中填入数值，每经过一个服务器就会减 1，当数值为 0 时就停止传输。</p><p>通常不会使用 TRACE，并且它容易受到 XST 攻击（Cross-Site Tracing，跨站追踪）。</p><h2 id="三、HTTP-状态码">三、HTTP 状态码</h2><p>服务器返回的   <strong>响应报文</strong>   中第一行为状态行，包含了状态码以及原因短语，用来告知客户端请求的结果。</p><table><thead><tr><th style="text-align:center">状态码</th><th style="text-align:center">类别</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">1XX</td><td style="text-align:center">Informational（信息性状态码）</td><td style="text-align:center">接收的请求正在处理</td></tr><tr><td style="text-align:center">2XX</td><td style="text-align:center">Success（成功状态码）</td><td style="text-align:center">请求正常处理完毕</td></tr><tr><td style="text-align:center">3XX</td><td style="text-align:center">Redirection（重定向状态码）</td><td style="text-align:center">需要进行附加操作以完成请求</td></tr><tr><td style="text-align:center">4XX</td><td style="text-align:center">Client Error（客户端错误状态码）</td><td style="text-align:center">服务器无法处理请求</td></tr><tr><td style="text-align:center">5XX</td><td style="text-align:center">Server Error（服务器错误状态码）</td><td style="text-align:center">服务器处理请求出错</td></tr></tbody></table><h3 id="1XX-信息">1XX 信息</h3><ul><li><strong>100 Continue</strong>  ：表明到目前为止都很正常，客户端可以继续发送请求或者忽略这个响应。</li></ul><h3 id="2XX-成功">2XX 成功</h3><ul><li><p><strong>200 OK</strong></p></li><li><p><strong>204 No Content</strong>  ：请求已经成功处理，但是返回的响应报文不包含实体的主体部分。一般在只需要从客户端往服务器发送信息，而不需要返回数据时使用。</p></li><li><p><strong>206 Partial Content</strong>  ：表示客户端进行了范围请求，响应报文包含由 Content-Range 指定范围的实体内容。</p></li></ul><h3 id="3XX-重定向">3XX 重定向</h3><ul><li><p><strong>301 Moved Permanently</strong>  ：永久性重定向</p></li><li><p><strong>302 Found</strong>  ：临时性重定向</p></li><li><p><strong>303 See Other</strong>  ：和 302 有着相同的功能，但是 303 明确要求客户端应该采用 GET 方法获取资源。</p></li><li><p>注：虽然 HTTP 协议规定 301、302 状态下重定向时不允许把 POST 方法改成 GET 方法，但是大多数浏览器都会在 301、302 和 303 状态下的重定向把 POST 方法改成 GET 方法。</p></li><li><p><strong>304 Not Modified</strong>  ：如果请求报文首部包含一些条件，例如：If-Match，If-Modified-Since，If-None-Match，If-Range，If-Unmodified-Since，如果不满足条件，则服务器会返回 304 状态码。</p></li><li><p><strong>307 Temporary Redirect</strong>  ：临时重定向，与 302 的含义类似，但是 307 要求浏览器不会把重定向请求的 POST 方法改成 GET 方法。</p></li></ul><h3 id="4XX-客户端错误">4XX 客户端错误</h3><ul><li><p><strong>400 Bad Request</strong>  ：请求报文中存在语法错误。</p></li><li><p><strong>401 Unauthorized</strong>  ：该状态码表示发送的请求需要有认证信息（BASIC 认证、DIGEST 认证）。如果之前已进行过一次请求，则表示用户认证失败。</p></li><li><p><strong>403 Forbidden</strong>  ：请求被拒绝。</p></li><li><p><strong>404 Not Found</strong></p></li></ul><h3 id="5XX-服务器错误">5XX 服务器错误</h3><ul><li><p><strong>500 Internal Server Error</strong>  ：服务器正在执行请求时发生错误。</p></li><li><p><strong>503 Service Unavailable</strong>  ：服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。</p></li></ul><h2 id="四、HTTP-首部">四、HTTP 首部</h2><p>有 4 种类型的首部字段：通用首部字段、请求首部字段、响应首部字段和实体首部字段。</p><p>各种首部字段及其含义如下（不需要全记，仅供查阅）：</p><h3 id="通用首部字段">通用首部字段</h3><table><thead><tr><th style="text-align:center">首部字段名</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">Cache-Control</td><td style="text-align:center">控制缓存的行为</td></tr><tr><td style="text-align:center">Connection</td><td style="text-align:center">控制不再转发给代理的首部字段、管理持久连接</td></tr><tr><td style="text-align:center">Date</td><td style="text-align:center">创建报文的日期时间</td></tr><tr><td style="text-align:center">Pragma</td><td style="text-align:center">报文指令</td></tr><tr><td style="text-align:center">Trailer</td><td style="text-align:center">报文末端的首部一览</td></tr><tr><td style="text-align:center">Transfer-Encoding</td><td style="text-align:center">指定报文主体的传输编码方式</td></tr><tr><td style="text-align:center">Upgrade</td><td style="text-align:center">升级为其他协议</td></tr><tr><td style="text-align:center">Via</td><td style="text-align:center">代理服务器的相关信息</td></tr><tr><td style="text-align:center">Warning</td><td style="text-align:center">错误通知</td></tr></tbody></table><h3 id="请求首部字段">请求首部字段</h3><table><thead><tr><th style="text-align:center">首部字段名</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">Accept</td><td style="text-align:center">用户代理可处理的媒体类型</td></tr><tr><td style="text-align:center">Accept-Charset</td><td style="text-align:center">优先的字符集</td></tr><tr><td style="text-align:center">Accept-Encoding</td><td style="text-align:center">优先的内容编码</td></tr><tr><td style="text-align:center">Accept-Language</td><td style="text-align:center">优先的语言（自然语言）</td></tr><tr><td style="text-align:center">Authorization</td><td style="text-align:center">Web 认证信息</td></tr><tr><td style="text-align:center">Expect</td><td style="text-align:center">期待服务器的特定行为</td></tr><tr><td style="text-align:center">From</td><td style="text-align:center">用户的电子邮箱地址</td></tr><tr><td style="text-align:center">Host</td><td style="text-align:center">请求资源所在服务器</td></tr><tr><td style="text-align:center">If-Match</td><td style="text-align:center">比较实体标记（ETag）</td></tr><tr><td style="text-align:center">If-Modified-Since</td><td style="text-align:center">比较资源的更新时间</td></tr><tr><td style="text-align:center">If-None-Match</td><td style="text-align:center">比较实体标记（与 If-Match 相反）</td></tr><tr><td style="text-align:center">If-Range</td><td style="text-align:center">资源未更新时发送实体 Byte 的范围请求</td></tr><tr><td style="text-align:center">If-Unmodified-Since</td><td style="text-align:center">比较资源的更新时间（与 If-Modified-Since 相反）</td></tr><tr><td style="text-align:center">Max-Forwards</td><td style="text-align:center">最大传输逐跳数</td></tr><tr><td style="text-align:center">Proxy-Authorization</td><td style="text-align:center">代理服务器要求客户端的认证信息</td></tr><tr><td style="text-align:center">Range</td><td style="text-align:center">实体的字节范围请求</td></tr><tr><td style="text-align:center">Referer</td><td style="text-align:center">对请求中 URI 的原始获取方</td></tr><tr><td style="text-align:center">TE</td><td style="text-align:center">传输编码的优先级</td></tr><tr><td style="text-align:center">User-Agent</td><td style="text-align:center">HTTP 客户端程序的信息</td></tr></tbody></table><h3 id="响应首部字段">响应首部字段</h3><table><thead><tr><th style="text-align:center">首部字段名</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">Accept-Ranges</td><td style="text-align:center">是否接受字节范围请求</td></tr><tr><td style="text-align:center">Age</td><td style="text-align:center">推算资源创建经过时间</td></tr><tr><td style="text-align:center">ETag</td><td style="text-align:center">资源的匹配信息</td></tr><tr><td style="text-align:center">Location</td><td style="text-align:center">令客户端重定向至指定 URI</td></tr><tr><td style="text-align:center">Proxy-Authenticate</td><td style="text-align:center">代理服务器对客户端的认证信息</td></tr><tr><td style="text-align:center">Retry-After</td><td style="text-align:center">对再次发起请求的时机要求</td></tr><tr><td style="text-align:center">Server</td><td style="text-align:center">HTTP 服务器的安装信息</td></tr><tr><td style="text-align:center">Vary</td><td style="text-align:center">代理服务器缓存的管理信息</td></tr><tr><td style="text-align:center">WWW-Authenticate</td><td style="text-align:center">服务器对客户端的认证信息</td></tr></tbody></table><h3 id="实体首部字段">实体首部字段</h3><table><thead><tr><th style="text-align:center">首部字段名</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">Allow</td><td style="text-align:center">资源可支持的 HTTP 方法</td></tr><tr><td style="text-align:center">Content-Encoding</td><td style="text-align:center">实体主体适用的编码方式</td></tr><tr><td style="text-align:center">Content-Language</td><td style="text-align:center">实体主体的自然语言</td></tr><tr><td style="text-align:center">Content-Length</td><td style="text-align:center">实体主体的大小</td></tr><tr><td style="text-align:center">Content-Location</td><td style="text-align:center">替代对应资源的 URI</td></tr><tr><td style="text-align:center">Content-MD5</td><td style="text-align:center">实体主体的报文摘要</td></tr><tr><td style="text-align:center">Content-Range</td><td style="text-align:center">实体主体的位置范围</td></tr><tr><td style="text-align:center">Content-Type</td><td style="text-align:center">实体主体的媒体类型</td></tr><tr><td style="text-align:center">Expires</td><td style="text-align:center">实体主体过期的日期时间</td></tr><tr><td style="text-align:center">Last-Modified</td><td style="text-align:center">资源的最后修改日期时间</td></tr></tbody></table><h2 id="五、具体应用">五、具体应用</h2><h3 id="连接管理">连接管理</h3><div align="center"> <img src="/pics/HTTP1_x_Connections.png" width="800"/> </div><br><h4 id="1-短连接与长连接">1. 短连接与长连接</h4><p>当浏览器访问一个包含多张图片的 HTML 页面时，除了请求访问的 HTML 页面资源，还会请求图片资源。如果每进行一次 HTTP 通信就要新建一个 TCP 连接，那么开销会很大。</p><p>长连接只需要建立一次 TCP 连接就能进行多次 HTTP 通信。</p><ul><li>从 HTTP/1.1 开始默认是长连接的，如果要断开连接，需要由客户端或者服务器端提出断开，使用 <code>Connection : close</code>；</li><li>在 HTTP/1.1 之前默认是短连接的，如果需要使用长连接，则使用 <code>Connection : Keep-Alive</code>。</li></ul><h4 id="2-流水线">2. 流水线</h4><p>默认情况下，HTTP 请求是按顺序发出的，下一个请求只有在当前请求收到响应之后才会被发出。由于受到网络延迟和带宽的限制，在下一个请求被发送到服务器之前，可能需要等待很长时间。</p><p>流水线是在同一条长连接上连续发出请求，而不用等待响应返回，这样可以减少延迟。</p><h3 id="Cookie">Cookie</h3><p>HTTP 协议是无状态的，主要是为了让 HTTP 协议尽可能简单，使得它能够处理大量事务。HTTP/1.1 引入 Cookie 来保存状态信息。</p><p>Cookie 是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器之后向同一服务器再次发起请求时被携带上，用于告知服务端两个请求是否来自同一浏览器。由于之后每次请求都会需要携带 Cookie 数据，因此会带来额外的性能开销（尤其是在移动环境下）。</p><p>Cookie 曾一度用于客户端数据的存储，因为当时并没有其它合适的存储办法而作为唯一的存储手段，但现在随着现代浏览器开始支持各种各样的存储方式，Cookie 渐渐被淘汰。新的浏览器 API 已经允许开发者直接将数据存储到本地，如使用 Web storage API（本地存储和会话存储）或 IndexedDB。</p><h4 id="1-用途">1. 用途</h4><ul><li>会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）</li><li>个性化设置（如用户自定义设置、主题等）</li><li>浏览器行为跟踪（如跟踪分析用户行为等）</li></ul><h4 id="2-创建过程">2. 创建过程</h4><p>服务器发送的响应报文包含 Set-Cookie 首部字段，客户端得到响应报文后把 Cookie 内容保存到浏览器中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html">HTTP/1.0 200 OK<br>Content-type: text/html<br>Set-Cookie: yummy_cookie=choco<br>Set-Cookie: tasty_cookie=strawberry<br><br>[page content]<br></code></pre></td></tr></table></figure><p>客户端之后对同一个服务器发送请求时，会从浏览器中取出 Cookie 信息并通过 Cookie 请求首部字段发送给服务器。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">GET /sample_page.html HTTP/1.1<br>Host: www.example.org<br>Cookie: yummy_cookie=choco; tasty_cookie=strawberry<br></code></pre></td></tr></table></figure><h4 id="3-分类">3. 分类</h4><ul><li>会话期 Cookie：浏览器关闭之后它会被自动删除，也就是说它仅在会话期内有效。</li><li>持久性 Cookie：指定过期时间（Expires）或有效期（max-age）之后就成为了持久性的 Cookie。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT;<br></code></pre></td></tr></table></figure><h4 id="4-作用域">4. 作用域</h4><p>Domain 标识指定了哪些主机可以接受 Cookie。如果不指定，默认为当前文档的主机（不包含子域名）。如果指定了 Domain，则一般包含子域名。例如，如果设置 <a href="http://Domain=mozilla.org">Domain=mozilla.org</a>，则 Cookie 也包含在子域名中（如 <a href="http://developer.mozilla.org">developer.mozilla.org</a>）。</p><p>Path 标识指定了主机下的哪些路径可以接受 Cookie（该 URL 路径必须存在于请求 URL 中）。以字符 %x2F (“/”) 作为路径分隔符，子路径也会被匹配。例如，设置 Path=/docs，则以下地址都会匹配：</p><ul><li>/docs</li><li>/docs/Web/</li><li>/docs/Web/HTTP</li></ul><h4 id="5-JavaScript">5. JavaScript</h4><p>浏览器通过 <code>document.cookie</code> 属性可创建新的 Cookie，也可通过该属性访问非 HttpOnly 标记的 Cookie。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">document.cookie = &quot;yummy_cookie=choco&quot;;<br>document.cookie = &quot;tasty_cookie=strawberry&quot;;<br>console.log(document.cookie);<br></code></pre></td></tr></table></figure><h4 id="6-HttpOnly">6. HttpOnly</h4><p>标记为 HttpOnly 的 Cookie 不能被 JavaScript 脚本调用。跨站脚本攻击 (XSS) 常常使用 JavaScript 的 <code>document.cookie</code> API 窃取用户的 Cookie 信息，因此使用 HttpOnly 标记可以在一定程度上避免 XSS 攻击。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT; Secure; HttpOnly<br></code></pre></td></tr></table></figure><h4 id="7-Secure">7. Secure</h4><p>标记为 Secure 的 Cookie 只能通过被 HTTPS 协议加密过的请求发送给服务端。但即便设置了 Secure 标记，敏感信息也不应该通过 Cookie 传输，因为 Cookie 有其固有的不安全性，Secure 标记也无法提供确实的安全保障。</p><h4 id="8-Session">8. Session</h4><p>除了可以将用户信息通过 Cookie 存储在用户浏览器中，也可以利用 Session 存储在服务器端，存储在服务器端的信息更加安全。</p><p>Session 可以存储在服务器上的文件、数据库或者内存中。也可以将 Session 存储在 Redis 这种内存型数据库中，效率会更高。</p><p>使用 Session 维护用户登录状态的过程如下：</p><ul><li>用户进行登录时，用户提交包含用户名和密码的表单，放入 HTTP 请求报文中；</li><li>服务器验证该用户名和密码，如果正确则把用户信息存储到 Redis 中，它在 Redis 中的 Key 称为 Session ID；</li><li>服务器返回的响应报文的 Set-Cookie 首部字段包含了这个 Session ID，客户端收到响应报文之后将该 Cookie 值存入浏览器中；</li><li>客户端之后对同一个服务器进行请求时会包含该 Cookie 值，服务器收到之后提取出 Session ID，从 Redis 中取出用户信息，继续之前的业务操作。</li></ul><p>应该注意 Session ID 的安全性问题，不能让它被恶意攻击者轻易获取，那么就不能产生一个容易被猜到的 Session ID 值。此外，还需要经常重新生成 Session ID。在对安全性要求极高的场景下，例如转账等操作，除了使用 Session 管理用户状态之外，还需要对用户进行重新验证，比如重新输入密码，或者使用短信验证码等方式。</p><h4 id="9-浏览器禁用-Cookie">9. 浏览器禁用 Cookie</h4><p>此时无法使用 Cookie 来保存用户信息，只能使用 Session。除此之外，不能再将 Session ID 存放到 Cookie 中，而是使用 URL 重写技术，将 Session ID 作为 URL 的参数进行传递。</p><h4 id="10-Cookie-与-Session-选择">10. Cookie 与 Session 选择</h4><ul><li>Cookie 只能存储 ASCII 码字符串，而 Session 则可以存储任何类型的数据，因此在考虑数据复杂性时首选 Session；</li><li>Cookie 存储在浏览器中，容易被恶意查看。如果非要将一些隐私数据存在 Cookie 中，可以将 Cookie 值进行加密，然后在服务器进行解密；</li><li>对于大型网站，如果用户所有的信息都存储在 Session 中，那么开销是非常大的，因此不建议将所有的用户信息都存储到 Session 中。</li></ul><h3 id="缓存">缓存</h3><h4 id="1-优点">1. 优点</h4><ul><li>缓解服务器压力；</li><li>降低客户端获取资源的延迟：缓存通常位于内存中，读取缓存的速度更快。并且缓存服务器在地理位置上也有可能比源服务器来得近，例如浏览器缓存。</li></ul><h4 id="2-实现方法">2. 实现方法</h4><ul><li>让代理服务器进行缓存；</li><li>让客户端浏览器进行缓存。</li></ul><h4 id="3-Cache-Control">3. Cache-Control</h4><p>HTTP/1.1 通过 Cache-Control 首部字段来控制缓存。</p><p><strong>3.1 禁止进行缓存</strong></p><p>no-store 指令规定不能对请求或响应的任何一部分进行缓存。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">Cache-Control: no-store<br></code></pre></td></tr></table></figure><p><strong>3.2 强制确认缓存</strong></p><p>no-cache 指令规定缓存服务器需要先向源服务器验证缓存资源的有效性，只有当缓存资源有效时才能使用该缓存对客户端的请求进行响应。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">Cache-Control: no-cache<br></code></pre></td></tr></table></figure><p><strong>3.3 私有缓存和公共缓存</strong></p><p>private 指令规定了将资源作为私有缓存，只能被单独用户使用，一般存储在用户浏览器中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">Cache-Control: private<br></code></pre></td></tr></table></figure><p>public 指令规定了将资源作为公共缓存，可以被多个用户使用，一般存储在代理服务器中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">Cache-Control: public<br></code></pre></td></tr></table></figure><p><strong>3.4 缓存过期机制</strong></p><p>max-age 指令出现在请求报文，并且缓存资源的缓存时间小于该指令指定的时间，那么就能接受该缓存。</p><p>max-age 指令出现在响应报文，表示缓存资源在缓存服务器中保存的时间。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">Cache-Control: max-age=31536000<br></code></pre></td></tr></table></figure><p>Expires 首部字段也可以用于告知缓存服务器该资源什么时候会过期。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">Expires: Wed, 04 Jul 2012 08:26:05 GMT<br></code></pre></td></tr></table></figure><ul><li>在 HTTP/1.1 中，会优先处理 max-age 指令；</li><li>在 HTTP/1.0 中，max-age 指令会被忽略掉。</li></ul><h4 id="4-缓存验证">4. 缓存验证</h4><p>需要先了解 ETag 首部字段的含义，它是资源的唯一标识。URL 不能唯一表示资源，例如 <code>http://www.google.com/</code> 有中文和英文两个资源，只有 ETag 才能对这两个资源进行唯一标识。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">ETag: &quot;82e22293907ce725faf67773957acd12&quot;<br></code></pre></td></tr></table></figure><p>可以将缓存资源的 ETag 值放入 If-None-Match 首部，服务器收到该请求后，判断缓存资源的 ETag 值和资源的最新 ETag 值是否一致，如果一致则表示缓存资源有效，返回 304 Not Modified。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">If-None-Match: &quot;82e22293907ce725faf67773957acd12&quot;<br></code></pre></td></tr></table></figure><p>Last-Modified 首部字段也可以用于缓存验证，它包含在源服务器发送的响应报文中，指示源服务器对资源的最后修改时间。但是它是一种弱校验器，因为只能精确到一秒，所以它通常作为 ETag 的备用方案。如果响应首部字段里含有这个信息，客户端可以在后续的请求中带上 If-Modified-Since 来验证缓存。服务器只在所请求的资源在给定的日期时间之后对内容进行过修改的情况下才会将资源返回，状态码为 200 OK。如果请求的资源从那时起未经修改，那么返回一个不带有实体主体的 304 Not Modified 响应报文。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">Last-Modified: Wed, 21 Oct 2015 07:28:00 GMT<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">If-Modified-Since: Wed, 21 Oct 2015 07:28:00 GMT<br></code></pre></td></tr></table></figure><h3 id="内容协商">内容协商</h3><p>通过内容协商返回最合适的内容，例如根据浏览器的默认语言选择返回中文界面还是英文界面。</p><h4 id="1-类型">1. 类型</h4><p><strong>1.1 服务端驱动型</strong></p><p>客户端设置特定的 HTTP 首部字段，例如 Accept、Accept-Charset、Accept-Encoding、Accept-Language，服务器根据这些字段返回特定的资源。</p><p>它存在以下问题：</p><ul><li>服务器很难知道客户端浏览器的全部信息；</li><li>客户端提供的信息相当冗长（HTTP/2 协议的首部压缩机制缓解了这个问题），并且存在隐私风险（HTTP 指纹识别技术）；</li><li>给定的资源需要返回不同的展现形式，共享缓存的效率会降低，而服务器端的实现会越来越复杂。</li></ul><p><strong>1.2 代理驱动型</strong></p><p>服务器返回 300 Multiple Choices 或者 406 Not Acceptable，客户端从中选出最合适的那个资源。</p><h4 id="2-Vary">2. Vary</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">Vary: Accept-Language<br></code></pre></td></tr></table></figure><p>在使用内容协商的情况下，只有当缓存服务器中的缓存满足内容协商条件时，才能使用该缓存，否则应该向源服务器请求该资源。</p><p>例如，一个客户端发送了一个包含 Accept-Language 首部字段的请求之后，源服务器返回的响应包含 <code>Vary: Accept-Language</code> 内容，缓存服务器对这个响应进行缓存之后，在客户端下一次访问同一个 URL 资源，并且 Accept-Language 与缓存中的对应的值相同时才会返回该缓存。</p><h3 id="内容编码">内容编码</h3><p>内容编码将实体主体进行压缩，从而减少传输的数据量。</p><p>常用的内容编码有：gzip、compress、deflate、identity。</p><p>浏览器发送 Accept-Encoding 首部，其中包含有它所支持的压缩算法，以及各自的优先级。服务器则从中选择一种，使用该算法对响应的消息主体进行压缩，并且发送 Content-Encoding 首部来告知浏览器它选择了哪一种算法。由于该内容协商过程是基于编码类型来选择资源的展现形式的，响应报文的 Vary 首部字段至少要包含 Content-Encoding。</p><h3 id="范围请求">范围请求</h3><p>如果网络出现中断，服务器只发送了一部分数据，范围请求可以使得客户端只请求服务器未发送的那部分数据，从而避免服务器重新发送所有数据。</p><h4 id="1-Range">1. Range</h4><p>在请求报文中添加 Range 首部字段指定请求的范围。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">GET /z4d4kWk.jpg HTTP/1.1<br>Host: i.imgur.com<br>Range: bytes=0-1023<br></code></pre></td></tr></table></figure><p>请求成功的话服务器返回的响应包含 206 Partial Content 状态码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html">HTTP/1.1 206 Partial Content<br>Content-Range: bytes 0-1023/146515<br>Content-Length: 1024<br>...<br>(binary content)<br></code></pre></td></tr></table></figure><h4 id="2-Accept-Ranges">2. Accept-Ranges</h4><p>响应首部字段 Accept-Ranges 用于告知客户端是否能处理范围请求，可以处理使用 bytes，否则使用 none。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">Accept-Ranges: bytes<br></code></pre></td></tr></table></figure><h4 id="3-响应状态码">3. 响应状态码</h4><ul><li>在请求成功的情况下，服务器会返回 206 Partial Content 状态码。</li><li>在请求的范围越界的情况下，服务器会返回 416 Requested Range Not Satisfiable 状态码。</li><li>在不支持范围请求的情况下，服务器会返回 200 OK 状态码。</li></ul><h3 id="分块传输编码">分块传输编码</h3><p>Chunked Transfer Encoding，可以把数据分割成多块，让浏览器逐步显示页面。</p><h3 id="多部分对象集合">多部分对象集合</h3><p>一份报文主体内可含有多种类型的实体同时发送，每个部分之间用 boundary 字段定义的分隔符进行分隔，每个部分都可以有首部字段。</p><p>例如，上传多个表单时可以使用如下方式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html">Content-Type: multipart/form-data; boundary=AaB03x<br><br>--AaB03x<br>Content-Disposition: form-data; name=&quot;submit-name&quot;<br><br>Larry<br>--AaB03x<br>Content-Disposition: form-data; name=&quot;files&quot;; filename=&quot;file1.txt&quot;<br>Content-Type: text/plain<br><br>... contents of file1.txt ...<br>--AaB03x--<br></code></pre></td></tr></table></figure><h3 id="虚拟主机">虚拟主机</h3><p>HTTP/1.1 使用虚拟主机技术，使得一台服务器拥有多个域名，并且在逻辑上可以看成多个服务器。</p><h3 id="通信数据转发">通信数据转发</h3><h4 id="1-代理">1. 代理</h4><p>代理服务器接受客户端的请求，并且转发给其它服务器。</p><p>使用代理的主要目的是：</p><ul><li>缓存</li><li>负载均衡</li><li>网络访问控制</li><li>访问日志记录</li></ul><p>代理服务器分为正向代理和反向代理两种：</p><ul><li>用户察觉得到正向代理的存在。</li></ul><div align="center"> <img src="/pics/a314bb79-5b18-4e63-a976-3448bffa6f1b.png" width=""/> </div><br><ul><li>而反向代理一般位于内部网络中，用户察觉不到。</li></ul><div align="center"> <img src="/pics/2d09a847-b854-439c-9198-b29c65810944.png" width=""/> </div><br><h4 id="2-网关">2. 网关</h4><p>与代理服务器不同的是，网关服务器会将 HTTP 转化为其它协议进行通信，从而请求其它非 HTTP 服务器的服务。</p><h4 id="3-隧道">3. 隧道</h4><p>使用 SSL 等加密手段，在客户端和服务器之间建立一条安全的通信线路。</p><h2 id="六、HTTPS">六、HTTPS</h2><p>HTTP 有以下安全性问题：</p><ul><li>使用明文进行通信，内容可能会被窃听；</li><li>不验证通信方的身份，通信方的身份有可能遭遇伪装；</li><li>无法证明报文的完整性，报文有可能遭篡改。</li></ul><p>HTTPS 并不是新协议，而是让 HTTP 先和 SSL（Secure Sockets Layer）通信，再由 SSL 和 TCP 通信，也就是说 HTTPS 使用了隧道进行通信。</p><p>通过使用 SSL，HTTPS 具有了加密（防窃听）、认证（防伪装）和完整性保护（防篡改）。</p><div align="center"> <img src="/pics/ssl-offloading.jpg" width="700"/> </div><br><h3 id="加密">加密</h3><h4 id="1-对称密钥加密">1. 对称密钥加密</h4><p>对称密钥加密（Symmetric-Key Encryption），加密和解密使用同一密钥。</p><ul><li>优点：运算速度快；</li><li>缺点：无法安全地将密钥传输给通信方。</li></ul><div align="center"> <img src="/pics/7fffa4b8-b36d-471f-ad0c-a88ee763bb76.png" width="600"/> </div><br><h4 id="2-非对称密钥加密">2.非对称密钥加密</h4><p>非对称密钥加密，又称公开密钥加密（Public-Key Encryption），加密和解密使用不同的密钥。</p><p>公开密钥所有人都可以获得，通信发送方获得接收方的公开密钥之后，就可以使用公开密钥进行加密，接收方收到通信内容后使用私有密钥解密。</p><p>非对称密钥除了用来加密，还可以用来进行签名。因为私有密钥无法被其他人获取，因此通信发送方使用其私有密钥进行签名，通信接收方使用发送方的公开密钥对签名进行解密，就能判断这个签名是否正确。</p><ul><li>优点：可以更安全地将公开密钥传输给通信发送方；</li><li>缺点：运算速度慢。</li></ul><div align="center"> <img src="/pics/39ccb299-ee99-4dd1-b8b4-2f9ec9495cb4.png" width="600"/> </div><br><h4 id="3-HTTPS-采用的加密方式">3. HTTPS 采用的加密方式</h4><p>上面提到对称密钥加密方式的传输效率更高，但是无法安全地将密钥 Secret Key 传输给通信方。而非对称密钥加密方式可以保证传输的安全性，因此我们可以利用非对称密钥加密方式将 Secret Key  传输给通信方。HTTPS 采用混合的加密机制，正是利用了上面提到的方案：</p><ul><li>使用非对称密钥加密方式，传输对称密钥加密方式所需要的 Secret Key，从而保证安全性;</li><li>获取到 Secret Key 后，再使用对称密钥加密方式进行通信，从而保证效率。（下图中的 Session Key 就是 Secret Key）</li></ul><div align="center"> <img src="/pics/How-HTTPS-Works.png" width="600"/> </div><br><h3 id="认证">认证</h3><p>通过使用   <strong>证书</strong>   来对通信方进行认证。</p><p>数字证书认证机构（CA，Certificate Authority）是客户端与服务器双方都可信赖的第三方机构。</p><p>服务器的运营人员向 CA 提出公开密钥的申请，CA 在判明提出申请者的身份之后，会对已申请的公开密钥做数字签名，然后分配这个已签名的公开密钥，并将该公开密钥放入公开密钥证书后绑定在一起。</p><p>进行 HTTPS 通信时，服务器会把证书发送给客户端。客户端取得其中的公开密钥之后，先使用数字签名进行验证，如果验证通过，就可以开始通信了。</p><div align="center"> <img src="/pics/2017-06-11-ca.png" width=""/> </div><br><h3 id="完整性保护">完整性保护</h3><p>SSL 提供报文摘要功能来进行完整性保护。</p><p>HTTP 也提供了 MD5 报文摘要功能，但不是安全的。例如报文内容被篡改之后，同时重新计算 MD5 的值，通信接收方是无法意识到发生了篡改。</p><p>HTTPS 的报文摘要功能之所以安全，是因为它结合了加密和认证这两个操作。试想一下，加密之后的报文，遭到篡改之后，也很难重新计算报文摘要，因为无法轻易获取明文。</p><h3 id="HTTPS-的缺点">HTTPS 的缺点</h3><ul><li>因为需要进行加密解密等过程，因此速度会更慢；</li><li>需要支付证书授权的高额费用。</li></ul><h2 id="七、HTTP-2-0">七、HTTP/2.0</h2><h3 id="HTTP-1-x-缺陷">HTTP/1.x 缺陷</h3><p>HTTP/1.x 实现简单是以牺牲性能为代价的：</p><ul><li>客户端需要使用多个连接才能实现并发和缩短延迟；</li><li>不会压缩请求和响应首部，从而导致不必要的网络流量；</li><li>不支持有效的资源优先级，致使底层 TCP 连接的利用率低下。</li></ul><h3 id="二进制分帧层">二进制分帧层</h3><p>HTTP/2.0 将报文分成 HEADERS 帧和 DATA 帧，它们都是二进制格式的。</p><div align="center"> <img src="/pics/86e6a91d-a285-447a-9345-c5484b8d0c47.png" width="400"/> </div><br><p>在通信过程中，只会有一个 TCP 连接存在，它承载了任意数量的双向数据流（Stream）。</p><ul><li>一个数据流（Stream）都有一个唯一标识符和可选的优先级信息，用于承载双向信息。</li><li>消息（Message）是与逻辑请求或响应对应的完整的一系列帧。</li><li>帧（Frame）是最小的通信单位，来自不同数据流的帧可以交错发送，然后再根据每个帧头的数据流标识符重新组装。</li></ul><div align="center"> <img src="/pics/af198da1-2480-4043-b07f-a3b91a88b815.png" width="600"/> </div><br><h3 id="服务端推送">服务端推送</h3><p>HTTP/2.0 在客户端请求一个资源时，会把相关的资源一起发送给客户端，客户端就不需要再次发起请求了。例如客户端请求 page.html 页面，服务端就把 script.js 和 style.css 等与之相关的资源一起发给客户端。</p><div align="center"> <img src="/pics/e3f1657c-80fc-4dfa-9643-bf51abd201c6.png" width="800"/> </div><br><h3 id="首部压缩">首部压缩</h3><p>HTTP/1.1 的首部带有大量信息，而且每次都要重复发送。</p><p>HTTP/2.0 要求客户端和服务器同时维护和更新一个包含之前见过的首部字段表，从而避免了重复传输。</p><p>不仅如此，HTTP/2.0 也使用 Huffman 编码对首部字段进行压缩。</p><div align="center"> <img src="/pics/_u4E0B_u8F7D.png" width="600"/> </div><br><h2 id="八、HTTP-1-1-新特性">八、HTTP/1.1 新特性</h2><p>详细内容请见上文</p><ul><li>默认是长连接</li><li>支持流水线</li><li>支持同时打开多个 TCP 连接</li><li>支持虚拟主机</li><li>新增状态码 100</li><li>支持分块传输编码</li><li>新增缓存处理指令 max-age</li></ul><h2 id="九、GET-和-POST-比较">九、GET 和 POST 比较</h2><h3 id="作用">作用</h3><p>GET 用于获取资源，而 POST 用于传输实体主体。</p><h3 id="参数">参数</h3><p>GET 和 POST 的请求都能使用额外的参数，但是 GET 的参数是以查询字符串出现在 URL 中，而 POST 的参数存储在实体主体中。不能因为 POST 参数存储在实体主体中就认为它的安全性更高，因为照样可以通过一些抓包工具（Fiddler）查看。</p><p>因为 URL 只支持 ASCII 码，因此 GET 的参数中如果存在中文等字符就需要先进行编码。例如 <code>中文</code> 会转换为 <code>%E4%B8%AD%E6%96%87</code>，而空格会转换为 <code>%20</code>。POST 参数支持标准字符集。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/test/demo_form.asp?name1=value1&amp;name2=value2</span> <span class="hljs-meta">HTTP/1.1</span><br></code></pre></td></tr></table></figure><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nix">POST <span class="hljs-symbol">/test/demo_form.asp</span> HTTP<span class="hljs-symbol">/1.1</span><br><span class="hljs-params">Host:</span> w3schools.com<br>n<span class="hljs-attr">ame1</span><span class="hljs-operator">=</span>value1&amp;name2<span class="hljs-operator">=</span>value2<br></code></pre></td></tr></table></figure><h3 id="安全">安全</h3><p>安全的 HTTP 方法不会改变服务器状态，也就是说它只是可读的。</p><p>GET 方法是安全的，而 POST 却不是，因为 POST 的目的是传送实体主体内容，这个内容可能是用户上传的表单数据，上传成功之后，服务器可能把这个数据存储到数据库中，因此状态也就发生了改变。</p><p>安全的方法除了 GET 之外还有：HEAD、OPTIONS。</p><p>不安全的方法除了 POST 之外还有 PUT、DELETE。</p><h3 id="幂等性">幂等性</h3><p>幂等的 HTTP 方法，同样的请求被执行一次与连续执行多次的效果是一样的，服务器的状态也是一样的。换句话说就是，幂等方法不应该具有副作用（统计用途除外）。</p><p>所有的安全方法也都是幂等的。</p><p>在正确实现的条件下，GET，HEAD，PUT 和 DELETE 等方法都是幂等的，而 POST 方法不是。</p><p>GET /pageX HTTP/1.1 是幂等的，连续调用多次，客户端接收到的结果都是一样的：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">GET</span> /pageX HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">GET</span> /pageX HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">GET</span> /pageX HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">GET</span> /pageX HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>POST /add_row HTTP/1.1 不是幂等的，如果调用多次，就会增加多行记录：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">POST</span> /add_row HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span>   -&gt; Adds a <span class="hljs-number">1</span>nd row<br><span class="hljs-attribute">POST</span> /add_row HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span>   -&gt; Adds a <span class="hljs-number">2</span>nd row<br><span class="hljs-attribute">POST</span> /add_row HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span>   -&gt; Adds a <span class="hljs-number">3</span>rd row<br></code></pre></td></tr></table></figure><p>DELETE /idX/delete HTTP/1.1 是幂等的，即使不同的请求接收到的状态码不一样：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">DELETE</span> /idX/<span class="hljs-keyword">delete</span> HTTP/<span class="hljs-number">1.1</span>   -&gt; <span class="hljs-keyword">Returns</span> <span class="hljs-number">200</span> <span class="hljs-keyword">if</span> idX <span class="hljs-keyword">exists</span><br><span class="hljs-keyword">DELETE</span> /idX/<span class="hljs-keyword">delete</span> HTTP/<span class="hljs-number">1.1</span>   -&gt; <span class="hljs-keyword">Returns</span> <span class="hljs-number">404</span> <span class="hljs-keyword">as</span> it just got deleted<br><span class="hljs-keyword">DELETE</span> /idX/<span class="hljs-keyword">delete</span> HTTP/<span class="hljs-number">1.1</span>   -&gt; <span class="hljs-keyword">Returns</span> <span class="hljs-number">404</span><br></code></pre></td></tr></table></figure><h3 id="可缓存">可缓存</h3><p>如果要对响应进行缓存，需要满足以下条件：</p><ul><li>请求报文的 HTTP 方法本身是可缓存的，包括 GET 和 HEAD，但是 PUT 和 DELETE 不可缓存，POST 在多数情况下不可缓存的。</li><li>响应报文的状态码是可缓存的，包括：200, 203, 204, 206, 300, 301, 404, 405, 410, 414, and 501。</li><li>响应报文的 Cache-Control 首部字段没有指定不进行缓存。</li></ul><h3 id="XMLHttpRequest">XMLHttpRequest</h3><p>为了阐述 POST 和 GET 的另一个区别，需要先了解 XMLHttpRequest：</p><blockquote><p>XMLHttpRequest 是一个 API，它为客户端提供了在客户端和服务器之间传输数据的功能。它提供了一个通过 URL 来获取数据的简单方式，并且不会使整个页面刷新。这使得网页只更新一部分页面而不会打扰到用户。XMLHttpRequest 在 AJAX 中被大量使用。</p></blockquote><ul><li>在使用 XMLHttpRequest 的 POST 方法时，浏览器会先发送 Header 再发送 Data。但并不是所有浏览器会这么做，例如火狐就不会。</li><li>而 GET 方法 Header 和 Data 会一起发送。</li></ul>]]></content>
      
      
      <categories>
          
          <category> HTTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> 网络学习 </tag>
            
            <tag> 知识收集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【c++项目】从零开始写一个局域网聊天室03：将多次收发数据修改为2次</title>
      <link href="/2022/06/22/%E3%80%90c-%E9%A1%B9%E7%9B%AE%E3%80%91%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%86%99%E4%B8%80%E4%B8%AA%E5%B1%80%E5%9F%9F%E7%BD%91%E8%81%8A%E5%A4%A9%E5%AE%A403%EF%BC%9A/"/>
      <url>/2022/06/22/%E3%80%90c-%E9%A1%B9%E7%9B%AE%E3%80%91%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%86%99%E4%B8%80%E4%B8%AA%E5%B1%80%E5%9F%9F%E7%BD%91%E8%81%8A%E5%A4%A9%E5%AE%A403%EF%BC%9A/</url>
      
        <content type="html"><![CDATA[<h2 id="【c-项目】从零开始写一个局域网聊天室03：将多次收发数据修改为2次">【c++项目】从零开始写一个局域网聊天室03：将多次收发数据修改为2次</h2><p>详细的过程我都以注释的形式写在代码里，这里就不啰嗦了。其实不仅仅是局域网，如果能够获取公网ip，也可以建立通信。</p><h3 id="server端">server端</h3><p>server.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment">将多次收发数据修改为2次</span><br><span class="hljs-comment">2022-6-22</span><br><span class="hljs-comment">Liansixin</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> WIN32_LEAN_AND_MEAN</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _WINSOCK_DEPRECATED_NO_WARNINGS</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;WinSock2.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;iostream&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">/*使用报文的方式进行传输*/</span><br><span class="hljs-comment">//数据头</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">CMD</span><br>&#123;<br>CMD_LOGIN,<br>CMD_LOGIN_RESULT,<br>CMD_LOGINOUT,<br>CMD_LOGINOUT_RESULT,<br>CMD_ERROR<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DataHeader</span><br>&#123;<br><span class="hljs-type">short</span> dataLength;<span class="hljs-comment">//数据长度 </span><br><span class="hljs-type">short</span> cmd;<span class="hljs-comment">//命令</span><br>&#125;;<br><span class="hljs-comment">//DataPackage</span><br><span class="hljs-comment">//包体</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Login</span> : <span class="hljs-keyword">public</span> DataHeader<br>&#123;<br><span class="hljs-comment">//DataHeader header;</span><br><span class="hljs-built_in">Login</span>() <br>&#123;<br>dataLength = <span class="hljs-built_in">sizeof</span>(Login);<br>cmd = CMD_LOGIN;<br>&#125;<br><span class="hljs-type">char</span> userName[<span class="hljs-number">32</span>];<br><span class="hljs-type">char</span> PassWord[<span class="hljs-number">32</span>];<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LoginResult</span> : <span class="hljs-keyword">public</span> DataHeader<br>&#123;<br><span class="hljs-built_in">LoginResult</span>()<br>&#123;<br>dataLength = <span class="hljs-built_in">sizeof</span>(LoginResult);<br>cmd = CMD_LOGIN_RESULT;<br>&#125;<br><span class="hljs-type">char</span> result[<span class="hljs-number">32</span>] = <span class="hljs-string">&quot;登陆成功！！&quot;</span>;<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LoginOut</span> : <span class="hljs-keyword">public</span> DataHeader<br>&#123;<br><span class="hljs-built_in">LoginOut</span>()<br>&#123;<br>dataLength = <span class="hljs-built_in">sizeof</span>(LoginOut);<br>cmd = CMD_LOGINOUT;<br>&#125;<br><span class="hljs-type">char</span> userName[<span class="hljs-number">32</span>];<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LoginOutResult</span> : <span class="hljs-keyword">public</span> DataHeader<br>&#123;<br><span class="hljs-built_in">LoginOutResult</span>()<br>&#123;<br>dataLength = <span class="hljs-built_in">sizeof</span>(LoginOutResult);<br>cmd = CMD_LOGINOUT_RESULT;<br>&#125;<br><span class="hljs-type">char</span> result[<span class="hljs-number">32</span>] = <span class="hljs-string">&quot;注销成功！！&quot;</span>;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">/*启动Windows socket 2.x环境*/</span><br><span class="hljs-comment">//版本号</span><br>WORD ver = <span class="hljs-built_in">MAKEWORD</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br>WSADATA dat;<br><span class="hljs-comment">//socket网络编程启动函数</span><br><span class="hljs-built_in">WSAStartup</span>(ver, &amp;dat);<br><span class="hljs-comment">//---------------------------</span><br><span class="hljs-comment">//--用Socket API建立简易TCP服务端</span><br><span class="hljs-comment">//1、建立一个socket  套接字 （windows） linux上指的是指针</span><br><span class="hljs-comment">/*socket(</span><br><span class="hljs-comment">_In_ int af,(表示什么类型的套接字)</span><br><span class="hljs-comment">_In_ int type,(数据流)</span><br><span class="hljs-comment">_In_ int protocol</span><br><span class="hljs-comment">);*/</span><br><span class="hljs-comment">//IPV4的网络套接字 AF_INET</span><br><span class="hljs-comment">//IPV6的网络套接字 AF_INET6</span><br>SOCKET _sock =  <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, IPPROTO_TCP);<br><span class="hljs-type">char</span> msgBuf[] = <span class="hljs-string">&quot;Hello, I&#x27;m Server.\n&quot;</span>;<br><span class="hljs-comment">//2、bind 绑定用于接收客户端链接的网络端口</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">bind(</span><br><span class="hljs-comment">_In_ SOCKET s,</span><br><span class="hljs-comment">_In_reads_bytes_(namelen) const struct sockaddr FAR * name,</span><br><span class="hljs-comment">_In_ int namelen</span><br><span class="hljs-comment">);</span><br><span class="hljs-comment">*/</span><br>sockaddr_in _sin = &#123;&#125;;<br>_sin.sin_family = AF_INET;<span class="hljs-comment">//ipv4</span><br>_sin.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">4567</span>);<span class="hljs-comment">//端口号 由于主机和网络的数据类型不同 因此需要进行转换 使用 host to net unsigned short</span><br>_sin.sin_addr.S_un.S_addr = INADDR_ANY;<span class="hljs-comment">//inet_addr(&quot;127.0.0.1&quot;);//服务器的ip地址 INADDR_ANY本机所有的Ip地址都可以访问 一般这样</span><br><span class="hljs-comment">//有可能绑定失败</span><br><span class="hljs-keyword">if</span> (SOCKET_ERROR == <span class="hljs-built_in">bind</span>(_sock, (sockaddr*)&amp;_sin, <span class="hljs-built_in">sizeof</span>(_sin))) <br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;错误，绑定网络端口失败...\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;绑定端口成功...\n&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//3、listen 监听网络端口</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">listen(</span><br><span class="hljs-comment">_In_ SOCKET s,</span><br><span class="hljs-comment">_In_ int backlog</span><br><span class="hljs-comment">);*/</span><br><span class="hljs-keyword">if</span> (SOCKET_ERROR == <span class="hljs-built_in">listen</span>(_sock, <span class="hljs-number">5</span>))<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;错误，监听网络端口失败...\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;监听网络端口成功...\n&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//4、accept 等待接收客户端链接</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">accept(</span><br><span class="hljs-comment">_In_ SOCKET s,</span><br><span class="hljs-comment">_Out_writes_bytes_opt_(*addrlen) struct sockaddr FAR * addr,</span><br><span class="hljs-comment">_Inout_opt_ int FAR * addrlen</span><br><span class="hljs-comment">);*/</span><br>sockaddr_in clientAddr = &#123;&#125;;<span class="hljs-comment">//客户端地址</span><br><span class="hljs-type">int</span> nAddrLen = <span class="hljs-built_in">sizeof</span>(sockaddr_in);<span class="hljs-comment">//地址长度</span><br>SOCKET _cSocket = INVALID_SOCKET;<br><br>_cSocket = <span class="hljs-built_in">accept</span>(_sock, (sockaddr*)&amp;clientAddr, &amp;nAddrLen);<br><span class="hljs-keyword">if</span> (INVALID_SOCKET == _cSocket)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;错误，接收到无效客户端SOCKET...\n&quot;</span>);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;新客户端加入: socket = %d IP = %s \n&quot;</span>, _cSocket, <span class="hljs-built_in">inet_ntoa</span>(clientAddr.sin_addr));<span class="hljs-comment">//inet_ntoa转换为可读地址</span><br><span class="hljs-comment">//一直不停的收发数据</span><br><span class="hljs-comment">//char _recvBuf[128] = &#123;&#125;;//接收缓冲区</span><br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>&#123;<br><span class="hljs-comment">//使用缓冲区来接受数据</span><br><span class="hljs-type">char</span> szRecv[<span class="hljs-number">1024</span>] = &#123;&#125;;<br><span class="hljs-comment">//5 接收客户端请求数据</span><br><span class="hljs-type">int</span> nLen = <span class="hljs-built_in">recv</span>(_cSocket, (<span class="hljs-type">char</span>*)&amp;szRecv, <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br><span class="hljs-comment">//拆包 和 分包</span><br><span class="hljs-comment">/*拆包和分包的作用主要是用在服务端接受数据时一次接受数据过长 和 过短的情况*/</span><br>DataHeader* header = (DataHeader*)szRecv;<br><span class="hljs-keyword">if</span> (nLen &lt;= <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;客户端已经退出, 任务结束。\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-comment">//printf(&quot;收到命令: %d 数据长度：%d\n&quot;, header.cmd, header.dataLength);</span><br><span class="hljs-comment">/*判断所收到的数据*/</span> <span class="hljs-comment">//多客户端进行收发数据的情况下使用</span><br><span class="hljs-comment">//if (nLen &gt; sizeof(DataHeader))</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-keyword">switch</span> (header-&gt;cmd)<br>&#123;<br><span class="hljs-keyword">case</span> CMD_LOGIN:<br>&#123;<br><span class="hljs-built_in">recv</span>(_cSocket, szRecv + <span class="hljs-built_in">sizeof</span>(DataHeader), header-&gt;dataLength - <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br>Login* login = (Login*)szRecv;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;收到命令:CMD_LOGIN 数据长度：%d userName = %s passWord = %s\n&quot;</span>, login-&gt;dataLength, login-&gt;userName, login-&gt;PassWord);<br><span class="hljs-comment">//忽略判断用户名密码是否正确的过程</span><br>LoginResult ret;<br><span class="hljs-comment">//send(_cSocket, (char*)&amp;header, sizeof(DataHeader), 0);</span><br><span class="hljs-built_in">send</span>(_cSocket, (<span class="hljs-type">char</span>*)&amp;ret, <span class="hljs-built_in">sizeof</span>(LoginResult), <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> CMD_LOGINOUT:<br>&#123;<br><span class="hljs-built_in">recv</span>(_cSocket, szRecv + <span class="hljs-built_in">sizeof</span>(DataHeader), header-&gt;dataLength - <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br>LoginOut *loginout = (LoginOut*)szRecv;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;收到命令:CMD_LOGINOUT 数据长度：%d userName = %s\n&quot;</span>, loginout-&gt;dataLength, loginout-&gt;userName);<br><span class="hljs-comment">//忽略判断用户名密码是否正确的过程</span><br>LoginOutResult ret;<br><span class="hljs-comment">//send(_cSocket, (char*)&amp;header, sizeof(DataHeader), 0);</span><br><span class="hljs-built_in">send</span>(_cSocket, (<span class="hljs-type">char</span>*)&amp;ret, <span class="hljs-built_in">sizeof</span>(LoginOutResult), <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>&#123;<br>DataHeader header = &#123; <span class="hljs-number">0</span>, CMD_ERROR &#125;;<br><span class="hljs-built_in">send</span>(_cSocket, (<span class="hljs-type">char</span>*)&amp;header, <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br>&#125;<br><span class="hljs-comment">//5、send 向客户端发送一条数据</span><br><span class="hljs-comment">/*send(</span><br><span class="hljs-comment">_In_ SOCKET s,</span><br><span class="hljs-comment">_In_reads_bytes_(len) const char FAR * buf,</span><br><span class="hljs-comment">_In_ int len,</span><br><span class="hljs-comment">_In_ int flags</span><br><span class="hljs-comment">);*/</span><br><span class="hljs-comment">//char msgBuf[] = &quot;Hello, I&#x27;m Server.&quot;;</span><br><span class="hljs-comment">//+1表示将结尾符一并发送过去</span><br><span class="hljs-comment">//send(_cSocket, msgBuf, strlen(msgBuf) + 1, 0);</span><br><br><span class="hljs-comment">//6、关闭套接字closesocket</span><br><span class="hljs-built_in">closesocket</span>(_sock);<br><br><span class="hljs-comment">//---------------------------</span><br><span class="hljs-built_in">WSACleanup</span>();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;已退出，任务结束\n&quot;</span>);<br><span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="client端">client端</h3><p>client.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment">将多次收发数据修改为2次</span><br><span class="hljs-comment">2022-6-22</span><br><span class="hljs-comment">Liansixin</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> WIN32_LEAN_AND_MEAN</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _WINSOCK_DEPRECATED_NO_WARNINGS</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;WinSock2.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;iostream&quot;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">CMD</span><br>&#123;<br>CMD_LOGIN,<br>CMD_LOGIN_RESULT,<br>CMD_LOGINOUT,<br>CMD_LOGINOUT_RESULT,<br>CMD_ERROR<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DataHeader</span><br>&#123;<br><span class="hljs-type">short</span> dataLength;<span class="hljs-comment">//数据长度</span><br><span class="hljs-type">short</span> cmd;<span class="hljs-comment">//命令</span><br>&#125;;<br><span class="hljs-comment">//DataPackage</span><br><span class="hljs-comment">//包体</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Login</span> : <span class="hljs-keyword">public</span> DataHeader<br>&#123;<br><span class="hljs-comment">//DataHeader header;</span><br><span class="hljs-built_in">Login</span>()<br>&#123;<br>dataLength = <span class="hljs-built_in">sizeof</span>(Login);<br>cmd = CMD_LOGIN;<br>&#125;<br><span class="hljs-type">char</span> userName[<span class="hljs-number">32</span>];<br><span class="hljs-type">char</span> PassWord[<span class="hljs-number">32</span>];<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LoginResult</span> : <span class="hljs-keyword">public</span> DataHeader<br>&#123;<br><span class="hljs-built_in">LoginResult</span>()<br>&#123;<br>dataLength = <span class="hljs-built_in">sizeof</span>(LoginResult);<br>cmd = CMD_LOGIN_RESULT;<br>&#125;<br><span class="hljs-type">char</span> result[<span class="hljs-number">32</span>] = <span class="hljs-string">&quot;登陆成功！！&quot;</span>;<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LoginOut</span> : <span class="hljs-keyword">public</span> DataHeader<br>&#123;<br><span class="hljs-built_in">LoginOut</span>()<br>&#123;<br>dataLength = <span class="hljs-built_in">sizeof</span>(LoginOut);<br>cmd = CMD_LOGINOUT;<br>&#125;<br><span class="hljs-type">char</span> userName[<span class="hljs-number">32</span>];<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LoginOutResult</span> : <span class="hljs-keyword">public</span> DataHeader<br>&#123;<br><span class="hljs-built_in">LoginOutResult</span>()<br>&#123;<br>dataLength = <span class="hljs-built_in">sizeof</span>(LoginOutResult);<br>cmd = CMD_LOGINOUT_RESULT;<br>&#125;<br><span class="hljs-type">char</span> result[<span class="hljs-number">32</span>] = <span class="hljs-string">&quot;注销成功！！&quot;</span>;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">/*启动Windows socket 2.x环境*/</span><br><span class="hljs-comment">//版本号</span><br>WORD ver = <span class="hljs-built_in">MAKEWORD</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br>WSADATA dat;<br><span class="hljs-comment">//socket网络编程启动函数</span><br><span class="hljs-built_in">WSAStartup</span>(ver, &amp;dat);<br><span class="hljs-comment">//---------------------------</span><br><span class="hljs-comment">//用Socket API建立简易TCP客户端</span><br><span class="hljs-comment">//1、建立一个socket</span><br>SOCKET _sock = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (INVALID_SOCKET == _sock)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;错误，建立Socket失败...\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;建立socket成功...\n&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//2、链接服务器 connect</span><br>sockaddr_in _sin = &#123;&#125;;<span class="hljs-comment">//将结构体初始化</span><br>_sin.sin_family = AF_INET;<span class="hljs-comment">//ipv4</span><br>_sin.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">4567</span>);<span class="hljs-comment">//将网络转换为成无符号类型</span><br>_sin.sin_addr.S_un.S_addr = <span class="hljs-built_in">inet_addr</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>);<br><span class="hljs-type">int</span> ret = <span class="hljs-built_in">connect</span>(_sock, (sockaddr*)&amp;_sin, <span class="hljs-built_in">sizeof</span>(sockaddr_in)); <span class="hljs-comment">//使用sizeof(sockaddr_in)类型更安全</span><br><span class="hljs-keyword">if</span> (SOCKET_ERROR == ret)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;错误，链接服务器失败...\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;链接服务器成功...\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>&#123;<br><span class="hljs-comment">//3 输入请求命令</span><br><span class="hljs-type">char</span> cmdBuf[<span class="hljs-number">128</span>] = &#123;&#125;;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, cmdBuf);<br><br><span class="hljs-comment">//4 处理请求命令</span><br><span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == <span class="hljs-built_in">strcmp</span>(cmdBuf, <span class="hljs-string">&quot;exit&quot;</span>))<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;收到exit命令，任务结束\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == <span class="hljs-built_in">strcmp</span>(cmdBuf, <span class="hljs-string">&quot;login&quot;</span>))<br>&#123;<br><span class="hljs-comment">// 当创建Login这种类型时就已经实例化了cmd等信息</span><br>Login login;<br><span class="hljs-built_in">strcpy</span>(login.userName, <span class="hljs-string">&quot;lsx&quot;</span>);<br><span class="hljs-built_in">strcpy</span>(login.PassWord, <span class="hljs-string">&quot;lsxyyds&quot;</span>);<br><span class="hljs-comment">//DataHeader dh = &#123;sizeof(login), CMD_LOGIN&#125;;</span><br><span class="hljs-comment">//login.userName = &quot;lsx&quot;;</span><br><span class="hljs-comment">//login.PassWord = &quot;lsxyyds&quot;;</span><br><span class="hljs-comment">//5 向服务器发送请求命令</span><br><span class="hljs-comment">//send(_sock, (const char*)&amp;dh, sizeof(dh), 0);</span><br><span class="hljs-built_in">send</span>(_sock, (<span class="hljs-type">const</span> <span class="hljs-type">char</span>*)&amp;login, <span class="hljs-built_in">sizeof</span>(login), <span class="hljs-number">0</span>);<br><span class="hljs-comment">//接收服务器返回的数据</span><br><span class="hljs-comment">//DataHeader retHeader = &#123;&#125;;</span><br>LoginResult loginRet;<br><span class="hljs-comment">//recv(_sock, (char*)&amp;retHeader, sizeof(retHeader), 0);</span><br><span class="hljs-built_in">recv</span>(_sock, (<span class="hljs-type">char</span>*)&amp;loginRet, <span class="hljs-built_in">sizeof</span>(loginRet), <span class="hljs-number">0</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;LoginResult: %s\n&quot;</span>, loginRet.result);<br><br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == <span class="hljs-built_in">strcmp</span>(cmdBuf, <span class="hljs-string">&quot;logout&quot;</span>))<br>&#123;<br>LoginOut logout;<br><span class="hljs-built_in">strcpy</span>(logout.userName, <span class="hljs-string">&quot;lsx&quot;</span>);<br><span class="hljs-comment">//DataHeader dh = &#123;sizeof(logout), CMD_LOGINOUT &#125;;</span><br><span class="hljs-comment">//5 向服务器发送请求命令</span><br><span class="hljs-comment">//send(_sock, (const char*)&amp;dh, sizeof(dh), 0);</span><br><span class="hljs-built_in">send</span>(_sock, (<span class="hljs-type">const</span> <span class="hljs-type">char</span>*)&amp;logout, <span class="hljs-built_in">sizeof</span>(logout), <span class="hljs-number">0</span>);<br><span class="hljs-comment">//接收服务器返回的数据</span><br><span class="hljs-comment">//DataHeader retHeader = &#123;&#125;;</span><br>LoginOutResult loginoutRet;<br><span class="hljs-comment">//recv(_sock, (char*)&amp;retHeader, sizeof(retHeader), 0);</span><br><span class="hljs-built_in">recv</span>(_sock, (<span class="hljs-type">char</span>*)&amp;loginoutRet, <span class="hljs-built_in">sizeof</span>(loginoutRet), <span class="hljs-number">0</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;LogoutResult: %s\n&quot;</span>, loginoutRet.result);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;不支持的命令，请重新输入。\n&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//7 关闭套节字closesocket</span><br><span class="hljs-built_in">closesocket</span>(_sock);<br><span class="hljs-comment">//---------------------------</span><br><span class="hljs-built_in">WSACleanup</span>();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;已退出.\n&quot;</span>);<br><span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="成果展示">成果展示</h3><p><img src="/images/2022-6-22-0000123.png" alt="upload successful"></p><p>server.exe体验：<a href="/download/q0005.exe">点我下载</a></p><p>client.exe体验：<a href="/download/q0006.exe">点我下载</a></p>]]></content>
      
      
      <categories>
          
          <category> 从零开始写一个聊天室系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++项目 </tag>
            
            <tag> 局域网聊天室 </tag>
            
            <tag> socket编程 </tag>
            
            <tag> 局域网服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【c++项目】从零开始写一个局域网聊天室02：结构体类型数据传输</title>
      <link href="/2022/06/22/%E3%80%90c-%E9%A1%B9%E7%9B%AE%E3%80%91%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%86%99%E4%B8%80%E4%B8%AA%E5%B1%80%E5%9F%9F%E7%BD%91%E8%81%8A%E5%A4%A9%E5%AE%A402%EF%BC%9A%E7%BB%93%E6%9E%84%E4%BD%93%E7%B1%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/"/>
      <url>/2022/06/22/%E3%80%90c-%E9%A1%B9%E7%9B%AE%E3%80%91%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%86%99%E4%B8%80%E4%B8%AA%E5%B1%80%E5%9F%9F%E7%BD%91%E8%81%8A%E5%A4%A9%E5%AE%A402%EF%BC%9A%E7%BB%93%E6%9E%84%E4%BD%93%E7%B1%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/</url>
      
        <content type="html"><![CDATA[<h2 id="【c-项目】从零开始写一个局域网聊天室02：结构体类型数据传输">【c++项目】从零开始写一个局域网聊天室02：结构体类型数据传输</h2><p>详细的过程我都以注释的形式写在代码里，这里就不啰嗦了。</p><h3 id="server端">server端</h3><p>server.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment">2022-6-22</span><br><span class="hljs-comment">author:连思鑫</span><br><span class="hljs-comment">结构体类型数据传输server端</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> WIN32_LEAN_AND_MEAN</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _WINSOCK_DEPRECATED_NO_WARNINGS</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;WinSock2.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;iostream&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">/*使用报文的方式进行传输*/</span><br><span class="hljs-comment">//数据头</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">CMD</span><br>&#123;<br>CMD_LOGIN, <br>CMD_LOGINOUT,<br>CMD_ERROR<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DataHeader</span><br>&#123;<br><span class="hljs-type">short</span> dataLength;<span class="hljs-comment">//数据长度</span><br><span class="hljs-type">short</span> cmd;<span class="hljs-comment">//命令</span><br>&#125;;<br><span class="hljs-comment">//DataPackage</span><br><span class="hljs-comment">//包体</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Login</span> <br>&#123;<br><span class="hljs-type">char</span> userName[<span class="hljs-number">32</span>];<br><span class="hljs-type">char</span> PassWord[<span class="hljs-number">32</span>];<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LoginResult</span><br>&#123;<br><span class="hljs-type">char</span> result[<span class="hljs-number">32</span>];<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LoginOut</span><br>&#123;<br><span class="hljs-type">char</span> userName[<span class="hljs-number">32</span>];<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LoginOutResult</span><br>&#123;<br><span class="hljs-type">char</span> result[<span class="hljs-number">32</span>];<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">/*启动Windows socket 2.x环境*/</span><br><span class="hljs-comment">//版本号</span><br>WORD ver = <span class="hljs-built_in">MAKEWORD</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br>WSADATA dat;<br><span class="hljs-comment">//socket网络编程启动函数</span><br><span class="hljs-built_in">WSAStartup</span>(ver, &amp;dat);<br><span class="hljs-comment">//---------------------------</span><br><span class="hljs-comment">//--用Socket API建立简易TCP服务端</span><br><span class="hljs-comment">//1、建立一个socket  套接字 （windows） linux上指的是指针</span><br><span class="hljs-comment">/*socket(</span><br><span class="hljs-comment">_In_ int af,(表示什么类型的套接字)</span><br><span class="hljs-comment">_In_ int type,(数据流)</span><br><span class="hljs-comment">_In_ int protocol</span><br><span class="hljs-comment">);*/</span><br><span class="hljs-comment">//IPV4的网络套接字 AF_INET</span><br><span class="hljs-comment">//IPV6的网络套接字 AF_INET6</span><br>SOCKET _sock =  <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, IPPROTO_TCP);<br><span class="hljs-type">char</span> msgBuf[] = <span class="hljs-string">&quot;Hello, I&#x27;m Server.&quot;</span>;<br><span class="hljs-comment">//2、bind 绑定用于接收客户端链接的网络端口</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">bind(</span><br><span class="hljs-comment">_In_ SOCKET s,</span><br><span class="hljs-comment">_In_reads_bytes_(namelen) const struct sockaddr FAR * name,</span><br><span class="hljs-comment">_In_ int namelen</span><br><span class="hljs-comment">);</span><br><span class="hljs-comment">*/</span><br>sockaddr_in _sin = &#123;&#125;;<br>_sin.sin_family = AF_INET;<span class="hljs-comment">//ipv4</span><br>_sin.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">4567</span>);<span class="hljs-comment">//端口号 由于主机和网络的数据类型不同 因此需要进行转换 使用 host to net unsigned short</span><br>_sin.sin_addr.S_un.S_addr = INADDR_ANY;<span class="hljs-comment">//inet_addr(&quot;127.0.0.1&quot;);//服务器的ip地址 INADDR_ANY本机所有的Ip地址都可以访问 一般这样</span><br><span class="hljs-comment">//有可能绑定失败</span><br><span class="hljs-keyword">if</span> (SOCKET_ERROR == <span class="hljs-built_in">bind</span>(_sock, (sockaddr*)&amp;_sin, <span class="hljs-built_in">sizeof</span>(_sin))) <br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;错误，绑定网络端口失败...\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;绑定端口成功...\n&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//3、listen 监听网络端口</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">listen(</span><br><span class="hljs-comment">_In_ SOCKET s,</span><br><span class="hljs-comment">_In_ int backlog</span><br><span class="hljs-comment">);*/</span><br><span class="hljs-keyword">if</span> (SOCKET_ERROR == <span class="hljs-built_in">listen</span>(_sock, <span class="hljs-number">5</span>))<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;错误，监听网络端口失败...\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;监听网络端口成功...\n&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//4、accept 等待接收客户端链接</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">accept(</span><br><span class="hljs-comment">_In_ SOCKET s,</span><br><span class="hljs-comment">_Out_writes_bytes_opt_(*addrlen) struct sockaddr FAR * addr,</span><br><span class="hljs-comment">_Inout_opt_ int FAR * addrlen</span><br><span class="hljs-comment">);*/</span><br>sockaddr_in clientAddr = &#123;&#125;;<span class="hljs-comment">//客户端地址</span><br><span class="hljs-type">int</span> nAddrLen = <span class="hljs-built_in">sizeof</span>(sockaddr_in);<span class="hljs-comment">//地址长度</span><br>SOCKET _cSocket = INVALID_SOCKET;<br><br>_cSocket = <span class="hljs-built_in">accept</span>(_sock, (sockaddr*)&amp;clientAddr, &amp;nAddrLen);<br><span class="hljs-keyword">if</span> (INVALID_SOCKET == _cSocket)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;错误，接收到无效客户端SOCKET...\n&quot;</span>);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;新客户端加入: socket = %d IP = %s \n&quot;</span>, _cSocket, <span class="hljs-built_in">inet_ntoa</span>(clientAddr.sin_addr));<span class="hljs-comment">//inet_ntoa转换为可读地址</span><br><span class="hljs-comment">//一直不停的收发数据</span><br><span class="hljs-comment">//char _recvBuf[128] = &#123;&#125;;//接收缓冲区</span><br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>&#123;<br><span class="hljs-comment">//使用header来接受客户端传过来的命令数据 通过命令判断客户端的需求</span><br>DataHeader header = &#123;&#125;;<br><span class="hljs-comment">//5 接收客户端请求数据</span><br><span class="hljs-type">int</span> nLen = <span class="hljs-built_in">recv</span>(_cSocket, (<span class="hljs-type">char</span>*)&amp;header, <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (nLen &lt;= <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;客户端已经退出, 任务结束。&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;收到命令: %d 数据长度：%d\n&quot;</span>, header.cmd, header.dataLength);<br><span class="hljs-keyword">switch</span> (header.cmd)<br>&#123;<br><span class="hljs-keyword">case</span> CMD_LOGIN:<br>&#123;<br>Login login = &#123;&#125;;<br><span class="hljs-built_in">recv</span>(_cSocket, (<span class="hljs-type">char</span>*)&amp;login, <span class="hljs-built_in">sizeof</span>(login), <span class="hljs-number">0</span>);<br><span class="hljs-comment">//忽略判断用户名密码是否正确的过程</span><br>LoginResult ret = &#123; <span class="hljs-string">&quot;登录成功！！！&quot;</span>&#125;;<br><span class="hljs-built_in">send</span>(_cSocket, (<span class="hljs-type">char</span>*)&amp;header, <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br><span class="hljs-built_in">send</span>(_cSocket, (<span class="hljs-type">char</span>*)&amp;ret, <span class="hljs-built_in">sizeof</span>(LoginResult), <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> CMD_LOGINOUT:<br>&#123;<br>LoginOut loginout = &#123;&#125;;<br><span class="hljs-built_in">recv</span>(_cSocket, (<span class="hljs-type">char</span>*)&amp;loginout, <span class="hljs-built_in">sizeof</span>(LoginOut), <span class="hljs-number">0</span>);<br><span class="hljs-comment">//忽略判断用户名密码是否正确的过程</span><br>LoginOutResult ret = &#123; <span class="hljs-string">&quot;注销成功！！&quot;</span>&#125;;<br><span class="hljs-built_in">send</span>(_cSocket, (<span class="hljs-type">char</span>*)&amp;header, <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br><span class="hljs-built_in">send</span>(_cSocket, (<span class="hljs-type">char</span>*)&amp;ret, <span class="hljs-built_in">sizeof</span>(LoginOutResult), <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>header.cmd = CMD_ERROR;<br>header.dataLength = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">send</span>(_cSocket, (<span class="hljs-type">char</span>*)&amp;header, <span class="hljs-built_in">sizeof</span>(DataHeader), <span class="hljs-number">0</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br>&#125;<br><span class="hljs-comment">//5、send 向客户端发送一条数据</span><br><span class="hljs-comment">/*send(</span><br><span class="hljs-comment">_In_ SOCKET s,</span><br><span class="hljs-comment">_In_reads_bytes_(len) const char FAR * buf,</span><br><span class="hljs-comment">_In_ int len,</span><br><span class="hljs-comment">_In_ int flags</span><br><span class="hljs-comment">);*/</span><br><span class="hljs-comment">//char msgBuf[] = &quot;Hello, I&#x27;m Server.&quot;;</span><br><span class="hljs-comment">//+1表示将结尾符一并发送过去</span><br><span class="hljs-comment">//send(_cSocket, msgBuf, strlen(msgBuf) + 1, 0);</span><br><br><span class="hljs-comment">//6、关闭套接字closesocket</span><br><span class="hljs-built_in">closesocket</span>(_sock);<br><br><span class="hljs-comment">//---------------------------</span><br><span class="hljs-built_in">WSACleanup</span>();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;已退出，任务结束&quot;</span>);<br><span class="hljs-built_in">getchar</span>();<br>cout &lt;&lt; <span class="hljs-string">&quot;hello...&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="client端">client端</h3><p>client.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment">2022-6-22</span><br><span class="hljs-comment">author:连思鑫</span><br><span class="hljs-comment">结构体类型数据传输client端</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> WIN32_LEAN_AND_MEAN</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _WINSOCK_DEPRECATED_NO_WARNINGS</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;WinSock2.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">CMD</span><br>&#123;<br>CMD_LOGIN,<br>CMD_LOGINOUT,<br>CMD_ERROR<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DataHeader</span><br>&#123;<br><span class="hljs-type">short</span> dataLength;<span class="hljs-comment">//数据长度</span><br><span class="hljs-type">short</span> cmd;<span class="hljs-comment">//命令</span><br>&#125;;<br><span class="hljs-comment">//DataPackage</span><br><span class="hljs-comment">//包体</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Login</span><br>&#123;<br><span class="hljs-type">char</span> userName[<span class="hljs-number">32</span>];<br><span class="hljs-type">char</span> PassWord[<span class="hljs-number">32</span>];<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LoginResult</span><br>&#123;<br><span class="hljs-type">char</span> result[<span class="hljs-number">32</span>];<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LoginOut</span><br>&#123;<br><span class="hljs-type">char</span> userName[<span class="hljs-number">32</span>];<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LoginOutResult</span><br>&#123;<br><span class="hljs-type">char</span> result[<span class="hljs-number">32</span>];<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">/*启动Windows socket 2.x环境*/</span><br><span class="hljs-comment">//版本号</span><br>WORD ver = <span class="hljs-built_in">MAKEWORD</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br>WSADATA dat;<br><span class="hljs-comment">//socket网络编程启动函数</span><br><span class="hljs-built_in">WSAStartup</span>(ver, &amp;dat);<br><span class="hljs-comment">//---------------------------</span><br><span class="hljs-comment">//用Socket API建立简易TCP客户端</span><br><span class="hljs-comment">//1、建立一个socket</span><br>SOCKET _sock = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (INVALID_SOCKET == _sock)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;错误，建立Socket失败...\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;建立socket成功...\n&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//2、链接服务器 connect</span><br>sockaddr_in _sin = &#123;&#125;;<span class="hljs-comment">//将结构体初始化</span><br>_sin.sin_family = AF_INET;<br>_sin.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">4567</span>);<span class="hljs-comment">//将网络转换为成无符号类型</span><br>_sin.sin_addr.S_un.S_addr = <span class="hljs-built_in">inet_addr</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>);<br><span class="hljs-type">int</span> ret = <span class="hljs-built_in">connect</span>(_sock, (sockaddr*)&amp;_sin, <span class="hljs-built_in">sizeof</span>(sockaddr_in)); <span class="hljs-comment">//使用sizeof(sockaddr_in)类型更安全</span><br><span class="hljs-keyword">if</span> (SOCKET_ERROR == ret)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;错误，链接服务器失败...\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;链接服务器成功...\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>&#123;<br><span class="hljs-comment">//3 输入请求命令</span><br><span class="hljs-type">char</span> cmdBuf[<span class="hljs-number">128</span>] = &#123;&#125;;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, cmdBuf);<br><br><span class="hljs-comment">//4 处理请求命令</span><br><span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == <span class="hljs-built_in">strcmp</span>(cmdBuf, <span class="hljs-string">&quot;exit&quot;</span>))<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;收到exit命令，任务结束&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == <span class="hljs-built_in">strcmp</span>(cmdBuf, <span class="hljs-string">&quot;login&quot;</span>))<br>&#123;<br>Login login = &#123; <span class="hljs-string">&quot;lsx&quot;</span>, <span class="hljs-string">&quot;lsxyyds&quot;</span> &#125;;<br>DataHeader dh = &#123;<span class="hljs-built_in">sizeof</span>(login), CMD_LOGIN&#125;;<br><span class="hljs-comment">//login.userName = &quot;lsx&quot;;</span><br><span class="hljs-comment">//login.PassWord = &quot;lsxyyds&quot;;</span><br><span class="hljs-comment">//5 向服务器发送请求命令</span><br><span class="hljs-built_in">send</span>(_sock, (<span class="hljs-type">const</span> <span class="hljs-type">char</span>*)&amp;dh, <span class="hljs-built_in">sizeof</span>(dh), <span class="hljs-number">0</span>);<br><span class="hljs-built_in">send</span>(_sock, (<span class="hljs-type">const</span> <span class="hljs-type">char</span>*)&amp;login, <span class="hljs-built_in">sizeof</span>(login), <span class="hljs-number">0</span>);<br><span class="hljs-comment">//接收服务器返回的数据</span><br>DataHeader retHeader = &#123;&#125;;<br>LoginResult loginRet = &#123;&#125;;<br><span class="hljs-built_in">recv</span>(_sock, (<span class="hljs-type">char</span>*)&amp;retHeader, <span class="hljs-built_in">sizeof</span>(retHeader), <span class="hljs-number">0</span>);<br><span class="hljs-built_in">recv</span>(_sock, (<span class="hljs-type">char</span>*)&amp;loginRet, <span class="hljs-built_in">sizeof</span>(loginRet), <span class="hljs-number">0</span>);<br><span class="hljs-comment">//printf(&quot;LoginResult: %s&quot;, loginRet.result);</span><br>cout &lt;&lt; <span class="hljs-string">&quot;LoginResult:&quot;</span> &lt;&lt; loginRet.result &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == <span class="hljs-built_in">strcmp</span>(cmdBuf, <span class="hljs-string">&quot;logout&quot;</span>))<br>&#123;<br>LoginOut logout = &#123;<span class="hljs-string">&quot;lsx&quot;</span>&#125;;<br>DataHeader dh = &#123;<span class="hljs-built_in">sizeof</span>(logout), CMD_LOGINOUT &#125;;<br><span class="hljs-comment">//5 向服务器发送请求命令</span><br><span class="hljs-built_in">send</span>(_sock, (<span class="hljs-type">const</span> <span class="hljs-type">char</span>*)&amp;dh, <span class="hljs-built_in">sizeof</span>(dh), <span class="hljs-number">0</span>);<br><span class="hljs-built_in">send</span>(_sock, (<span class="hljs-type">const</span> <span class="hljs-type">char</span>*)&amp;logout, <span class="hljs-built_in">sizeof</span>(logout), <span class="hljs-number">0</span>);<br><span class="hljs-comment">//接收服务器返回的数据</span><br>DataHeader retHeader = &#123;&#125;;<br>LoginOutResult loginoutRet = &#123;&#125;;<br><span class="hljs-built_in">recv</span>(_sock, (<span class="hljs-type">char</span>*)&amp;retHeader, <span class="hljs-built_in">sizeof</span>(retHeader), <span class="hljs-number">0</span>);<br><span class="hljs-built_in">recv</span>(_sock, (<span class="hljs-type">char</span>*)&amp;loginoutRet, <span class="hljs-built_in">sizeof</span>(loginoutRet), <span class="hljs-number">0</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;LogoutResult:&quot;</span> &lt;&lt; loginoutRet.result &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;不支持的命令，请重新输入。\n&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//7 关闭套节字closesocket</span><br><span class="hljs-built_in">closesocket</span>(_sock);<br><br><span class="hljs-comment">//---------------------------</span><br><span class="hljs-built_in">WSACleanup</span>();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;已退出.&quot;</span>);<br><span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="成果展示">成果展示</h3><p><img src="/images/2022-6-22-0001.png" alt="upload successful"></p><p>server.exe体验：<a href="/download/q0003.exe">点我下载</a></p><p>client.exe体验：<a href="/download/q0004.exe">点我下载</a></p>]]></content>
      
      
      <categories>
          
          <category> 从零开始写一个聊天室系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++项目 </tag>
            
            <tag> 局域网聊天室 </tag>
            
            <tag> socket编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【c++项目】从零开始写一个局域网聊天室01：简单数据网络传输</title>
      <link href="/2022/06/21/%E3%80%90c-%E9%A1%B9%E7%9B%AE%E3%80%91%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%86%99%E4%B8%80%E4%B8%AA%E5%B1%80%E5%9F%9F%E7%BD%91%E8%81%8A%E5%A4%A9%E5%AE%A401/"/>
      <url>/2022/06/21/%E3%80%90c-%E9%A1%B9%E7%9B%AE%E3%80%91%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%86%99%E4%B8%80%E4%B8%AA%E5%B1%80%E5%9F%9F%E7%BD%91%E8%81%8A%E5%A4%A9%E5%AE%A401/</url>
      
        <content type="html"><![CDATA[<h2 id="【c-项目】从零开始写一个局域网聊天室01：简单数据网络传输">【c++项目】从零开始写一个局域网聊天室01：简单数据网络传输</h2><p>详细的过程我都以注释的形式写在代码里，这里就不啰嗦了。</p><h3 id="server端">server端</h3><p>server.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">define</span> WIN32_LEAN_AND_MEAN</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _WINSOCK_DEPRECATED_NO_WARNINGS</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;WinSock2.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;iostream&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">//加入windows的静态链接库--在windows里面支持这种写法</span><br><span class="hljs-comment">//最好还是在属性设置中去加入ws2_32.lib</span><br><span class="hljs-comment">//#pragma comment(lib, &quot;ws2_32.lib&quot;)</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">/*启动Windows socket 2.x环境*/</span><br><span class="hljs-comment">//版本号</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">socket编程中：</span><br><span class="hljs-comment">声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。</span><br><span class="hljs-comment">不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。2.0版有良好的向</span><br><span class="hljs-comment">后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。</span><br><span class="hljs-comment">此外winsock 2.0支持异步 1.1不支持异步.</span><br><span class="hljs-comment">*/</span><br>WORD ver = <span class="hljs-built_in">MAKEWORD</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br><span class="hljs-comment">/*WSADATA，一种数据结构。这个结构被用来存储被WSAStartup函数调用后返回的Windows Sockets数据。</span><br><span class="hljs-comment">它包含Winsock.dll执行的数据。*/</span><br>WSADATA dat;<br><span class="hljs-comment">//socket网络编程启动函数 启动服务器</span><br><span class="hljs-built_in">WSAStartup</span>(ver, &amp;dat);<br><span class="hljs-comment">//---------------------------</span><br><span class="hljs-comment">//--用Socket API建立简易TCP服务端</span><br><span class="hljs-comment">//1、建立一个socket  套接字 （windows） linux上指的是指针</span><br><span class="hljs-comment">/*socket(</span><br><span class="hljs-comment">_In_ int af,(表示什么类型的套接字)</span><br><span class="hljs-comment">_In_ int type,(数据流)</span><br><span class="hljs-comment">_In_ int protocol</span><br><span class="hljs-comment">);*/</span><br><span class="hljs-comment">//IPV4的网络套接字 AF_INET</span><br><span class="hljs-comment">//IPV6的网络套接字 AF_INET6</span><br><span class="hljs-comment">//SOCKET _sock =  socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br>SOCKET _sock =  <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br><span class="hljs-comment">//IPPROTO_TCP 使用TCP协议,如果置0它会自己选择。</span><br><br><span class="hljs-comment">//2、bind 绑定用于接收客户端链接的网络端口</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">bind(</span><br><span class="hljs-comment">_In_ SOCKET s,</span><br><span class="hljs-comment">_In_reads_bytes_(namelen) const struct sockaddr FAR * name,</span><br><span class="hljs-comment">_In_ int namelen</span><br><span class="hljs-comment">);</span><br><span class="hljs-comment">*/</span><br>sockaddr_in _sin = &#123;&#125;;<br>_sin.sin_family = AF_INET;<span class="hljs-comment">//ipv4</span><br>_sin.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">4567</span>);<span class="hljs-comment">//端口号 由于主机和网络的数据类型不同 因此需要进行转换 使用 host to net unsigned short</span><br>_sin.sin_addr.S_un.S_addr = INADDR_ANY;<span class="hljs-comment">//inet_addr(&quot;127.0.0.1&quot;);//服务器的ip地址 INADDR_ANY本机所有的Ip地址都可以访问 一般这样</span><br><span class="hljs-comment">//有可能绑定失败</span><br><span class="hljs-keyword">if</span> (SOCKET_ERROR == <span class="hljs-built_in">bind</span>(_sock, (sockaddr*)&amp;_sin, <span class="hljs-built_in">sizeof</span>(_sin))) <br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;错误，绑定网络端口失败...\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;绑定端口成功...\n&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//3、listen 监听网络端口</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">listen(</span><br><span class="hljs-comment">_In_ SOCKET s,</span><br><span class="hljs-comment">_In_ int backlog</span><br><span class="hljs-comment">);*/</span><br><span class="hljs-comment">//5 代表的是接口最多5个客户端可与服务器进行连接</span><br><span class="hljs-keyword">if</span> (SOCKET_ERROR == <span class="hljs-built_in">listen</span>(_sock, <span class="hljs-number">5</span>))<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;错误，监听网络端口失败...\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;监听网络端口成功...\n&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//4、accept 等待接收客户端链接</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">accept(</span><br><span class="hljs-comment">_In_ SOCKET s,</span><br><span class="hljs-comment">_Out_writes_bytes_opt_(*addrlen) struct sockaddr FAR * addr,</span><br><span class="hljs-comment">_Inout_opt_ int FAR * addrlen</span><br><span class="hljs-comment">);*/</span><br>sockaddr_in clientAddr = &#123;&#125;;<span class="hljs-comment">//客户端地址</span><br><span class="hljs-type">int</span> nAddrLen = <span class="hljs-built_in">sizeof</span>(sockaddr_in);<span class="hljs-comment">//地址长度</span><br>SOCKET _cSocket = INVALID_SOCKET;<br><span class="hljs-comment">//char msgBuf[] = &quot;Hello, I&#x27;m Server.&quot;;</span><br>_cSocket = <span class="hljs-built_in">accept</span>(_sock, (sockaddr*)&amp;clientAddr, &amp;nAddrLen);<br><span class="hljs-keyword">if</span> (INVALID_SOCKET == _cSocket)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;错误，接收到无效客户端SOCKET...\n&quot;</span>);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;新客户端加入: socket = %d IP = %s \n&quot;</span>, _cSocket, <span class="hljs-built_in">inet_ntoa</span>(clientAddr.sin_addr));<span class="hljs-comment">//inet_ntoa转换为可读地址</span><br><span class="hljs-comment">//一直不停的收发数据</span><br><span class="hljs-type">char</span> _recvBuf[<span class="hljs-number">128</span>] = &#123;&#125;;<span class="hljs-comment">//接收缓冲区</span><br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>&#123;<br><span class="hljs-comment">//5 接收客户端请求数据</span><br><span class="hljs-comment">/*recv(</span><br><span class="hljs-comment">_In_ SOCKET s,</span><br><span class="hljs-comment">_Out_writes_bytes_to_(len, return) __out_data_source(NETWORK) char FAR * buf,</span><br><span class="hljs-comment">_In_ int len,</span><br><span class="hljs-comment">_In_ int flags</span><br><span class="hljs-comment">);*/</span><br><span class="hljs-comment">//以128长度来接受</span><br><span class="hljs-type">int</span> nLen = <span class="hljs-built_in">recv</span>(_cSocket, _recvBuf, <span class="hljs-number">128</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (nLen &lt;= <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;客户端已经退出, 任务结束。&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;收到命令: %s\n&quot;</span>, _recvBuf);<br><span class="hljs-comment">//6 处理请求</span><br><span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == <span class="hljs-built_in">strcmp</span>(_recvBuf, <span class="hljs-string">&quot;getname&quot;</span>))<br>&#123;<br><span class="hljs-comment">//7 send 向客户端发送一条数据</span><br><span class="hljs-type">char</span> msgBuf[] = <span class="hljs-string">&quot;无所不能的小鑫！&quot;</span>;<br><span class="hljs-comment">//加1的目的是为了将字符串的末尾一并加入 方便客户端进行字符串长度的计算</span><br><span class="hljs-built_in">send</span>(_cSocket, msgBuf, <span class="hljs-built_in">strlen</span>(msgBuf) + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-number">0</span> == <span class="hljs-built_in">strcmp</span>(_recvBuf, <span class="hljs-string">&quot;getage&quot;</span>))<br>&#123;<br><span class="hljs-comment">//7 send 向客户端发送一条数据</span><br><span class="hljs-type">char</span> msgBuf[] = <span class="hljs-string">&quot;23&quot;</span>;<br><span class="hljs-built_in">send</span>(_cSocket, msgBuf, <span class="hljs-built_in">strlen</span>(msgBuf) + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//7 send 向客户端发送一条数据</span><br><span class="hljs-type">char</span> msgBuf[] = <span class="hljs-string">&quot;你个傻狗！！输入错了&quot;</span>;<br><span class="hljs-built_in">send</span>(_cSocket, msgBuf, <span class="hljs-built_in">strlen</span>(msgBuf) + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>&#125;<br>&#125;<br><br><br><span class="hljs-comment">//5、send 向客户端发送一条数据</span><br><span class="hljs-comment">/*send(</span><br><span class="hljs-comment">_In_ SOCKET s,</span><br><span class="hljs-comment">_In_reads_bytes_(len) const char FAR * buf,</span><br><span class="hljs-comment">_In_ int len,</span><br><span class="hljs-comment">_In_ int flags</span><br><span class="hljs-comment">);*/</span><br><span class="hljs-comment">//char msgBuf[] = &quot;Hello, I&#x27;m Server.&quot;;</span><br><span class="hljs-comment">//+1表示将结尾符一并发送过去</span><br><span class="hljs-comment">//send(_cSocket, msgBuf, strlen(msgBuf) + 1, 0);</span><br><br><span class="hljs-comment">//6、关闭套接字closesocket</span><br><span class="hljs-built_in">closesocket</span>(_sock);<br><br><span class="hljs-comment">//---------------------------</span><br><span class="hljs-built_in">WSACleanup</span>();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;已退出，任务结束&quot;</span>);<br><span class="hljs-built_in">getchar</span>();<br>cout &lt;&lt; <span class="hljs-string">&quot;hello...&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="client端">client端</h3><p>client.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">define</span> WIN32_LEAN_AND_MEAN</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _WINSOCK_DEPRECATED_NO_WARNINGS</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;WinSock2.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;iostream&quot;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">//加入windows的静态链接库--在windows里面支持这种写法</span><br><span class="hljs-comment">//最好还是在属性设置中去加入ws2_32.lib</span><br><span class="hljs-comment">//#pragma comment(lib, &quot;ws2_32.lib&quot;)</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">/*启动Windows socket 2.x环境*/</span><br><span class="hljs-comment">//版本号</span><br>WORD ver = <span class="hljs-built_in">MAKEWORD</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br>WSADATA dat;<br><span class="hljs-comment">//socket网络编程启动函数</span><br><span class="hljs-built_in">WSAStartup</span>(ver, &amp;dat);<br><span class="hljs-comment">//---------------------------</span><br><span class="hljs-comment">//用Socket API建立简易TCP客户端</span><br><span class="hljs-comment">//1、建立一个socket</span><br>SOCKET _sock = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (INVALID_SOCKET == _sock)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;错误，建立Socket失败...\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;建立socket成功...\n&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//2、链接服务器 connect</span><br>sockaddr_in _sin = &#123;&#125;;<span class="hljs-comment">//将结构体初始化</span><br>_sin.sin_family = AF_INET;<br>_sin.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">4567</span>);<span class="hljs-comment">//将网络转换为成无符号类型</span><br>_sin.sin_addr.S_un.S_addr = <span class="hljs-built_in">inet_addr</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>);<br><span class="hljs-type">int</span> ret = <span class="hljs-built_in">connect</span>(_sock, (sockaddr*)&amp;_sin, <span class="hljs-built_in">sizeof</span>(sockaddr_in)); <span class="hljs-comment">//使用sizeof(sockaddr_in)类型更安全</span><br><span class="hljs-keyword">if</span> (SOCKET_ERROR == ret)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;错误，链接服务器失败...\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;链接服务器成功...\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>&#123;<br><span class="hljs-comment">//3 输入请求命令</span><br><span class="hljs-type">char</span> cmdBuf[<span class="hljs-number">128</span>] = &#123;&#125;;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, cmdBuf);<br><br><span class="hljs-comment">//4 处理请求命令</span><br><span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == <span class="hljs-built_in">strcmp</span>(cmdBuf, <span class="hljs-string">&quot;exit&quot;</span>))<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;收到exit命令，任务结束&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">/*send(</span><br><span class="hljs-comment">_In_ SOCKET s,</span><br><span class="hljs-comment">_In_reads_bytes_(len) const char FAR * buf,</span><br><span class="hljs-comment">_In_ int len,</span><br><span class="hljs-comment">_In_ int flags</span><br><span class="hljs-comment">);*/</span><br><span class="hljs-comment">//5 向服务器发送请求命令</span><br><span class="hljs-built_in">send</span>(_sock, cmdBuf, <span class="hljs-built_in">strlen</span>(cmdBuf) + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-comment">//6 接收服务器信息 recv</span><br><span class="hljs-type">char</span> recvBuf[<span class="hljs-number">128</span>] = &#123;&#125;;<br><span class="hljs-type">int</span> nlen = <span class="hljs-built_in">recv</span>(_sock, recvBuf, <span class="hljs-number">128</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (nlen &gt; <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;接收到数据: %s\n&quot;</span>, recvBuf);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//7 关闭套节字closesocket</span><br><span class="hljs-built_in">closesocket</span>(_sock);<br><br><span class="hljs-comment">//---------------------------</span><br><span class="hljs-built_in">WSACleanup</span>();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;已退出.&quot;</span>);<br><span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="成果展示">成果展示</h3><p><img src="/images/2022-6-21-0001.png" alt="overwrote existing file"></p><p>server.exe体验：<a href="/download/q0002.exe">点我下载</a></p><p>client.exe体验：<a href="/download/q0001.exe">点我下载</a></p>]]></content>
      
      
      <categories>
          
          <category> 从零开始写一个聊天室系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++项目 </tag>
            
            <tag> socket </tag>
            
            <tag> 局域网聊天室 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络通信基础学习笔记05: send 和 recv 函数在阻塞和非阻塞模式下的行为</title>
      <link href="/2022/06/21/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B005%EF%BC%9A-send-%E5%92%8C-recv-%E5%87%BD%E6%95%B0%E5%9C%A8%E9%98%BB%E5%A1%9E%E5%92%8C%E9%9D%9E%E9%98%BB%E5%A1%9E%E6%A8%A1%E5%BC%8F%E4%B8%8B%E7%9A%84%E8%A1%8C%E4%B8%BA/"/>
      <url>/2022/06/21/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B005%EF%BC%9A-send-%E5%92%8C-recv-%E5%87%BD%E6%95%B0%E5%9C%A8%E9%98%BB%E5%A1%9E%E5%92%8C%E9%9D%9E%E9%98%BB%E5%A1%9E%E6%A8%A1%E5%BC%8F%E4%B8%8B%E7%9A%84%E8%A1%8C%E4%B8%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="网络通信基础学习笔记05-send-和-recv-函数在阻塞和非阻塞模式下的行为">网络通信基础学习笔记05: send 和 recv 函数在阻塞和非阻塞模式下的行为</h2><h4 id="send-和-recv-函数在阻塞和非阻塞模式下的行为">send 和 recv 函数在阻塞和非阻塞模式下的行为</h4><p>send 和 recv 函数其实名不符实。</p><p>send 函数本质上并不是往网络上发送数据，而是将应用层发送缓冲区的数据拷贝到内核缓冲区（下文为了叙述方便，我们以“网卡缓冲区”代指）中去，至于什么时候数据会从网卡缓冲区中真正地发到网络中去要根据 TCP/IP 协议栈的行为来确定。</p><p>recv 函数本质上也并不是从网络上收取数据，而只是将内核缓冲区中的数据拷贝到应用程序的缓冲区中，当然拷贝完成以后会将内核缓冲区中该部分数据移除。</p><p>不同的程序进行网络通信时，发送的一方会将内核缓冲区的数据通过网络传输给接收方的内核缓冲区。在应用程序 A 与 应用程序 B 建立了 TCP 连接之后，假设应用程序 A 不断调用 send 函数，这样数据会不断拷贝至对应的内核缓冲区中，如果 B 那一端一直不调用  recv 函数，那么 B 的内核缓冲区被填满以后，A 的内核缓冲区也会被填满，此时 A 继续调用 send 函数会是什么结果呢？ 具体的结果取决于该 socket 是否是阻塞模式。我们这里先给出结论：</p><ul><li>当 socket 是阻塞模式的，继续调用 send/recv 函数会导致程序阻塞在 send/recv 调用处。</li><li>当 socket 是非阻塞模式，继续调用 send/recv 函数，send/recv 函数不会阻塞程序执行流，而是会立即出错返回，我们会得到一个相关的错误码，Linux 平台上该错误码为 EWOULDBLOCK 或 EAGAIN（这两个错误码值相同），Windows 平台上错误码为 WSAEWOULDBLOCK。</li></ul><p>我们实际来编写一下代码来验证一下以上说的两种情况。</p><h5 id="socket-阻塞模式下的-send-行为">socket 阻塞模式下的 send 行为</h5><p>服务端代码（blocking_server.cpp）如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 验证阻塞模式下send函数的行为，server端</span><br><span class="hljs-comment"> * liansixin 2022-6-21</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;arpa/inet.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//1.创建一个侦听socket</span><br>    <span class="hljs-type">int</span> listenfd = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (listenfd == <span class="hljs-number">-1</span>)<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;create listen socket error.&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//2.初始化服务器地址</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span> bindaddr;<br>    bindaddr.sin_family = AF_INET;<br>    bindaddr.sin_addr.s_addr = <span class="hljs-built_in">htonl</span>(INADDR_ANY);<br>    bindaddr.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">3000</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">bind</span>(listenfd, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;bindaddr, <span class="hljs-built_in">sizeof</span>(bindaddr)) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;bind listen socket error.&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-built_in">close</span>(listenfd);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br><span class="hljs-comment">//3.启动侦听</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">listen</span>(listenfd, SOMAXCONN) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;listen error.&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-built_in">close</span>(listenfd);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>    &#123;<br>        <span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span> clientaddr;<br>        <span class="hljs-type">socklen_t</span> clientaddrlen = <span class="hljs-built_in">sizeof</span>(clientaddr);<br><span class="hljs-comment">//4. 接受客户端连接</span><br>        <span class="hljs-type">int</span> clientfd = <span class="hljs-built_in">accept</span>(listenfd, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;clientaddr, &amp;clientaddrlen);<br>        <span class="hljs-keyword">if</span> (clientfd != <span class="hljs-number">-1</span>)<br>        &#123;         <br><span class="hljs-comment">//只接受连接，不调用recv收取任何数据</span><br>std:: cout &lt;&lt; <span class="hljs-string">&quot;accept a client connection.&quot;</span> &lt;&lt; std::endl;<br>        &#125;<br>    &#125;<br><br><span class="hljs-comment">//7.关闭侦听socket</span><br><span class="hljs-built_in">close</span>(listenfd);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>客户端代码（blocking_client.cpp）如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 验证阻塞模式下send函数的行为，client端</span><br><span class="hljs-comment"> * liansixin 2022-6-21</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;arpa/inet.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SERVER_ADDRESS <span class="hljs-string">&quot;127.0.0.1&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SERVER_PORT     3000</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SEND_DATA       <span class="hljs-string">&quot;helloworld&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//1.创建一个socket</span><br>    <span class="hljs-type">int</span> clientfd = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (clientfd == <span class="hljs-number">-1</span>)<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;create client socket error.&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-built_in">close</span>(clientfd);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//2.连接服务器</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span> serveraddr;<br>    serveraddr.sin_family = AF_INET;<br>    serveraddr.sin_addr.s_addr = <span class="hljs-built_in">inet_addr</span>(SERVER_ADDRESS);<br>    serveraddr.sin_port = <span class="hljs-built_in">htons</span>(SERVER_PORT);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">connect</span>(clientfd, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;serveraddr, <span class="hljs-built_in">sizeof</span>(serveraddr)) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;connect socket error.&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br><span class="hljs-comment">//3. 不断向服务器发送数据，或者出错退出</span><br><span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>&#123;<br><span class="hljs-type">int</span> ret = <span class="hljs-built_in">send</span>(clientfd, SEND_DATA, <span class="hljs-built_in">strlen</span>(SEND_DATA), <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (ret != <span class="hljs-built_in">strlen</span>(SEND_DATA))<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;send data error.&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">break</span>;<br>&#125; <br><span class="hljs-keyword">else</span><br>&#123;<br>count ++;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;send data successfully, count = &quot;</span> &lt;&lt; count &lt;&lt; std::endl;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//5. 关闭socket</span><br><span class="hljs-built_in">close</span>(clientfd);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 shell 中分别编译这两个 cpp 文件得到两个可执行程序 <strong>blocking_server</strong> 和 <strong>blocking_client</strong>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">g</span>++ -<span class="hljs-selector-tag">g</span> -o blocking_server blocking_server<span class="hljs-selector-class">.cpp</span><br><span class="hljs-selector-tag">g</span>++ -<span class="hljs-selector-tag">g</span> -o blocking_client blocking_client<span class="hljs-selector-class">.cpp</span><br></code></pre></td></tr></table></figure><p>我们先启动 <strong>blocking_server</strong>，然后用 gdb 启动 <strong>blocking_client</strong>，输入 <strong>run</strong> 命令让 <strong>blocking_client</strong>跑起来，<strong>blocking_client</strong> 会不断地向 <strong>blocking_server</strong> 发送&quot;<strong>helloworld</strong>&quot;字符串，每次 send 成功后，会将计数器 <strong>count</strong> 的值打印出来，计数器会不断增加，程序运行一段时间后，计数器 <strong>count</strong> 值不再增加且程序不再有输出。操作过程及输出结果如下：</p><p><strong>blocking_server</strong> 端：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs perl">[root<span class="hljs-variable">@localhost</span> testsocket]<span class="hljs-comment"># ./blocking_server </span><br><span class="hljs-keyword">accept</span> a client connection.<br></code></pre></td></tr></table></figure><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs stata">[root@localhost testsocket]# gdb blocking_client<br>GNU gdb (GDB) Red Hat Enterprise Linux 7.6.1-100.el7_4.1<br><span class="hljs-keyword">Copyright</span> (C) 2013 Free Software Foundation, Inc.<br>License GPLv3+: GNU GPL <span class="hljs-keyword">version</span> 3 or later &lt;http:<span class="hljs-comment">//gnu.org/licenses/gpl.html&gt;</span><br>This is free software: you are free to change and redistribute it.<br>There is <span class="hljs-keyword">NO</span> WARRANTY, to the extent permitted <span class="hljs-keyword">by</span> law.  <span class="hljs-keyword">Type</span> <span class="hljs-string">&quot;show copying&quot;</span><br>and <span class="hljs-string">&quot;show warranty&quot;</span> <span class="hljs-keyword">for</span> details.<br>This GDB was configured <span class="hljs-keyword">as</span> <span class="hljs-string">&quot;x86_64-redhat-linux-gnu&quot;</span>.<br><span class="hljs-keyword">For</span> bug reporting instructions, please see:<br>&lt;http:<span class="hljs-comment">//www.gnu.org/software/gdb/bugs/&gt;...</span><br>Reading symbols from /root/testsocket/blocking_client...done.<br>(gdb) <span class="hljs-keyword">run</span><br><span class="hljs-comment">//输出结果太多，省略部分...</span><br>send data successfully, <span class="hljs-keyword">count</span> = 355384<br>send data successfully, <span class="hljs-keyword">count</span> = 355385<br>send data successfully, <span class="hljs-keyword">count</span> = 355386<br>send data successfully, <span class="hljs-keyword">count</span> = 355387<br>send data successfully, <span class="hljs-keyword">count</span> = 355388<br>send data successfully, <span class="hljs-keyword">count</span> = 355389<br>send data successfully, <span class="hljs-keyword">count</span> = 355390<br></code></pre></td></tr></table></figure><p>此时程序不再有输出，说明我们的程序应该“卡在”某个地方，继续按 <strong>Ctrl + C</strong> 让 gdb 中断下来，输入 <strong>bt</strong> 命令查看此时的调用堆栈，我们发现我们的程序确实阻塞在 <strong>send</strong> 函数调用处：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">^C<br>Program received signal SIGINT, Interrupt.<br><span class="hljs-number">0x00007ffff72f130d</span> <span class="hljs-keyword">in</span> send () from /lib64/libc<span class="hljs-number">.</span>so<span class="hljs-number">.6</span><br>(gdb) <span class="hljs-keyword">bt</span><br>#<span class="hljs-number">0</span>  <span class="hljs-number">0x00007ffff72f130d</span> <span class="hljs-keyword">in</span> send () from /lib64/libc<span class="hljs-number">.</span>so<span class="hljs-number">.6</span><br>#<span class="hljs-number">1</span>  <span class="hljs-number">0x0000000000400b46</span> <span class="hljs-keyword">in</span> main (argc=<span class="hljs-number">1</span>, argv=<span class="hljs-number">0x7fffffffe598</span>) <span class="hljs-meta">at</span> blocking_client<span class="hljs-number">.</span>cpp:<span class="hljs-number">41</span><br>(gdb) <br></code></pre></td></tr></table></figure><p>上面的示例验证了如果一端一直发数据，而对端应用层一直不取数据（或收取数据的速度慢于发送速度），则很快两端的内核缓冲区很快就会被填满，导致发送端调用 send 函数被阻塞。这里说的“<strong>内核缓冲区</strong>” 其实有个专门的名字，即 TCP 窗口。也就是说 socket 阻塞模式下， send 函数在 TCP 窗口太小时的行为是阻塞当前程序执行流（即阻塞 send 函数所在的线程的执行）。</p><p>说点题外话，上面的例子，我们每次发送一个“<strong>helloworld</strong>”（10个字节），一共发了 355390 次（每次测试的结果略有不同），我们可以粗略地算出 TCP 窗口的大小大约等于 1.7 M左右 （10 * 355390 / 2）。</p><p>让我们再深入一点，我们利用 Linux tcpdump 工具来动态看一下这种情形下 TCP 窗口大小的动态变化。需要注意的是，Linux 下使用 tcpdump 这个命令需要有 root 权限。</p><p>我们开启三个 shell 窗口，在第一个窗口先启动 <strong>blocking_server</strong> 进程，在第二个窗口用 tcpdump 抓经过 TCP 端口 3000 上的数据包：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[root@localhost testsocket]# tcpdump -i <span class="hljs-keyword">any</span> -nn -S <span class="hljs-string">&#x27;tcp port 3000&#x27;</span>    <br>tcpdump: <span class="hljs-keyword">verbose</span> output suppressed, use -v <span class="hljs-keyword">or</span> -vv <span class="hljs-keyword">for</span> <span class="hljs-keyword">full</span> protocol decode<br>listening <span class="hljs-keyword">on</span> <span class="hljs-keyword">any</span>, link-<span class="hljs-keyword">type</span> LINUX_SLL (Linux cooked), capture size <span class="hljs-number">262144</span> bytes<br></code></pre></td></tr></table></figure><p>接着在第三个 shell 窗口，启动 <strong>blocking_client</strong>。当 <strong>blocking_client</strong> 进程不再输出时，我们抓包的结果如下：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><code class="hljs dns">[root@localhost testsocket]# tcpdump -i any -nn -S &#x27;tcp port <span class="hljs-number">3000</span>&#x27; <br>tcpdump: verbose output suppressed, use -v or -vv for full protocol decode<br>listening on any, link-type LINUX_SLL (Linux cooked), capture size <span class="hljs-number">262144</span> bytes<br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">35.907381</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [S], seq <span class="hljs-number">1394135076</span>, win <span class="hljs-number">43690</span>, options [mss <span class="hljs-number">65495</span>,sackOK,TS val <span class="hljs-number">78907688</span> ecr <span class="hljs-number">0</span>,nop,wscale <span class="hljs-number">7</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">20</span>:<span class="hljs-number">32</span>:<span class="hljs-number">21.261484</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [S.], seq <span class="hljs-number">1233000591</span>, ack <span class="hljs-number">1394135077</span>, win <span class="hljs-number">43690</span>, options [mss <span class="hljs-number">65495</span>,sackOK,TS val <span class="hljs-number">78907688</span> ecr <span class="hljs-number">78907688</span>,nop,wscale <span class="hljs-number">7</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">35.907441</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [.], ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78907688</span> ecr <span class="hljs-number">78907688</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">35.907615</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394135077</span>:<span class="hljs-number">1394135087</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78907688</span> ecr <span class="hljs-number">78907688</span>], length <span class="hljs-number">10</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">35.907626</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394135087</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78907688</span> ecr <span class="hljs-number">78907688</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">35.907785</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394135087</span>:<span class="hljs-number">1394135097</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78907688</span> ecr <span class="hljs-number">78907688</span>], length <span class="hljs-number">10</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">35.907793</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394135097</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78907688</span> ecr <span class="hljs-number">78907688</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">35.907809</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394135097</span>:<span class="hljs-number">1394135107</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78907688</span> ecr <span class="hljs-number">78907688</span>], length <span class="hljs-number">10</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">35.907814</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394135107</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78907688</span> ecr <span class="hljs-number">78907688</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">35.907839</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394135117</span>:<span class="hljs-number">1394135127</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78907688</span> ecr <span class="hljs-number">78907688</span>], length <span class="hljs-number">10</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">35.907853</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394135127</span>:<span class="hljs-number">1394135137</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78907688</span> ecr <span class="hljs-number">78907688</span>], length <span class="hljs-number">10</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">35.907880</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394135147</span>:<span class="hljs-number">1394135157</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78907688</span> ecr <span class="hljs-number">78907688</span>], length <span class="hljs-number">10</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">35.907896</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394135167</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78907688</span> ecr <span class="hljs-number">78907688</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">35.907920</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394135177</span>:<span class="hljs-number">1394135187</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78907688</span> ecr <span class="hljs-number">78907688</span>], length <span class="hljs-number">10</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">35.907924</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394135187</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78907688</span> ecr <span class="hljs-number">78907688</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">35.907938</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394135197</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78907688</span> ecr <span class="hljs-number">78907688</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">35.923799</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [.], seq <span class="hljs-number">1394135247</span>:<span class="hljs-number">1394157135</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78907704</span> ecr <span class="hljs-number">78907688</span>], length <span class="hljs-number">21888</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">35.923840</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394157135</span>, win <span class="hljs-number">1365</span>, options [nop,nop,TS val <span class="hljs-number">78907704</span> ecr <span class="hljs-number">78907688</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">35.923851</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394157135</span>:<span class="hljs-number">1394157137</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78907704</span> ecr <span class="hljs-number">78907704</span>], length <span class="hljs-number">2</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">35.964013</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394157137</span>, win <span class="hljs-number">1365</span>, options [nop,nop,TS val <span class="hljs-number">78907744</span> ecr <span class="hljs-number">78907704</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">35.964036</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394157137</span>:<span class="hljs-number">1394170597</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78907744</span> ecr <span class="hljs-number">78907744</span>], length <span class="hljs-number">13460</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">35.964043</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394170597</span>, win <span class="hljs-number">2388</span>, options [nop,nop,TS val <span class="hljs-number">78907744</span> ecr <span class="hljs-number">78907744</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">36.081009</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394170597</span>:<span class="hljs-number">1394170607</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78907861</span> ecr <span class="hljs-number">78907744</span>], length <span class="hljs-number">10</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52:36.121161</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394170607</span>, win <span class="hljs-number">2388</span>, options [nop,nop,TS val <span class="hljs-number">78907901</span> ecr <span class="hljs-number">78907861</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52:36.121252</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394170607</span>:<span class="hljs-number">1394188957</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78907902</span> ecr <span class="hljs-number">78907901</span>], length <span class="hljs-number">18350</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52:36.121285</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394188957</span>, win <span class="hljs-number">3411</span>, options [nop,nop,TS val <span class="hljs-number">78907902</span> ecr <span class="hljs-number">78907902</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52:36.243907</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394188957</span>:<span class="hljs-number">1394188967</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78908024</span> ecr <span class="hljs-number">78907902</span>], length <span class="hljs-number">10</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">36.284003</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394188967</span>, win <span class="hljs-number">3411</span>, options [nop,nop,TS val <span class="hljs-number">78908064</span> ecr <span class="hljs-number">78908024</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">36.284024</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394188967</span>:<span class="hljs-number">1394207257</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78908064</span> ecr <span class="hljs-number">78908064</span>], length <span class="hljs-number">18290</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">36.284034</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394207257</span>, win <span class="hljs-number">3635</span>, options [nop,nop,TS val <span class="hljs-number">78908064</span> ecr <span class="hljs-number">78908064</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">36.409664</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394207257</span>:<span class="hljs-number">1394207267</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78908190</span> ecr <span class="hljs-number">78908064</span>], length <span class="hljs-number">10</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52:36.450133</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394207267</span>, win <span class="hljs-number">3635</span>, options [nop,nop,TS val <span class="hljs-number">78908230</span> ecr <span class="hljs-number">78908190</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52:36.450187</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394207267</span>:<span class="hljs-number">1394224477</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78908231</span> ecr <span class="hljs-number">78908230</span>], length <span class="hljs-number">17210</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">36.491025</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394224477</span>, win <span class="hljs-number">3635</span>, options [nop,nop,TS val <span class="hljs-number">78908271</span> ecr <span class="hljs-number">78908231</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">36.569355</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394224477</span>:<span class="hljs-number">1394224487</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78908350</span> ecr <span class="hljs-number">78908271</span>], length <span class="hljs-number">10</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">36.609958</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394224487</span>, win <span class="hljs-number">3635</span>, options [nop,nop,TS val <span class="hljs-number">78908390</span> ecr <span class="hljs-number">78908350</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">36.609993</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394224487</span>:<span class="hljs-number">1394242657</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78908390</span> ecr <span class="hljs-number">78908390</span>], length <span class="hljs-number">18170</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52:36.650181</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394242657</span>, win <span class="hljs-number">3635</span>, options [nop,nop,TS val <span class="hljs-number">78908430</span> ecr <span class="hljs-number">78908390</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52:36.731142</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394242657</span>:<span class="hljs-number">1394242667</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78908511</span> ecr <span class="hljs-number">78908430</span>], length <span class="hljs-number">10</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">36.771958</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394242667</span>, win <span class="hljs-number">3635</span>, options [nop,nop,TS val <span class="hljs-number">78908552</span> ecr <span class="hljs-number">78908511</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">36.771979</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394242667</span>:<span class="hljs-number">1394258437</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78908552</span> ecr <span class="hljs-number">78908552</span>], length <span class="hljs-number">15770</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">36.811957</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394258437</span>, win <span class="hljs-number">3580</span>, options [nop,nop,TS val <span class="hljs-number">78908592</span> ecr <span class="hljs-number">78908552</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">36.892064</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394258437</span>:<span class="hljs-number">1394258447</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78908672</span> ecr <span class="hljs-number">78908592</span>], length <span class="hljs-number">10</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">36.932039</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394258447</span>, win <span class="hljs-number">3580</span>, options [nop,nop,TS val <span class="hljs-number">78908712</span> ecr <span class="hljs-number">78908672</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">36.932082</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394258447</span>:<span class="hljs-number">1394276017</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78908712</span> ecr <span class="hljs-number">78908712</span>], length <span class="hljs-number">17570</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">36.971983</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394276017</span>, win <span class="hljs-number">3499</span>, options [nop,nop,TS val <span class="hljs-number">78908752</span> ecr <span class="hljs-number">78908712</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">37.056904</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394276017</span>:<span class="hljs-number">1394276027</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78908837</span> ecr <span class="hljs-number">78908752</span>], length <span class="hljs-number">10</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">37.096966</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394276027</span>, win <span class="hljs-number">3499</span>, options [nop,nop,TS val <span class="hljs-number">78908877</span> ecr <span class="hljs-number">78908837</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">37.096989</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394276027</span>:<span class="hljs-number">1394291677</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78908877</span> ecr <span class="hljs-number">78908877</span>], length <span class="hljs-number">15650</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52:37.136941</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394291677</span>, win <span class="hljs-number">3425</span>, options [nop,nop,TS val <span class="hljs-number">78908917</span> ecr <span class="hljs-number">78908877</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52:37.223275</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394291677</span>:<span class="hljs-number">1394291687</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78909004</span> ecr <span class="hljs-number">78908917</span>], length <span class="hljs-number">10</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">37.263951</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394291687</span>, win <span class="hljs-number">3425</span>, options [nop,nop,TS val <span class="hljs-number">78909044</span> ecr <span class="hljs-number">78909004</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">37.263974</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394291687</span>:<span class="hljs-number">1394308477</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78909044</span> ecr <span class="hljs-number">78909044</span>], length <span class="hljs-number">16790</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">37.303956</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394308477</span>, win <span class="hljs-number">3347</span>, options [nop,nop,TS val <span class="hljs-number">78909084</span> ecr <span class="hljs-number">78909044</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">37.383620</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394308477</span>:<span class="hljs-number">1394308487</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78909164</span> ecr <span class="hljs-number">78909084</span>], length <span class="hljs-number">10</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">37.423926</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394308487</span>, win <span class="hljs-number">3347</span>, options [nop,nop,TS val <span class="hljs-number">78909204</span> ecr <span class="hljs-number">78909164</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">37.423952</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394308487</span>:<span class="hljs-number">1394326297</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78909204</span> ecr <span class="hljs-number">78909204</span>], length <span class="hljs-number">17810</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">37.463914</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394326297</span>, win <span class="hljs-number">3266</span>, options [nop,nop,TS val <span class="hljs-number">78909244</span> ecr <span class="hljs-number">78909204</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">37.545414</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394326297</span>:<span class="hljs-number">1394326307</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78909326</span> ecr <span class="hljs-number">78909244</span>], length <span class="hljs-number">10</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">37.586052</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394326307</span>, win <span class="hljs-number">3266</span>, options [nop,nop,TS val <span class="hljs-number">78909366</span> ecr <span class="hljs-number">78909326</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52:37.586109</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394326307</span>:<span class="hljs-number">1394343097</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78909366</span> ecr <span class="hljs-number">78909366</span>], length <span class="hljs-number">16790</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">37.626049</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394343097</span>, win <span class="hljs-number">3188</span>, options [nop,nop,TS val <span class="hljs-number">78909406</span> ecr <span class="hljs-number">78909366</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">37.707516</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394343097</span>:<span class="hljs-number">1394343107</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78909488</span> ecr <span class="hljs-number">78909406</span>], length <span class="hljs-number">10</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">37.747870</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394343107</span>, win <span class="hljs-number">3188</span>, options [nop,nop,TS val <span class="hljs-number">78909528</span> ecr <span class="hljs-number">78909488</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">37.747892</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394343107</span>:<span class="hljs-number">1394358877</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78909528</span> ecr <span class="hljs-number">78909528</span>], length <span class="hljs-number">15770</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">37.787982</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394358877</span>, win <span class="hljs-number">3114</span>, options [nop,nop,TS val <span class="hljs-number">78909568</span> ecr <span class="hljs-number">78909528</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">38.068368</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394358877</span>:<span class="hljs-number">1394358887</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78909849</span> ecr <span class="hljs-number">78909568</span>], length <span class="hljs-number">10</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">38.068434</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394358887</span>, win <span class="hljs-number">3114</span>, options [nop,nop,TS val <span class="hljs-number">78909849</span> ecr <span class="hljs-number">78909849</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">38.068459</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394358887</span>:<span class="hljs-number">1394358897</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78909849</span> ecr <span class="hljs-number">78909849</span>], length <span class="hljs-number">10</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">38.068461</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394358897</span>, win <span class="hljs-number">3114</span>, options [nop,nop,TS val <span class="hljs-number">78909849</span> ecr <span class="hljs-number">78909849</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">38.068466</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394358897</span>:<span class="hljs-number">1394358907</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78909849</span> ecr <span class="hljs-number">78909849</span>], length <span class="hljs-number">10</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">38.068467</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394358907</span>, win <span class="hljs-number">3114</span>, options [nop,nop,TS val <span class="hljs-number">78909849</span> ecr <span class="hljs-number">78909849</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">38.068471</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394358907</span>:<span class="hljs-number">1394358917</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78909849</span> ecr <span class="hljs-number">78909849</span>], length <span class="hljs-number">10</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">38.068472</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394358917</span>, win <span class="hljs-number">3114</span>, options [nop,nop,TS val <span class="hljs-number">78909849</span> ecr <span class="hljs-number">78909849</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">38.068475</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394358917</span>:<span class="hljs-number">1394358927</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78909849</span> ecr <span class="hljs-number">78909849</span>], length <span class="hljs-number">10</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">38.068476</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394358927</span>, win <span class="hljs-number">3114</span>, options [nop,nop,TS val <span class="hljs-number">78909849</span> ecr <span class="hljs-number">78909849</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">38.068480</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394358937</span>, win <span class="hljs-number">3114</span>, options [nop,nop,TS val <span class="hljs-number">78909849</span> ecr <span class="hljs-number">78909849</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">38.068483</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394358937</span>:<span class="hljs-number">1394358947</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78909849</span> ecr <span class="hljs-number">78909849</span>], length <span class="hljs-number">10</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">38.068488</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394358947</span>:<span class="hljs-number">1394358957</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78909849</span> ecr <span class="hljs-number">78909849</span>], length <span class="hljs-number">10</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">38.068491</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394358957</span>:<span class="hljs-number">1394358967</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78909849</span> ecr <span class="hljs-number">78909849</span>], length <span class="hljs-number">10</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">38.068496</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394358967</span>:<span class="hljs-number">1394358977</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78909849</span> ecr <span class="hljs-number">78909849</span>], length <span class="hljs-number">10</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52:38.108851</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394358977</span>, win <span class="hljs-number">3114</span>, options [nop,nop,TS val <span class="hljs-number">78909889</span> ecr <span class="hljs-number">78909849</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52:38.108910</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394358977</span>:<span class="hljs-number">1394376697</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78909889</span> ecr <span class="hljs-number">78909889</span>], length <span class="hljs-number">17720</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52:38.149011</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394376697</span>, win <span class="hljs-number">3032</span>, options [nop,nop,TS val <span class="hljs-number">78909929</span> ecr <span class="hljs-number">78909889</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52:38.234851</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394376697</span>:<span class="hljs-number">1394376707</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78910015</span> ecr <span class="hljs-number">78909929</span>], length <span class="hljs-number">10</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">38.274934</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394376707</span>, win <span class="hljs-number">3032</span>, options [nop,nop,TS val <span class="hljs-number">78910055</span> ecr <span class="hljs-number">78910015</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">38.274949</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394376707</span>:<span class="hljs-number">1394392477</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78910055</span> ecr <span class="hljs-number">78910055</span>], length <span class="hljs-number">15770</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">38.314919</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394392477</span>, win <span class="hljs-number">2958</span>, options [nop,nop,TS val <span class="hljs-number">78910095</span> ecr <span class="hljs-number">78910055</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">38.314940</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394392477</span>:<span class="hljs-number">1394409277</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78910095</span> ecr <span class="hljs-number">78910095</span>], length <span class="hljs-number">16800</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">38.354895</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394409277</span>, win <span class="hljs-number">2889</span>, options [nop,nop,TS val <span class="hljs-number">78910135</span> ecr <span class="hljs-number">78910095</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">38.354913</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394409277</span>:<span class="hljs-number">1394426077</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78910135</span> ecr <span class="hljs-number">78910135</span>], length <span class="hljs-number">16800</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">38.394876</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394426077</span>, win <span class="hljs-number">2820</span>, options [nop,nop,TS val <span class="hljs-number">78910175</span> ecr <span class="hljs-number">78910135</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">38.394890</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394426077</span>:<span class="hljs-number">1394442877</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78910175</span> ecr <span class="hljs-number">78910175</span>], length <span class="hljs-number">16800</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">38.434909</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394442877</span>, win <span class="hljs-number">2751</span>, options [nop,nop,TS val <span class="hljs-number">78910215</span> ecr <span class="hljs-number">78910175</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">38.434925</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394442877</span>:<span class="hljs-number">1394459677</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78910215</span> ecr <span class="hljs-number">78910215</span>], length <span class="hljs-number">16800</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">38.474890</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394459677</span>, win <span class="hljs-number">2683</span>, options [nop,nop,TS val <span class="hljs-number">78910255</span> ecr <span class="hljs-number">78910215</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">38.474901</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394459677</span>:<span class="hljs-number">1394470177</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78910255</span> ecr <span class="hljs-number">78910255</span>], length <span class="hljs-number">10500</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">38.514891</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394470177</span>, win <span class="hljs-number">2638</span>, options [nop,nop,TS val <span class="hljs-number">78910295</span> ecr <span class="hljs-number">78910255</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">38.514908</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394470177</span>:<span class="hljs-number">1394476477</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78910295</span> ecr <span class="hljs-number">78910295</span>], length <span class="hljs-number">6300</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">38.554921</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394476477</span>, win <span class="hljs-number">2610</span>, options [nop,nop,TS val <span class="hljs-number">78910335</span> ecr <span class="hljs-number">78910295</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">38.554941</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394476477</span>:<span class="hljs-number">1394493277</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78910335</span> ecr <span class="hljs-number">78910335</span>], length <span class="hljs-number">16800</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">38.594888</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394493277</span>, win <span class="hljs-number">2541</span>, options [nop,nop,TS val <span class="hljs-number">78910375</span> ecr <span class="hljs-number">78910335</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">38.594905</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394493277</span>:<span class="hljs-number">1394510077</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78910375</span> ecr <span class="hljs-number">78910375</span>], length <span class="hljs-number">16800</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">38.634904</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394510077</span>, win <span class="hljs-number">2472</span>, options [nop,nop,TS val <span class="hljs-number">78910415</span> ecr <span class="hljs-number">78910375</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">38.634922</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394510077</span>:<span class="hljs-number">1394527897</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78910415</span> ecr <span class="hljs-number">78910415</span>], length <span class="hljs-number">17820</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">38.674852</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394527897</span>, win <span class="hljs-number">2400</span>, options [nop,nop,TS val <span class="hljs-number">78910455</span> ecr <span class="hljs-number">78910415</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">38.674864</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394527897</span>:<span class="hljs-number">1394544637</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78910455</span> ecr <span class="hljs-number">78910455</span>], length <span class="hljs-number">16740</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">38.714870</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394544637</span>, win <span class="hljs-number">2331</span>, options [nop,nop,TS val <span class="hljs-number">78910495</span> ecr <span class="hljs-number">78910455</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">38.714897</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394544637</span>:<span class="hljs-number">1394560337</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78910495</span> ecr <span class="hljs-number">78910495</span>], length <span class="hljs-number">15700</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">38.754893</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394560337</span>, win <span class="hljs-number">2266</span>, options [nop,nop,TS val <span class="hljs-number">78910535</span> ecr <span class="hljs-number">78910495</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">38.754925</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394560337</span>:<span class="hljs-number">1394560357</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78910535</span> ecr <span class="hljs-number">78910535</span>], length <span class="hljs-number">20</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">38.794922</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394560357</span>, win <span class="hljs-number">2266</span>, options [nop,nop,TS val <span class="hljs-number">78910575</span> ecr <span class="hljs-number">78910535</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">38.794942</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394560357</span>:<span class="hljs-number">1394577157</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78910575</span> ecr <span class="hljs-number">78910575</span>], length <span class="hljs-number">16800</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">38.834848</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394577157</span>, win <span class="hljs-number">2188</span>, options [nop,nop,TS val <span class="hljs-number">78910615</span> ecr <span class="hljs-number">78910575</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">38.834868</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394577157</span>:<span class="hljs-number">1394595037</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78910615</span> ecr <span class="hljs-number">78910615</span>], length <span class="hljs-number">17880</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">38.874858</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394595037</span>, win <span class="hljs-number">2115</span>, options [nop,nop,TS val <span class="hljs-number">78910655</span> ecr <span class="hljs-number">78910615</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">38.874878</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394595037</span>:<span class="hljs-number">1394610757</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78910655</span> ecr <span class="hljs-number">78910655</span>], length <span class="hljs-number">15720</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">38.914841</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394610757</span>, win <span class="hljs-number">2050</span>, options [nop,nop,TS val <span class="hljs-number">78910695</span> ecr <span class="hljs-number">78910655</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">38.914854</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394610757</span>:<span class="hljs-number">1394628637</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78910695</span> ecr <span class="hljs-number">78910695</span>], length <span class="hljs-number">17880</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">38.954812</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394628637</span>, win <span class="hljs-number">1977</span>, options [nop,nop,TS val <span class="hljs-number">78910735</span> ecr <span class="hljs-number">78910695</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">38.954841</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394628637</span>:<span class="hljs-number">1394645437</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78910735</span> ecr <span class="hljs-number">78910735</span>], length <span class="hljs-number">16800</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">38.994885</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394645437</span>, win <span class="hljs-number">1908</span>, options [nop,nop,TS val <span class="hljs-number">78910775</span> ecr <span class="hljs-number">78910735</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">38.994895</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394645437</span>:<span class="hljs-number">1394652257</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78910775</span> ecr <span class="hljs-number">78910775</span>], length <span class="hljs-number">6820</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">39.035093</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394652257</span>, win <span class="hljs-number">1878</span>, options [nop,nop,TS val <span class="hljs-number">78910815</span> ecr <span class="hljs-number">78910775</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52:39.035141</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394652257</span>:<span class="hljs-number">1394662237</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78910815</span> ecr <span class="hljs-number">78910815</span>], length <span class="hljs-number">9980</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">39.074820</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394662237</span>, win <span class="hljs-number">1836</span>, options [nop,nop,TS val <span class="hljs-number">78910855</span> ecr <span class="hljs-number">78910815</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">39.074842</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394662237</span>:<span class="hljs-number">1394677717</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78910855</span> ecr <span class="hljs-number">78910855</span>], length <span class="hljs-number">15480</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52:39.114860</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394677717</span>, win <span class="hljs-number">1771</span>, options [nop,nop,TS val <span class="hljs-number">78910895</span> ecr <span class="hljs-number">78910855</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52:39.114880</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394677717</span>:<span class="hljs-number">1394694517</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78910895</span> ecr <span class="hljs-number">78910895</span>], length <span class="hljs-number">16800</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52:39.154880</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394694517</span>, win <span class="hljs-number">1702</span>, options [nop,nop,TS val <span class="hljs-number">78910935</span> ecr <span class="hljs-number">78910895</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52:39.154897</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394694517</span>:<span class="hljs-number">1394711317</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78910935</span> ecr <span class="hljs-number">78910935</span>], length <span class="hljs-number">16800</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52:39.194830</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394711317</span>, win <span class="hljs-number">1633</span>, options [nop,nop,TS val <span class="hljs-number">78910975</span> ecr <span class="hljs-number">78910935</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52:39.194842</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394711317</span>:<span class="hljs-number">1394728117</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78910975</span> ecr <span class="hljs-number">78910975</span>], length <span class="hljs-number">16800</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52:39.234790</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394728117</span>, win <span class="hljs-number">1564</span>, options [nop,nop,TS val <span class="hljs-number">78911015</span> ecr <span class="hljs-number">78910975</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52:39.234826</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394728117</span>:<span class="hljs-number">1394740847</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78911015</span> ecr <span class="hljs-number">78911015</span>], length <span class="hljs-number">12730</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">39.274844</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394740847</span>, win <span class="hljs-number">1511</span>, options [nop,nop,TS val <span class="hljs-number">78911055</span> ecr <span class="hljs-number">78911015</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">39.274862</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394740847</span>:<span class="hljs-number">1394744797</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78911055</span> ecr <span class="hljs-number">78911055</span>], length <span class="hljs-number">3950</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">39.314819</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394744797</span>, win <span class="hljs-number">1493</span>, options [nop,nop,TS val <span class="hljs-number">78911095</span> ecr <span class="hljs-number">78911055</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">39.314841</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394744797</span>:<span class="hljs-number">1394761597</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78911095</span> ecr <span class="hljs-number">78911095</span>], length <span class="hljs-number">16800</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">39.354806</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394761597</span>, win <span class="hljs-number">1424</span>, options [nop,nop,TS val <span class="hljs-number">78911135</span> ecr <span class="hljs-number">78911095</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">39.354823</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394761597</span>:<span class="hljs-number">1394778397</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78911135</span> ecr <span class="hljs-number">78911135</span>], length <span class="hljs-number">16800</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">39.394793</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394778397</span>, win <span class="hljs-number">1355</span>, options [nop,nop,TS val <span class="hljs-number">78911175</span> ecr <span class="hljs-number">78911135</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">39.394814</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394778397</span>:<span class="hljs-number">1394795197</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78911175</span> ecr <span class="hljs-number">78911175</span>], length <span class="hljs-number">16800</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">39.434759</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394795197</span>, win <span class="hljs-number">1286</span>, options [nop,nop,TS val <span class="hljs-number">78911215</span> ecr <span class="hljs-number">78911175</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">39.434800</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394795197</span>:<span class="hljs-number">1394811997</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78911215</span> ecr <span class="hljs-number">78911215</span>], length <span class="hljs-number">16800</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">39.474748</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394811997</span>, win <span class="hljs-number">1217</span>, options [nop,nop,TS val <span class="hljs-number">78911255</span> ecr <span class="hljs-number">78911215</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">39.474760</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394811997</span>:<span class="hljs-number">1394824597</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78911255</span> ecr <span class="hljs-number">78911255</span>], length <span class="hljs-number">12600</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">39.514771</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394824597</span>, win <span class="hljs-number">1164</span>, options [nop,nop,TS val <span class="hljs-number">78911295</span> ecr <span class="hljs-number">78911255</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">39.514789</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394824597</span>:<span class="hljs-number">1394828797</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78911295</span> ecr <span class="hljs-number">78911295</span>], length <span class="hljs-number">4200</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">39.554833</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394828797</span>, win <span class="hljs-number">1145</span>, options [nop,nop,TS val <span class="hljs-number">78911335</span> ecr <span class="hljs-number">78911295</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">39.554853</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394828797</span>:<span class="hljs-number">1394845597</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78911335</span> ecr <span class="hljs-number">78911335</span>], length <span class="hljs-number">16800</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">39.594805</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394845597</span>, win <span class="hljs-number">1076</span>, options [nop,nop,TS val <span class="hljs-number">78911375</span> ecr <span class="hljs-number">78911335</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">39.594830</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394845597</span>:<span class="hljs-number">1394862397</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78911375</span> ecr <span class="hljs-number">78911375</span>], length <span class="hljs-number">16800</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">39.634725</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394862397</span>, win <span class="hljs-number">1007</span>, options [nop,nop,TS val <span class="hljs-number">78911415</span> ecr <span class="hljs-number">78911375</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">39.634744</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394862397</span>:<span class="hljs-number">1394879197</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78911415</span> ecr <span class="hljs-number">78911415</span>], length <span class="hljs-number">16800</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">39.674776</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394879197</span>, win <span class="hljs-number">938</span>, options [nop,nop,TS val <span class="hljs-number">78911455</span> ecr <span class="hljs-number">78911415</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">39.674789</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394879197</span>:<span class="hljs-number">1394895997</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78911455</span> ecr <span class="hljs-number">78911455</span>], length <span class="hljs-number">16800</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">39.714767</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394895997</span>, win <span class="hljs-number">869</span>, options [nop,nop,TS val <span class="hljs-number">78911495</span> ecr <span class="hljs-number">78911455</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">39.714876</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394895997</span>:<span class="hljs-number">1394910697</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78911495</span> ecr <span class="hljs-number">78911495</span>], length <span class="hljs-number">14700</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">39.754771</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394910697</span>, win <span class="hljs-number">808</span>, options [nop,nop,TS val <span class="hljs-number">78911535</span> ecr <span class="hljs-number">78911495</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">39.754788</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394910697</span>:<span class="hljs-number">1394912797</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78911535</span> ecr <span class="hljs-number">78911535</span>], length <span class="hljs-number">2100</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">39.794797</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394912797</span>, win <span class="hljs-number">797</span>, options [nop,nop,TS val <span class="hljs-number">78911575</span> ecr <span class="hljs-number">78911535</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">39.794817</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394912797</span>:<span class="hljs-number">1394929597</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78911575</span> ecr <span class="hljs-number">78911575</span>], length <span class="hljs-number">16800</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">39.834832</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394929597</span>, win <span class="hljs-number">728</span>, options [nop,nop,TS val <span class="hljs-number">78911615</span> ecr <span class="hljs-number">78911575</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">39.834853</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394929597</span>:<span class="hljs-number">1394947417</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78911615</span> ecr <span class="hljs-number">78911615</span>], length <span class="hljs-number">17820</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">39.874741</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394947417</span>, win <span class="hljs-number">655</span>, options [nop,nop,TS val <span class="hljs-number">78911655</span> ecr <span class="hljs-number">78911615</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">39.874759</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394947417</span>:<span class="hljs-number">1394963437</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78911655</span> ecr <span class="hljs-number">78911655</span>], length <span class="hljs-number">16020</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">39.914743</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394963437</span>, win <span class="hljs-number">589</span>, options [nop,nop,TS val <span class="hljs-number">78911695</span> ecr <span class="hljs-number">78911655</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">39.914756</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394963437</span>:<span class="hljs-number">1394980117</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78911695</span> ecr <span class="hljs-number">78911695</span>], length <span class="hljs-number">16680</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">39.954818</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394980117</span>, win <span class="hljs-number">520</span>, options [nop,nop,TS val <span class="hljs-number">78911735</span> ecr <span class="hljs-number">78911695</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">39.954830</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394980117</span>:<span class="hljs-number">1394996917</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78911735</span> ecr <span class="hljs-number">78911735</span>], length <span class="hljs-number">16800</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">39.994802</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394996917</span>, win <span class="hljs-number">451</span>, options [nop,nop,TS val <span class="hljs-number">78911775</span> ecr <span class="hljs-number">78911735</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52:39.995152</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394996917</span>:<span class="hljs-number">1394996927</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78911775</span> ecr <span class="hljs-number">78911775</span>], length <span class="hljs-number">10</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">40.035846</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1394996927</span>, win <span class="hljs-number">451</span>, options [nop,nop,TS val <span class="hljs-number">78911816</span> ecr <span class="hljs-number">78911775</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">40.035915</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1394996927</span>:<span class="hljs-number">1395013717</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78911816</span> ecr <span class="hljs-number">78911816</span>], length <span class="hljs-number">16790</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">40.075794</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1395013717</span>, win <span class="hljs-number">374</span>, options [nop,nop,TS val <span class="hljs-number">78911856</span> ecr <span class="hljs-number">78911816</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">40.075829</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1395013717</span>:<span class="hljs-number">1395030517</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78911856</span> ecr <span class="hljs-number">78911856</span>], length <span class="hljs-number">16800</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52:40.115847</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1395030517</span>, win <span class="hljs-number">305</span>, options [nop,nop,TS val <span class="hljs-number">78911896</span> ecr <span class="hljs-number">78911856</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52:40.115866</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1395030517</span>:<span class="hljs-number">1395047317</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78911896</span> ecr <span class="hljs-number">78911896</span>], length <span class="hljs-number">16800</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52:40.155703</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1395047317</span>, win <span class="hljs-number">174</span>, options [nop,nop,TS val <span class="hljs-number">78911936</span> ecr <span class="hljs-number">78911896</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52:40.155752</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1395047317</span>:<span class="hljs-number">1395064117</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78911936</span> ecr <span class="hljs-number">78911936</span>], length <span class="hljs-number">16800</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52:40.195132</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1395064117</span>, win <span class="hljs-number">43</span>, options [nop,nop,TS val <span class="hljs-number">78911976</span> ecr <span class="hljs-number">78911936</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">40.435748</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [P.], seq <span class="hljs-number">1395064117</span>:<span class="hljs-number">1395069621</span>, ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78912216</span> ecr <span class="hljs-number">78911976</span>], length <span class="hljs-number">5504</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">40.435782</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1395069621</span>, win <span class="hljs-number">0</span>, options [nop,nop,TS val <span class="hljs-number">78912216</span> ecr <span class="hljs-number">78912216</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">40.670661</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [.], ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78912451</span> ecr <span class="hljs-number">78912216</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">40.670674</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1395069621</span>, win <span class="hljs-number">0</span>, options [nop,nop,TS val <span class="hljs-number">78912451</span> ecr <span class="hljs-number">78912216</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52:41.141703</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [.], ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78912922</span> ecr <span class="hljs-number">78912451</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">42.083643</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [.], ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78913864</span> ecr <span class="hljs-number">78912451</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">42.083655</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1395069621</span>, win <span class="hljs-number">0</span>, options [nop,nop,TS val <span class="hljs-number">78913864</span> ecr <span class="hljs-number">78912216</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">43.967506</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [.], ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78915748</span> ecr <span class="hljs-number">78913864</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">43.967532</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1395069621</span>, win <span class="hljs-number">0</span>, options [nop,nop,TS val <span class="hljs-number">78915748</span> ecr <span class="hljs-number">78912216</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">47.739259</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [.], ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78919520</span> ecr <span class="hljs-number">78915748</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">47.739274</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1395069621</span>, win <span class="hljs-number">0</span>, options [nop,nop,TS val <span class="hljs-number">78919520</span> ecr <span class="hljs-number">78912216</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">55.275863</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags [.], ack <span class="hljs-number">1233000592</span>, win <span class="hljs-number">342</span>, options [nop,nop,TS val <span class="hljs-number">78927056</span> ecr <span class="hljs-number">78919520</span>], length <span class="hljs-number">0</span><br><span class="hljs-number">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">55.275931</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags [.], ack <span class="hljs-number">1395069621</span>, win <span class="hljs-number">0</span>, options [nop,nop,TS val <span class="hljs-number">78927056</span> ecr <span class="hljs-number">78912216</span>], length <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>抓取到的前三个数据包是 <strong>blocking_client</strong> 与 <strong>blocking_server</strong> 建立三次握手的过程。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">35</span>.<span class="hljs-number">907381</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags<span class="hljs-meta"> [S], seq 1394135076, win 43690, options [mss 65495,sackOK,TS val 78907688 ecr 0,nop,wscale 7], length 0</span><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">20</span>:<span class="hljs-number">32</span>:<span class="hljs-number">21</span>.<span class="hljs-number">261484</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span>: Flags<span class="hljs-meta"> [S.], seq 1233000591, ack 1394135077, win 43690, options [mss 65495,sackOK,TS val 78907688 ecr 78907688,nop,wscale 7], length 0</span><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">11</span>:<span class="hljs-number">52</span>:<span class="hljs-number">35</span>.<span class="hljs-number">907441</span> IP <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">40846</span> &gt; <span class="hljs-number">127.0.0.1</span>.<span class="hljs-number">3000</span>: Flags<span class="hljs-meta"> [.], ack 1233000592, win 342, options [nop,nop,TS val 78907688 ecr 78907688], length 0</span><br></code></pre></td></tr></table></figure><p>当每次 <strong>blocking_client</strong> 给 <strong>blocking_server</strong> 发数据以后，<strong>blocking_server</strong> 会应答 <strong>blocking_server</strong>，在每次应答的数据包中会带上自己的当前可用 TCP 窗口大小（看上文中结果从 <strong>127.0.0.1.3000 &gt; 127.0.0.1.40846</strong> 方向的数据包的 <strong>win</strong> 字段大小变化），由于 TCP 流量控制和拥赛控制机制的存在，<strong>blocking_server</strong> 端的 TCP 窗口大小短期内会慢慢增加，后面随着接收缓冲区中数据积压越来越多， TCP 窗口会慢慢变小，最终变为 0。</p><p>另外，细心的读者如果实际去做一下这个实验会发现一个现象，即当 tcpdump 已经显示对端的 TCP 窗口是 0 时， <strong>blocking_client</strong> 仍然可以继续发送一段时间的数据，此时的数据已经不是在发往对端，而是逐渐填满到本端的内核发送缓冲区中去了，这也验证了 send 函数实际上是往内核缓冲区中拷贝数据这一行为。</p><h5 id="socket-非阻塞模式下的-send-行为">socket 非阻塞模式下的 send 行为</h5><p>我们再来验证一下非阻塞 socket 的 send 行为，<strong>server</strong> 端的代码不变，我们将 <strong>blocking_client.cpp</strong> 中 socket 设置成非阻塞的，修改后的代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 验证非阻塞模式下send函数的行为，client端，nonblocking_client.cpp</span><br><span class="hljs-comment"> * liansixin 2022-6-21</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;arpa/inet.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SERVER_ADDRESS <span class="hljs-string">&quot;127.0.0.1&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SERVER_PORT     3000</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SEND_DATA       <span class="hljs-string">&quot;helloworld&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//1.创建一个socket</span><br>    <span class="hljs-type">int</span> clientfd = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (clientfd == <span class="hljs-number">-1</span>)<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;create client socket error.&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//2.连接服务器</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span> serveraddr;<br>    serveraddr.sin_family = AF_INET;<br>    serveraddr.sin_addr.s_addr = <span class="hljs-built_in">inet_addr</span>(SERVER_ADDRESS);<br>    serveraddr.sin_port = <span class="hljs-built_in">htons</span>(SERVER_PORT);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">connect</span>(clientfd, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;serveraddr, <span class="hljs-built_in">sizeof</span>(serveraddr)) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;connect socket error.&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-built_in">close</span>(clientfd);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br><span class="hljs-comment">//连接成功以后，我们再将 clientfd 设置成非阻塞模式，</span><br><span class="hljs-comment">//不能在创建时就设置，这样会影响到 connect 函数的行为</span><br><span class="hljs-type">int</span> oldSocketFlag = <span class="hljs-built_in">fcntl</span>(clientfd, F_GETFL, <span class="hljs-number">0</span>);<br><span class="hljs-type">int</span> newSocketFlag = oldSocketFlag | O_NONBLOCK;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">fcntl</span>(clientfd, F_SETFL,  newSocketFlag) == <span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-built_in">close</span>(clientfd);<br>std::cout &lt;&lt; <span class="hljs-string">&quot;set socket to nonblock error.&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-comment">//3. 不断向服务器发送数据，或者出错退出</span><br><span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>&#123;<br><span class="hljs-type">int</span> ret = <span class="hljs-built_in">send</span>(clientfd, SEND_DATA, <span class="hljs-built_in">strlen</span>(SEND_DATA), <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (ret == <span class="hljs-number">-1</span>) <br>&#123;<br><span class="hljs-comment">//非阻塞模式下send函数由于TCP窗口太小发不出去数据，错误码是EWOULDBLOCK</span><br><span class="hljs-keyword">if</span> (errno == EWOULDBLOCK)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;send data error as TCP Window size is too small.&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">continue</span>;<br>&#125; <br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (errno == EINTR)<br>&#123;<br><span class="hljs-comment">//如果被信号中断，我们继续重试</span><br>std::cout &lt;&lt; <span class="hljs-string">&quot;sending data interrupted by signal.&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">continue</span>;<br>&#125; <br><span class="hljs-keyword">else</span> <br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;send data error.&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (ret == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-comment">//对端关闭了连接，我们也关闭</span><br>std::cout &lt;&lt; <span class="hljs-string">&quot;send data error.&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-built_in">close</span>(clientfd);<br><span class="hljs-keyword">break</span>;<br>&#125; <br><span class="hljs-keyword">else</span><br>&#123;<br>count ++;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;send data successfully, count = &quot;</span> &lt;&lt; count &lt;&lt; std::endl;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//5. 关闭socket</span><br><span class="hljs-built_in">close</span>(clientfd);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译 <strong>nonblocking_client.cpp</strong> 得到可执行程序 <strong>nonblocking_client</strong>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">g</span>++ -<span class="hljs-selector-tag">g</span> -o nonblocking_client nonblocking_client<span class="hljs-selector-class">.cpp</span> <br></code></pre></td></tr></table></figure><p>运行 <strong>nonblocking_client</strong>，运行一段时间后，由于对端和本端的 TCP 窗口已满，数据发不出去了，但是 send 函数不会阻塞，而是立即返回，返回值是 <strong>-1</strong>（Windows 系统上 返回 SOCKET_ERROR，这个宏的值也是 <strong>-1</strong>），此时得到错误码是 <strong>EWOULDBLOCK</strong>。</p><h5 id="socket-阻塞模式下的-recv-行为">socket 阻塞模式下的 recv 行为</h5><p>在了解了 send 函数的行为，我们再来看一下阻塞模式下的 recv 函数行为。服务器端代码不需要修改，我们修改一下客户端代码，如果服务器端不给客户端发数据，此时客户端调用 recv 函数执行流会阻塞在 recv 函数调用处。继续修改一下客户端代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 验证阻塞模式下recv函数的行为，client端，blocking_client_recv.cpp</span><br><span class="hljs-comment"> * liansixin 2022-6-21</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;arpa/inet.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SERVER_ADDRESS <span class="hljs-string">&quot;127.0.0.1&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SERVER_PORT     3000</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SEND_DATA       <span class="hljs-string">&quot;helloworld&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//1.创建一个socket</span><br>    <span class="hljs-type">int</span> clientfd = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (clientfd == <span class="hljs-number">-1</span>)<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;create client socket error.&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//2.连接服务器</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span> serveraddr;<br>    serveraddr.sin_family = AF_INET;<br>    serveraddr.sin_addr.s_addr = <span class="hljs-built_in">inet_addr</span>(SERVER_ADDRESS);<br>    serveraddr.sin_port = <span class="hljs-built_in">htons</span>(SERVER_PORT);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">connect</span>(clientfd, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;serveraddr, <span class="hljs-built_in">sizeof</span>(serveraddr)) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;connect socket error.&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-built_in">close</span>(clientfd);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br><span class="hljs-comment">//直接调用recv函数，程序会阻塞在recv函数调用处</span><br><span class="hljs-type">char</span> recvbuf[<span class="hljs-number">32</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> ret = <span class="hljs-built_in">recv</span>(clientfd, recvbuf, <span class="hljs-number">32</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (ret &gt; <span class="hljs-number">0</span>) <br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;recv successfully.&quot;</span> &lt;&lt; std::endl;<br>&#125; <br><span class="hljs-keyword">else</span> <br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;recv data error.&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-comment">//5. 关闭socket</span><br><span class="hljs-built_in">close</span>(clientfd);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译 <strong>blocking_client_recv.cpp</strong> 并使用启动，我们发现程序既没有打印 recv 调用成功的信息也没有调用失败的信息，将程序中断下来，使用 <strong>bt</strong> 命令查看此时的调用堆栈，发现程序确实阻塞在 recv 函数调用处。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs csharp">[<span class="hljs-meta">root@localhost testsocket</span>]<span class="hljs-meta"># g++ -g -o blocking_client_recv blocking_client_recv.cpp </span><br>[<span class="hljs-meta">root@localhost testsocket</span>]<span class="hljs-meta"># gdb blocking_client_recv</span><br>Reading symbols <span class="hljs-keyword">from</span> /root/testsocket/blocking_client_recv...done.<br>(gdb) r<br>Starting program: /root/testsocket/blocking_client_recv <br>^C<br>Program received signal SIGINT, Interrupt.<br><span class="hljs-number">0x00007ffff72f119d</span> <span class="hljs-function"><span class="hljs-keyword">in</span> <span class="hljs-title">recv</span> () <span class="hljs-keyword">from</span> /lib64/libc.so.6</span><br><span class="hljs-function">Missing separate debuginfos, use: debuginfo-install glibc-2.17-196.el7_4.2.x86_64 libgcc-4.8.5-16.el7_4.2.x86_64 libstdc++-4.8.5-16.el7_4.2.<span class="hljs-title">x86_64</span></span><br><span class="hljs-function">(<span class="hljs-params">gdb</span>) bt</span><br><span class="hljs-function">#0  0x00007ffff72f119d <span class="hljs-keyword">in</span> <span class="hljs-title">recv</span> () <span class="hljs-keyword">from</span> /lib64/libc.so.6</span><br><span class="hljs-function">#1  0x0000000000400b18 <span class="hljs-keyword">in</span> <span class="hljs-title">main</span> (<span class="hljs-params">argc=<span class="hljs-number">1</span>, argv=<span class="hljs-number">0x7fffffffe588</span></span>) at blocking_client_recv.cpp:40</span><br></code></pre></td></tr></table></figure><h5 id="socket-非阻塞模式下的-recv-行为">socket 非阻塞模式下的 recv 行为</h5><p>非阻塞模式下如果当前无数据可读，recv 函数将立即返回，返回值为 <strong>-1</strong>，错误码为 <strong>EWOULDBLOCK</strong>。将客户端代码修成一下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 验证阻塞模式下recv函数的行为，client端，blocking_client_recv.cpp</span><br><span class="hljs-comment"> * liansixin 2022-6-21</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;arpa/inet.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SERVER_ADDRESS <span class="hljs-string">&quot;127.0.0.1&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SERVER_PORT     3000</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SEND_DATA       <span class="hljs-string">&quot;helloworld&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//1.创建一个socket</span><br>    <span class="hljs-type">int</span> clientfd = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (clientfd == <span class="hljs-number">-1</span>)<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;create client socket error.&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//2.连接服务器</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span> serveraddr;<br>    serveraddr.sin_family = AF_INET;<br>    serveraddr.sin_addr.s_addr = <span class="hljs-built_in">inet_addr</span>(SERVER_ADDRESS);<br>    serveraddr.sin_port = <span class="hljs-built_in">htons</span>(SERVER_PORT);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">connect</span>(clientfd, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;serveraddr, <span class="hljs-built_in">sizeof</span>(serveraddr)) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;connect socket error.&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-built_in">close</span>(clientfd);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br><span class="hljs-comment">//连接成功以后，我们再将 clientfd 设置成非阻塞模式，</span><br><span class="hljs-comment">//不能在创建时就设置，这样会影响到 connect 函数的行为</span><br><span class="hljs-type">int</span> oldSocketFlag = <span class="hljs-built_in">fcntl</span>(clientfd, F_GETFL, <span class="hljs-number">0</span>);<br><span class="hljs-type">int</span> newSocketFlag = oldSocketFlag | O_NONBLOCK;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">fcntl</span>(clientfd, F_SETFL,  newSocketFlag) == <span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-built_in">close</span>(clientfd);<br>std::cout &lt;&lt; <span class="hljs-string">&quot;set socket to nonblock error.&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-comment">//直接调用recv函数，程序会阻塞在recv函数调用处</span><br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>&#123;<br><span class="hljs-type">char</span> recvbuf[<span class="hljs-number">32</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> ret = <span class="hljs-built_in">recv</span>(clientfd, recvbuf, <span class="hljs-number">32</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (ret &gt; <span class="hljs-number">0</span>) <br>&#123;<br><span class="hljs-comment">//收到了数据</span><br>std::cout &lt;&lt; <span class="hljs-string">&quot;recv successfully.&quot;</span> &lt;&lt; std::endl;<br>&#125; <br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ret == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-comment">//对端关闭了连接</span><br>std::cout &lt;&lt; <span class="hljs-string">&quot;peer close the socket.&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">break</span>;<br>&#125; <br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ret == <span class="hljs-number">-1</span>) <br>&#123;<br><span class="hljs-keyword">if</span> (errno == EWOULDBLOCK)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;There is no data available now.&quot;</span> &lt;&lt; std::endl;<br>&#125; <br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (errno == EINTR) <br>&#123;<br><span class="hljs-comment">//如果被信号中断了，则继续重试recv函数</span><br>std::cout &lt;&lt; <span class="hljs-string">&quot;recv data interrupted by signal.&quot;</span> &lt;&lt; std::endl;<br>&#125; <span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//真的出错了</span><br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//5. 关闭socket</span><br><span class="hljs-built_in">close</span>(clientfd);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行结果与我们预期的一模一样， recv 函数在无数据可读的情况下并不会阻塞情绪，所以程序会一直有“<strong>There is no data available now.</strong>”相关的输出。</p>]]></content>
      
      
      <categories>
          
          <category> 网络通讯基础学习笔记系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 网络通讯基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络通信基础学习笔记04：socket 的阻塞模式和非阻塞模式</title>
      <link href="/2022/06/21/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B004%EF%BC%9Asocket-%E7%9A%84%E9%98%BB%E5%A1%9E%E6%A8%A1%E5%BC%8F%E5%92%8C%E9%9D%9E%E9%98%BB%E5%A1%9E%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/06/21/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B004%EF%BC%9Asocket-%E7%9A%84%E9%98%BB%E5%A1%9E%E6%A8%A1%E5%BC%8F%E5%92%8C%E9%9D%9E%E9%98%BB%E5%A1%9E%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="网络通信基础学习笔记04：socket-的阻塞模式和非阻塞模式">网络通信基础学习笔记04：socket 的阻塞模式和非阻塞模式</h2><h3 id="socket-的阻塞模式和非阻塞模式">socket 的阻塞模式和非阻塞模式</h3><p>对 socket 在阻塞和非阻塞模式下的各个函数的行为差别深入的理解是掌握网络编程的基本要求之一，是重点也是难点。</p><p>阻塞和非阻塞模式下，我们常讨论的具有不同行为表现的 socket 函数一般有如下几个，见下表：</p><ul><li>connect</li><li>accept</li><li>send (Linux 平台上对 socket 进行操作时也包括 <strong>write</strong> 函数，下文中对 send 函数的讨论也适用于 <strong>write</strong> 函数)</li><li>recv (Linux 平台上对 socket 进行操作时也包括 <strong>read</strong> 函数，下文中对 recv 函数的讨论也适用于 <strong>read</strong> 函数)</li></ul><p>在正式讨论以上四个函数之前，我们先解释一下阻塞模式和非阻塞模式的概念。所谓<strong>阻塞模式</strong>，<strong>就当某个函数“执行成功的条件”当前不能满足时，该函数会阻塞当前执行线程，程序执行流在超时时间到达或“执行成功的条件”满足后恢复继续执行</strong>。而<strong>非阻塞模式</strong>恰恰相反，即使某个函数的“执行成功的条件”不当前不能满足，该函数也不会阻塞当前执行线程，而是立即返回，继续运行执行程序流。如果读者不太明白这两个定义也没关系，后面我们会以具体的示例来讲解这两种模式的区别。</p><h4 id="如何将-socket-设置成非阻塞模式">如何将 socket 设置成非阻塞模式</h4><p>无论是 Windows 还是 Linux 平台，默认创建的 socket 都是阻塞模式的。</p><p>在 Linux 平台上，我们可以使用 <strong>fcntl() 函数</strong>或 <strong>ioctl() 函数</strong>给创建的 socket 增加 <strong>O_NONBLOCK</strong> 标志来将 socket 设置成非阻塞模式。示例代码如下：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">int</span> oldSocketFlag = <span class="hljs-keyword">fcntl</span>(sockfd, F_GETFL, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">int</span> newSocketFlag = oldSocketFlag | O_NONBLOCK;<br><span class="hljs-keyword">fcntl</span>(sockfd, F_SETFL,  newSocketFlag);<br></code></pre></td></tr></table></figure><p><strong>ioctl() 函数</strong> 与 <strong>fcntl()</strong> 函数使用方式基本一致，这里就不再给出示例代码了。</p><p>当然，Linux 下的 <strong>socket()</strong> 创建函数也可以直接在创建时将 socket 设置为非阻塞模式，<strong>socket()</strong> 函数的签名如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">int</span> socket(<span class="hljs-type">int</span> <span class="hljs-keyword">domain</span>, <span class="hljs-type">int</span> <span class="hljs-keyword">type</span>, <span class="hljs-type">int</span> protocol);<br></code></pre></td></tr></table></figure><p>给 <strong>type</strong> 参数增加一个 <strong>SOCK_NONBLOCK</strong> 标志即可，例如：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">int s</span> = socket(AF_INET, SOCK_STREAM | SOCK_NONBLOCK, IPPROTO_TCP);<br></code></pre></td></tr></table></figure><p>不仅如此，Linux 系统下利用 accept() 函数返回的代表与客户端通信的 socket 也提供了一个扩展函数 <strong>accept4()</strong>，直接将 accept 函数返回的 socket 设置成非阻塞的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">accept</span><span class="hljs-params">(<span class="hljs-type">int</span> sockfd, <span class="hljs-keyword">struct</span> sockaddr *addr, <span class="hljs-type">socklen_t</span> *addrlen)</span></span>; <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">accept4</span><span class="hljs-params">(<span class="hljs-type">int</span> sockfd, <span class="hljs-keyword">struct</span> sockaddr *addr, <span class="hljs-type">socklen_t</span> *addrlen, <span class="hljs-type">int</span> flags)</span></span>;<br></code></pre></td></tr></table></figure><p>只要将 <strong>accept4()</strong> 函数最后一个参数 <strong>flags</strong> 设置成 <strong>SOCK_NONBLOCK</strong> 即可。也就是说以下代码是等价的：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">socklen_t addrlen</span> = sizeof(clientaddr);<br><span class="hljs-attribute">int clientfd</span> = accept4(listenfd, &amp;clientaddr, &amp;addrlen, SOCK_NONBLOCK);<br></code></pre></td></tr></table></figure><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs perl">socklen_t addrlen = sizeof(clientaddr);<br><span class="hljs-keyword">int</span> clientfd = <span class="hljs-keyword">accept</span>(listenfd, &amp;clientaddr, &amp;addrlen);<br><span class="hljs-keyword">if</span> (clientfd != -<span class="hljs-number">1</span>)<br>&#123;<br>    <span class="hljs-keyword">int</span> oldSocketFlag = <span class="hljs-keyword">fcntl</span>(clientfd, F_GETFL, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">int</span> newSocketFlag = oldSocketFlag | O_NONBLOCK;<br><span class="hljs-keyword">fcntl</span>(clientfd, F_SETFL,  newSocketFlag);<br>&#125;<br></code></pre></td></tr></table></figure><p>在 Windows 平台上，可以调用 <strong>ioctlsocket() 函数</strong> 将 socket 设置成非阻塞模式，<strong>ioctlsocket()</strong> 签名如下：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">ioctlsocket</span><span class="hljs-params">(SOCKET s, <span class="hljs-type">long</span> cmd, u_long *argp)</span></span>;<br></code></pre></td></tr></table></figure><p>将 <strong>cmd</strong> 参数设置为 <strong>FIONBIO</strong>，*<strong>argp</strong> 设置为 <strong>0</strong> 即可将 socket 设置成阻塞模式，而将 *<strong>argp</strong> 设置成非 <strong>0</strong> 即可设置成非阻塞模式。示例如下：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-comment">//将 socket 设置成非阻塞模式</span><br>u_long argp <span class="hljs-punctuation">=</span> <span class="hljs-number">1</span><span class="hljs-punctuation">;</span><br>ioctlsocket<span class="hljs-punctuation">(</span>s<span class="hljs-punctuation">,</span> FIONBIO<span class="hljs-punctuation">,</span> <span class="hljs-meta">&amp;argp);</span><br><br><span class="hljs-comment">//将 socket 设置成阻塞模式</span><br>u_long argp <span class="hljs-punctuation">=</span> <span class="hljs-number">0</span><span class="hljs-punctuation">;</span><br>ioctlsocket<span class="hljs-punctuation">(</span>s<span class="hljs-punctuation">,</span> FIONBIO<span class="hljs-punctuation">,</span> <span class="hljs-meta">&amp;argp);</span><br></code></pre></td></tr></table></figure><p>Windows 平台需要注意一个地方，如果对一个 socket 调用了 <strong>WSAAsyncSelect()</strong> 或 <strong>WSAEventSelect()</strong> 函数后，再调用 <strong>ioctlsocket()</strong> 函数将该 socket 设置为非阻塞模式会失败，你必须先调用 <strong>WSAAsyncSelect()</strong> 通过将 <strong>lEvent</strong> 参数为 <strong>0</strong> 或调用 <strong>WSAEventSelect()</strong> 通过设置 <strong>lNetworkEvents</strong> 参数为 <strong>0</strong> 来清除已经设置的 socket 相关标志位，再次调用 <strong>ioctlsocket()</strong> 将该 socket 设置成阻塞模式才会成功。因为调用 <strong>WSAAsyncSelect()</strong> 或<strong>WSAEventSelect()</strong> 函数会自动将 socket 设置成非阻塞模式。MSDN 上原文（<a href="https://docs.microsoft.com/en-us/windows/desktop/api/winsock/nf-winsock-ioctlsocket%EF%BC%89%E5%A6%82%E4%B8%8B%EF%BC%9A">https://docs.microsoft.com/en-us/windows/desktop/api/winsock/nf-winsock-ioctlsocket）如下：</a></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">The WSAAsyncSelect <span class="hljs-keyword">and</span> WSAEventSelect functions automatically <span class="hljs-keyword">set</span> a socket <span class="hljs-keyword">to</span> nonblocking mode. If WSAAsyncSelect <span class="hljs-keyword">or</span> WSAEventSelect has been issued <span class="hljs-keyword">on</span> a socket, <span class="hljs-keyword">then</span> any attempt <span class="hljs-keyword">to</span> use ioctlsocket <span class="hljs-keyword">to</span> <span class="hljs-keyword">set</span> <span class="hljs-keyword">the</span> socket <span class="hljs-keyword">back</span> <span class="hljs-keyword">to</span> blocking mode will fail <span class="hljs-keyword">with</span> WSAEINVAL.<br><br>To <span class="hljs-keyword">set</span> <span class="hljs-keyword">the</span> socket <span class="hljs-keyword">back</span> <span class="hljs-keyword">to</span> blocking mode, an <span class="hljs-built_in">application</span> must <span class="hljs-keyword">first</span> disable WSAAsyncSelect <span class="hljs-keyword">by</span> calling WSAAsyncSelect <span class="hljs-keyword">with</span> <span class="hljs-keyword">the</span> lEvent parameter <span class="hljs-keyword">equal</span> <span class="hljs-keyword">to</span> zero, <span class="hljs-keyword">or</span> disable WSAEventSelect <span class="hljs-keyword">by</span> calling WSAEventSelect <span class="hljs-keyword">with</span> <span class="hljs-keyword">the</span> lNetworkEvents parameter <span class="hljs-keyword">equal</span> <span class="hljs-keyword">to</span> zero.<br></code></pre></td></tr></table></figure><p>关于 <strong>WSAAsyncSelect()</strong> 和 <strong>WSAEventSelect()</strong> 这两个函数，后文中会详细讲解。</p><blockquote><p>注意事项：无论是 Linux 的 fcntl 函数，还是 Windows 的 ioctlsocket，建议读者在实际编码中判断一下函数返回值以确定是否调用成功。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 网络通讯基础学习笔记系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 网络通信基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络通信基础学习笔记03：select 函数用法</title>
      <link href="/2022/06/20/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B003%EF%BC%9Aselect-%E5%87%BD%E6%95%B0%E7%94%A8%E6%B3%95/"/>
      <url>/2022/06/20/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B003%EF%BC%9Aselect-%E5%87%BD%E6%95%B0%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="网络通信基础学习笔记03：select-函数用法">网络通信基础学习笔记03：select 函数用法</h2><h3 id="select-函数用法">select 函数用法</h3><p><strong>select</strong> 函数是网络通信编程中非常常用的一个函数，因此应该熟练掌握它。虽然它是 BSD 标准之一的 Socket 函数之一，但在 Linux 和 Windows 平台，其行为表现还是有点区别的。我们先来看一下 Linux 平台上的 select 函数。</p><h4 id="Linux-平台下的-select-函数">Linux 平台下的 select 函数</h4><p><strong>select</strong> 函数的作用是检测一组 socket 中某个或某几个是否有“<strong>事件</strong>”就绪，这里的“<strong>事件</strong>”一般分为如下三类：</p><ul><li><p><strong>读事件就绪</strong>：</p><blockquote><ol><li>socket 内核中，接收缓冲区中的字节数大于等于低水位标记 SO_RCVLOWAT，此时调用 <strong>recv</strong> 或 <strong>read</strong> 函数可以无阻塞的读该文件描述符， 并且返回值大于0；</li><li>TCP 连接的对端关闭连接，此时调用 <strong>recv</strong> 或 <strong>read</strong> 函数对该 socket 读，则返回 0；</li><li>侦听 socket 上有新的连接请求；</li><li>socket 上有未处理的错误。</li></ol></blockquote></li><li><p><strong>写事件就绪：</strong></p><blockquote><ol><li>socket 内核中，发送缓冲区中的可用字节数(发送缓冲区的空闲位置大⼩) 大于等于低水位标记 SO_SNDLOWAT，此时可以无阻塞的写, 并且返回值大于0；</li><li>socket 的写操作被关闭(调用了 close 或者 shutdown 函数)（ 对一个写操作被关闭的 socket 进行写操作, 会触发 SIGPIPE 信号）；</li><li>socket 使⽤非阻塞 connect 连接成功或失败之后；</li></ol></blockquote></li><li><p><strong>异常事件就绪</strong></p><blockquote><p>socket 上收到带外数据。</p></blockquote></li></ul><p>函数原型如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">select</span><span class="hljs-params">(<span class="hljs-type">int</span> nfds, </span></span><br><span class="hljs-params"><span class="hljs-function">   fd_set *readfds,</span></span><br><span class="hljs-params"><span class="hljs-function">           fd_set *writefds,</span></span><br><span class="hljs-params"><span class="hljs-function">           fd_set *exceptfds,</span></span><br><span class="hljs-params"><span class="hljs-function">           <span class="hljs-keyword">struct</span> timeval *timeout)</span></span>;<br></code></pre></td></tr></table></figure><p>参数说明：</p><ul><li><p>参数 <strong>nfds</strong>， Linux 下 socket 也称 fd，这个参数的值设置成所有需要使用 select 函数监听的 fd 中最大 fd 值加 1。</p></li><li><p>参数 <strong>readfds</strong>，需要监听可读事件的 fd 集合。</p></li><li><p>参数 <strong>writefds</strong>，需要监听可写事件的 fd 集合。</p></li><li><p>参数 <strong>exceptfds</strong>，需要监听异常事件 fd 集合。</p><p><strong>readfds</strong>、<strong>writefds</strong> 和 <strong>exceptfds</strong> 类型都是 <strong>fd_set</strong>，这是一个结构体信息，其定义位于 <strong>/usr/include/sys/select.h</strong> 中：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* The fd_set member is required to be an array of longs.  */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> __fd_mask;<br><br><span class="hljs-comment">/* Some versions of &lt;linux/posix_types.h&gt; define this macros.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">undef</span>  __NFDBITS</span><br><span class="hljs-comment">/* It&#x27;s easier to assume 8-bit bytes than to get CHAR_BIT.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NFDBITS       (8 * (int) sizeof (__fd_mask))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __FD_ELT(d)     ((d) / __NFDBITS)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __FD_MASK(d)    ((__fd_mask) 1 &lt;&lt; ((d) % __NFDBITS))</span><br><br><span class="hljs-comment">/* fd_set for select and pselect.  */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span><br>  &#123;<br>    <span class="hljs-comment">/* XPG4.2 requires this member name.  Otherwise avoid the name</span><br><span class="hljs-comment">       from the global namespace.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __USE_XOPEN</span><br>    __fd_mask fds_bits[__FD_SETSIZE / __NFDBITS];<br><span class="hljs-meta"># <span class="hljs-keyword">define</span> __FDS_BITS(set) ((set)-&gt;fds_bits)</span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-comment">// 在我的centOS 7.0 系统中的值：</span><br><span class="hljs-comment">// __FD_SETSIZE = 1024</span><br><span class="hljs-comment">//__NFDBITS = 64</span><br>    __fd_mask __fds_bits[__FD_SETSIZE / __NFDBITS]; <br><span class="hljs-meta"># <span class="hljs-keyword">define</span> __FDS_BITS(set) ((set)-&gt;__fds_bits)</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  &#125; fd_set;<br><br><span class="hljs-comment">/* Maximum number of file descriptors in `fd_set&#x27;.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FD_SETSIZE              __FD_SETSIZE</span><br></code></pre></td></tr></table></figure><p>我们假设未定义宏 <strong>__USE_XOPEN</strong>，将上面的代码整理一下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span><br>&#123; <br>    <span class="hljs-type">long</span> <span class="hljs-type">int</span> __fds_bits[<span class="hljs-number">16</span>]; <br>&#125; fd_set;<br></code></pre></td></tr></table></figure><p>将一个 fd 添加到 fd_set 这个集合中需要使用 <strong>FD_SET</strong> 宏，其定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">FD_SET</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, fd_set *set)</span></span>;<br></code></pre></td></tr></table></figure><p>其实现如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">define</span> FD_SET(fd,fdsetp) __FD_SET(fd,fdsetp)</span><br></code></pre></td></tr></table></figure><p><strong>FD_SET</strong> 在内部又是通过宏 <strong>__FD_SET</strong> 来实现的，<strong>__FD_SET</strong> 的定义如下（位于 <strong>/usr/include/bits/select.h</strong> 中）：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined __GNUC__ &amp;&amp; __GNUC__ &gt;= 2</span><br><br><span class="hljs-meta"># <span class="hljs-keyword">if</span> __WORDSIZE == 64</span><br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> __FD_ZERO_STOS <span class="hljs-string">&quot;stosq&quot;</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> __FD_ZERO_STOS <span class="hljs-string">&quot;stosl&quot;</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> __FD_ZERO(fdsp) \</span><br><span class="hljs-meta">  do &#123;                                                                        \</span><br><span class="hljs-meta">    int __d0, __d1;                                                           \</span><br><span class="hljs-meta">    __asm__ __volatile__ (<span class="hljs-string">&quot;cld; rep; &quot;</span> __FD_ZERO_STOS                         \</span><br><span class="hljs-meta">                          : <span class="hljs-string">&quot;=c&quot;</span> (__d0), <span class="hljs-string">&quot;=D&quot;</span> (__d1)                          \</span><br><span class="hljs-meta">                          : <span class="hljs-string">&quot;a&quot;</span> (0), <span class="hljs-string">&quot;0&quot;</span> (sizeof (fd_set)                     \</span><br><span class="hljs-meta">                                          / sizeof (__fd_mask)),              \</span><br><span class="hljs-meta">                            <span class="hljs-string">&quot;1&quot;</span> (&amp;__FDS_BITS (fdsp)[0])                       \</span><br><span class="hljs-meta">                          : <span class="hljs-string">&quot;memory&quot;</span>);                                        \</span><br><span class="hljs-meta">  &#125; while (0)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">else</span>   <span class="hljs-comment">/* ! GNU CC */</span></span><br><br><span class="hljs-comment">/* We don&#x27;t use `memset&#x27; because this would require a prototype and</span><br><span class="hljs-comment">   the array isn&#x27;t too big.  */</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> __FD_ZERO(set)  \</span><br><span class="hljs-meta">  do &#123;                                                                        \</span><br><span class="hljs-meta">    unsigned int __i;                                                         \</span><br><span class="hljs-meta">    fd_set *__arr = (set);                                                    \</span><br><span class="hljs-meta">    for (__i = 0; __i &lt; sizeof (fd_set) / sizeof (__fd_mask); ++__i)          \</span><br><span class="hljs-meta">      __FDS_BITS (__arr)[__i] = 0;                                            \</span><br><span class="hljs-meta">  &#125; while (0)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span>  <span class="hljs-comment">/* GNU CC */</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __FD_SET(d, set) \</span><br><span class="hljs-meta">  ((void) (__FDS_BITS (set)[__FD_ELT (d)] |= __FD_MASK (d)))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __FD_CLR(d, set) \</span><br><span class="hljs-meta">  ((void) (__FDS_BITS (set)[__FD_ELT (d)] &amp;= ~__FD_MASK (d)))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __FD_ISSET(d, set) \</span><br><span class="hljs-meta">  ((__FDS_BITS (set)[__FD_ELT (d)] &amp; __FD_MASK (d)) != 0)</span><br></code></pre></td></tr></table></figure><p>重点看这一行：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">((<span class="hljs-type">void</span>) (__FDS_BITS (set)[__FD_ELT (d)] |= __FD_MASK (d)))<br></code></pre></td></tr></table></figure><p><strong>__FD_MASK</strong> 和 <strong>__FD_ELT</strong> 宏在上面的代码中已经给出定义：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">define</span> __FD_ELT(d)     ((d) / __NFDBITS)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __FD_MASK(d)    ((__fd_mask) 1 &lt;&lt; ((d) % __NFDBITS))</span><br></code></pre></td></tr></table></figure><p><strong>__NFDBITS</strong> 的值是 <strong>64</strong> （<strong>8 * 8</strong>），也就是说 **__FD_MASK (d) ** 先计算 fd 与 64 的余数 n，然后执行 1 &lt;&lt; n，这一操作实际上是将 fd 的值放在 0～63 这 64 的位置上去，这个位置索引就是 fd 与 64 取模的结果；同理 <strong>__FD_ELT(d)</strong> 就是计算位置索引值了。举个例子，假设现在 fd 的 值是 57，那么在这 64 个位置的 57 位，其值在 64 个长度的二进制中置位是：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-number">0000 </span><span class="hljs-number">0010 </span><span class="hljs-number">0000 </span><span class="hljs-number">0000 </span><span class="hljs-number">0000 </span><span class="hljs-number">0000 </span><span class="hljs-number">0000 </span><span class="hljs-number">0000 </span><span class="hljs-number">0000 </span><span class="hljs-number">0000 </span><span class="hljs-number">0000 </span><span class="hljs-number">0000 </span><span class="hljs-number">0000 </span><span class="hljs-number">0000 </span><span class="hljs-number">0000 </span><span class="hljs-number">0000</span><br></code></pre></td></tr></table></figure><p>这个值就是 **1 &lt;&lt; (57 % 64) **得到的数字。</p><p>但是前面 fd 数组的定义是：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span><br>&#123; <br>    <span class="hljs-type">long</span> <span class="hljs-type">int</span> __fds_bits[<span class="hljs-number">16</span>];<span class="hljs-comment">//可以看成是128 bit的数组 </span><br>&#125; fd_set;<br></code></pre></td></tr></table></figure><p><strong>long int</strong> 占 8 个字节，每个字节 8 bit，一共 16 个 <strong>long int</strong>，如果换成二进制的位( <strong>bit</strong> )就是 <strong>8 * 8 * 16</strong> = <strong>1024</strong>， 这说明在我的机器上，select 函数支持操作的最大 fd 数量是 1024。</p><p>同理，如果我们需要从 fd_set 上删除一个 fd，我们可以调用 <strong>FD_CLR</strong>，其定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">FD_CLR</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, fd_set *set)</span></span>;<br></code></pre></td></tr></table></figure><p>原理和 <strong>FD_SET</strong> 相同，即将对应标志清零即可。</p><p>如果，我们需要将 fd_set 中所有的 fd 都清掉，则使用宏 <strong>FD_ZERO</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">FD_ZERO</span><span class="hljs-params">(fd_set *set)</span></span>;<br></code></pre></td></tr></table></figure><p>当 select 函数返回时， 我们使用 <strong>FD_ISSET</strong> 宏来判断某个 fd 是否有我们关心的事件，<strong>FD_ISSET</strong> 宏的定义如下：</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span>  <span class="hljs-title">FD_ISSET</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, fd_set *set)</span></span>;<br></code></pre></td></tr></table></figure><p><strong>FD_ISSET</strong> 宏本质上就是检测对应的位置上是否置 1，实现如下：</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">define</span> __FD_ISSET(d, set) \</span><br><span class="hljs-meta">  ((__FDS_BITS (set)[__FD_ELT (d)] &amp; __FD_MASK (d)) != 0)</span><br></code></pre></td></tr></table></figure><blockquote><p>提醒一下： __FD_ELT 和 __FD_MASK 宏前文的代码已经给过具体实现了。</p></blockquote><ul><li><p>参数 <strong>timeout</strong>，超时时间，即在这个参数设定的时间内检测这些 fd 的事件，超过这个时间后 <strong>select</strong> 函数将立即返回。这是一个 <strong>timeval</strong> 类型结构体，其定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">timeval</span> <br>&#123;<br><span class="hljs-type">long</span>    tv_sec;         <span class="hljs-comment">/* seconds */</span><br><span class="hljs-type">long</span>    tv_usec;        <span class="hljs-comment">/* microseconds */</span><br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>select</strong> 函数的总超时时间是 <strong>timeout-&gt;tv_sec</strong> 和 <strong>timeout-&gt;tv_usec</strong> 之和， 前者的时间单位是秒，后者的时间单位是微秒。</p></li></ul><p>说了这么多理论知识，我们先看一个具体的示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * select函数示例，server端, select_server.cpp</span><br><span class="hljs-comment"> * liansixin 2022-6-20</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;arpa/inet.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><br><span class="hljs-comment">//自定义代表无效fd的值</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INVALID_FD -1</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//创建一个侦听socket</span><br>    <span class="hljs-type">int</span> listenfd = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (listenfd == <span class="hljs-number">-1</span>)<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;create listen socket error.&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//初始化服务器地址</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span> bindaddr;<br>    bindaddr.sin_family = AF_INET;<br>    bindaddr.sin_addr.s_addr = <span class="hljs-built_in">htonl</span>(INADDR_ANY);<br>    bindaddr.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">3000</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">bind</span>(listenfd, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;bindaddr, <span class="hljs-built_in">sizeof</span>(bindaddr)) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;bind listen socket error.&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-built_in">close</span>(listenfd);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br><span class="hljs-comment">//启动侦听</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">listen</span>(listenfd, SOMAXCONN) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;listen error.&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-built_in">close</span>(listenfd);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br><span class="hljs-comment">//存储客户端socket的数组</span><br>std::vector&lt;<span class="hljs-type">int</span>&gt; clientfds;<br><span class="hljs-type">int</span> maxfd = listenfd;<br><br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) <br>&#123;<br>fd_set readset;<br><span class="hljs-built_in">FD_ZERO</span>(&amp;readset);<br><br><span class="hljs-comment">//将侦听socket加入到待检测的可读事件中去</span><br><span class="hljs-built_in">FD_SET</span>(listenfd, &amp;readset);<br><br><span class="hljs-comment">//将客户端fd加入到待检测的可读事件中去</span><br><span class="hljs-type">int</span> clientfdslength = clientfds.<span class="hljs-built_in">size</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; clientfdslength; ++i)<br>&#123;<br><span class="hljs-keyword">if</span> (clientfds[i] != INVALID_FD)<br>&#123;<br><span class="hljs-built_in">FD_SET</span>(clientfds[i], &amp;readset);<br>&#125;<br>&#125;<br><br>timeval tm;<br>tm.tv_sec = <span class="hljs-number">1</span>;<br>tm.tv_usec = <span class="hljs-number">0</span>;<br><span class="hljs-comment">//暂且只检测可读事件，不检测可写和异常事件</span><br><span class="hljs-type">int</span> ret = <span class="hljs-built_in">select</span>(maxfd + <span class="hljs-number">1</span>, &amp;readset, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, &amp;tm);<br><span class="hljs-keyword">if</span> (ret == <span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-comment">//出错，退出程序。</span><br><span class="hljs-keyword">if</span> (errno != EINTR)<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ret == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-comment">//select 函数超时，下次继续</span><br><span class="hljs-keyword">continue</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">//检测到某个socket有事件</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">FD_ISSET</span>(listenfd, &amp;readset))<br>&#123;<br><span class="hljs-comment">//侦听socket的可读事件，则表明有新的连接到来</span><br><span class="hljs-keyword">struct</span> sockaddr_in clientaddr;<br><span class="hljs-type">socklen_t</span> clientaddrlen = <span class="hljs-built_in">sizeof</span>(clientaddr);<br><span class="hljs-comment">//4. 接受客户端连接</span><br><span class="hljs-type">int</span> clientfd = <span class="hljs-built_in">accept</span>(listenfd, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;clientaddr, &amp;clientaddrlen);<br><span class="hljs-keyword">if</span> (clientfd == <span class="hljs-number">-1</span>)<br>&#123;         <br><span class="hljs-comment">//接受连接出错，退出程序</span><br><span class="hljs-keyword">break</span>;<br>&#125;<br><br><span class="hljs-comment">//只接受连接，不调用recv收取任何数据</span><br>std:: cout &lt;&lt; <span class="hljs-string">&quot;accept a client connection, fd: &quot;</span> &lt;&lt; clientfd &lt;&lt; std::endl;<br>clientfds.<span class="hljs-built_in">push_back</span>(clientfd);<br><span class="hljs-comment">//记录一下最新的最大fd值，以便作为下一轮循环中select的第一个参数</span><br><span class="hljs-keyword">if</span> (clientfd &gt; maxfd)<br>maxfd = clientfd;<br>&#125; <br><span class="hljs-keyword">else</span> <br>&#123;<br><span class="hljs-comment">//假设对端发来的数据长度不超过63个字符</span><br><span class="hljs-type">char</span> recvbuf[<span class="hljs-number">64</span>];<br><span class="hljs-type">int</span> clientfdslength = clientfds.<span class="hljs-built_in">size</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; clientfdslength; ++i)<br>&#123;<br><span class="hljs-keyword">if</span> (clientfds[i] != <span class="hljs-number">-1</span> &amp;&amp; <span class="hljs-built_in">FD_ISSET</span>(clientfds[i], &amp;readset))<br>&#123;<br><span class="hljs-built_in">memset</span>(recvbuf, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(recvbuf));<br><span class="hljs-comment">//非侦听socket，则接收数据</span><br><span class="hljs-type">int</span> length = <span class="hljs-built_in">recv</span>(clientfds[i], recvbuf, <span class="hljs-number">64</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (length &lt;= <span class="hljs-number">0</span> &amp;&amp; errno != EINTR)<br>&#123;<br><span class="hljs-comment">//收取数据出错了</span><br>std::cout &lt;&lt; <span class="hljs-string">&quot;recv data error, clientfd: &quot;</span> &lt;&lt; clientfds[i] &lt;&lt; std::endl;<br><span class="hljs-built_in">close</span>(clientfds[i]);<br><span class="hljs-comment">//不直接删除该元素，将该位置的元素置位-1</span><br>clientfds[i] = INVALID_FD;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><br>std::cout &lt;&lt; <span class="hljs-string">&quot;clientfd: &quot;</span> &lt;&lt; clientfds[i] &lt;&lt; <span class="hljs-string">&quot;, recv data: &quot;</span> &lt;&lt; recvbuf &lt;&lt; std::endl;<br>&#125;<br>&#125;<br><br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//关闭所有客户端socket</span><br><span class="hljs-type">int</span> clientfdslength = clientfds.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; clientfdslength; ++i)<br>&#123;<br><span class="hljs-keyword">if</span> (clientfds[i] != INVALID_FD)<br>&#123;<br><span class="hljs-built_in">close</span>(clientfds[i]);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//关闭侦听socket</span><br><span class="hljs-built_in">close</span>(listenfd);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们编译并运行程序：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost testsocket]# g++ -g -o select_server select_server.cpp <br>[root@localhost testsocket]# ./select_server <br></code></pre></td></tr></table></figure><p>然后，我们再多开几个 shell 窗口，我们这里不再专门编写客户端程序了，我们使用 Linux 下的 <strong>nc</strong> 指令模拟出两个客户端。</p><p>shell 窗口1，连接成功以后发送字符串 <strong>hello123</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# nc -v 127.0.0.1 3000<br>Ncat: Version 6.40 ( http://nmap.org/ncat )<br>Ncat: Connected to 127.0.0.1:3000.<br>hello123<br></code></pre></td></tr></table></figure><p>shell 窗口2，连接成功以后发送字符串 <strong>helloworld</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# nc -v 127.0.0.1 3000<br>Ncat: Version 6.40 ( http://nmap.org/ncat )<br>Ncat: Connected to 127.0.0.1:3000.<br>helloworld<br></code></pre></td></tr></table></figure><p>此时服务器端输出结果如下：</p><p><img src="/images/2022-6-20-001.png" alt="upload successful"></p><p>注意，由于 <strong>nc</strong> 发送的数据是按换行符来区分的，每一个数据包默认的换行符以**\n** 结束（当然，你可以 <strong>-C</strong> 选项换成\r\n），所以服务器收到数据后，显示出来的数据每一行下面都有一个空白行。</p><p>当断开各个客户端连接时，服务器端 select 函数对各个客户端 fd 检测时，仍然会触发可读事件，此时对这些 fd 调用 recv 函数会返回 <strong>0</strong>（recv 函数返回0，表明对端关闭了连接，这是一个很重要的知识点，下文我们会有一章节专门介绍这些函数的返回值），服务器端也关闭这些连接就可以了。</p><p>客户端断开连接后，服务器端的运行输出结果：</p><p><img src="/images/2022-6-20-0002.png" alt="upload successful"></p><p>以上代码是一个简单的服务器程序实现的基本流程，代码虽然简单，但是非常具有典型性和代表性，而且同样适用于客户端网络通信，如果用于客户端的话，只需要用 select 检测连接 socket 就可以了，如果连接 socket 有可读事件，调用 recv 函数来接收数据，剩下的逻辑都是一样的。</p><p>关于上述代码在实际开发中有几个需要注意的事项，这里逐一来说明一下：</p><ol><li><p><strong>select 函数调用前后会修改 readfds、writefds 和 exceptfds 这三个集合中的内容（如果有的话），所以如果您想下次调用 select 复用这个变量，记得在下次调用前再次调用 select 前先使用 FD_ZERO 将集合清零，然后调用 FD_SET 将需要检测事件的 fd 再次添加进去</strong>。</p><blockquote><p>select 函数调用之后，<strong>readfds</strong>、<strong>writefds</strong> 和 <strong>exceptfds</strong> 这三个集合中存放的不是我们之前设置进去的 fd，而是有相关有读写或异常事件的 fd，也就是说 select 函数会修改这三个参数的内容，这也要求我们<strong>当一个 fd_set 被 select 函数调用后，这个 fd_set 就已经发生了改变，下次如果我们需要使用它，必须使用 FD_ZERO 宏先清零，再重新将我们关心的 fd 设置进去</strong>。这点我们从 <strong>FD_ISSET</strong> 源码也可以看出来：</p></blockquote></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">define</span> __FD_ISSET(d, set) \</span><br><span class="hljs-meta">   ((__FDS_BITS (set)[__FD_ELT (d)] &amp; __FD_MASK (d)) != 0)</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">   如果调用 select 函数之后没有改变 fd_set 集合，那么即使某个 socket 上没有事件，调用 select 函数之后我们用 **FD_ISSET** 检测，会原路得到原来设置上去的 socket。这是很多初学者在学习 select 函数容易犯的一个错误，我们通过一个示例来验证一下，这次我们把 select 函数用在客户端。</code></pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 验证调用select后必须重设fd_set，select_client.cpp</span><br><span class="hljs-comment"> * liansixin 2022-6-20</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;arpa/inet.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SERVER_ADDRESS <span class="hljs-string">&quot;127.0.0.1&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SERVER_PORT     3000</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//创建一个socket</span><br>    <span class="hljs-type">int</span> clientfd = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (clientfd == <span class="hljs-number">-1</span>)<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;create client socket error.&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//连接服务器</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span> serveraddr;<br>    serveraddr.sin_family = AF_INET;<br>    serveraddr.sin_addr.s_addr = <span class="hljs-built_in">inet_addr</span>(SERVER_ADDRESS);<br>    serveraddr.sin_port = <span class="hljs-built_in">htons</span>(SERVER_PORT);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">connect</span>(clientfd, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;serveraddr, <span class="hljs-built_in">sizeof</span>(serveraddr)) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;connect socket error.&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-built_in">close</span>(clientfd);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>fd_set readset;<br><span class="hljs-built_in">FD_ZERO</span>(&amp;readset);<br><br><span class="hljs-comment">//将侦听socket加入到待检测的可读事件中去</span><br><span class="hljs-built_in">FD_SET</span>(clientfd, &amp;readset);<br>timeval tm;<br>tm.tv_sec = <span class="hljs-number">5</span>;<br>tm.tv_usec = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> ret;<br><span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br>fd_set backup_readset;<br><span class="hljs-built_in">memcpy</span>(&amp;backup_readset, &amp;readset, <span class="hljs-built_in">sizeof</span>(fd_set));<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">memcmp</span>(&amp;readset, &amp;backup_readset, <span class="hljs-built_in">sizeof</span>(fd_set)) == <span class="hljs-number">0</span>)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;equal&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;not equal&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-comment">//暂且只检测可读事件，不检测可写和异常事件</span><br>ret = <span class="hljs-built_in">select</span>(clientfd + <span class="hljs-number">1</span>, &amp;readset, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, &amp;tm);<br>std::cout &lt;&lt; <span class="hljs-string">&quot;tm.tv_sec: &quot;</span> &lt;&lt; tm.tv_sec &lt;&lt; <span class="hljs-string">&quot;, tm.tv_usec: &quot;</span> &lt;&lt; tm.tv_usec &lt;&lt; std::endl;<br><span class="hljs-keyword">if</span> (ret == <span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-comment">//除了被信号中断的情形，其他情况都是出错</span><br><span class="hljs-keyword">if</span> (errno != EINTR)<br><span class="hljs-keyword">break</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ret == <span class="hljs-number">0</span>)&#123;<br><span class="hljs-comment">//select函数超时</span><br>std::cout &lt;&lt; <span class="hljs-string">&quot;no event in specific time interval, count：&quot;</span> &lt;&lt; count &lt;&lt; std::endl;<br>++count;<br><span class="hljs-keyword">continue</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">FD_ISSET</span>(clientfd, &amp;readset))<br>&#123;<br><span class="hljs-comment">//检测到可读事件</span><br><span class="hljs-type">char</span> recvbuf[<span class="hljs-number">32</span>];<br><span class="hljs-built_in">memset</span>(recvbuf, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(recvbuf));<br><span class="hljs-comment">//假设对端发数据的时候不超过31个字符。</span><br><span class="hljs-type">int</span> n = <span class="hljs-built_in">recv</span>(clientfd, recvbuf, <span class="hljs-number">32</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-comment">//除了被信号中断的情形，其他情况都是出错</span><br><span class="hljs-keyword">if</span> (errno != EINTR)<br><span class="hljs-keyword">break</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-comment">//对端关闭了连接</span><br><span class="hljs-keyword">break</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;recv data: &quot;</span> &lt;&lt; recvbuf &lt;&lt; std::endl;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> <br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;other socket event.&quot;</span> &lt;&lt; std::endl;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//关闭socket</span><br><span class="hljs-built_in">close</span>(clientfd);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 shell 窗口输入以下命令编译程序产生可执行文件 <strong>select_client</strong>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">g</span>++ -<span class="hljs-selector-tag">g</span> -o select_client select_client<span class="hljs-selector-class">.cpp</span><br></code></pre></td></tr></table></figure><p>这次产生的是客户端程序，服务器程序我们这里使用 Linux <strong>nc</strong> 命令来模拟一下，由于客户端连接的是 <strong>127.0.0.1:3000</strong> 这个地址和端口号，所以我们在另外一个shell 窗口的 <strong>nc</strong> 命令的参数可以这么写：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span> -v -l <span class="hljs-number">0.0.0.0</span> <span class="hljs-number">3000</span><br></code></pre></td></tr></table></figure><p>执行效果如下：</p><p><img src="/images/2022-6-20-0003.png" alt="upload successful"></p><p>接着我们启动客户端 <strong>select_client</strong>：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@myaliyun</span> testsocket]<span class="hljs-meta"># ./select_client </span><br></code></pre></td></tr></table></figure><p>需要注意的是，这里我故意将客户端代码中 select 函数的超时时间设置为5秒，以足够我们在这 5 秒内给客户端发一个数据。如果我们在 5 秒内给客户端发送 <strong>hello</strong> 字符串：</p><p>客户端输出如下：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vim">[root@myaliyun testsocket]# ./select_client <br>equal<br>recv data: hello<br><br>...部分数据省略...<br>not equal<br><span class="hljs-keyword">tm</span>.tv_sec: <span class="hljs-number">0</span>, <span class="hljs-keyword">tm</span>.tv_usec: <span class="hljs-number">0</span><br><span class="hljs-keyword">no</span> event in specific time interval, <span class="hljs-built_in">count</span>：<span class="hljs-number">31454</span><br>not equal<br><span class="hljs-keyword">tm</span>.tv_sec: <span class="hljs-number">0</span>, <span class="hljs-keyword">tm</span>.tv_usec: <span class="hljs-number">0</span><br><span class="hljs-keyword">no</span> event in specific time interval, <span class="hljs-built_in">count</span>：<span class="hljs-number">31455</span><br>not equal<br><span class="hljs-keyword">tm</span>.tv_sec: <span class="hljs-number">0</span>, <span class="hljs-keyword">tm</span>.tv_usec: <span class="hljs-number">0</span><br><span class="hljs-keyword">no</span> event in specific time interval, <span class="hljs-built_in">count</span>：<span class="hljs-number">31456</span><br>not equal<br><span class="hljs-keyword">tm</span>.tv_sec: <span class="hljs-number">0</span>, <span class="hljs-keyword">tm</span>.tv_usec: <span class="hljs-number">0</span><br><span class="hljs-keyword">no</span> event in specific time interval, <span class="hljs-built_in">count</span>：<span class="hljs-number">31457</span><br>...部分输出省略...<br></code></pre></td></tr></table></figure><p>除了第一次 <strong>select_client</strong> 会输出 <strong>equal</strong> 字样，后面再也没输出，而 <strong>select</strong> 函数以后的执行结果也是超时，即使此时服务器端再次给客户端发送数据。因此验证了：<strong>select 函数执行后，确实会对三个参数的 fd_set 进行修改</strong> 。</p><p>因此在调用 <strong>select</strong> 函数以后， 原来位置的的标志位可能已经不复存在，这也就是为什么我们的代码中调用一次 <strong>select</strong> 函数以后，即使服务器端再次发送数据过来，<strong>select</strong> 函数也不会再因为存在可读事件而返回了，因为第二次 clientfd 已经不在那个 read_set 中了。因此如果复用这些 fd_set 变量，必须按上文所说的重新清零再重新添加关心的 socket 到集合中去。</p><ol start="2"><li><p><strong>select 函数也会修改 timeval 结构体的值，这也要求我们如果像复用这个变量，必须给 timeval 变量重新设置值。</strong></p><p>注意观察上面的例子的输出，我们在调用 <strong>select</strong> 函数一次之后，变量 tv 的值也被修改了。具体修改成多少，得看系统的表现。当然这种特性却不是跨平台的，在 Linux 系统中是这样的，而在其他操作系统上却不一定是这样（Windows 上就不会修改这个结构体的值），这点在 Linux man 手册 <strong>select</strong> 函数的说明中说的很清楚：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">On</span>  Linux,  <span class="hljs-keyword">select</span>()  modifies timeout <span class="hljs-keyword">to</span> reflect the amount <span class="hljs-keyword">of</span> <span class="hljs-type">time</span> <span class="hljs-keyword">not</span> slept; most other implementations <span class="hljs-keyword">do</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">do</span> this.(POSIX<span class="hljs-number">.1</span><span class="hljs-number">-2001</span> permits either behavior.)  This causes problems <span class="hljs-keyword">both</span> <span class="hljs-keyword">when</span> Linux code which reads timeout <span class="hljs-keyword">is</span> ported <span class="hljs-keyword">to</span>  other operating systems, <span class="hljs-keyword">and</span> <span class="hljs-keyword">when</span> code <span class="hljs-keyword">is</span> ported <span class="hljs-keyword">to</span> Linux that reuses a struct timeval <span class="hljs-keyword">for</span> multiple <span class="hljs-keyword">select</span>()s <span class="hljs-keyword">in</span> a <span class="hljs-keyword">loop</span> <span class="hljs-keyword">without</span> reinitializing it.  Consider timeout <span class="hljs-keyword">to</span> be undefined <span class="hljs-keyword">after</span> <span class="hljs-keyword">select</span>() <span class="hljs-keyword">returns</span>.<br></code></pre></td></tr></table></figure><p>由于不同系统的实现不一样，man 手册的建议将 <strong>select</strong> 函数修改 <strong>timeval</strong> 结构体的值的行为当作是未定义的，言下之意是<strong>如果你要下次使用 select 函数复用这个变量时，记得重新赋值</strong>。这是 select 函数需要注意的第二个地方。</p></li><li><p><strong>select 函数的 timeval 结构体的 tv_sec 和 tv_sec 如果两个值设置为 0，即检测事件总时间设置为0，其行为是 select 会检测一下相关集合中的 fd，如果没有需要的事件，则立即返回</strong>。</p><p>我们将上述 <strong>select_client.cpp</strong> 修改一下，修改后的代码如下：</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 验证select时间参数设置为0，select_client_tv0.cpp</span><br><span class="hljs-comment">* liansixin 2022-6-20</span><br><span class="hljs-comment">*/</span><br>   <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span> </span><br>   <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br>   <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;arpa/inet.h&gt;</span></span><br>   <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br>   <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br>   <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br>   <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br>   <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br>   <br>   <span class="hljs-meta">#<span class="hljs-keyword">define</span> SERVER_ADDRESS <span class="hljs-string">&quot;127.0.0.1&quot;</span></span><br>   <span class="hljs-meta">#<span class="hljs-keyword">define</span> SERVER_PORT     3000</span><br>   <br>   <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span></span><br><span class="hljs-function">   </span>&#123;<br>       <span class="hljs-comment">//创建一个socket</span><br>       <span class="hljs-type">int</span> clientfd = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br>       <span class="hljs-keyword">if</span> (clientfd == <span class="hljs-number">-1</span>)<br>       &#123;<br>           std::cout &lt;&lt; <span class="hljs-string">&quot;create client socket error.&quot;</span> &lt;&lt; std::endl;<br>           <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>       &#125;<br>   <br>       <span class="hljs-comment">//连接服务器</span><br>       <span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span> serveraddr;<br>       serveraddr.sin_family = AF_INET;<br>       serveraddr.sin_addr.s_addr = <span class="hljs-built_in">inet_addr</span>(SERVER_ADDRESS);<br>       serveraddr.sin_port = <span class="hljs-built_in">htons</span>(SERVER_PORT);<br>       <span class="hljs-keyword">if</span> (<span class="hljs-built_in">connect</span>(clientfd, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;serveraddr, <span class="hljs-built_in">sizeof</span>(serveraddr)) == <span class="hljs-number">-1</span>)<br>       &#123;<br>           std::cout &lt;&lt; <span class="hljs-string">&quot;connect socket error.&quot;</span> &lt;&lt; std::endl;<br>   <span class="hljs-built_in">close</span>(clientfd);<br>           <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>       &#125;<br>   <br>   <span class="hljs-type">int</span> ret;<br>   <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>   &#123;<br>   fd_set readset;<br>   <span class="hljs-built_in">FD_ZERO</span>(&amp;readset);<br>   <span class="hljs-comment">//将侦听socket加入到待检测的可读事件中去</span><br>   <span class="hljs-built_in">FD_SET</span>(clientfd, &amp;readset);<br>   timeval tm;<br>   tm.tv_sec = <span class="hljs-number">0</span>;<br>   tm.tv_usec = <span class="hljs-number">0</span>;<br>   <br>   <span class="hljs-comment">//暂且只检测可读事件，不检测可写和异常事件</span><br>   ret = <span class="hljs-built_in">select</span>(clientfd + <span class="hljs-number">1</span>, &amp;readset, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, &amp;tm);<br>   std::cout &lt;&lt; <span class="hljs-string">&quot;tm.tv_sec: &quot;</span> &lt;&lt; tm.tv_sec &lt;&lt; <span class="hljs-string">&quot;, tm.tv_usec: &quot;</span> &lt;&lt; tm.tv_usec &lt;&lt; std::endl;<br>   <span class="hljs-keyword">if</span> (ret == <span class="hljs-number">-1</span>)<br>   &#123;<br>   <span class="hljs-comment">//除了被信号中断的情形，其他情况都是出错</span><br>   <span class="hljs-keyword">if</span> (errno != EINTR)<br>   <span class="hljs-keyword">break</span>;<br>   &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ret == <span class="hljs-number">0</span>)&#123;<br>   <span class="hljs-comment">//select函数超时</span><br>   std::cout &lt;&lt; <span class="hljs-string">&quot;no event in specific time interval.&quot;</span> &lt;&lt; std::endl;<br>   <span class="hljs-keyword">continue</span>;<br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>   <span class="hljs-keyword">if</span> (<span class="hljs-built_in">FD_ISSET</span>(clientfd, &amp;readset))<br>   &#123;<br>   <span class="hljs-comment">//检测到可读事件</span><br>   <span class="hljs-type">char</span> recvbuf[<span class="hljs-number">32</span>];<br>   <span class="hljs-built_in">memset</span>(recvbuf, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(recvbuf));<br>   <span class="hljs-comment">//假设对端发数据的时候不超过31个字符。</span><br>   <span class="hljs-type">int</span> n = <span class="hljs-built_in">recv</span>(clientfd, recvbuf, <span class="hljs-number">32</span>, <span class="hljs-number">0</span>);<br>   <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">0</span>)<br>   &#123;<br>   <span class="hljs-comment">//除了被信号中断的情形，其他情况都是出错</span><br>   <span class="hljs-keyword">if</span> (errno != EINTR)<br>   <span class="hljs-keyword">break</span>;<br>   &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) &#123;<br>   <span class="hljs-comment">//对端关闭了连接</span><br>   <span class="hljs-keyword">break</span>;<br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>   std::cout &lt;&lt; <span class="hljs-string">&quot;recv data: &quot;</span> &lt;&lt; recvbuf &lt;&lt; std::endl;<br>   &#125;<br>   &#125;<br>   <span class="hljs-keyword">else</span> <br>   &#123;<br>   std::cout &lt;&lt; <span class="hljs-string">&quot;other socket event.&quot;</span> &lt;&lt; std::endl;<br>   &#125;<br>   &#125;<br>   &#125;<br>   <br>   <br>   <span class="hljs-comment">//关闭socket</span><br>   <span class="hljs-built_in">close</span>(clientfd);<br>   <br>       <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>   &#125;<br></code></pre></td></tr></table></figure><p>执行结果确实如我们预期的，这里 select 函数只是简单地检测一下 clientfd，并不会等待固定的时间，然后立即返回。</p><ol start="4"><li><p><strong>如果将 select 函数的 timeval 参数设置为 NULL，则 select 函数会一直阻塞下去，直到我们需要的事件触发。</strong></p><p>我们将上述代码再修改一下：</p></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 验证select时间参数设置为NULL，select_client_tvnull.cpp</span><br><span class="hljs-comment"> * liansixin 2022-6-20</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;arpa/inet.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SERVER_ADDRESS <span class="hljs-string">&quot;127.0.0.1&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SERVER_PORT     3000</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//创建一个socket</span><br>    <span class="hljs-type">int</span> clientfd = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (clientfd == <span class="hljs-number">-1</span>)<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;create client socket error.&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//连接服务器</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span> serveraddr;<br>    serveraddr.sin_family = AF_INET;<br>    serveraddr.sin_addr.s_addr = <span class="hljs-built_in">inet_addr</span>(SERVER_ADDRESS);<br>    serveraddr.sin_port = <span class="hljs-built_in">htons</span>(SERVER_PORT);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">connect</span>(clientfd, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;serveraddr, <span class="hljs-built_in">sizeof</span>(serveraddr)) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;connect socket error.&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-built_in">close</span>(clientfd);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br><span class="hljs-type">int</span> ret;<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>&#123;<br>fd_set readset;<br><span class="hljs-built_in">FD_ZERO</span>(&amp;readset);<br><span class="hljs-comment">//将侦听socket加入到待检测的可读事件中去</span><br><span class="hljs-built_in">FD_SET</span>(clientfd, &amp;readset);<br><span class="hljs-comment">//timeval tm;</span><br><span class="hljs-comment">//tm.tv_sec = 0;</span><br><span class="hljs-comment">//tm.tv_usec = 0;</span><br><br><span class="hljs-comment">//暂且只检测可读事件，不检测可写和异常事件</span><br>ret = <span class="hljs-built_in">select</span>(clientfd + <span class="hljs-number">1</span>, &amp;readset, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span> (ret == <span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-comment">//除了被信号中断的情形，其他情况都是出错</span><br><span class="hljs-keyword">if</span> (errno != EINTR)<br><span class="hljs-keyword">break</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ret == <span class="hljs-number">0</span>)&#123;<br><span class="hljs-comment">//select函数超时</span><br>std::cout &lt;&lt; <span class="hljs-string">&quot;no event in specific time interval.&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">continue</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">FD_ISSET</span>(clientfd, &amp;readset))<br>&#123;<br><span class="hljs-comment">//检测到可读事件</span><br><span class="hljs-type">char</span> recvbuf[<span class="hljs-number">32</span>];<br><span class="hljs-built_in">memset</span>(recvbuf, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(recvbuf));<br><span class="hljs-comment">//假设对端发数据的时候不超过31个字符。</span><br><span class="hljs-type">int</span> n = <span class="hljs-built_in">recv</span>(clientfd, recvbuf, <span class="hljs-number">32</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-comment">//除了被信号中断的情形，其他情况都是出错</span><br><span class="hljs-keyword">if</span> (errno != EINTR)<br><span class="hljs-keyword">break</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-comment">//对端关闭了连接</span><br><span class="hljs-keyword">break</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;recv data: &quot;</span> &lt;&lt; recvbuf &lt;&lt; std::endl;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> <br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;other socket event.&quot;</span> &lt;&lt; std::endl;<br>&#125;<br>&#125;<br>&#125;<br><br><br><span class="hljs-comment">//关闭socket</span><br><span class="hljs-built_in">close</span>(clientfd);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们先在另外一个 shell 窗口用 <strong>nc</strong> 命令模拟一个服务器，监听的 ip 地址和端口号是 <strong>0.0.0.0:3000</strong>：</p>   <figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">[root@myaliyun ~]<span class="hljs-meta"># nc -v -l 0.0.0.0 3000</span><br><span class="hljs-symbol">Ncat:</span> Version <span class="hljs-number">6.40</span> ( http://nmap<span class="hljs-meta">.org</span>/ncat )<br><span class="hljs-symbol">Ncat:</span> Listening on <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>:<span class="hljs-number">3000</span><br></code></pre></td></tr></table></figure><p>然后回到原来的 shell 窗口，编译上述 <strong>select_client_tvnull.cpp</strong>，并使用 gdb 运行程序，这次使用 gdb 运行程序的目的是为了当程序“卡”在某个位置时，我们可以使用 Ctrl + C 把程序中断下来看看程序阻塞在哪个函数调用处：</p>   <figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs nix">[root@myaliyun testsocket]<span class="hljs-comment"># g++ -g -o select_client_tvnull select_client_tvnull.cpp </span><br>[root@myaliyun testsocket]<span class="hljs-comment"># gdb select_client_tvnull</span><br>Reading symbols from <span class="hljs-symbol">/root/testsocket/select_client_tvnull...done.</span><br>(gdb) r<br>Starting <span class="hljs-params">program:</span> <span class="hljs-symbol">/root/testsocket/select_client_tvnull</span> <br>^C<br>Program received signal SIGINT, Interrupt.<br><span class="hljs-number">0</span>x00007ffff72e7783 <span class="hljs-keyword">in</span> __select_nocancel () from <span class="hljs-symbol">/lib64/libc.so.6</span><br>Missing separate debuginfos, <span class="hljs-params">use:</span> debuginfo-install glibc-<span class="hljs-number">2.1</span>7-<span class="hljs-number">196</span>.el7_4.<span class="hljs-number">2</span>.x86_64 libgcc-<span class="hljs-number">4.8</span>.<span class="hljs-number">5</span><span class="hljs-operator">-</span><span class="hljs-number">16</span>.el7_4.<span class="hljs-number">1</span>.x86_64 libstdc<span class="hljs-operator">++</span><span class="hljs-operator">-</span><span class="hljs-number">4.8</span>.<span class="hljs-number">5</span><span class="hljs-operator">-</span><span class="hljs-number">16</span>.el7_4.<span class="hljs-number">1</span>.x86_64<br>(gdb) bt<br><span class="hljs-comment">#0  0x00007ffff72e7783 in __select_nocancel () from /lib64/libc.so.6</span><br><span class="hljs-comment">#1  0x0000000000400c75 in main (argc=1, argv=0x7fffffffe5f8) at select_client_tvnull.cpp:51</span><br>(gdb) c<br>Continuing.<br>recv <span class="hljs-params">data:</span> hello<br><br>^C<br>Program received signal SIGINT, Interrupt.<br><span class="hljs-number">0</span>x00007ffff72e7783 <span class="hljs-keyword">in</span> __select_nocancel () from <span class="hljs-symbol">/lib64/libc.so.6</span><br>(gdb) c<br>Continuing.<br>recv <span class="hljs-params">data:</span> world<br><br></code></pre></td></tr></table></figure><p>如上输出结果所示，我们使用 gdb 的 <strong>r</strong> 命令（run）将程序跑起来后，程序卡在某个地方，我们按 Ctrl + C</p><p>（代码中的 <strong>^C</strong>）中断程序后使用 <strong>bt</strong> 命令查看当前程序的调用堆栈，发现确实阻塞在 <strong>select</strong> 函数调用处；接着我们在服务器端给客户端发送一个 <strong>hello</strong> 数据：</p>   <figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">[root@myaliyun ~]<span class="hljs-meta"># nc -v -l 0.0.0.0 3000</span><br><span class="hljs-symbol">Ncat:</span> Version <span class="hljs-number">6.40</span> ( http://nmap<span class="hljs-meta">.org</span>/ncat )<br><span class="hljs-symbol">Ncat:</span> Listening on <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>:<span class="hljs-number">3000</span><br><span class="hljs-symbol">Ncat:</span> Connection from <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>.<br><span class="hljs-symbol">Ncat:</span> Connection from <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">55968.</span><br>hello<br></code></pre></td></tr></table></figure><p>客户端收到数据后，<strong>select</strong> 函数满足条件，立即返回，并将数据输出来后继续进行下一轮 <strong>select</strong> 检测，我们使用 Ctrl + C 将程序中断，发现程序又阻塞在 <strong>select</strong> 调用处；输入 <strong>c</strong> 命令（continue）让程序继续运行， 此时，我们再用服务器端给客户端发送 <strong>world</strong> 字符串，<strong>select</strong> 函数再次返回，并将数据打印出来，然后继续进入下一轮 select 检测，并继续在 select 处阻塞。</p>   <figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">[root@myaliyun ~]<span class="hljs-meta"># nc -v -l 0.0.0.0 3000</span><br><span class="hljs-symbol">Ncat:</span> Version <span class="hljs-number">6.40</span> ( http://nmap<span class="hljs-meta">.org</span>/ncat )<br><span class="hljs-symbol">Ncat:</span> Listening on <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>:<span class="hljs-number">3000</span><br><span class="hljs-symbol">Ncat:</span> Connection from <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>.<br><span class="hljs-symbol">Ncat:</span> Connection from <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">55968.</span><br>hello<br>world<br></code></pre></td></tr></table></figure><ol start="5"><li><strong>在 Linux 平台上，select 函数的第一个参数必须设置成需要检测事件的所有 fd 中的最大值加 1</strong>。所以上文中 <strong>select_server.cpp</strong> 中，每新产生一个 clientfd，我都会与当前最大的 <strong>maxfd</strong> 作比较，如果大于当前的 <strong>maxfd</strong> 则将 <strong>maxfd</strong> 更新成这个新的最大值。其最终目的是为了在 <strong>select</strong> 调用时作为第一个参数（加 1）传进去。</li></ol><blockquote><p>在 Windows 平台上，select 函数的第一个值传任意值都可以，Windows 系统本身不使用这个值，只是为了兼容性而保留了这个参数，但是在实际开发中为了兼容跨平台代码，也会按惯例，将这个值设置为最大 socket 加 1。这点请读者注意。</p></blockquote><p>以上是我总结的 Linux 下 select 使用的<strong>五个注意事项</strong>，希望读者能理解它们。</p><p>Linux select 函数的缺点也是显而易见的：</p><ul><li>每次调用 <strong>select</strong> 函数，都需要把 fd 集合从用户态拷贝到内核态，这个开销在 fd 较多时会很大，同时每次调用 <strong>select</strong> 函数都需要在内核遍历传递进来的所有 fd，这个开销在 fd 较多时也很大；</li><li>单个进程能够监视的文件描述符的数量存在最大限制，在 Linux 上一般为 1024，可以通过修改宏定义然后重新编译内核的方式提升这一限制，这样非常麻烦而且效率低下；</li><li><strong>select</strong> 函数在每次调用之前都要对传入参数进行重新设定，这样做比较麻烦而且会降低性能。</li></ul><blockquote><p>在 Linux 平台上，select 函数的实现是利用 poll 函数的，有兴趣的读者可以查找一下相关的资料来阅读一下。关于 poll 函数的使用，接下来我们会介绍。</p></blockquote><h4 id="Windows-平台上-select-函数不会修改-timeval-的值">Windows 平台上 select 函数不会修改 timeval 的值</h4><p>上文提到，在 Windows 系统上，<strong>select</strong> 函数结束后，不会修改其参数 <strong>timeval</strong> 的值。我们可以使用下面这段代码来验证：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Connect</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* pServer, <span class="hljs-type">short</span> nPort)</span></span><br><span class="hljs-function"></span>&#123;<br>    SOCKET hSocket = ::<span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (hSocket == INVALID_SOCKET)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-comment">//将socket设置成非阻塞的</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> on = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (::<span class="hljs-built_in">ioctlsocket</span>(hSocket, FIONBIO, &amp;on) == SOCKET_ERROR)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span> addrSrv = &#123; <span class="hljs-number">0</span> &#125;;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">hostent</span>* pHostent = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> addr = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">if</span> ((addrSrv.sin_addr.s_addr = <span class="hljs-built_in">inet_addr</span>(pServer) == INADDR_NONE)<br>    &#123;<br>        pHostent = ::<span class="hljs-built_in">gethostbyname</span>(pServer);<br>        <span class="hljs-keyword">if</span> (!pHostent)      <br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">else</span><br>            addrSrv.sin_addr.s_addr = *((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>*)pHostent-&gt;h_addr);<br>    &#125;<br><br>    addrSrv.sin_family = AF_INET;<br>    addrSrv.sin_port = <span class="hljs-built_in">htons</span>((nPort);<br>    <span class="hljs-type">int</span> ret = ::<span class="hljs-built_in">connect</span>(hSocket, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;addrSrv, <span class="hljs-built_in">sizeof</span>(addrSrv));<br>    <span class="hljs-keyword">if</span> (ret == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-keyword">if</span> (ret == SOCKET_ERROR &amp;&amp; <span class="hljs-built_in">WSAGetLastError</span>() != WSAEWOULDBLOCK)       <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>    fd_set writeset;<br>    <span class="hljs-built_in">FD_ZERO</span>(&amp;writeset);<br>    <span class="hljs-built_in">FD_SET</span>(hSocket, &amp;writeset);<br>    <span class="hljs-keyword">struct</span> timeval tm = &#123; <span class="hljs-number">3</span>, <span class="hljs-number">200</span> &#125;;<br>    <span class="hljs-keyword">if</span> (::<span class="hljs-built_in">select</span>(hSocket + <span class="hljs-number">1</span>, <span class="hljs-literal">NULL</span>, &amp;writeset, <span class="hljs-literal">NULL</span>, &amp;tm) != <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;tm.tv_sec: %d, tm.tv_usec: %d\n&quot;</span>, tm.tv_sec, tm.tv_usec);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;tm.tv_sec: %d, tm.tv_usec: %d\n&quot;</span>, tm.tv_sec, tm.tv_usec);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码中，<strong>38</strong> 行调用了 <strong>select</strong> 函数，无论 <strong>select</strong> 是成功还是出错，我们都会打印出其参数的 <strong>tm</strong> 的值（<strong>40</strong> 和 <strong>44</strong> 行），经测试验证 <strong>tm</strong> 结构体的两个成员值在 <strong>select</strong> 函数调用前后并没有发生改变。</p><blockquote><p>虽然 Windows 系统并不会改变 select 的超时时间参数的值，但是为了代码的跨平台性，我们在实际开发中不应该依赖这种特性，而是每次调用 select 函数前都重新给超时时间参数重新设置值。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 网络通讯基础学习笔记系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> socket编程 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 网络通信基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++项目】一种在同端口上同时处理TCP和UDP的服务器实现</title>
      <link href="/2022/06/19/%E3%80%90C-%E9%A1%B9%E7%9B%AE%E3%80%91%E4%B8%80%E7%A7%8D%E5%9C%A8%E5%90%8C%E4%B8%80%E7%AB%AF%E5%8F%A3%E4%B8%8A%E5%90%8C%E6%97%B6%E5%A4%84%E7%90%86TCP%E5%92%8CUDP%E4%B8%A4%E7%A7%8D%E8%AF%B7%E6%B1%82%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%9E%E7%8E%B0/"/>
      <url>/2022/06/19/%E3%80%90C-%E9%A1%B9%E7%9B%AE%E3%80%91%E4%B8%80%E7%A7%8D%E5%9C%A8%E5%90%8C%E4%B8%80%E7%AB%AF%E5%8F%A3%E4%B8%8A%E5%90%8C%E6%97%B6%E5%A4%84%E7%90%86TCP%E5%92%8CUDP%E4%B8%A4%E7%A7%8D%E8%AF%B7%E6%B1%82%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="一种在同一端口上同时处理TCP和UDP两种请求的服务器实现">一种在同一端口上同时处理TCP和UDP两种请求的服务器实现</h2><p>服务器实现代码:</p><p>server.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment">2022-6-19</span><br><span class="hljs-comment">一种在同端口上同时处理TCP和UDP的服务器实现</span><br><span class="hljs-comment">作者：连思鑫</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;netinet/in.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;arpa/inet.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/epoll.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">/// 在同一端口上同时处理TCP和UDP两种请求</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_EVENT_NUMBER 1024</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TCP_BUFFER_SIZE  512</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> UDP_BUFFER_SIZE  (1024*4)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> EFFECT_TEST  <span class="hljs-string">&quot;Server received!!&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">setnonblocking</span><span class="hljs-params">(<span class="hljs-type">int</span> fd)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> old_option = <span class="hljs-built_in">fcntl</span>(fd, F_GETFL);<br>    <span class="hljs-type">int</span> new_option = old_option | O_NONBLOCK;<br>    <span class="hljs-built_in">fcntl</span>(fd, F_SETFL, new_option);<br>    <span class="hljs-keyword">return</span> old_option;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addfd</span><span class="hljs-params">(<span class="hljs-type">int</span> epollfd, <span class="hljs-type">int</span> fd)</span></span><br><span class="hljs-function"></span>&#123;<br>    epoll_event event;<br>    event.data.fd = fd;<br>    <span class="hljs-comment">//event.events = EPOLLIN | EPOLLET;</span><br>    event.events = EPOLLIN;<br>    <span class="hljs-built_in">epoll_ctl</span>(epollfd, EPOLL_CTL_ADD, fd, &amp;event);<br>    <span class="hljs-built_in">setnonblocking</span>(fd);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(argc &lt;= <span class="hljs-number">2</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;usage: %s ip_address port_number\n&quot;</span>, <span class="hljs-built_in">basename</span>(argv[<span class="hljs-number">0</span>]));<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* ip = argv[<span class="hljs-number">1</span>];<br>    <span class="hljs-type">int</span> port = <span class="hljs-built_in">atoi</span>(argv[<span class="hljs-number">2</span>]);<br><br>    <span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 创建TCP Socket，绑定到端口port</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span> address;<br>    <span class="hljs-built_in">bzero</span>(&amp;address, <span class="hljs-built_in">sizeof</span>(address));<br>    address.sin_family = AF_INET;<br>    <span class="hljs-built_in">inet_pton</span>(AF_INET, ip, &amp;address.sin_addr);<br>    address.sin_port = <span class="hljs-built_in">htons</span>(port);<br>    <span class="hljs-type">int</span> listenfd = <span class="hljs-built_in">socket</span>(PF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">assert</span>(listenfd &gt;= <span class="hljs-number">0</span>);<br>    ret = <span class="hljs-built_in">bind</span>(listenfd, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;address, <span class="hljs-built_in">sizeof</span>(address));<br>    <span class="hljs-built_in">assert</span>(ret != <span class="hljs-number">-1</span>);<br>    ret = <span class="hljs-built_in">listen</span>(listenfd, <span class="hljs-number">5</span>);<br>    <span class="hljs-built_in">assert</span>(ret != <span class="hljs-number">-1</span>);<br><br>    <span class="hljs-comment">// 创建UDP Socket，绑定到同样端口</span><br>    <span class="hljs-built_in">bzero</span>(&amp;address, <span class="hljs-built_in">sizeof</span>(address));<br>    address.sin_family = AF_INET;<br>    <span class="hljs-built_in">inet_pton</span>(AF_INET, ip, &amp;address.sin_addr);<br>    address.sin_port = <span class="hljs-built_in">htons</span>(port);<br>    <span class="hljs-type">int</span> udpfd = <span class="hljs-built_in">socket</span>(PF_INET, SOCK_DGRAM, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">assert</span>(udpfd &gt;= <span class="hljs-number">0</span>);<br>    ret = <span class="hljs-built_in">bind</span>(udpfd, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;address, <span class="hljs-built_in">sizeof</span>(address));<br>    <span class="hljs-built_in">assert</span>(ret != <span class="hljs-number">-1</span>);<br><br>    <span class="hljs-type">int</span> epollfd = <span class="hljs-built_in">epoll_create</span>(<span class="hljs-number">5</span>);<br>    <span class="hljs-built_in">assert</span>(epollfd != <span class="hljs-number">-1</span>);<br><br>    <span class="hljs-comment">// 分别注册TCP和UDP socket的可读事件到epoll上</span><br>    <span class="hljs-built_in">addfd</span>(epollfd, listenfd);<br>    <span class="hljs-built_in">addfd</span>(epollfd, udpfd);<br><br>    epoll_event events[ MAX_EVENT_NUMBER ];<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-type">int</span> number = <span class="hljs-built_in">epoll_wait</span>(epollfd, events, MAX_EVENT_NUMBER, <span class="hljs-number">-1</span>);<br>        <span class="hljs-keyword">if</span> (number &lt; <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;epoll failure\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; number; i++)<br>        &#123;<br>            <span class="hljs-type">int</span> sockfd = events[i].data.fd;<br>            <span class="hljs-keyword">if</span> (sockfd == listenfd)<br>            &#123;<br>                <span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span> client_address;<br>                <span class="hljs-type">socklen_t</span> client_addrlength = <span class="hljs-built_in">sizeof</span>(client_address);<br>                <span class="hljs-type">int</span> connfd = <span class="hljs-built_in">accept</span>(listenfd, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;client_address, &amp;client_addrlength);<br>                <span class="hljs-built_in">addfd</span>(epollfd, connfd);<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sockfd == udpfd)<br>            &#123;<br>                <span class="hljs-type">char</span> buf[ UDP_BUFFER_SIZE ];<br>                <span class="hljs-built_in">memset</span>(buf, <span class="hljs-string">&#x27;\0&#x27;</span>, UDP_BUFFER_SIZE);<br>                <span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span> client_address;<br>                <span class="hljs-type">socklen_t</span> client_addrlength = <span class="hljs-built_in">sizeof</span>(client_address);<br><br>                ret = <span class="hljs-built_in">recvfrom</span>(udpfd, buf, UDP_BUFFER_SIZE<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;client_address, &amp;client_addrlength);<br>                <span class="hljs-keyword">if</span>(ret &gt; <span class="hljs-number">0</span>)<br>                &#123;<br>                    cout &lt;&lt; <span class="hljs-string">&quot;this is UDP:&quot;</span> &lt;&lt; buf &lt;&lt; endl;<br>                    <span class="hljs-comment">//sendto(udpfd, buf, UDP_BUFFER_SIZE-1, 0, (struct sockaddr*)&amp;client_address, client_addrlength);</span><br>                    <span class="hljs-built_in">sendto</span>(udpfd, EFFECT_TEST, UDP_BUFFER_SIZE<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;client_address, client_addrlength);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (events[i].events &amp; EPOLLIN)<br>            &#123;<br>                <span class="hljs-type">char</span> buf[ TCP_BUFFER_SIZE ];<br>                <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>                &#123;<br>                    <span class="hljs-built_in">memset</span>(buf, <span class="hljs-string">&#x27;\0&#x27;</span>, TCP_BUFFER_SIZE);<br>                    ret = <span class="hljs-built_in">recv</span>(sockfd, buf, TCP_BUFFER_SIZE<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>);<br>                    <span class="hljs-keyword">if</span>(ret &lt; <span class="hljs-number">0</span>)<br>                    &#123;<br>                        <span class="hljs-keyword">if</span>((errno == EAGAIN) || (errno == EWOULDBLOCK))<br>                        &#123;<br>                            <span class="hljs-keyword">break</span>;<br>                        &#125;<br>                        <span class="hljs-built_in">close</span>(sockfd);<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ret == <span class="hljs-number">0</span>)<br>                    &#123;<br>                        <span class="hljs-built_in">close</span>(sockfd);<br>                    &#125;<br>                    <span class="hljs-keyword">else</span><br>                    &#123;<br>                        cout &lt;&lt; <span class="hljs-string">&quot;this is TCP:&quot;</span> &lt;&lt; buf &lt;&lt; endl;<br>                        <span class="hljs-built_in">send</span>(sockfd, EFFECT_TEST, <span class="hljs-built_in">sizeof</span>(EFFECT_TEST), <span class="hljs-number">0</span>);<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;something else happened \n&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">close</span>(listenfd);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>测试代码：client_tcp.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment">2022-6-19</span><br><span class="hljs-comment">测试套字节（socket）用户端实例（tcp）</span><br><span class="hljs-comment">作者：连思鑫</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;socket_u.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(argc &lt;= <span class="hljs-number">2</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;usage: %s ip_address port_number\n&quot;</span>, <span class="hljs-built_in">basename</span>(argv[<span class="hljs-number">0</span>]));<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* ip = argv[<span class="hljs-number">1</span>];<br>    <span class="hljs-type">int</span> port = <span class="hljs-built_in">atoi</span>(argv[<span class="hljs-number">2</span>]);<br><span class="hljs-comment">//这是客户端</span><br>cout &lt;&lt; <span class="hljs-string">&quot;this is user&quot;</span> &lt;&lt; endl;<br><br><br><span class="hljs-comment">//socket</span><br><span class="hljs-comment">//初始化socket，并检测是都成功</span><br><span class="hljs-type">int</span> ulient = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>); <span class="hljs-comment">//tcp</span><br>    <span class="hljs-comment">//int ulient = socket(AF_INET, SOCK_DGRAM, 0); //udp</span><br><span class="hljs-keyword">if</span> (ulient == <span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;socket fail&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">//connect</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span> serverAddr;<br>serverAddr.sin_family = AF_INET;<br>serverAddr.sin_port = <span class="hljs-built_in">htons</span>(port);<br>serverAddr.sin_addr.s_addr = <span class="hljs-built_in">inet_addr</span>(ip);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">connect</span>(ulient, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;serverAddr, <span class="hljs-built_in">sizeof</span>(serverAddr)) &lt; <span class="hljs-number">0</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;connect fail&quot;</span> &lt;&lt; endl;<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">2</span>);<br>&#125;<br>cout &lt;&lt; <span class="hljs-string">&quot;.....connect&quot;</span> &lt;&lt; endl;<br><span class="hljs-type">char</span> data[<span class="hljs-number">1024</span>];<br><span class="hljs-type">char</span> buf[<span class="hljs-number">1024</span>];<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>&#123;<br>cin &gt;&gt; data;<br><span class="hljs-built_in">send</span>(ulient, data, <span class="hljs-built_in">strlen</span>(data), <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(data, <span class="hljs-string">&quot;exit&quot;</span>) == <span class="hljs-number">0</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;......disconnect&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-built_in">memset</span>(buf, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(buf));<br><span class="hljs-type">int</span> len = <span class="hljs-built_in">recv</span>(ulient, buf, <span class="hljs-built_in">sizeof</span>(buf), <span class="hljs-number">0</span>);<br>buf[len] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>cout &lt;&lt; buf &lt;&lt; endl;<br>&#125;<br><span class="hljs-built_in">close</span>(ulient);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>client_udp.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment">2022-6-19</span><br><span class="hljs-comment">测试套字节（socket）用户端实例（udp）</span><br><span class="hljs-comment">作者：连思鑫</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;socket_u.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(argc &lt;= <span class="hljs-number">2</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;usage: %s ip_address port_number\n&quot;</span>, <span class="hljs-built_in">basename</span>(argv[<span class="hljs-number">0</span>]));<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* ip = argv[<span class="hljs-number">1</span>];<br>    <span class="hljs-type">int</span> port = <span class="hljs-built_in">atoi</span>(argv[<span class="hljs-number">2</span>]);<br><span class="hljs-comment">//这是客户端</span><br>cout &lt;&lt; <span class="hljs-string">&quot;this is user&quot;</span> &lt;&lt; endl;<br><br><br><span class="hljs-comment">//socket</span><br><span class="hljs-comment">//初始化socket，并检测是都成功</span><br><span class="hljs-comment">//int ulient = socket(AF_INET, SOCK_STREAM, 0); //tcp</span><br>    <span class="hljs-type">int</span> ulient = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_DGRAM, <span class="hljs-number">0</span>); <span class="hljs-comment">//udp</span><br><span class="hljs-keyword">if</span> (ulient == <span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;socket fail&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">//connect</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span> serverAddr;<br>serverAddr.sin_family = AF_INET;<br>serverAddr.sin_port = <span class="hljs-built_in">htons</span>(port);<br>serverAddr.sin_addr.s_addr = <span class="hljs-built_in">inet_addr</span>(ip);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">connect</span>(ulient, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;serverAddr, <span class="hljs-built_in">sizeof</span>(serverAddr)) &lt; <span class="hljs-number">0</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;connect fail&quot;</span> &lt;&lt; endl;<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">2</span>);<br>&#125;<br>cout &lt;&lt; <span class="hljs-string">&quot;.....connect&quot;</span> &lt;&lt; endl;<br><span class="hljs-type">char</span> data[<span class="hljs-number">1024</span>];<br><span class="hljs-type">char</span> buf[<span class="hljs-number">1024</span>];<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>&#123;<br>cin &gt;&gt; data;<br><span class="hljs-built_in">send</span>(ulient, data, <span class="hljs-built_in">strlen</span>(data), <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(data, <span class="hljs-string">&quot;exit&quot;</span>) == <span class="hljs-number">0</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;......disconnect&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-built_in">memset</span>(buf, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(buf));<br><span class="hljs-type">int</span> len = <span class="hljs-built_in">recv</span>(ulient, buf, <span class="hljs-built_in">sizeof</span>(buf), <span class="hljs-number">0</span>);<br>buf[len] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>cout &lt;&lt; buf &lt;&lt; endl;<br>&#125;<br><span class="hljs-built_in">close</span>(ulient);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试结果：client_udp端</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arduino">$ g++ socket_u.cpp -o client_udp<br>$ ./client_udp <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> <span class="hljs-number">8000</span><br><span class="hljs-keyword">this</span> is user<br>.....connect<br><span class="hljs-number">123456</span><br><span class="hljs-built_in">Server</span> received!!<br><span class="hljs-number">12345458</span><br><span class="hljs-built_in">Server</span> received!!<br></code></pre></td></tr></table></figure><p>client_tcp端</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arduino">$ g++ socket_u.cpp -o client_tcp<br>$ ./client_tcp <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> <span class="hljs-number">8000</span><br><span class="hljs-keyword">this</span> is user<br>.....connect<br><span class="hljs-number">123456</span><br><span class="hljs-built_in">Server</span> received!!<br><span class="hljs-number">123456</span><br><span class="hljs-built_in">Server</span> received!!<br></code></pre></td></tr></table></figure><p>server端</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">./a.<span class="hljs-keyword">out</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> <span class="hljs-number">8000</span><br><span class="hljs-keyword">this</span> <span class="hljs-keyword">is</span> TCP:<span class="hljs-number">123456</span><br><span class="hljs-keyword">this</span> <span class="hljs-keyword">is</span> TCP:<span class="hljs-number">123456</span><br><span class="hljs-keyword">this</span> <span class="hljs-keyword">is</span> UDP:<span class="hljs-number">123456</span><br><span class="hljs-keyword">this</span> <span class="hljs-keyword">is</span> UDP:<span class="hljs-number">12345458</span><br></code></pre></td></tr></table></figure><p>如图：</p><p><img src="/images/2022-6-19-001.png" alt="upload successful"></p>]]></content>
      
      
      <categories>
          
          <category> C++项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++项目 </tag>
            
            <tag> server </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络通信基础学习笔记02：bind 函数</title>
      <link href="/2022/06/19/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B002%EF%BC%9Abind-%E5%87%BD%E6%95%B0/"/>
      <url>/2022/06/19/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B002%EF%BC%9Abind-%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="网络通信基础学习笔记02：bind-函数">网络通信基础学习笔记02：bind 函数</h2><h4 id="bind-函数如何选择绑定地址">bind 函数如何选择绑定地址</h4><p>上一节的服务器代码中演示了 bind 函数的使用方法，让我们再看一下相关的代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span> bindaddr;<br>bindaddr.sin_family = AF_INET;<br>bindaddr.sin_addr.s_addr = <span class="hljs-built_in">htonl</span>(INADDR_ANY);<br>bindaddr.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">3000</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">bind</span>(listenfd, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;bindaddr, <span class="hljs-built_in">sizeof</span>(bindaddr)) == <span class="hljs-number">-1</span>)<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;bind listen socket error.&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中 bind 的地址我们使用了一个宏叫 <strong>INADDR_ANY</strong> ，关于这个宏的解释如下：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">If <span class="hljs-keyword">an</span> application does <span class="hljs-keyword">not</span> care what <span class="hljs-built_in">local</span> address is assigned, specify <span class="hljs-keyword">the</span> <span class="hljs-built_in">constant</span> <span class="hljs-built_in">value</span> INADDR_ANY <span class="hljs-keyword">for</span> <span class="hljs-keyword">an</span> IPv4 <span class="hljs-built_in">local</span> address <span class="hljs-keyword">or</span> <span class="hljs-keyword">the</span> <span class="hljs-built_in">constant</span> <span class="hljs-built_in">value</span> in6addr_any <span class="hljs-keyword">for</span> <span class="hljs-keyword">an</span> IPv6 <span class="hljs-built_in">local</span> address <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> sa_data member <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> name parameter. This allows <span class="hljs-keyword">the</span> underlying service provider <span class="hljs-built_in">to</span> use <span class="hljs-keyword">any</span> appropriate network address, potentially simplifying application programming <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> presence <span class="hljs-keyword">of</span> multihomed hosts (that is, hosts that have more than <span class="hljs-literal">one</span> network interface <span class="hljs-keyword">and</span> address).<br></code></pre></td></tr></table></figure><p>意译一下：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm">如果应用程序不关心bind绑定的<span class="hljs-built_in">ip</span>地址，可以使用INADDR_ANY(如果是IPv6，则对应in6addr_any)，这样底层的（协议栈）服务会自动选择一个合适的<span class="hljs-built_in">ip</span>地址，这样使在一个有多个网卡机器上选择<span class="hljs-built_in">ip</span>地址问题变得简单。<br></code></pre></td></tr></table></figure><p>也就是说 <strong>INADDR_ANY</strong> 相当于地址 <strong>0.0.0.0</strong>。可能读者还是不太明白我想表达什么。这里我举个例子，假设我们在一台机器上开发一个服务器程序，使用 bind 函数时，我们有多个ip 地址可以选择。首先，这台机器对外访问的ip地址是 <strong>120.55.94.78</strong>，这台机器在当前局域网的地址是 <strong>192.168.1.104</strong>；同时这台机器有本地回环地址<strong>127.0.0.1</strong>。</p><p>如果你指向本机上可以访问，那么你 bind 函数中的地址就可以使用<strong>127.0.0.1</strong>; 如果你的服务只想被局域网内部机器访问，bind 函数的地址可以使用<strong>192.168.1.104</strong>；如果希望这个服务可以被公网访问，你就可以使用地址<strong>0.0.0.0</strong> 或 <strong>INADDR_ANY</strong>。</p><h4 id="bind-函数端口号问题">bind 函数端口号问题</h4><p>网络通信程序的基本逻辑是客户端连接服务器，即从客户端的<strong>地址:端口</strong>连接到服务器<strong>地址:端口</strong>上，以上一节中的示例程序为例，服务器端的端口号使用 3000，那客户端连接时的端口号是多少呢？TCP 通信双方中一般服务器端端口号是固定的，而客户端端口号是连接发起时由操作系统随机分配的（不会分配已经被占用的端口）。端口号是一个 C short 类型的值，其范围是0～65535，知道这点很重要，所以我们在编写压力测试程序时，由于端口数量的限制，在某台机器上网卡地址不变的情况下压力测试程序理论上最多只能发起六万五千多个连接。注意我说的是理论上，在实际情况下，由于当时的操作系统很多端口可能已经被占用，实际可以使用的端口比这个更少，例如，一般规定端口号在1024以下的端口是保留端口，不建议用户程序使用。而对于 Windows 系统，MSDN 甚至明确地说：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">On</span> Windows Vista <span class="hljs-keyword">and</span> later, the dynamic client port range <span class="hljs-keyword">is</span> a <span class="hljs-keyword">value</span> <span class="hljs-keyword">between</span> <span class="hljs-number">49152</span> <span class="hljs-keyword">and</span> <span class="hljs-number">65535.</span> This <span class="hljs-keyword">is</span> a change <span class="hljs-keyword">from</span> Windows <span class="hljs-keyword">Server</span> <span class="hljs-number">2003</span> <span class="hljs-keyword">and</span> earlier <span class="hljs-keyword">where</span> the dynamic client port range was a <span class="hljs-keyword">value</span> <span class="hljs-keyword">between</span> <span class="hljs-number">1025</span> <span class="hljs-keyword">and</span> <span class="hljs-number">5000.</span><br>Vista 及以后的Windows，可用的动态端口范围是<span class="hljs-number">49152</span>～<span class="hljs-number">65535</span>，而 Windows <span class="hljs-keyword">Server</span>及更早的系统，可以的动态端口范围是<span class="hljs-number">1025</span>~<span class="hljs-number">5000</span>。（你可以通过修改注册表来改变这一设置，参考网址：https://docs.microsoft.com/en-us/windows/desktop/api/winsock/nf-winsock-bind）<br></code></pre></td></tr></table></figure><p>如果将 bind 函数中的端口号设置成0，那么操作系统会随机给程序分配一个可用的侦听端口，当然服务器程序一般不会这么做，因为服务器程序是要对外服务的，必须让客户端知道确切的ip地址和端口号。</p><p>很多人觉得只有服务器程序可以调用 bind 函数绑定一个端口号，其实不然，在一些特殊的应用中，我们需要客户端程序以指定的端口号去连接服务器，此时我们就可以在客户端程序中调用 bind 函数绑定一个具体的端口。</p><p>我们用代码来实际验证一下上路所说的，为了能看到连接状态，我们将客户端和服务器关闭socket的代码注释掉，这样连接会保持一段时间。</p><ul><li>情形一：客户端代码不绑定端口</li></ul><p>修改后的服务器代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * TCP服务器通信基本流程</span><br><span class="hljs-comment"> * liansixin 2022-6-19</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;arpa/inet.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//1.创建一个侦听socket</span><br>    <span class="hljs-type">int</span> listenfd = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (listenfd == <span class="hljs-number">-1</span>)<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;create listen socket error.&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//2.初始化服务器地址</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span> bindaddr;<br>    bindaddr.sin_family = AF_INET;<br>    bindaddr.sin_addr.s_addr = <span class="hljs-built_in">htonl</span>(INADDR_ANY);<br>    bindaddr.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">3000</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">bind</span>(listenfd, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;bindaddr, <span class="hljs-built_in">sizeof</span>(bindaddr)) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;bind listen socket error.&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br><span class="hljs-comment">//3.启动侦听</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">listen</span>(listenfd, SOMAXCONN) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;listen error.&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br><span class="hljs-comment">//记录所有客户端连接的容器</span><br>std::vector&lt;<span class="hljs-type">int</span>&gt; clientfds;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>    &#123;<br>        <span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span> clientaddr;<br>        <span class="hljs-type">socklen_t</span> clientaddrlen = <span class="hljs-built_in">sizeof</span>(clientaddr);<br><span class="hljs-comment">//4. 接受客户端连接</span><br>        <span class="hljs-type">int</span> clientfd = <span class="hljs-built_in">accept</span>(listenfd, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;clientaddr, &amp;clientaddrlen);<br>        <span class="hljs-keyword">if</span> (clientfd != <span class="hljs-number">-1</span>)<br>        &#123;         <br><span class="hljs-type">char</span> recvBuf[<span class="hljs-number">32</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-comment">//5. 从客户端接受数据</span><br><span class="hljs-type">int</span> ret = <span class="hljs-built_in">recv</span>(clientfd, recvBuf, <span class="hljs-number">32</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (ret &gt; <span class="hljs-number">0</span>) <br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;recv data from client, data: &quot;</span> &lt;&lt; recvBuf &lt;&lt; std::endl;<br><span class="hljs-comment">//6. 将收到的数据原封不动地发给客户端</span><br>ret = <span class="hljs-built_in">send</span>(clientfd, recvBuf, <span class="hljs-built_in">strlen</span>(recvBuf), <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (ret != <span class="hljs-built_in">strlen</span>(recvBuf))<br>std::cout &lt;&lt; <span class="hljs-string">&quot;send data error.&quot;</span> &lt;&lt; std::endl;<br><br>std::cout &lt;&lt; <span class="hljs-string">&quot;send data to client successfully, data: &quot;</span> &lt;&lt; recvBuf &lt;&lt; std::endl;<br>&#125; <br><span class="hljs-keyword">else</span> <br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;recv data error.&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-comment">//close(clientfd);</span><br>clientfds.<span class="hljs-built_in">push_back</span>(clientfd);<br>        &#125;<br>    &#125;<br><br><span class="hljs-comment">//7.关闭侦听socket</span><br><span class="hljs-built_in">close</span>(listenfd);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>修改后的客户端代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * TCP客户端通信基本流程</span><br><span class="hljs-comment"> * liansixin 2022-6-19</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;arpa/inet.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SERVER_ADDRESS <span class="hljs-string">&quot;127.0.0.1&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SERVER_PORT     3000</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SEND_DATA       <span class="hljs-string">&quot;helloworld&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//1.创建一个socket</span><br>    <span class="hljs-type">int</span> clientfd = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (clientfd == <span class="hljs-number">-1</span>)<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;create client socket error.&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//2.连接服务器</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span> serveraddr;<br>    serveraddr.sin_family = AF_INET;<br>    serveraddr.sin_addr.s_addr = <span class="hljs-built_in">inet_addr</span>(SERVER_ADDRESS);<br>    serveraddr.sin_port = <span class="hljs-built_in">htons</span>(SERVER_PORT);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">connect</span>(clientfd, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;serveraddr, <span class="hljs-built_in">sizeof</span>(serveraddr)) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;connect socket error.&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br><span class="hljs-comment">//3. 向服务器发送数据</span><br><span class="hljs-type">int</span> ret = <span class="hljs-built_in">send</span>(clientfd, SEND_DATA, <span class="hljs-built_in">strlen</span>(SEND_DATA), <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (ret != <span class="hljs-built_in">strlen</span>(SEND_DATA))<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;send data error.&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br>std::cout &lt;&lt; <span class="hljs-string">&quot;send data successfully, data: &quot;</span> &lt;&lt; SEND_DATA &lt;&lt; std::endl;<br><br><span class="hljs-comment">//4. 从客户端收取数据</span><br><span class="hljs-type">char</span> recvBuf[<span class="hljs-number">32</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>ret = <span class="hljs-built_in">recv</span>(clientfd, recvBuf, <span class="hljs-number">32</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (ret &gt; <span class="hljs-number">0</span>) <br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;recv data successfully, data: &quot;</span> &lt;&lt; recvBuf &lt;&lt; std::endl;<br>&#125; <br><span class="hljs-keyword">else</span> <br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;recv data error, data: &quot;</span> &lt;&lt; recvBuf &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-comment">//5. 关闭socket</span><br><span class="hljs-comment">//close(clientfd);</span><br><span class="hljs-comment">//这里仅仅是为了让客户端程序不退出</span><br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) <br>&#123;<br><span class="hljs-built_in">sleep</span>(<span class="hljs-number">3</span>);<br>&#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>将程序编译好后（编译方法和上文一样），我们先启动server，再启动三个客户端。然后通过 <strong>lsof</strong> 命令查看当前机器上的 TCP 连接信息，为了更清楚地显示结果，已经将不相关的连接信息去掉了，结果如下所示：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs tap">[root@localhost ~]<span class="hljs-comment"># lsof -i -Pn</span><br>COMMAND   PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME<br>server  <span class="hljs-number"> 1445 </span>root    3u  IPv4 <span class="hljs-number"> 21568 </span>     0t0  TCP *:3000 (LISTEN)<br>server  <span class="hljs-number"> 1445 </span>root    4u  IPv4 <span class="hljs-number"> 21569 </span>     0t0  TCP 127.0.0.1:3000-&gt;127.0.0.1:40818 (ESTABLISHED)<br>server  <span class="hljs-number"> 1445 </span>root    5u  IPv4 <span class="hljs-number"> 21570 </span>     0t0  TCP 127.0.0.1:3000-&gt;127.0.0.1:40820 (ESTABLISHED)<br>server  <span class="hljs-number"> 1445 </span>root    6u  IPv4 <span class="hljs-number"> 21038 </span>     0t0  TCP 127.0.0.1:3000-&gt;127.0.0.1:40822 (ESTABLISHED)<br>client  <span class="hljs-number"> 1447 </span>root    3u  IPv4 <span class="hljs-number"> 21037 </span>     0t0  TCP 127.0.0.1:40818-&gt;127.0.0.1:3000 (ESTABLISHED)<br>client  <span class="hljs-number"> 1448 </span>root    3u  IPv4 <span class="hljs-number"> 21571 </span>     0t0  TCP 127.0.0.1:40820-&gt;127.0.0.1:3000 (ESTABLISHED)<br>client  <span class="hljs-number"> 1449 </span>root    3u  IPv4 <span class="hljs-number"> 21572 </span>     0t0  TCP 127.0.0.1:40822-&gt;127.0.0.1:3000 (ESTABLISHED)<br></code></pre></td></tr></table></figure><p>上面的结果显示，<strong>server</strong> 进程（进程 ID 是 <strong>1445</strong>）在 <strong>3000</strong> 端口开启侦听，有三个 <strong>client</strong> 进程（进程 ID 分别是<strong>1447</strong>、<strong>1448</strong>、<strong>1449</strong>）分别通过端口号 <strong>40818</strong>、<strong>40820</strong>、<strong>40822</strong> 连到 <strong>server</strong> 进程上的，作为客户端的一方，端口号是系统随机分配的。</p><ul><li><p>情形二：客户端绑定端口号 <strong>0</strong></p><p>服务器端代码保持不变，我们修改下客户端代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * TCP客户端通信基本流程</span><br><span class="hljs-comment"> * liansixin 2022-6-19</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;arpa/inet.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SERVER_ADDRESS <span class="hljs-string">&quot;127.0.0.1&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SERVER_PORT     3000</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SEND_DATA       <span class="hljs-string">&quot;helloworld&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//1.创建一个socket</span><br>    <span class="hljs-type">int</span> clientfd = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (clientfd == <span class="hljs-number">-1</span>)<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;create client socket error.&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span> bindaddr;<br>    bindaddr.sin_family = AF_INET;<br>    bindaddr.sin_addr.s_addr = <span class="hljs-built_in">htonl</span>(INADDR_ANY);<br><span class="hljs-comment">//将socket绑定到0号端口上去</span><br>    bindaddr.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">bind</span>(clientfd, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;bindaddr, <span class="hljs-built_in">sizeof</span>(bindaddr)) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;bind socket error.&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//2.连接服务器</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span> serveraddr;<br>    serveraddr.sin_family = AF_INET;<br>    serveraddr.sin_addr.s_addr = <span class="hljs-built_in">inet_addr</span>(SERVER_ADDRESS);<br>    serveraddr.sin_port = <span class="hljs-built_in">htons</span>(SERVER_PORT);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">connect</span>(clientfd, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;serveraddr, <span class="hljs-built_in">sizeof</span>(serveraddr)) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;connect socket error.&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br><span class="hljs-comment">//3. 向服务器发送数据</span><br><span class="hljs-type">int</span> ret = <span class="hljs-built_in">send</span>(clientfd, SEND_DATA, <span class="hljs-built_in">strlen</span>(SEND_DATA), <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (ret != <span class="hljs-built_in">strlen</span>(SEND_DATA))<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;send data error.&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br>std::cout &lt;&lt; <span class="hljs-string">&quot;send data successfully, data: &quot;</span> &lt;&lt; SEND_DATA &lt;&lt; std::endl;<br><br><span class="hljs-comment">//4. 从客户端收取数据</span><br><span class="hljs-type">char</span> recvBuf[<span class="hljs-number">32</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>ret = <span class="hljs-built_in">recv</span>(clientfd, recvBuf, <span class="hljs-number">32</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (ret &gt; <span class="hljs-number">0</span>) <br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;recv data successfully, data: &quot;</span> &lt;&lt; recvBuf &lt;&lt; std::endl;<br>&#125; <br><span class="hljs-keyword">else</span> <br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;recv data error, data: &quot;</span> &lt;&lt; recvBuf &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-comment">//5. 关闭socket</span><br><span class="hljs-comment">//close(clientfd);</span><br><span class="hljs-comment">//这里仅仅是为了让客户端程序不退出</span><br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) <br>&#123;<br><span class="hljs-built_in">sleep</span>(<span class="hljs-number">3</span>);<br>&#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们再次编译客户端程序，并启动三个 <strong>client</strong> 进程，然后用 <strong>lsof</strong> 命令查看机器上的 TCP 连接情况，结果如下所示：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs tap">[root@localhost ~]<span class="hljs-comment"># lsof -i -Pn</span><br>COMMAND   PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME<br>server  <span class="hljs-number"> 1593 </span>root    3u  IPv4 <span class="hljs-number"> 21807 </span>     0t0  TCP *:3000 (LISTEN)<br>server  <span class="hljs-number"> 1593 </span>root    4u  IPv4 <span class="hljs-number"> 21808 </span>     0t0  TCP 127.0.0.1:3000-&gt;127.0.0.1:44220 (ESTABLISHED)<br>server  <span class="hljs-number"> 1593 </span>root    5u  IPv4 <span class="hljs-number"> 19311 </span>     0t0  TCP 127.0.0.1:3000-&gt;127.0.0.1:38990 (ESTABLISHED)<br>server  <span class="hljs-number"> 1593 </span>root    6u  IPv4 <span class="hljs-number"> 21234 </span>     0t0  TCP 127.0.0.1:3000-&gt;127.0.0.1:42365 (ESTABLISHED)<br>client  <span class="hljs-number"> 1595 </span>root    3u  IPv4 <span class="hljs-number"> 22626 </span>     0t0  TCP 127.0.0.1:44220-&gt;127.0.0.1:3000 (ESTABLISHED)<br>client  <span class="hljs-number"> 1611 </span>root    3u  IPv4 <span class="hljs-number"> 21835 </span>     0t0  TCP 127.0.0.1:38990-&gt;127.0.0.1:3000 (ESTABLISHED)<br>client  <span class="hljs-number"> 1627 </span>root    3u  IPv4 <span class="hljs-number"> 21239 </span>     0t0  TCP 127.0.0.1:42365-&gt;127.0.0.1:3000 (ESTABLISHED)<br></code></pre></td></tr></table></figure><p>通过上面的结果，我们发现三个 <strong>client</strong> 进程使用的端口号仍然是系统随机分配的，也就是说绑定 <strong>0</strong> 号端口和没有绑定效果是一样的。</p></li><li><p>情形三：客户端绑定一个固定端口</p><p>我们这里使用 <strong>20000</strong> 端口，当然读者可以根据自己的喜好选择，只要保证所选择的端口号当前没有被其他程序占用即可，服务器代码保持不变，客户端绑定代码中的端口号从 <strong>0</strong> 改成 <strong>20000</strong>。这里为了节省篇幅，只贴出修改处的代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span> bindaddr;<br>bindaddr.sin_family = AF_INET;<br>bindaddr.sin_addr.s_addr = <span class="hljs-built_in">htonl</span>(INADDR_ANY);<br><span class="hljs-comment">//将socket绑定到20000号端口上去</span><br>bindaddr.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">20000</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">bind</span>(clientfd, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;bindaddr, <span class="hljs-built_in">sizeof</span>(bindaddr)) == <span class="hljs-number">-1</span>)<br>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;bind socket error.&quot;</span> &lt;&lt; std::endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>再次重新编译程序，先启动一个客户端后，我们看到此时的 TCP 连接状态：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@localhost testsocket]<span class="hljs-comment"># lsof -i -Pn</span><br>COMMAND   PID <span class="hljs-keyword">USER</span>   <span class="hljs-title">FD</span>   <span class="hljs-keyword">TYPE</span> DEVICE SIZE/OFF <span class="hljs-keyword">NODE</span> <span class="hljs-title">NAME</span><br>server   <span class="hljs-number">1676</span> root    <span class="hljs-number">3</span>u  IPv4  <span class="hljs-number">21933</span>      <span class="hljs-number">0</span>t0  TCP *:<span class="hljs-number">3000</span> (LISTEN)<br>server   <span class="hljs-number">1676</span> root    <span class="hljs-number">4</span>u  IPv4  <span class="hljs-number">21934</span>      <span class="hljs-number">0</span>t0  TCP <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">3000</span>-&gt;<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">20000</span> (ESTABLISHED)<br>client   <span class="hljs-number">1678</span> root    <span class="hljs-number">3</span>u  IPv4  <span class="hljs-number">21336</span>      <span class="hljs-number">0</span>t0  TCP <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">20000</span>-&gt;<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">3000</span> (ESTABLISHED)<br></code></pre></td></tr></table></figure><p>通过上面的结果，我们发现 <strong>client</strong> 进程确实使用 <strong>20000</strong> 号端口连接到 <strong>server</strong> 进程上去了。这个时候如果我们再开启一个 <strong>client</strong> 进程，我们猜想由于端口号 <strong>20000</strong> 已经被占用，新启动的 <strong>client</strong> 会由于调用 <strong>bind</strong> 函数出错而退出，我们实际验证一下：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs perl">[root<span class="hljs-variable">@localhost</span> testsocket]<span class="hljs-comment"># ./client </span><br><span class="hljs-keyword">bind</span> <span class="hljs-keyword">socket</span> error.<br>[root<span class="hljs-variable">@localhost</span> testsocket]<span class="hljs-comment"># </span><br></code></pre></td></tr></table></figure><p>结果确实和我们预想的一样。</p></li></ul><p>在技术面试的时候，有时候面试官会问 TCP 网络通信的客户端程序中的 socket 是否可以调用 bind 函数，相信读到这里，聪明的你已经有答案了。</p><p>另外，Linux 的 <strong>nc</strong> 命令有个 <strong>-p</strong> 选项（字母 <strong>p</strong> 是小写），这个选项的作用就是 <strong>nc</strong> 在模拟客户端程序时，可以使用指定端口号连接到服务器程序上去，实现原理相信读者也明白了。我们还是以上面的服务器程序为例，这个我们不用我们的 <strong>client</strong> 程序，改用 <strong>nc</strong> 命令来模拟客户端。在 <strong>shell</strong> 终端输入：</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs delphi">[root@localhost testsocket]# nc -v -p <span class="hljs-number">9999</span> <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span> <span class="hljs-number">3000</span><br>Ncat: Version <span class="hljs-number">6.40</span> ( http:<span class="hljs-comment">//nmap.org/ncat )</span><br>Ncat: Connected <span class="hljs-keyword">to</span> <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">3000</span>.<br>My <span class="hljs-keyword">name</span> <span class="hljs-keyword">is</span> liansixin<br>My <span class="hljs-keyword">name</span> <span class="hljs-keyword">is</span> liansixin<br></code></pre></td></tr></table></figure><p><strong>-v</strong> 选项表示输出 <strong>nc</strong> 命令连接的详细信息，这里连接成功以后，会输出“<strong>Ncat: Connected to 127.0.0.1:3000.</strong>” 提示已经连接到服务器的 <strong>3000</strong> 端口上去了。</p><p><strong>-p</strong> 选项的参数值是 <strong>9999</strong> 表示，我们要求 <strong>nc</strong> 命令本地以端口号 <strong>9999</strong> 连接服务器，注意不要与端口号 <strong>3000</strong> 混淆，<strong>3000</strong> 是服务器的侦听端口号，也就是我们的连接的目标端口号，<strong>9999</strong> 是我们客户端使用的端口号。我们用 <strong>lsof</strong> 命令来验证一下我们的 <strong>nc</strong> 命令是否确实以 <strong>9999</strong> 端口号连接到 <strong>server</strong> 进程上去了。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@localhost testsocket]<span class="hljs-comment"># lsof -i -Pn</span><br>COMMAND   PID <span class="hljs-keyword">USER</span>   <span class="hljs-title">FD</span>   <span class="hljs-keyword">TYPE</span> DEVICE SIZE/OFF <span class="hljs-keyword">NODE</span> <span class="hljs-title">NAME</span><br>server   <span class="hljs-number">1676</span> root    <span class="hljs-number">3</span>u  IPv4  <span class="hljs-number">21933</span>      <span class="hljs-number">0</span>t0  TCP *:<span class="hljs-number">3000</span> (LISTEN)<br>server   <span class="hljs-number">1676</span> root    <span class="hljs-number">7</span>u  IPv4  <span class="hljs-number">22405</span>      <span class="hljs-number">0</span>t0  TCP <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">3000</span>-&gt;<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">9999</span> (ESTABLISHED)<br>nc       <span class="hljs-number">2005</span> root    <span class="hljs-number">3</span>u  IPv4  <span class="hljs-number">22408</span>      <span class="hljs-number">0</span>t0  TCP <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">9999</span>-&gt;<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">3000</span> (ESTABLISHED)<br></code></pre></td></tr></table></figure><p>结果确实如我们期望的一致。</p><p>当然，我们用 <strong>nc</strong> 命令连接上 <strong>server</strong> 进程以后，我们还给服务器发了一条消息&quot;<strong>My name is liansixin</strong>&quot;，<strong>server</strong> 程序收到消息后把这条消息原封不动地返还给我们，以下是 <strong>server</strong> 端运行结果：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xl">[root@localhost testsocket]# ./server   <br>recv <span class="hljs-keyword">data</span> from client, <span class="hljs-keyword">data</span>: My <span class="hljs-keyword">name</span> <span class="hljs-keyword">is</span> liansixin<br><br>send <span class="hljs-keyword">data</span> to client successfully, <span class="hljs-keyword">data</span>: My <span class="hljs-keyword">name</span> <span class="hljs-keyword">is</span> liansixin<br></code></pre></td></tr></table></figure><p>结束~</p>]]></content>
      
      
      <categories>
          
          <category> 网络通讯基础学习笔记系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> socket编程 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 网络编程基础 </tag>
            
            <tag> bind函数讲解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络通信基础学习笔记01：常用 socket 函数基础</title>
      <link href="/2022/06/15/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001%EF%BC%9A%E5%B8%B8%E7%94%A8-socket-%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/06/15/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001%EF%BC%9A%E5%B8%B8%E7%94%A8-socket-%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="网络通信基础学习笔记01：常用-socket-函数基础">网络通信基础学习笔记01：常用 socket 函数基础</h2><h3 id="常用-socket-函数基础">常用 socket 函数基础</h3><p>Windows 和 Linux 上常用的 socket API 函数并不多，除了特定操作系统提供的一些基于自身系统特性的 API， 大多数 Socket API 都源于<strong>BSD Socket</strong> （即<strong>伯克利套接字</strong>（<strong>Berkeley Sockets</strong>）），因此这些 socket 函数在不同的平台有着相似的签名和参数。</p><p>经常有想学习网络编程的新人询问要掌握哪些基础的socket API，我这里给一个简单的函数列表，列表中给出的都是应该熟练掌握的 socket 函数。</p><p>​                                                                      常用 Berkeley Sockets API 一览表</p><table><thead><tr><th style="text-align:center">函数名称</th><th style="text-align:center">函数简单描述</th><th style="text-align:center">附加说明</th></tr></thead><tbody><tr><td style="text-align:center">socket</td><td style="text-align:center">创造某种类型的套接字</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">bind</td><td style="text-align:center">将一个 socket 绑定一个ip与端口的二元组上</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">listen</td><td style="text-align:center">将一个 socket 变为侦听状态</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">connect</td><td style="text-align:center">试图建立一个 TCP 连接</td><td style="text-align:center">一般用于客户端</td></tr><tr><td style="text-align:center">accept</td><td style="text-align:center">尝试接收一个连接</td><td style="text-align:center">一般用于服务端</td></tr><tr><td style="text-align:center">send</td><td style="text-align:center">通过一个socket发送数据</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">recv</td><td style="text-align:center">通过一个socket收取数据</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">select</td><td style="text-align:center">判断一组socket上的读事件</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">gethostbyname</td><td style="text-align:center">通过域名获取机器地址</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">close</td><td style="text-align:center">关闭一个套接字，回收该 socket 对应的资源</td><td style="text-align:center">Windows 系统中对应的是 closesocket</td></tr><tr><td style="text-align:center">shutdown</td><td style="text-align:center">关闭 socket 收或发通道</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">setsockopt</td><td style="text-align:center">设置一个套接字选项</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">getsockopt</td><td style="text-align:center">获取一个套接字选项</td><td style="text-align:center"></td></tr></tbody></table><p>对于某个 socket 函数，如果你想查看它的用法，可以通过相应的帮助文档。</p><h4 id="Linux-系统查看-socket-函数帮助">Linux 系统查看 socket 函数帮助</h4><p>如果是 Linux 系统，你可以通过 man 手册去查看相应的函数签名和用法。举个例子，如果你要查看 connect 函数的用法，只需要在 Linux shell 终端输入 <strong>man connect</strong> 即可。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs applescript">[root@localhost ~]<span class="hljs-comment"># man connect</span><br>CONNECT(<span class="hljs-number">2</span>)                                                          Linux Programmer&#x27;s Manual                                                         CONNECT(<span class="hljs-number">2</span>)<br><br>NAME<br>       connect - initiate a connection <span class="hljs-keyword">on</span> a socket<br><br>SYNOPSIS<br>       <span class="hljs-comment">#include &lt;sys/types.h&gt;          /* See NOTES */</span><br>       <span class="hljs-comment">#include &lt;sys/socket.h&gt;</span><br><br>       int connect(int sockfd, const struct sockaddr *addr,<br>                   socklen_t addrlen);<br><br>DESCRIPTION<br>       The connect() system call connects <span class="hljs-keyword">the</span> socket referred <span class="hljs-keyword">to</span> <span class="hljs-keyword">by</span> <span class="hljs-keyword">the</span> <span class="hljs-built_in">file</span> descriptor sockfd <span class="hljs-keyword">to</span> <span class="hljs-keyword">the</span> address specified <span class="hljs-keyword">by</span> addr.  The addrlen argument specifies<br>       <span class="hljs-keyword">the</span> size <span class="hljs-keyword">of</span> addr.  The format <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> address <span class="hljs-keyword">in</span> addr <span class="hljs-keyword">is</span> determined <span class="hljs-keyword">by</span> <span class="hljs-keyword">the</span> address <span class="hljs-literal">space</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> socket sockfd; see socket(<span class="hljs-number">2</span>) <span class="hljs-keyword">for</span> further details.<br><br>       If <span class="hljs-keyword">the</span> socket sockfd <span class="hljs-keyword">is</span> <span class="hljs-keyword">of</span> type SOCK_DGRAM <span class="hljs-keyword">then</span> addr <span class="hljs-keyword">is</span> <span class="hljs-keyword">the</span> address <span class="hljs-keyword">to</span> which datagrams are sent <span class="hljs-keyword">by</span> default, <span class="hljs-keyword">and</span> <span class="hljs-keyword">the</span> only address <span class="hljs-keyword">from</span> which datagrams are<br>       received.   If  <span class="hljs-keyword">the</span>  socket  <span class="hljs-keyword">is</span> <span class="hljs-keyword">of</span> type SOCK_STREAM <span class="hljs-keyword">or</span> SOCK_SEQPACKET, this call attempts <span class="hljs-keyword">to</span> make a connection <span class="hljs-keyword">to</span> <span class="hljs-keyword">the</span> socket <span class="hljs-keyword">that</span> <span class="hljs-keyword">is</span> bound <span class="hljs-keyword">to</span> <span class="hljs-keyword">the</span> address<br>       specified <span class="hljs-keyword">by</span> addr.<br><br>       Generally, connection-based protocol sockets may successfully connect() only once; connectionless protocol sockets may use connect()  multiple  <span class="hljs-keyword">times</span>  <span class="hljs-keyword">to</span><br>       change  their  association.  Connectionless sockets may dissolve <span class="hljs-keyword">the</span> association <span class="hljs-keyword">by</span> connecting <span class="hljs-keyword">to</span> an address <span class="hljs-keyword">with</span> <span class="hljs-keyword">the</span> sa_family member <span class="hljs-keyword">of</span> sockaddr <span class="hljs-keyword">set</span> <span class="hljs-keyword">to</span><br>       AF_UNSPEC (supported <span class="hljs-keyword">on</span> Linux <span class="hljs-keyword">since</span> kernel <span class="hljs-number">2.2</span>).<br><br>RETURN VALUE<br>       If <span class="hljs-keyword">the</span> connection <span class="hljs-keyword">or</span> binding succeeds, zero <span class="hljs-keyword">is</span> returned.  On <span class="hljs-keyword">error</span>, <span class="hljs-number">-1</span> <span class="hljs-keyword">is</span> returned, <span class="hljs-keyword">and</span> errno <span class="hljs-keyword">is</span> <span class="hljs-keyword">set</span> appropriately.<br><br>ERRORS<br>       The following are general socket errors only.  There may be other domain-specific <span class="hljs-keyword">error</span> codes.<br><br>       EACCES For UNIX domain sockets, which are identified <span class="hljs-keyword">by</span> pathname: Write permission <span class="hljs-keyword">is</span> denied <span class="hljs-keyword">on</span> <span class="hljs-keyword">the</span> socket <span class="hljs-built_in">file</span>, <span class="hljs-keyword">or</span> search permission <span class="hljs-keyword">is</span> denied  <span class="hljs-keyword">for</span>  one<br>              <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> directories <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> path prefix.  (See also path_resolution(<span class="hljs-number">7</span>).)<br><br>       EACCES, EPERM<br>              The  user  tried  <span class="hljs-keyword">to</span> connect <span class="hljs-keyword">to</span> a broadcast address <span class="hljs-keyword">without</span> having <span class="hljs-keyword">the</span> socket broadcast flag enabled <span class="hljs-keyword">or</span> <span class="hljs-keyword">the</span> connection request failed because <span class="hljs-keyword">of</span> a<br>              <span class="hljs-keyword">local</span> firewall rule.<br><br>       EADDRINUSE<br>              Local address <span class="hljs-keyword">is</span> already <span class="hljs-keyword">in</span> use.<br></code></pre></td></tr></table></figure><p>如上面的代码片段所示，man手册对于一个函数的说明一般包括如下几部分：</p><ul><li>函数声明及相关数据结构所在的头文件，你实际编码时如果需要使用这个函数必须包含该头文件；</li><li>函数的签名，即该函数的参数类型、个数和返回值；</li><li>函数用法说明，并可能包括一些注意事项；</li><li>函数返回值说明；</li><li>调用函数出错可能得到的错误码值；</li><li>一些相关函数在 man 手册的位置索引。（connect 没有这个部分）</li></ul><p>需要注意的是，这个方法不仅可以查 socket 函数也可以查看 Linux 下其他通用函数（如 fread）甚至一个 shell 命令（如 sleep）。以 sleep 为例，如果你想查程序中 sleep 函数的用法，由于Linux 内置有一个叫 sleep 的 shell 命令，如果你在 shell 窗口直接输入 <strong>man sleep</strong>，显示出来的默认会是 sleep 命令而不是我们要的 sleep 函数的帮助信息。</p><p>我们可以通过 <strong>man man</strong> 命令查看一下 man 手册组成部分：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs stata">[root@localhost ~]# <span class="hljs-keyword">man</span> <span class="hljs-keyword">man</span><br>## 无关的部分，省略...<br>The <span class="hljs-keyword">table</span> below shows the section numbers of the manual followed <span class="hljs-keyword">by</span> the types of pages they contain.<br><br>1   Executable programs or <span class="hljs-keyword">shell</span> commands<br>2   System calls (functions provided <span class="hljs-keyword">by</span> the kernel)<br>3   Library calls (functions within <span class="hljs-keyword">program</span> libraries)<br>4   Special files (usually found <span class="hljs-keyword">in</span> /dev)<br>5   <span class="hljs-keyword">File</span> formats and conventions eg /etc/passwd<br>6   Games<br>7   Miscellaneous (including <span class="hljs-keyword">macro</span> packages and conventions), <span class="hljs-keyword">e</span>.<span class="hljs-keyword">g</span>. <span class="hljs-keyword">man</span>(7), groff(7)<br>8   System administration commands (usually only <span class="hljs-keyword">for</span> root)<br>9   Kernel routines [Non standard]<br><br>A manual page consists of several sections.<br></code></pre></td></tr></table></figure><p>通过上面的代码片段，我们可以看出来，man 手册的内容总共有9部分组成，而 sleep 函数属于上面的 Section 3，所以我们输入 <strong>man 3 sleep</strong> 就可以查看 sleep 函数的帮助信息了：</p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs vhdl">[root@localhost ~]# man <span class="hljs-number">3</span> sleep<br>SLEEP(<span class="hljs-number">3</span>)                                                            Linux Programmer<span class="hljs-symbol">&#x27;s</span> Manual                                                           SLEEP(<span class="hljs-number">3</span>)<br><br>NAME<br>       sleep - sleep <span class="hljs-keyword">for</span> the specified number <span class="hljs-keyword">of</span> seconds<br><br>SYNOPSIS<br>       #include &lt;unistd.h&gt;<br><br>       <span class="hljs-built_in">unsigned</span> int sleep(<span class="hljs-built_in">unsigned</span> int seconds);<br><br>DESCRIPTION<br>       sleep() makes the calling thread sleep <span class="hljs-keyword">until</span> seconds seconds have elapsed <span class="hljs-keyword">or</span> a <span class="hljs-keyword">signal</span> arrives which <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> ignored.<br><br><span class="hljs-keyword">RETURN</span> VALUE<br>       Zero <span class="hljs-keyword">if</span> the requested <span class="hljs-built_in">time</span> has elapsed, <span class="hljs-keyword">or</span> the number <span class="hljs-keyword">of</span> seconds left <span class="hljs-keyword">to</span> sleep, <span class="hljs-keyword">if</span> the call was interrupted by a <span class="hljs-keyword">signal</span> handler.<br><br>CONFORMING <span class="hljs-keyword">TO</span><br>       POSIX.<span class="hljs-number">1</span>-<span class="hljs-number">2001</span>.<br><br>BUGS<br>       sleep() may be implemented using SIGALRM; mixing calls <span class="hljs-keyword">to</span> alarm(<span class="hljs-number">2</span>) <span class="hljs-keyword">and</span> sleep() <span class="hljs-keyword">is</span> a bad idea.<br><br>       Using longjmp(<span class="hljs-number">3</span>) from a <span class="hljs-keyword">signal</span> handler <span class="hljs-keyword">or</span> modifying the handling <span class="hljs-keyword">of</span> SIGALRM <span class="hljs-keyword">while</span> sleeping will cause undefined results.<br><br>SEE ALSO<br>       alarm(<span class="hljs-number">2</span>), nanosleep(<span class="hljs-number">2</span>), <span class="hljs-keyword">signal</span>(<span class="hljs-number">2</span>), <span class="hljs-keyword">signal</span>(<span class="hljs-number">7</span>)<br><br>COLOPHON<br>       This  page  <span class="hljs-keyword">is</span>  part <span class="hljs-keyword">of</span> <span class="hljs-keyword">release</span> <span class="hljs-number">3.53</span> <span class="hljs-keyword">of</span> the Linux man-pages project.  A description <span class="hljs-keyword">of</span> the project, <span class="hljs-keyword">and</span> information about reporting bugs, can be found at<br>       http://www.kernel.org/doc/man-pages/.<br></code></pre></td></tr></table></figure><h4 id="Windows-上查看-socket-函数帮助">Windows 上查看 socket 函数帮助</h4><p>Windows 也有类似 man 手册的帮助文档，早些年 Visual Studio 会自带一套离线的 MSDN 文档库，其优点就是不需要电脑联网，缺点是占磁盘空间比较大，内容陈旧。在手机网络都如此普及的今天，笔者还是建议使用在线版本的 MSDN。查看 Windows API 的帮助链接是：<a href="https://docs.microsoft.com/en-us/windows/desktop/">https://docs.microsoft.com/en-us/windows/desktop/</a>  ，在页面的搜索框中输入你想要搜索的 API 函数即可。</p><blockquote><p>需要注意的是，建议读者在页面的底部将页面语言设置成English，这样搜索出来的内容会更准确更丰富。</p></blockquote><p>我们还是以 connect 函数为例，在上述页面的搜索框中输入 <strong>socket connect</strong> ，然后回车，得到一组搜索结果，我们选择我们需要的页面，打开链接：<a href="https://docs.microsoft.com/en-us/windows/desktop/api/winsock2/nf-winsock2-connect">https://docs.microsoft.com/en-us/windows/desktop/api/winsock2/nf-winsock2-connect</a> 。与简陋的 man 手册相比，MSDN 关于connect 函数的说明就比较详细了，大体也分为以下几部分：</p><ol><li><strong>Syntax</strong>， 即函数签名，函数的参数类型、个数和返回值；</li><li><strong>Parameters</strong>，参数的用法详细说明；</li><li><strong>Return Value</strong>， 函数的返回值说明，在返回值部分，还有如果函数调用失败详细的错误码说明信息；</li><li><strong>Remarks</strong>，这部分就是该函数的详细用法说明，某些函数还会给出示例代码；</li><li><strong>Requirements</strong>，这部分指的是要使用这个函数，操作系统的版本要求，代码需要引入的头文件和库文件（如果有的话）。</li><li><strong>See Also</strong>， 这部分一般是一些相关函数和知识点的链接信息。</li></ol><p>需要注意的是，在 MSDN 上阅读相关 API 的帮助信息时，你要辩证性地对待其提供的信息，因为很多函数的实际工作原理和行为并不一定如 MSDN 介绍的那样。所以在有些 API 帮助下面会有一些读者的评论信息，这些评论信息或对文档内容做一些补充或纠错，或给出一些代码示例。建议读者实际查阅时，留意一下这部分信息，或许能得到一些很有用的帮助。</p><h3 id="TCP-通信基本流程">TCP 通信基本流程</h3><p>不管多么复杂的服务器或客户端程序，其网络通信的基本原理一定如下所述：</p><p>对于服务器，其通信流程一般有如下步骤：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-number">1</span>. 调用 <span class="hljs-keyword">socket</span> 函数创建 <span class="hljs-keyword">socket</span>（侦听<span class="hljs-keyword">socket</span>）<br><span class="hljs-number">2</span>. 调用 <span class="hljs-keyword">bind</span> 函数 将 <span class="hljs-keyword">socket</span>绑定到某个ip和端口的二元组上<br><span class="hljs-number">3</span>. 调用 <span class="hljs-keyword">listen</span> 函数 开启侦听<br><span class="hljs-number">4</span>. 当有客户端请求连接上来后，调用 <span class="hljs-keyword">accept</span> 函数接受连接，产生一个新的 <span class="hljs-keyword">socket</span>（客户端 <span class="hljs-keyword">socket</span>）<br><span class="hljs-number">5</span>. 基于新产生的 <span class="hljs-keyword">socket</span> 调用 <span class="hljs-keyword">send</span> 或 <span class="hljs-keyword">recv</span> 函数开始与客户端进行数据交流<br><span class="hljs-number">6</span>. 通信结束后，调用 <span class="hljs-keyword">close</span> 函数关闭侦听 <span class="hljs-keyword">socket</span><br></code></pre></td></tr></table></figure><p>对于客户端，其通信流程一般有如下步骤：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-number">1</span>. 调用 <span class="hljs-keyword">socket</span>函数创建客户端 <span class="hljs-keyword">socket</span><br><span class="hljs-number">2</span>. 调用 <span class="hljs-keyword">connect</span> 函数尝试连接服务器<br><span class="hljs-number">3</span>. 连接成功以后调用 <span class="hljs-keyword">send</span> 或 <span class="hljs-keyword">recv</span> 函数开始与服务器进行数据交流<br><span class="hljs-number">4</span>. 通信结束后，调用 <span class="hljs-keyword">close</span> 函数关闭侦听<span class="hljs-keyword">socket</span><br></code></pre></td></tr></table></figure><p>为什么客户端调用 <strong>close()</strong> ，会和服务器端 <strong>recv()</strong> 函数有关。这个涉及到 <strong>recv()</strong> 函数的返回值意义，我会在下文中详细讲解。</p><p>服务器端实现代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * TCP服务器通信基本流程</span><br><span class="hljs-comment"> * lian si xin 2022-6-15</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;arpa/inet.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//1.创建一个侦听socket</span><br>    <span class="hljs-type">int</span> listenfd = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (listenfd == <span class="hljs-number">-1</span>)<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;create listen socket error.&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//2.初始化服务器地址</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span> bindaddr;<br>    bindaddr.sin_family = AF_INET;<br>    bindaddr.sin_addr.s_addr = <span class="hljs-built_in">htonl</span>(INADDR_ANY);<br>    bindaddr.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-number">3000</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">bind</span>(listenfd, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;bindaddr, <span class="hljs-built_in">sizeof</span>(bindaddr)) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;bind listen socket error.&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br><span class="hljs-comment">//3.启动侦听</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">listen</span>(listenfd, SOMAXCONN) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;listen error.&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>    &#123;<br>        <span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span> clientaddr;<br>        <span class="hljs-type">socklen_t</span> clientaddrlen = <span class="hljs-built_in">sizeof</span>(clientaddr);<br><span class="hljs-comment">//4. 接受客户端连接</span><br>        <span class="hljs-type">int</span> clientfd = <span class="hljs-built_in">accept</span>(listenfd, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;clientaddr, &amp;clientaddrlen);<br>        <span class="hljs-keyword">if</span> (clientfd != <span class="hljs-number">-1</span>)<br>        &#123;         <br><span class="hljs-type">char</span> recvBuf[<span class="hljs-number">32</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-comment">//5. 从客户端接受数据</span><br><span class="hljs-type">int</span> ret = <span class="hljs-built_in">recv</span>(clientfd, recvBuf, <span class="hljs-number">32</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (ret &gt; <span class="hljs-number">0</span>) <br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;recv data from client, data: &quot;</span> &lt;&lt; recvBuf &lt;&lt; std::endl;<br><span class="hljs-comment">//6. 将收到的数据原封不动地发给客户端</span><br>ret = <span class="hljs-built_in">send</span>(clientfd, recvBuf, <span class="hljs-built_in">strlen</span>(recvBuf), <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (ret != <span class="hljs-built_in">strlen</span>(recvBuf))<br>std::cout &lt;&lt; <span class="hljs-string">&quot;send data error.&quot;</span> &lt;&lt; std::endl;<br><br>std::cout &lt;&lt; <span class="hljs-string">&quot;send data to client successfully, data: &quot;</span> &lt;&lt; recvBuf &lt;&lt; std::endl;<br>&#125; <br><span class="hljs-keyword">else</span> <br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;recv data error.&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-built_in">close</span>(clientfd);<br>        &#125;<br>    &#125;<br><br><span class="hljs-comment">//7.关闭侦听socket</span><br><span class="hljs-built_in">close</span>(listenfd);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>客户端实现代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * TCP客户端通信基本流程</span><br><span class="hljs-comment"> * lian si xin 2022-6-15</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;arpa/inet.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SERVER_ADDRESS <span class="hljs-string">&quot;127.0.0.1&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SERVER_PORT     3000</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SEND_DATA       <span class="hljs-string">&quot;helloworld&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//1.创建一个socket</span><br>    <span class="hljs-type">int</span> clientfd = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (clientfd == <span class="hljs-number">-1</span>)<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;create client socket error.&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//2.连接服务器</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span> serveraddr;<br>    serveraddr.sin_family = AF_INET;<br>    serveraddr.sin_addr.s_addr = <span class="hljs-built_in">inet_addr</span>(SERVER_ADDRESS);<br>    serveraddr.sin_port = <span class="hljs-built_in">htons</span>(SERVER_PORT);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">connect</span>(clientfd, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;serveraddr, <span class="hljs-built_in">sizeof</span>(serveraddr)) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;connect socket error.&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br><span class="hljs-comment">//3. 向服务器发送数据</span><br><span class="hljs-type">int</span> ret = <span class="hljs-built_in">send</span>(clientfd, SEND_DATA, <span class="hljs-built_in">strlen</span>(SEND_DATA), <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (ret != <span class="hljs-built_in">strlen</span>(SEND_DATA))<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;send data error.&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br>std::cout &lt;&lt; <span class="hljs-string">&quot;send data successfully, data: &quot;</span> &lt;&lt; SEND_DATA &lt;&lt; std::endl;<br><br><span class="hljs-comment">//4. 从客户端收取数据</span><br><span class="hljs-type">char</span> recvBuf[<span class="hljs-number">32</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>ret = <span class="hljs-built_in">recv</span>(clientfd, recvBuf, <span class="hljs-number">32</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (ret &gt; <span class="hljs-number">0</span>) <br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;recv data successfully, data: &quot;</span> &lt;&lt; recvBuf &lt;&lt; std::endl;<br>&#125; <br><span class="hljs-keyword">else</span> <br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;recv data error, data: &quot;</span> &lt;&lt; recvBuf &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-comment">//5. 关闭socket</span><br><span class="hljs-built_in">close</span>(clientfd);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上代码，服务器端在地址 <strong>0.0.0.0:3000</strong> 启动一个侦听，客户端连接服务器成功后，给服务器发送字符串&quot;helloworld&quot;；服务器收到后，将收到的字符串原封不动地发给客户端。</p><p>在 Linux Shell 界面输入以下命令编译服务器端和客户端：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-meta"># 编译 server.cpp 生成可执行文件 server   </span><br>[root<span class="hljs-symbol">@localhost</span> testsocket]<span class="hljs-meta"># g++ -g -o server server.cpp</span><br><span class="hljs-meta"># 编译 client.cpp 生成可执行文件 client</span><br>[root<span class="hljs-symbol">@localhost</span> testsocket]<span class="hljs-meta"># g++ -g -o client client.cpp</span><br></code></pre></td></tr></table></figure><p>接着，我们看下执行效果，先启动服务器程序：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> testsocket]<span class="hljs-meta"># ./server</span><br></code></pre></td></tr></table></figure><p>再启动客户端程序：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> testsocket]<span class="hljs-meta"># ./client </span><br></code></pre></td></tr></table></figure><p>这个时候客户端输出：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-title">send</span> <span class="hljs-class"><span class="hljs-keyword">data</span> successfully, <span class="hljs-keyword">data</span>: helloworld</span><br><span class="hljs-title">recv</span> <span class="hljs-class"><span class="hljs-keyword">data</span> successfully, <span class="hljs-keyword">data</span>: helloworld</span><br></code></pre></td></tr></table></figure><p>服务器端输出：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-title">recv</span> <span class="hljs-class"><span class="hljs-keyword">data</span> from client, <span class="hljs-keyword">data</span>: helloworld</span><br><span class="hljs-title">send</span> <span class="hljs-class"><span class="hljs-keyword">data</span> to client successfully, <span class="hljs-keyword">data</span>: helloworld</span><br></code></pre></td></tr></table></figure><p>以上就是 TCP socket 网络通信的基本原理，对于很多人来说，上述代码可能很简单，更有点“玩具”的意味。但是深刻理解这两个代码片段是进一步学习开发复杂的网络通信程序的基础。而且看似很简单的代码，却隐藏了很多的玄机和原理，接下来的章节我将以这两段代码为蓝本，逐渐深入。</p>]]></content>
      
      
      <categories>
          
          <category> 网络通讯基础学习笔记系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> socket编程 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 网络通信基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程讲解</title>
      <link href="/2022/06/14/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B%E8%AE%B2%E8%A7%A3/"/>
      <url>/2022/06/14/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B%E8%AE%B2%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1>C++提高编程</h1><ul><li>本阶段主要针对C++==泛型编程==和==STL==技术做详细讲解，探讨C++更深层的使用</li></ul><h2 id="1-模板">1 模板</h2><h3 id="1-1-模板的概念">1.1 模板的概念</h3><p>模板就是建立<strong>通用的模具</strong>，大大<strong>提高复用性</strong></p><p>例如生活中的模板</p><p>一寸照片模板：</p><p><img src="/assetss/1547105026929.png" alt="1547105026929"></p><p>PPT模板：</p><p><img src="/assetss/1547103297864.png" alt="1547103297864"></p><p><img src="/assetss/1547103359158.png" alt="1547103359158"></p><p>模板的特点：</p><ul><li>模板不可以直接使用，它只是一个框架</li><li>模板的通用并不是万能的</li></ul><h3 id="1-2-函数模板">1.2 函数模板</h3><ul><li><p>C++另一种编程思想称为 ==泛型编程== ，主要利用的技术就是模板</p></li><li><p>C++提供两种模板机制:<strong>函数模板</strong>和<strong>类模板</strong></p></li></ul><h4 id="1-2-1-函数模板语法">1.2.1 函数模板语法</h4><p>函数模板作用：</p><p>建立一个通用函数，其函数返回值类型和形参类型可以不具体制定，用一个<strong>虚拟的类型</strong>来代表。</p><p><strong>语法：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br>函数声明或定义<br></code></pre></td></tr></table></figure><p><strong>解释：</strong></p><p>template  —  声明创建模板</p><p>typename  — 表面其后面的符号是一种数据类型，可以用class代替</p><p>T    —   通用的数据类型，名称可以替换，通常为大写字母</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs C++"><br><span class="hljs-comment">//交换整型函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swapInt</span><span class="hljs-params">(<span class="hljs-type">int</span>&amp; a, <span class="hljs-type">int</span>&amp; b)</span> </span>&#123;<br><span class="hljs-type">int</span> temp = a;<br>a = b;<br>b = temp;<br>&#125;<br><br><span class="hljs-comment">//交换浮点型函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swapDouble</span><span class="hljs-params">(<span class="hljs-type">double</span>&amp; a, <span class="hljs-type">double</span>&amp; b)</span> </span>&#123;<br><span class="hljs-type">double</span> temp = a;<br>a = b;<br>b = temp;<br>&#125;<br><br><span class="hljs-comment">//利用模板提供通用的交换函数</span><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mySwap</span><span class="hljs-params">(T&amp; a, T&amp; b)</span></span><br><span class="hljs-function"></span>&#123;<br>T temp = a;<br>a = b;<br>b = temp;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">20</span>;<br><br><span class="hljs-comment">//swapInt(a, b);</span><br><br><span class="hljs-comment">//利用模板实现交换</span><br><span class="hljs-comment">//1、自动类型推导</span><br><span class="hljs-built_in">mySwap</span>(a, b);<br><br><span class="hljs-comment">//2、显示指定类型</span><br><span class="hljs-built_in">mySwap</span>&lt;<span class="hljs-type">int</span>&gt;(a, b);<br><br>cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>函数模板利用关键字 template</li><li>使用函数模板有两种方式：自动类型推导、显示指定类型</li><li>模板的目的是为了提高复用性，将类型参数化</li></ul><h4 id="1-2-2-函数模板注意事项">1.2.2 函数模板注意事项</h4><p>注意事项：</p><ul><li><p>自动类型推导，必须推导出一致的数据类型T,才可以使用</p></li><li><p>模板必须要确定出T的数据类型，才可以使用</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//利用模板提供通用的交换函数</span><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mySwap</span><span class="hljs-params">(T&amp; a, T&amp; b)</span></span><br><span class="hljs-function"></span>&#123;<br>T temp = a;<br>a = b;<br>b = temp;<br>&#125;<br><br><br><span class="hljs-comment">// 1、自动类型推导，必须推导出一致的数据类型T,才可以使用</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">20</span>;<br><span class="hljs-type">char</span> c = <span class="hljs-string">&#x27;c&#x27;</span>;<br><br><span class="hljs-built_in">mySwap</span>(a, b); <span class="hljs-comment">// 正确，可以推导出一致的T</span><br><span class="hljs-comment">//mySwap(a, c); // 错误，推导不出一致的T类型</span><br>&#125;<br><br><br><span class="hljs-comment">// 2、模板必须要确定出T的数据类型，才可以使用</span><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;func 调用&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//func(); //错误，模板不能独立使用，必须确定出T的类型</span><br><span class="hljs-built_in">func</span>&lt;<span class="hljs-type">int</span>&gt;(); <span class="hljs-comment">//利用显示指定类型的方式，给T一个类型，才可以使用该模板</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><span class="hljs-built_in">test02</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>使用模板时必须确定出通用数据类型T，并且能够推导出一致的类型</li></ul><h4 id="1-2-3-函数模板案例">1.2.3 函数模板案例</h4><p>案例描述：</p><ul><li>利用函数模板封装一个排序的函数，可以对<strong>不同数据类型数组</strong>进行排序</li><li>排序规则从大到小，排序算法为<strong>选择排序</strong></li><li>分别利用<strong>char数组</strong>和<strong>int数组</strong>进行测试</li></ul><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//交换的函数模板</span><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mySwap</span><span class="hljs-params">(T &amp;a, T&amp;b)</span></span><br><span class="hljs-function"></span>&#123;<br>T temp = a;<br>a = b;<br>b = temp;<br>&#125;<br><br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt; <span class="hljs-comment">// 也可以替换成typename</span><br><span class="hljs-comment">//利用选择排序，进行对数组从大到小的排序</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mySort</span><span class="hljs-params">(T arr[], <span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>&#123;<br><span class="hljs-type">int</span> max = i; <span class="hljs-comment">//最大数的下标</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt; len; j++)<br>&#123;<br><span class="hljs-keyword">if</span> (arr[max] &lt; arr[j])<br>&#123;<br>max = j;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (max != i) <span class="hljs-comment">//如果最大数的下标不是i，交换两者</span><br>&#123;<br><span class="hljs-built_in">mySwap</span>(arr[max], arr[i]);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printArray</span><span class="hljs-params">(T arr[], <span class="hljs-type">int</span> len)</span> </span>&#123;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>cout &lt;&lt; arr[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//测试char数组</span><br><span class="hljs-type">char</span> charArr[] = <span class="hljs-string">&quot;bdcfeagh&quot;</span>;<br><span class="hljs-type">int</span> num = <span class="hljs-built_in">sizeof</span>(charArr) / <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">char</span>);<br><span class="hljs-built_in">mySort</span>(charArr, num);<br><span class="hljs-built_in">printArray</span>(charArr, num);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//测试int数组</span><br><span class="hljs-type">int</span> intArr[] = &#123; <span class="hljs-number">7</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">9</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span> &#125;;<br><span class="hljs-type">int</span> num = <span class="hljs-built_in">sizeof</span>(intArr) / <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>);<br><span class="hljs-built_in">mySort</span>(intArr, num);<br><span class="hljs-built_in">printArray</span>(intArr, num);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><span class="hljs-built_in">test02</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：模板可以提高代码复用，需要熟练掌握</p><h4 id="1-2-4-普通函数与函数模板的区别">1.2.4 普通函数与函数模板的区别</h4><p><strong>普通函数与函数模板区别：</strong></p><ul><li>普通函数调用时可以发生自动类型转换（隐式类型转换）</li><li>函数模板调用时，如果利用自动类型推导，不会发生隐式类型转换</li><li>如果利用显示指定类型的方式，可以发生隐式类型转换</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//普通函数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">myAdd01</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> a + b;<br>&#125;<br><br><span class="hljs-comment">//函数模板</span><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> T&gt;</span><br><span class="hljs-function">T <span class="hljs-title">myAdd02</span><span class="hljs-params">(T a, T b)</span>  </span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> a + b;<br>&#125;<br><br><span class="hljs-comment">//使用函数模板时，如果用自动类型推导，不会发生自动类型转换,即隐式类型转换</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">20</span>;<br><span class="hljs-type">char</span> c = <span class="hljs-string">&#x27;c&#x27;</span>;<br><br>cout &lt;&lt; <span class="hljs-built_in">myAdd01</span>(a, c) &lt;&lt; endl; <span class="hljs-comment">//正确，将char类型的&#x27;c&#x27;隐式转换为int类型  &#x27;c&#x27; 对应 ASCII码 99</span><br><br><span class="hljs-comment">//myAdd02(a, c); // 报错，使用自动类型推导时，不会发生隐式类型转换</span><br><br><span class="hljs-built_in">myAdd02</span>&lt;<span class="hljs-type">int</span>&gt;(a, c); <span class="hljs-comment">//正确，如果用显示指定类型，可以发生隐式类型转换</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：建议使用显示指定类型的方式，调用函数模板，因为可以自己确定通用类型T</p><h4 id="1-2-5-普通函数与函数模板的调用规则">1.2.5 普通函数与函数模板的调用规则</h4><p>调用规则如下：</p><ol><li>如果函数模板和普通函数都可以实现，优先调用普通函数</li><li>可以通过空模板参数列表来强制调用函数模板</li><li>函数模板也可以发生重载</li><li>如果函数模板可以产生更好的匹配,优先调用函数模板</li></ol><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//普通函数与函数模板调用规则</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">myPrint</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;调用的普通函数&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">myPrint</span><span class="hljs-params">(T a, T b)</span> </span><br><span class="hljs-function"></span>&#123; <br>cout &lt;&lt; <span class="hljs-string">&quot;调用的模板&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">myPrint</span><span class="hljs-params">(T a, T b, T c)</span> </span><br><span class="hljs-function"></span>&#123; <br>cout &lt;&lt; <span class="hljs-string">&quot;调用重载的模板&quot;</span> &lt;&lt; endl; <br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//1、如果函数模板和普通函数都可以实现，优先调用普通函数</span><br><span class="hljs-comment">// 注意 如果告诉编译器  普通函数是有的，但只是声明没有实现，或者不在当前文件内实现，就会报错找不到</span><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">20</span>;<br><span class="hljs-built_in">myPrint</span>(a, b); <span class="hljs-comment">//调用普通函数</span><br><br><span class="hljs-comment">//2、可以通过空模板参数列表来强制调用函数模板</span><br>myPrint&lt;&gt;(a, b); <span class="hljs-comment">//调用函数模板</span><br><br><span class="hljs-comment">//3、函数模板也可以发生重载</span><br><span class="hljs-type">int</span> c = <span class="hljs-number">30</span>;<br><span class="hljs-built_in">myPrint</span>(a, b, c); <span class="hljs-comment">//调用重载的函数模板</span><br><br><span class="hljs-comment">//4、 如果函数模板可以产生更好的匹配,优先调用函数模板</span><br><span class="hljs-type">char</span> c1 = <span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-type">char</span> c2 = <span class="hljs-string">&#x27;b&#x27;</span>;<br><span class="hljs-built_in">myPrint</span>(c1, c2); <span class="hljs-comment">//调用函数模板</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：既然提供了函数模板，最好就不要提供普通函数，否则容易出现二义性</p><h4 id="1-2-6-模板的局限性">1.2.6 模板的局限性</h4><p><strong>局限性：</strong></p><ul><li>模板的通用性并不是万能的</li></ul><p><strong>例如：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(T a, T b)</span></span><br><span class="hljs-function"></span>&#123; <br>   a = b;<br>   &#125;<br></code></pre></td></tr></table></figure><p>在上述代码中提供的赋值操作，如果传入的a和b是一个数组，就无法实现了</p><p>再例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(T a, T b)</span></span><br><span class="hljs-function"></span>&#123; <br>   <span class="hljs-keyword">if</span>(a &gt; b) &#123; ... &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><p>在上述代码中，如果T的数据类型传入的是像Person这样的自定义数据类型，也无法正常运行</p><p>因此C++为了解决这种问题，提供模板的重载，可以为这些<strong>特定的类型</strong>提供<strong>具体化的模板</strong></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Person</span>(string name, <span class="hljs-type">int</span> age)<br>&#123;<br><span class="hljs-keyword">this</span>-&gt;m_Name = name;<br><span class="hljs-keyword">this</span>-&gt;m_Age = age;<br>&#125;<br>string m_Name;<br><span class="hljs-type">int</span> m_Age;<br>&#125;;<br><br><span class="hljs-comment">//普通函数模板</span><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">myCompare</span><span class="hljs-params">(T&amp; a, T&amp; b)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (a == b)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br><br><br><span class="hljs-comment">//具体化，显示具体化的原型和定意思以template&lt;&gt;开头，并通过名称来指出类型</span><br><span class="hljs-comment">//具体化优先于常规模板</span><br><span class="hljs-keyword">template</span>&lt;&gt; <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">myCompare</span><span class="hljs-params">(Person &amp;p1, Person &amp;p2)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> ( p<span class="hljs-number">1.</span>m_Name  == p<span class="hljs-number">2.</span>m_Name &amp;&amp; p<span class="hljs-number">1.</span>m_Age == p<span class="hljs-number">2.</span>m_Age)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">20</span>;<br><span class="hljs-comment">//内置数据类型可以直接使用通用的函数模板</span><br><span class="hljs-type">bool</span> ret = <span class="hljs-built_in">myCompare</span>(a, b);<br><span class="hljs-keyword">if</span> (ret)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;a == b &quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;a != b &quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-number">10</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-number">10</span>)</span></span>;<br><span class="hljs-comment">//自定义数据类型，不会调用普通的函数模板</span><br><span class="hljs-comment">//可以创建具体化的Person数据类型的模板，用于特殊处理这个类型</span><br><span class="hljs-type">bool</span> ret = <span class="hljs-built_in">myCompare</span>(p1, p2);<br><span class="hljs-keyword">if</span> (ret)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;p1 == p2 &quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;p1 != p2 &quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">test02</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>利用具体化的模板，可以解决自定义类型的通用化</li><li>学习模板并不是为了写模板，而是在STL能够运用系统提供的模板</li></ul><h3 id="1-3-类模板">1.3 类模板</h3><h4 id="1-3-1-类模板语法">1.3.1 类模板语法</h4><p>类模板作用：</p><ul><li>建立一个通用类，类中的成员 数据类型可以不具体制定，用一个<strong>虚拟的类型</strong>来代表。</li></ul><p><strong>语法：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br>类<br></code></pre></td></tr></table></figure><p><strong>解释：</strong></p><p>template  —  声明创建模板</p><p>typename  — 表面其后面的符号是一种数据类型，可以用class代替</p><p>T    —   通用的数据类型，名称可以替换，通常为大写字母</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-comment">//类模板</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">NameType</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">AgeType</span>&gt; <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Person</span>(NameType name, AgeType age)<br>&#123;<br><span class="hljs-keyword">this</span>-&gt;mName = name;<br><span class="hljs-keyword">this</span>-&gt;mAge = age;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showPerson</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;name: &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;mName &lt;&lt; <span class="hljs-string">&quot; age: &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;mAge &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">public</span>:<br>NameType mName;<br>AgeType mAge;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// 指定NameType 为string类型，AgeType 为 int类型</span><br>Person&lt;string, <span class="hljs-type">int</span>&gt;<span class="hljs-built_in">P1</span>(<span class="hljs-string">&quot;孙悟空&quot;</span>, <span class="hljs-number">999</span>);<br>P<span class="hljs-number">1.</span><span class="hljs-built_in">showPerson</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：类模板和函数模板语法相似，在声明模板template后面加类，此类称为类模板</p><h4 id="1-3-2-类模板与函数模板区别">1.3.2 类模板与函数模板区别</h4><p>类模板与函数模板区别主要有两点：</p><ol><li>类模板没有自动类型推导的使用方式</li><li>类模板在模板参数列表中可以有默认参数</li></ol><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-comment">//类模板</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">NameType</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">AgeType</span> = <span class="hljs-type">int</span>&gt; <br><span class="hljs-keyword">class</span> Person<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Person</span>(NameType name, AgeType age)<br>&#123;<br><span class="hljs-keyword">this</span>-&gt;mName = name;<br><span class="hljs-keyword">this</span>-&gt;mAge = age;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showPerson</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;name: &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;mName &lt;&lt; <span class="hljs-string">&quot; age: &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;mAge &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">public</span>:<br>NameType mName;<br>AgeType mAge;<br>&#125;;<br><br><span class="hljs-comment">//1、类模板没有自动类型推导的使用方式</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// Person p(&quot;孙悟空&quot;, 1000); // 错误 类模板使用时候，不可以用自动类型推导</span><br>Person &lt;string ,<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">p</span>(<span class="hljs-string">&quot;孙悟空&quot;</span>, <span class="hljs-number">1000</span>); <span class="hljs-comment">//必须使用显示指定类型的方式，使用类模板</span><br>p.<span class="hljs-built_in">showPerson</span>();<br>&#125;<br><br><span class="hljs-comment">//2、类模板在模板参数列表中可以有默认参数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Person &lt;string&gt; <span class="hljs-built_in">p</span>(<span class="hljs-string">&quot;猪八戒&quot;</span>, <span class="hljs-number">999</span>); <span class="hljs-comment">//类模板中的模板参数列表 可以指定默认参数</span><br>p.<span class="hljs-built_in">showPerson</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">test02</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>类模板使用只能用显示指定类型方式</li><li>类模板中的模板参数列表可以有默认参数</li></ul><h4 id="1-3-3-类模板中成员函数创建时机">1.3.3 类模板中成员函数创建时机</h4><p>类模板中成员函数和普通类中成员函数创建时机是有区别的：</p><ul><li>普通类中的成员函数一开始就可以创建</li><li>类模板中的成员函数在调用时才创建</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person1</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showPerson1</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Person1 show&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person2</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showPerson2</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Person2 show&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>T obj;<br><br><span class="hljs-comment">//类模板中的成员函数，并不是一开始就创建的，而是在模板调用时再生成</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun1</span><span class="hljs-params">()</span> </span>&#123; obj.<span class="hljs-built_in">showPerson1</span>(); &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun2</span><span class="hljs-params">()</span> </span>&#123; obj.<span class="hljs-built_in">showPerson2</span>(); &#125;<br><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>MyClass&lt;Person1&gt; m;<br><br>m.<span class="hljs-built_in">fun1</span>();<br><br><span class="hljs-comment">//m.fun2();//编译会出错，说明函数调用才会去创建成员函数</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：类模板中的成员函数并不是一开始就创建的，在调用时才去创建</p><h4 id="1-3-4-类模板对象做函数参数">1.3.4 类模板对象做函数参数</h4><p>学习目标：</p><ul><li>类模板实例化出的对象，向函数传参的方式</li></ul><p>一共有三种传入方式：</p><ol><li>指定传入的类型   — 直接显示对象的数据类型</li><li>参数模板化           — 将对象中的参数变为模板进行传递</li><li>整个类模板化       — 将这个对象类型 模板化进行传递</li></ol><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-comment">//类模板</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">NameType</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">AgeType</span> = <span class="hljs-type">int</span>&gt; <br><span class="hljs-keyword">class</span> Person<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Person</span>(NameType name, AgeType age)<br>&#123;<br><span class="hljs-keyword">this</span>-&gt;mName = name;<br><span class="hljs-keyword">this</span>-&gt;mAge = age;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showPerson</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;name: &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;mName &lt;&lt; <span class="hljs-string">&quot; age: &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;mAge &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">public</span>:<br>NameType mName;<br>AgeType mAge;<br>&#125;;<br><br><span class="hljs-comment">//1、指定传入的类型</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printPerson1</span><span class="hljs-params">(Person&lt;string, <span class="hljs-type">int</span>&gt; &amp;p)</span> </span><br><span class="hljs-function"></span>&#123;<br>p.<span class="hljs-built_in">showPerson</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Person &lt;string, <span class="hljs-type">int</span> &gt;<span class="hljs-built_in">p</span>(<span class="hljs-string">&quot;孙悟空&quot;</span>, <span class="hljs-number">100</span>);<br><span class="hljs-built_in">printPerson1</span>(p);<br>&#125;<br><br><span class="hljs-comment">//2、参数模板化</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T1</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">T2</span>&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printPerson2</span><span class="hljs-params">(Person&lt;T1, T2&gt;&amp;p)</span></span><br><span class="hljs-function"></span>&#123;<br>p.<span class="hljs-built_in">showPerson</span>();<br>cout &lt;&lt; <span class="hljs-string">&quot;T1的类型为： &quot;</span> &lt;&lt; <span class="hljs-built_in">typeid</span>(T1).<span class="hljs-built_in">name</span>() &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;T2的类型为： &quot;</span> &lt;&lt; <span class="hljs-built_in">typeid</span>(T2).<span class="hljs-built_in">name</span>() &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Person &lt;string, <span class="hljs-type">int</span> &gt;<span class="hljs-built_in">p</span>(<span class="hljs-string">&quot;猪八戒&quot;</span>, <span class="hljs-number">90</span>);<br><span class="hljs-built_in">printPerson2</span>(p);<br>&#125;<br><br><span class="hljs-comment">//3、整个类模板化</span><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printPerson3</span><span class="hljs-params">(T &amp; p)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;T的类型为： &quot;</span> &lt;&lt; <span class="hljs-built_in">typeid</span>(T).<span class="hljs-built_in">name</span>() &lt;&lt; endl;<br>p.<span class="hljs-built_in">showPerson</span>();<br><br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test03</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Person &lt;string, <span class="hljs-type">int</span> &gt;<span class="hljs-built_in">p</span>(<span class="hljs-string">&quot;唐僧&quot;</span>, <span class="hljs-number">30</span>);<br><span class="hljs-built_in">printPerson3</span>(p);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><span class="hljs-built_in">test02</span>();<br><span class="hljs-built_in">test03</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>通过类模板创建的对象，可以有三种方式向函数中进行传参</li><li>使用比较广泛是第一种：指定传入的类型</li></ul><h4 id="1-3-5-类模板与继承">1.3.5 类模板与继承</h4><p>当类模板碰到继承时，需要注意一下几点：</p><ul><li>当子类继承的父类是一个类模板时，子类在声明的时候，要指定出父类中T的类型</li><li>如果不指定，编译器无法给子类分配内存</li><li>如果想灵活指定出父类中T的类型，子类也需变为类模板</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span><br>&#123;<br>T m;<br>&#125;;<br><br><span class="hljs-comment">//class Son:public Base  //错误，c++编译需要给子类分配内存，必须知道父类中T的类型才可以向下继承</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> :<span class="hljs-keyword">public</span> Base&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-comment">//必须指定一个类型</span><br>&#123;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Son c;<br>&#125;<br><br><span class="hljs-comment">//类模板继承类模板 ,可以用T2指定父类中的T类型</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T1</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">T2</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son2</span> :<span class="hljs-keyword">public</span> Base&lt;T2&gt;<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Son2</span>()<br>&#123;<br>cout &lt;&lt; <span class="hljs-built_in">typeid</span>(T1).<span class="hljs-built_in">name</span>() &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-built_in">typeid</span>(T2).<span class="hljs-built_in">name</span>() &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Son2&lt;<span class="hljs-type">int</span>, <span class="hljs-type">char</span>&gt; child1;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">test02</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：如果父类是类模板，子类需要指定出父类中T的数据类型</p><h4 id="1-3-6-类模板成员函数类外实现">1.3.6 类模板成员函数类外实现</h4><p>学习目标：能够掌握类模板中的成员函数类外实现</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-comment">//类模板中成员函数类外实现</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T1</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">T2</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//成员函数类内声明</span><br><span class="hljs-built_in">Person</span>(T1 name, T2 age);<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showPerson</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-keyword">public</span>:<br>T1 m_Name;<br>T2 m_Age;<br>&#125;;<br><br><span class="hljs-comment">//构造函数 类外实现</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T1</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">T2</span>&gt;<br>Person&lt;T1, T2&gt;::<span class="hljs-built_in">Person</span>(T1 name, T2 age) &#123;<br><span class="hljs-keyword">this</span>-&gt;m_Name = name;<br><span class="hljs-keyword">this</span>-&gt;m_Age = age;<br>&#125;<br><br><span class="hljs-comment">//成员函数 类外实现</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T1</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">T2</span>&gt;<br><span class="hljs-type">void</span> Person&lt;T1, T2&gt;::<span class="hljs-built_in">showPerson</span>() &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;姓名: &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;m_Name &lt;&lt; <span class="hljs-string">&quot; 年龄:&quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;m_Age &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function">Person&lt;string, <span class="hljs-type">int</span>&gt; <span class="hljs-title">p</span><span class="hljs-params">(<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-number">20</span>)</span></span>;<br>p.<span class="hljs-built_in">showPerson</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：类模板中成员函数类外实现时，需要加上模板参数列表</p><h4 id="1-3-7-类模板分文件编写">1.3.7 类模板分文件编写</h4><p>学习目标：</p><ul><li>掌握类模板成员函数分文件编写产生的问题以及解决方式</li></ul><p>问题：</p><ul><li>类模板中成员函数创建时机是在调用阶段，导致分文件编写时链接不到</li></ul><p>解决：</p><ul><li>解决方式1：直接包含.cpp源文件</li><li>解决方式2：将声明和实现写到同一个文件中，并更改后缀名为.hpp，hpp是约定的名称，并不是强制</li></ul><p><strong>示例：</strong></p><p>person.hpp中代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T1</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">T2</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Person</span>(T1 name, T2 age);<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showPerson</span><span class="hljs-params">()</span></span>;<br><span class="hljs-keyword">public</span>:<br>T1 m_Name;<br>T2 m_Age;<br>&#125;;<br><br><span class="hljs-comment">//构造函数 类外实现</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T1</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">T2</span>&gt;<br>Person&lt;T1, T2&gt;::<span class="hljs-built_in">Person</span>(T1 name, T2 age) &#123;<br><span class="hljs-keyword">this</span>-&gt;m_Name = name;<br><span class="hljs-keyword">this</span>-&gt;m_Age = age;<br>&#125;<br><br><span class="hljs-comment">//成员函数 类外实现</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T1</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">T2</span>&gt;<br><span class="hljs-type">void</span> Person&lt;T1, T2&gt;::<span class="hljs-built_in">showPerson</span>() &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;姓名: &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;m_Name &lt;&lt; <span class="hljs-string">&quot; 年龄:&quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;m_Age &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>类模板分文件编写.cpp中代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//#include &quot;person.h&quot;</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;person.cpp&quot;</span> <span class="hljs-comment">//解决方式1，包含cpp源文件</span></span><br><br><span class="hljs-comment">//解决方式2，将声明和实现写到一起，文件后缀名改为.hpp</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;person.hpp&quot;</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function">Person&lt;string, <span class="hljs-type">int</span>&gt; <span class="hljs-title">p</span><span class="hljs-params">(<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-number">10</span>)</span></span>;<br>p.<span class="hljs-built_in">showPerson</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：主流的解决方式是第二种，将类模板成员函数写到一起，并将后缀名改为.hpp</p><h4 id="1-3-8-类模板与友元">1.3.8 类模板与友元</h4><p>学习目标：</p><ul><li>掌握类模板配合友元函数的类内和类外实现</li></ul><p>全局函数类内实现 - 直接在类内声明友元即可</p><p>全局函数类外实现 - 需要提前让编译器知道全局函数的存在</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-comment">//2、全局函数配合友元  类外实现 - 先做函数模板声明，下方在做函数模板定义，在做友元</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T1</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">T2</span>&gt; <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>;<br><br><span class="hljs-comment">//如果声明了函数模板，可以将实现写到后面，否则需要将实现体写到类的前面让编译器提前看到</span><br><span class="hljs-comment">//template&lt;class T1, class T2&gt; void printPerson2(Person&lt;T1, T2&gt; &amp; p); </span><br><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> T1, <span class="hljs-keyword">class</span> T2&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printPerson2</span><span class="hljs-params">(Person&lt;T1, T2&gt; &amp; p)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;类外实现 ---- 姓名： &quot;</span> &lt;&lt; p.m_Name &lt;&lt; <span class="hljs-string">&quot; 年龄：&quot;</span> &lt;&lt; p.m_Age &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T1</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">T2</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span><br>&#123;<br><span class="hljs-comment">//1、全局函数配合友元   类内实现</span><br><span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-type">void</span> <span class="hljs-title">printPerson</span><span class="hljs-params">(Person&lt;T1, T2&gt; &amp; p)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;姓名： &quot;</span> &lt;&lt; p.m_Name &lt;&lt; <span class="hljs-string">&quot; 年龄：&quot;</span> &lt;&lt; p.m_Age &lt;&lt; endl;<br>&#125;<br><br><br><span class="hljs-comment">//全局函数配合友元  类外实现</span><br><span class="hljs-keyword">friend</span> <span class="hljs-type">void</span> printPerson2&lt;&gt;(Person&lt;T1, T2&gt; &amp; p);<br><br><span class="hljs-keyword">public</span>:<br><br><span class="hljs-built_in">Person</span>(T1 name, T2 age)<br>&#123;<br><span class="hljs-keyword">this</span>-&gt;m_Name = name;<br><span class="hljs-keyword">this</span>-&gt;m_Age = age;<br>&#125;<br><br><br><span class="hljs-keyword">private</span>:<br>T1 m_Name;<br>T2 m_Age;<br><br>&#125;;<br><br><span class="hljs-comment">//1、全局函数在类内实现</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Person &lt;string, <span class="hljs-type">int</span> &gt;<span class="hljs-built_in">p</span>(<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-number">20</span>);<br><span class="hljs-built_in">printPerson</span>(p);<br>&#125;<br><br><br><span class="hljs-comment">//2、全局函数在类外实现</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Person &lt;string, <span class="hljs-type">int</span> &gt;<span class="hljs-built_in">p</span>(<span class="hljs-string">&quot;Jerry&quot;</span>, <span class="hljs-number">30</span>);<br><span class="hljs-built_in">printPerson2</span>(p);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//test01();</span><br><br><span class="hljs-built_in">test02</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：建议全局函数做类内实现，用法简单，而且编译器可以直接识别</p><h4 id="1-3-9-类模板案例">1.3.9 类模板案例</h4><p>案例描述:  实现一个通用的数组类，要求如下：</p><ul><li>可以对内置数据类型以及自定义数据类型的数据进行存储</li><li>将数组中的数据存储到堆区</li><li>构造函数中可以传入数组的容量</li><li>提供对应的拷贝构造函数以及operator=防止浅拷贝问题</li><li>提供尾插法和尾删法对数组中的数据进行增加和删除</li><li>可以通过下标的方式访问数组中的元素</li><li>可以获取数组中当前元素个数和数组的容量</li></ul><p><strong>示例：</strong></p><p>myArray.hpp中代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyArray</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <br><span class="hljs-comment">//构造函数</span><br><span class="hljs-built_in">MyArray</span>(<span class="hljs-type">int</span> capacity)<br>&#123;<br><span class="hljs-keyword">this</span>-&gt;m_Capacity = capacity;<br><span class="hljs-keyword">this</span>-&gt;m_Size = <span class="hljs-number">0</span>;<br>pAddress = <span class="hljs-keyword">new</span> T[<span class="hljs-keyword">this</span>-&gt;m_Capacity];<br>&#125;<br><br><span class="hljs-comment">//拷贝构造</span><br><span class="hljs-built_in">MyArray</span>(<span class="hljs-type">const</span> MyArray &amp; arr)<br>&#123;<br><span class="hljs-keyword">this</span>-&gt;m_Capacity = arr.m_Capacity;<br><span class="hljs-keyword">this</span>-&gt;m_Size = arr.m_Size;<br><span class="hljs-keyword">this</span>-&gt;pAddress = <span class="hljs-keyword">new</span> T[<span class="hljs-keyword">this</span>-&gt;m_Capacity];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">this</span>-&gt;m_Size; i++)<br>&#123;<br><span class="hljs-comment">//如果T为对象，而且还包含指针，必须需要重载 = 操作符，因为这个等号不是 构造 而是赋值，</span><br><span class="hljs-comment">// 普通类型可以直接= 但是指针类型需要深拷贝</span><br><span class="hljs-keyword">this</span>-&gt;pAddress[i] = arr.pAddress[i];<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//重载= 操作符  防止浅拷贝问题</span><br>MyArray&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> MyArray&amp; myarray) &#123;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;pAddress != <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-keyword">delete</span>[] <span class="hljs-keyword">this</span>-&gt;pAddress;<br><span class="hljs-keyword">this</span>-&gt;m_Capacity = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">this</span>-&gt;m_Size = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">this</span>-&gt;m_Capacity = myarray.m_Capacity;<br><span class="hljs-keyword">this</span>-&gt;m_Size = myarray.m_Size;<br><span class="hljs-keyword">this</span>-&gt;pAddress = <span class="hljs-keyword">new</span> T[<span class="hljs-keyword">this</span>-&gt;m_Capacity];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">this</span>-&gt;m_Size; i++) &#123;<br><span class="hljs-keyword">this</span>-&gt;pAddress[i] = myarray[i];<br>&#125;<br><span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br><br><span class="hljs-comment">//重载[] 操作符  arr[0]</span><br>T&amp; <span class="hljs-keyword">operator</span> [](<span class="hljs-type">int</span> index)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;pAddress[index]; <span class="hljs-comment">//不考虑越界，用户自己去处理</span><br>&#125;<br><br><span class="hljs-comment">//尾插法</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Push_back</span><span class="hljs-params">(<span class="hljs-type">const</span> T &amp; val)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;m_Capacity == <span class="hljs-keyword">this</span>-&gt;m_Size)<br>&#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">this</span>-&gt;pAddress[<span class="hljs-keyword">this</span>-&gt;m_Size] = val;<br><span class="hljs-keyword">this</span>-&gt;m_Size++;<br>&#125;<br><br><span class="hljs-comment">//尾删法</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Pop_back</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;m_Size == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">this</span>-&gt;m_Size--;<br>&#125;<br><br><span class="hljs-comment">//获取数组容量</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getCapacity</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;m_Capacity;<br>&#125;<br><br><span class="hljs-comment">//获取数组大小</span><br><span class="hljs-function"><span class="hljs-type">int</span><span class="hljs-title">getSize</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;m_Size;<br>&#125;<br><br><br><span class="hljs-comment">//析构</span><br>~<span class="hljs-built_in">MyArray</span>()<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;pAddress != <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">delete</span>[] <span class="hljs-keyword">this</span>-&gt;pAddress;<br><span class="hljs-keyword">this</span>-&gt;pAddress = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">this</span>-&gt;m_Capacity = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">this</span>-&gt;m_Size = <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">private</span>:<br>T * pAddress;  <span class="hljs-comment">//指向一个堆空间，这个空间存储真正的数据</span><br><span class="hljs-type">int</span> m_Capacity; <span class="hljs-comment">//容量</span><br><span class="hljs-type">int</span> m_Size;   <span class="hljs-comment">// 大小</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>类模板案例—数组类封装.cpp中</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;myArray.hpp&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printIntArray</span><span class="hljs-params">(MyArray&lt;<span class="hljs-type">int</span>&gt;&amp; arr)</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-built_in">getSize</span>(); i++) &#123;<br>cout &lt;&lt; arr[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">//测试内置数据类型</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function">MyArray&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">array1</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br>array<span class="hljs-number">1.</span><span class="hljs-built_in">Push_back</span>(i);<br>&#125;<br>cout &lt;&lt; <span class="hljs-string">&quot;array1打印输出：&quot;</span> &lt;&lt; endl;<br><span class="hljs-built_in">printIntArray</span>(array1);<br>cout &lt;&lt; <span class="hljs-string">&quot;array1的大小：&quot;</span> &lt;&lt; array<span class="hljs-number">1.</span><span class="hljs-built_in">getSize</span>() &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;array1的容量：&quot;</span> &lt;&lt; array<span class="hljs-number">1.</span><span class="hljs-built_in">getCapacity</span>() &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;--------------------------&quot;</span> &lt;&lt; endl;<br><br><span class="hljs-function">MyArray&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">array2</span><span class="hljs-params">(array1)</span></span>;<br>array<span class="hljs-number">2.</span><span class="hljs-built_in">Pop_back</span>();<br>cout &lt;&lt; <span class="hljs-string">&quot;array2打印输出：&quot;</span> &lt;&lt; endl;<br><span class="hljs-built_in">printIntArray</span>(array2);<br>cout &lt;&lt; <span class="hljs-string">&quot;array2的大小：&quot;</span> &lt;&lt; array<span class="hljs-number">2.</span><span class="hljs-built_in">getSize</span>() &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;array2的容量：&quot;</span> &lt;&lt; array<span class="hljs-number">2.</span><span class="hljs-built_in">getCapacity</span>() &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">//测试自定义数据类型</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Person</span>() &#123;&#125; <br><span class="hljs-built_in">Person</span>(string name, <span class="hljs-type">int</span> age) &#123;<br><span class="hljs-keyword">this</span>-&gt;m_Name = name;<br><span class="hljs-keyword">this</span>-&gt;m_Age = age;<br>&#125;<br><span class="hljs-keyword">public</span>:<br>string m_Name;<br><span class="hljs-type">int</span> m_Age;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printPersonArray</span><span class="hljs-params">(MyArray&lt;Person&gt;&amp; personArr)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; personArr.<span class="hljs-built_in">getSize</span>(); i++) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;姓名：&quot;</span> &lt;&lt; personArr[i].m_Name &lt;&lt; <span class="hljs-string">&quot; 年龄： &quot;</span> &lt;&lt; personArr[i].m_Age &lt;&lt; endl;<br>&#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//创建数组</span><br><span class="hljs-function">MyArray&lt;Person&gt; <span class="hljs-title">pArray</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-string">&quot;孙悟空&quot;</span>, <span class="hljs-number">30</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-string">&quot;韩信&quot;</span>, <span class="hljs-number">20</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p3</span><span class="hljs-params">(<span class="hljs-string">&quot;妲己&quot;</span>, <span class="hljs-number">18</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p4</span><span class="hljs-params">(<span class="hljs-string">&quot;王昭君&quot;</span>, <span class="hljs-number">15</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p5</span><span class="hljs-params">(<span class="hljs-string">&quot;赵云&quot;</span>, <span class="hljs-number">24</span>)</span></span>;<br><br><span class="hljs-comment">//插入数据</span><br>pArray.<span class="hljs-built_in">Push_back</span>(p1);<br>pArray.<span class="hljs-built_in">Push_back</span>(p2);<br>pArray.<span class="hljs-built_in">Push_back</span>(p3);<br>pArray.<span class="hljs-built_in">Push_back</span>(p4);<br>pArray.<span class="hljs-built_in">Push_back</span>(p5);<br><br><span class="hljs-built_in">printPersonArray</span>(pArray);<br><br>cout &lt;&lt; <span class="hljs-string">&quot;pArray的大小：&quot;</span> &lt;&lt; pArray.<span class="hljs-built_in">getSize</span>() &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;pArray的容量：&quot;</span> &lt;&lt; pArray.<span class="hljs-built_in">getCapacity</span>() &lt;&lt; endl;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//test01();</span><br><br><span class="hljs-built_in">test02</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><p>能够利用所学知识点实现通用的数组</p><h2 id="2-STL初识">2 STL初识</h2><h3 id="2-1-STL的诞生">2.1 STL的诞生</h3><ul><li><p>长久以来，软件界一直希望建立一种可重复利用的东西</p></li><li><p>C++的<strong>面向对象</strong>和<strong>泛型编程</strong>思想，目的就是<strong>复用性的提升</strong></p></li><li><p>大多情况下，数据结构和算法都未能有一套标准,导致被迫从事大量重复工作</p></li><li><p>为了建立数据结构和算法的一套标准,诞生了<strong>STL</strong></p></li></ul><h3 id="2-2-STL基本概念">2.2 STL基本概念</h3><ul><li>STL(Standard Template Library,<strong>标准模板库</strong>)</li><li>STL 从广义上分为: <strong>容器(container) 算法(algorithm) 迭代器(iterator)</strong></li><li><strong>容器</strong>和<strong>算法</strong>之间通过<strong>迭代器</strong>进行无缝连接。</li><li>STL 几乎所有的代码都采用了模板类或者模板函数</li></ul><h3 id="2-3-STL六大组件">2.3 STL六大组件</h3><p>STL大体分为六大组件，分别是:<strong>容器、算法、迭代器、仿函数、适配器（配接器）、空间配置器</strong></p><ol><li>容器：各种数据结构，如vector、list、deque、set、map等,用来存放数据。</li><li>算法：各种常用的算法，如sort、find、copy、for_each等</li><li>迭代器：扮演了容器与算法之间的胶合剂。</li><li>仿函数：行为类似函数，可作为算法的某种策略。</li><li>适配器：一种用来修饰容器或者仿函数或迭代器接口的东西。</li><li>空间配置器：负责空间的配置与管理。</li></ol><h3 id="2-4-STL中容器、算法、迭代器">2.4  STL中容器、算法、迭代器</h3><p>**容器：**置物之所也</p><p>STL<strong>容器</strong>就是将运用<strong>最广泛的一些数据结构</strong>实现出来</p><p>常用的数据结构：数组, 链表,树, 栈, 队列, 集合, 映射表 等</p><p>这些容器分为<strong>序列式容器</strong>和<strong>关联式容器</strong>两种:</p><p>​<strong>序列式容器</strong>:强调值的排序，序列式容器中的每个元素均有固定的位置。​<strong>关联式容器</strong>:二叉树结构，各元素之间没有严格的物理上的顺序关系</p><p>**算法：**问题之解法也</p><p>有限的步骤，解决逻辑或数学上的问题，这一门学科我们叫做算法(Algorithms)</p><p>算法分为:<strong>质变算法</strong>和<strong>非质变算法</strong>。</p><p>质变算法：是指运算过程中会更改区间内的元素的内容。例如拷贝，替换，删除等等</p><p>非质变算法：是指运算过程中不会更改区间内的元素内容，例如查找、计数、遍历、寻找极值等等</p><p>**迭代器：**容器和算法之间粘合剂</p><p>提供一种方法，使之能够依序寻访某个容器所含的各个元素，而又无需暴露该容器的内部表示方式。</p><p>每个容器都有自己专属的迭代器</p><p>迭代器使用非常类似于指针，初学阶段我们可以先理解迭代器为指针</p><p>迭代器种类：</p><table><thead><tr><th>种类</th><th>功能</th><th>支持运算</th></tr></thead><tbody><tr><td>输入迭代器</td><td>对数据的只读访问</td><td>只读，支持++、==、！=</td></tr><tr><td>输出迭代器</td><td>对数据的只写访问</td><td>只写，支持++</td></tr><tr><td>前向迭代器</td><td>读写操作，并能向前推进迭代器</td><td>读写，支持++、==、！=</td></tr><tr><td>双向迭代器</td><td>读写操作，并能向前和向后操作</td><td>读写，支持++、–，</td></tr><tr><td>随机访问迭代器</td><td>读写操作，可以以跳跃的方式访问任意数据，功能最强的迭代器</td><td>读写，支持++、–、[n]、-n、&lt;、&lt;=、&gt;、&gt;=</td></tr></tbody></table><p>常用的容器中迭代器种类为双向迭代器，和随机访问迭代器</p><h3 id="2-5-容器算法迭代器初识">2.5 容器算法迭代器初识</h3><p>了解STL中容器、算法、迭代器概念之后，我们利用代码感受STL的魅力</p><p>STL中最常用的容器为Vector，可以理解为数组，下面我们将学习如何向这个容器中插入数据、并遍历这个容器</p><h4 id="2-5-1-vector存放内置数据类型">2.5.1 vector存放内置数据类型</h4><p>容器：     <code>vector</code></p><p>算法：     <code>for_each</code></p><p>迭代器： <code>vector&lt;int&gt;::iterator</code></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">MyPrint</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; val &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//创建vector容器对象，并且通过模板参数指定容器中存放的数据的类型</span><br>vector&lt;<span class="hljs-type">int</span>&gt; v;<br><span class="hljs-comment">//向容器中放数据</span><br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">10</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">20</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">30</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">40</span>);<br><br><span class="hljs-comment">//每一个容器都有自己的迭代器，迭代器是用来遍历容器中的元素</span><br><span class="hljs-comment">//v.begin()返回迭代器，这个迭代器指向容器中第一个数据</span><br><span class="hljs-comment">//v.end()返回迭代器，这个迭代器指向容器元素的最后一个元素的下一个位置</span><br><span class="hljs-comment">//vector&lt;int&gt;::iterator 拿到vector&lt;int&gt;这种容器的迭代器类型</span><br><br>vector&lt;<span class="hljs-type">int</span>&gt;::iterator pBegin = v.<span class="hljs-built_in">begin</span>();<br>vector&lt;<span class="hljs-type">int</span>&gt;::iterator pEnd = v.<span class="hljs-built_in">end</span>();<br><br><span class="hljs-comment">//第一种遍历方式：</span><br><span class="hljs-keyword">while</span> (pBegin != pEnd) &#123;<br>cout &lt;&lt; *pBegin &lt;&lt; endl;<br>pBegin++;<br>&#125;<br><br><br><span class="hljs-comment">//第二种遍历方式：</span><br><span class="hljs-keyword">for</span> (vector&lt;<span class="hljs-type">int</span>&gt;::iterator it = v.<span class="hljs-built_in">begin</span>(); it != v.<span class="hljs-built_in">end</span>(); it++) &#123;<br>cout &lt;&lt; *it &lt;&lt; endl;<br>&#125;<br>cout &lt;&lt; endl;<br><br><span class="hljs-comment">//第三种遍历方式：</span><br><span class="hljs-comment">//使用STL提供标准遍历算法  头文件 algorithm</span><br>for_each(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), MyPrint);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-5-2-Vector存放自定义数据类型">2.5.2 Vector存放自定义数据类型</h4><p>学习目标：vector中存放自定义数据类型，并打印输出</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-comment">//自定义数据类型</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Person</span>(string name, <span class="hljs-type">int</span> age) &#123;<br>mName = name;<br>mAge = age;<br>&#125;<br><span class="hljs-keyword">public</span>:<br>string mName;<br><span class="hljs-type">int</span> mAge;<br>&#125;;<br><span class="hljs-comment">//存放对象</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br><br>vector&lt;Person&gt; v;<br><br><span class="hljs-comment">//创建数据</span><br><span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-number">10</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-string">&quot;bbb&quot;</span>, <span class="hljs-number">20</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p3</span><span class="hljs-params">(<span class="hljs-string">&quot;ccc&quot;</span>, <span class="hljs-number">30</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p4</span><span class="hljs-params">(<span class="hljs-string">&quot;ddd&quot;</span>, <span class="hljs-number">40</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p5</span><span class="hljs-params">(<span class="hljs-string">&quot;eee&quot;</span>, <span class="hljs-number">50</span>)</span></span>;<br><br>v.<span class="hljs-built_in">push_back</span>(p1);<br>v.<span class="hljs-built_in">push_back</span>(p2);<br>v.<span class="hljs-built_in">push_back</span>(p3);<br>v.<span class="hljs-built_in">push_back</span>(p4);<br>v.<span class="hljs-built_in">push_back</span>(p5);<br><br><span class="hljs-keyword">for</span> (vector&lt;Person&gt;::iterator it = v.<span class="hljs-built_in">begin</span>(); it != v.<span class="hljs-built_in">end</span>(); it++) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Name:&quot;</span> &lt;&lt; (*it).mName &lt;&lt; <span class="hljs-string">&quot; Age:&quot;</span> &lt;&lt; (*it).mAge &lt;&lt; endl;<br><br>&#125;<br>&#125;<br><br><br><span class="hljs-comment">//放对象指针</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span> </span>&#123;<br><br>vector&lt;Person*&gt; v;<br><br><span class="hljs-comment">//创建数据</span><br><span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-number">10</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-string">&quot;bbb&quot;</span>, <span class="hljs-number">20</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p3</span><span class="hljs-params">(<span class="hljs-string">&quot;ccc&quot;</span>, <span class="hljs-number">30</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p4</span><span class="hljs-params">(<span class="hljs-string">&quot;ddd&quot;</span>, <span class="hljs-number">40</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p5</span><span class="hljs-params">(<span class="hljs-string">&quot;eee&quot;</span>, <span class="hljs-number">50</span>)</span></span>;<br><br>v.<span class="hljs-built_in">push_back</span>(&amp;p1);<br>v.<span class="hljs-built_in">push_back</span>(&amp;p2);<br>v.<span class="hljs-built_in">push_back</span>(&amp;p3);<br>v.<span class="hljs-built_in">push_back</span>(&amp;p4);<br>v.<span class="hljs-built_in">push_back</span>(&amp;p5);<br><br><span class="hljs-keyword">for</span> (vector&lt;Person*&gt;::iterator it = v.<span class="hljs-built_in">begin</span>(); it != v.<span class="hljs-built_in">end</span>(); it++) &#123;<br>Person * p = (*it);<br>cout &lt;&lt; <span class="hljs-string">&quot;Name:&quot;</span> &lt;&lt; p-&gt;mName &lt;&lt; <span class="hljs-string">&quot; Age:&quot;</span> &lt;&lt; (*it)-&gt;mAge &lt;&lt; endl;<br>&#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br>    <br><span class="hljs-built_in">test02</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-5-3-Vector容器嵌套容器">2.5.3 Vector容器嵌套容器</h4><p>学习目标：容器中嵌套容器，我们将所有数据进行遍历输出</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-comment">//容器嵌套容器</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br><br>vector&lt; vector&lt;<span class="hljs-type">int</span>&gt; &gt;  v;<br><br>vector&lt;<span class="hljs-type">int</span>&gt; v1;<br>vector&lt;<span class="hljs-type">int</span>&gt; v2;<br>vector&lt;<span class="hljs-type">int</span>&gt; v3;<br>vector&lt;<span class="hljs-type">int</span>&gt; v4;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>v<span class="hljs-number">1.</span><span class="hljs-built_in">push_back</span>(i + <span class="hljs-number">1</span>);<br>v<span class="hljs-number">2.</span><span class="hljs-built_in">push_back</span>(i + <span class="hljs-number">2</span>);<br>v<span class="hljs-number">3.</span><span class="hljs-built_in">push_back</span>(i + <span class="hljs-number">3</span>);<br>v<span class="hljs-number">4.</span><span class="hljs-built_in">push_back</span>(i + <span class="hljs-number">4</span>);<br>&#125;<br><br><span class="hljs-comment">//将容器元素插入到vector v中</span><br>v.<span class="hljs-built_in">push_back</span>(v1);<br>v.<span class="hljs-built_in">push_back</span>(v2);<br>v.<span class="hljs-built_in">push_back</span>(v3);<br>v.<span class="hljs-built_in">push_back</span>(v4);<br><br><br><span class="hljs-keyword">for</span> (vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;::iterator it = v.<span class="hljs-built_in">begin</span>(); it != v.<span class="hljs-built_in">end</span>(); it++) &#123;<br><br><span class="hljs-keyword">for</span> (vector&lt;<span class="hljs-type">int</span>&gt;::iterator vit = (*it).<span class="hljs-built_in">begin</span>(); vit != (*it).<span class="hljs-built_in">end</span>(); vit++) &#123;<br>cout &lt;&lt; *vit &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-STL-常用容器">3 STL- 常用容器</h2><h3 id="3-1-string容器">3.1 string容器</h3><h4 id="3-1-1-string基本概念">3.1.1 string基本概念</h4><p><strong>本质：</strong></p><ul><li>string是C++风格的字符串，而string本质上是一个类</li></ul><p><strong>string和char * 区别：</strong></p><ul><li>char * 是一个指针</li><li>string是一个类，类内部封装了char*，管理这个字符串，是一个char*型的容器。</li></ul><p><strong>特点：</strong></p><p>string 类内部封装了很多成员方法</p><p>例如：查找find，拷贝copy，删除delete 替换replace，插入insert</p><p>string管理char*所分配的内存，不用担心复制越界和取值越界等，由类内部进行负责</p><h4 id="3-1-2-string构造函数">3.1.2 string构造函数</h4><p>构造函数原型：</p><ul><li><code>string();</code>          //创建一个空的字符串 例如: string str;<code>string(const char* s);</code>        //使用字符串s初始化</li><li><code>string(const string&amp; str);</code>    //使用一个string对象初始化另一个string对象</li><li><code>string(int n, char c);</code>           //使用n个字符c初始化</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-comment">//string构造</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>string s1; <span class="hljs-comment">//创建空字符串，调用无参构造函数</span><br>cout &lt;&lt; <span class="hljs-string">&quot;str1 = &quot;</span> &lt;&lt; s1 &lt;&lt; endl;<br><br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* str = <span class="hljs-string">&quot;hello world&quot;</span>;<br><span class="hljs-function">string <span class="hljs-title">s2</span><span class="hljs-params">(str)</span></span>; <span class="hljs-comment">//把c_string转换成了string</span><br><br>cout &lt;&lt; <span class="hljs-string">&quot;str2 = &quot;</span> &lt;&lt; s2 &lt;&lt; endl;<br><br><span class="hljs-function">string <span class="hljs-title">s3</span><span class="hljs-params">(s2)</span></span>; <span class="hljs-comment">//调用拷贝构造函数</span><br>cout &lt;&lt; <span class="hljs-string">&quot;str3 = &quot;</span> &lt;&lt; s3 &lt;&lt; endl;<br><br><span class="hljs-function">string <span class="hljs-title">s4</span><span class="hljs-params">(<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;a&#x27;</span>)</span></span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;str3 = &quot;</span> &lt;&lt; s3 &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：string的多种构造方式没有可比性，灵活使用即可</p><h4 id="3-1-3-string赋值操作">3.1.3 string赋值操作</h4><p>功能描述：</p><ul><li>给string字符串进行赋值</li></ul><p>赋值的函数原型：</p><ul><li><code>string&amp; operator=(const char* s);</code>             //char*类型字符串 赋值给当前的字符串</li><li><code>string&amp; operator=(const string &amp;s);</code>         //把字符串s赋给当前的字符串</li><li><code>string&amp; operator=(char c);</code>                          //字符赋值给当前的字符串</li><li><code>string&amp; assign(const char *s);</code>                  //把字符串s赋给当前的字符串</li><li><code>string&amp; assign(const char *s, int n);</code>     //把字符串s的前n个字符赋给当前的字符串</li><li><code>string&amp; assign(const string &amp;s);</code>              //把字符串s赋给当前字符串</li><li><code>string&amp; assign(int n, char c);</code>                  //用n个字符c赋给当前字符串</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//赋值</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>string str1;<br>str1 = <span class="hljs-string">&quot;hello world&quot;</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;str1 = &quot;</span> &lt;&lt; str1 &lt;&lt; endl;<br><br>string str2;<br>str2 = str1;<br>cout &lt;&lt; <span class="hljs-string">&quot;str2 = &quot;</span> &lt;&lt; str2 &lt;&lt; endl;<br><br>string str3;<br>str3 = <span class="hljs-string">&#x27;a&#x27;</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;str3 = &quot;</span> &lt;&lt; str3 &lt;&lt; endl;<br><br>string str4;<br>str<span class="hljs-number">4.</span><span class="hljs-built_in">assign</span>(<span class="hljs-string">&quot;hello c++&quot;</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;str4 = &quot;</span> &lt;&lt; str4 &lt;&lt; endl;<br><br>string str5;<br>str<span class="hljs-number">5.</span><span class="hljs-built_in">assign</span>(<span class="hljs-string">&quot;hello c++&quot;</span>,<span class="hljs-number">5</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;str5 = &quot;</span> &lt;&lt; str5 &lt;&lt; endl;<br><br><br>string str6;<br>str<span class="hljs-number">6.</span><span class="hljs-built_in">assign</span>(str5);<br>cout &lt;&lt; <span class="hljs-string">&quot;str6 = &quot;</span> &lt;&lt; str6 &lt;&lt; endl;<br><br>string str7;<br>str<span class="hljs-number">7.</span><span class="hljs-built_in">assign</span>(<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;x&#x27;</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;str7 = &quot;</span> &lt;&lt; str7 &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><p>​string的赋值方式很多，<code>operator=</code>  这种方式是比较实用的</p><h4 id="3-1-4-string字符串拼接">3.1.4 string字符串拼接</h4><p><strong>功能描述：</strong></p><ul><li>实现在字符串末尾拼接字符串</li></ul><p><strong>函数原型：</strong></p><ul><li><code>string&amp; operator+=(const char* str);</code>                   //重载+=操作符</li><li><code>string&amp; operator+=(const char c);</code>                         //重载+=操作符</li><li><code>string&amp; operator+=(const string&amp; str);</code>                //重载+=操作符</li><li><code>string&amp; append(const char *s); </code>                               //把字符串s连接到当前字符串结尾</li><li><code>string&amp; append(const char *s, int n);</code>                 //把字符串s的前n个字符连接到当前字符串结尾</li><li><code>string&amp; append(const string &amp;s);</code>                           //同operator+=(const string&amp; str)</li><li><code>string&amp; append(const string &amp;s, int pos, int n);</code>//字符串s中从pos开始的n个字符连接到字符串结尾</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//字符串拼接</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>string str1 = <span class="hljs-string">&quot;我&quot;</span>;<br><br>str1 += <span class="hljs-string">&quot;爱玩游戏&quot;</span>;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;str1 = &quot;</span> &lt;&lt; str1 &lt;&lt; endl;<br><br>str1 += <span class="hljs-string">&#x27;:&#x27;</span>;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;str1 = &quot;</span> &lt;&lt; str1 &lt;&lt; endl;<br><br>string str2 = <span class="hljs-string">&quot;LOL DNF&quot;</span>;<br><br>str1 += str2;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;str1 = &quot;</span> &lt;&lt; str1 &lt;&lt; endl;<br><br>string str3 = <span class="hljs-string">&quot;I&quot;</span>;<br>str<span class="hljs-number">3.</span><span class="hljs-built_in">append</span>(<span class="hljs-string">&quot; love &quot;</span>);<br>str<span class="hljs-number">3.</span><span class="hljs-built_in">append</span>(<span class="hljs-string">&quot;game abcde&quot;</span>, <span class="hljs-number">4</span>);<br><span class="hljs-comment">//str3.append(str2);</span><br>str<span class="hljs-number">3.</span><span class="hljs-built_in">append</span>(str2, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>); <span class="hljs-comment">// 从下标4位置开始 ，截取3个字符，拼接到字符串末尾</span><br>cout &lt;&lt; <span class="hljs-string">&quot;str3 = &quot;</span> &lt;&lt; str3 &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：字符串拼接的重载版本很多，初学阶段记住几种即可</p><h4 id="3-1-5-string查找和替换">3.1.5 string查找和替换</h4><p><strong>功能描述：</strong></p><ul><li>查找：查找指定字符串是否存在</li><li>替换：在指定的位置替换字符串</li></ul><p><strong>函数原型：</strong></p><ul><li><code>int find(const string&amp; str, int pos = 0) const;</code>              //查找str第一次出现位置,从pos开始查找</li><li><code>int find(const char* s, int pos = 0) const; </code>                     //查找s第一次出现位置,从pos开始查找</li><li><code>int find(const char* s, int pos, int n) const; </code>               //从pos位置查找s的前n个字符第一次位置</li><li><code>int find(const char c, int pos = 0) const; </code>                       //查找字符c第一次出现位置</li><li><code>int rfind(const string&amp; str, int pos = npos) const;</code>      //查找str最后一次位置,从pos开始查找</li><li><code>int rfind(const char* s, int pos = npos) const;</code>              //查找s最后一次出现位置,从pos开始查找</li><li><code>int rfind(const char* s, int pos, int n) const;</code>              //从pos查找s的前n个字符最后一次位置</li><li><code>int rfind(const char c, int pos = 0) const;  </code>                      //查找字符c最后一次出现位置</li><li><code>string&amp; replace(int pos, int n, const string&amp; str); </code>       //替换从pos开始n个字符为字符串str</li><li><code>string&amp; replace(int pos, int n,const char* s); </code>                 //替换从pos开始的n个字符为字符串s</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//查找和替换</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//查找</span><br>string str1 = <span class="hljs-string">&quot;abcdefgde&quot;</span>;<br><br><span class="hljs-type">int</span> pos = str<span class="hljs-number">1.f</span>ind(<span class="hljs-string">&quot;de&quot;</span>);<br><br><span class="hljs-keyword">if</span> (pos == <span class="hljs-number">-1</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;未找到&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;pos = &quot;</span> &lt;&lt; pos &lt;&lt; endl;<br>&#125;<br><br><br>pos = str<span class="hljs-number">1.</span><span class="hljs-built_in">rfind</span>(<span class="hljs-string">&quot;de&quot;</span>);<br><br>cout &lt;&lt; <span class="hljs-string">&quot;pos = &quot;</span> &lt;&lt; pos &lt;&lt; endl;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//替换</span><br>string str1 = <span class="hljs-string">&quot;abcdefgde&quot;</span>;<br>str<span class="hljs-number">1.</span><span class="hljs-built_in">replace</span>(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;1111&quot;</span>);<br><br>cout &lt;&lt; <span class="hljs-string">&quot;str1 = &quot;</span> &lt;&lt; str1 &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//test01();</span><br><span class="hljs-comment">//test02();</span><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>find查找是从左往后，rfind从右往左</li><li>find找到字符串后返回查找的第一个字符位置，找不到返回-1</li><li>replace在替换时，要指定从哪个位置起，多少个字符，替换成什么样的字符串</li></ul><h4 id="3-1-6-string字符串比较">3.1.6 string字符串比较</h4><p><strong>功能描述：</strong></p><ul><li>字符串之间的比较</li></ul><p><strong>比较方式：</strong></p><ul><li>字符串比较是按字符的ASCII码进行对比</li></ul><p>= 返回   0</p><p>&gt; 返回   1</p><p>&lt; 返回  -1</p><p><strong>函数原型：</strong></p><ul><li><code>int compare(const string &amp;s) const; </code>  //与字符串s比较</li><li><code>int compare(const char *s) const;</code>      //与字符串s比较</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//字符串比较</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br>string s1 = <span class="hljs-string">&quot;hello&quot;</span>;<br>string s2 = <span class="hljs-string">&quot;aello&quot;</span>;<br><br><span class="hljs-type">int</span> ret = s<span class="hljs-number">1.</span><span class="hljs-built_in">compare</span>(s2);<br><br><span class="hljs-keyword">if</span> (ret == <span class="hljs-number">0</span>) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;s1 等于 s2&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ret &gt; <span class="hljs-number">0</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;s1 大于 s2&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;s1 小于 s2&quot;</span> &lt;&lt; endl;<br>&#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：字符串对比主要是用于比较两个字符串是否相等，判断谁大谁小的意义并不是很大</p><h4 id="3-1-7-string字符存取">3.1.7 string字符存取</h4><p>string中单个字符存取方式有两种</p><ul><li><code>char&amp; operator[](int n); </code>     //通过[]方式取字符</li><li><code>char&amp; at(int n);   </code>                    //通过at方法获取字符</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>string str = <span class="hljs-string">&quot;hello world&quot;</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; str.<span class="hljs-built_in">size</span>(); i++)<br>&#123;<br>cout &lt;&lt; str[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; str.<span class="hljs-built_in">size</span>(); i++)<br>&#123;<br>cout &lt;&lt; str.<span class="hljs-built_in">at</span>(i) &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br><br><br><span class="hljs-comment">//字符修改</span><br>str[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;x&#x27;</span>;<br>str.<span class="hljs-built_in">at</span>(<span class="hljs-number">1</span>) = <span class="hljs-string">&#x27;x&#x27;</span>;<br>cout &lt;&lt; str &lt;&lt; endl;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：string字符串中单个字符存取有两种方式，利用 [ ] 或 at</p><h4 id="3-1-8-string插入和删除">3.1.8 string插入和删除</h4><p><strong>功能描述：</strong></p><ul><li>对string字符串进行插入和删除字符操作</li></ul><p><strong>函数原型：</strong></p><ul><li><code>string&amp; insert(int pos, const char* s);  </code>                //插入字符串</li><li><code>string&amp; insert(int pos, const string&amp; str); </code>        //插入字符串</li><li><code>string&amp; insert(int pos, int n, char c);</code>                //在指定位置插入n个字符c</li><li><code>string&amp; erase(int pos, int n = npos);</code>                    //删除从Pos开始的n个字符</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//字符串插入和删除</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>string str = <span class="hljs-string">&quot;hello&quot;</span>;<br>str.<span class="hljs-built_in">insert</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;111&quot;</span>);<br>cout &lt;&lt; str &lt;&lt; endl;<br><br>str.<span class="hljs-built_in">erase</span>(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>);  <span class="hljs-comment">//从1号位置开始3个字符</span><br>cout &lt;&lt; str &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>**总结：**插入和删除的起始下标都是从0开始</p><h4 id="3-1-9-string子串">3.1.9 string子串</h4><p><strong>功能描述：</strong></p><ul><li>从字符串中获取想要的子串</li></ul><p><strong>函数原型：</strong></p><ul><li><code>string substr(int pos = 0, int n = npos) const;</code>   //返回由pos开始的n个字符组成的字符串</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//子串</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br>string str = <span class="hljs-string">&quot;abcdefg&quot;</span>;<br>string subStr = str.<span class="hljs-built_in">substr</span>(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;subStr = &quot;</span> &lt;&lt; subStr &lt;&lt; endl;<br><br>string email = <span class="hljs-string">&quot;hello@sina.com&quot;</span>;<br><span class="hljs-type">int</span> pos = email.<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;@&quot;</span>);<br>string username = email.<span class="hljs-built_in">substr</span>(<span class="hljs-number">0</span>, pos);<br>cout &lt;&lt; <span class="hljs-string">&quot;username: &quot;</span> &lt;&lt; username &lt;&lt; endl;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>**总结：**灵活的运用求子串功能，可以在实际开发中获取有效的信息</p><h3 id="3-2-vector容器">3.2 vector容器</h3><h4 id="3-2-1-vector基本概念">3.2.1 vector基本概念</h4><p><strong>功能：</strong></p><ul><li>vector数据结构和<strong>数组非常相似</strong>，也称为<strong>单端数组</strong></li></ul><p><strong>vector与普通数组区别：</strong></p><ul><li>不同之处在于数组是静态空间，而vector可以<strong>动态扩展</strong></li></ul><p><strong>动态扩展：</strong></p><ul><li>并不是在原空间之后续接新空间，而是找更大的内存空间，然后将原数据拷贝新空间，释放原空间</li></ul><p><img src="/assetss/clip_image002.jpg" alt="说明: 2015-11-10_151152"></p><ul><li>vector容器的迭代器是支持随机访问的迭代器</li></ul><h4 id="3-2-2-vector构造函数">3.2.2 vector构造函数</h4><p><strong>功能描述：</strong></p><ul><li>创建vector容器</li></ul><p><strong>函数原型：</strong></p><ul><li><code>vector&lt;T&gt; v; </code>                    //采用模板实现类实现，默认构造函数</li><li><code>vector(v.begin(), v.end());   </code>       //将v[begin(), end())区间中的元素拷贝给本身。</li><li><code>vector(n, elem);</code>                            //构造函数将n个elem拷贝给本身。</li><li><code>vector(const vector &amp;vec);</code>         //拷贝构造函数。</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printVector</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; v)</span> </span>&#123;<br><br><span class="hljs-keyword">for</span> (vector&lt;<span class="hljs-type">int</span>&gt;::iterator it = v.<span class="hljs-built_in">begin</span>(); it != v.<span class="hljs-built_in">end</span>(); it++) &#123;<br>cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt; v1; <span class="hljs-comment">//无参构造</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br>v<span class="hljs-number">1.</span><span class="hljs-built_in">push_back</span>(i);<br>&#125;<br><span class="hljs-built_in">printVector</span>(v1);<br><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v2</span><span class="hljs-params">(v<span class="hljs-number">1.</span>begin(), v<span class="hljs-number">1.</span>end())</span></span>;<br><span class="hljs-built_in">printVector</span>(v2);<br><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v3</span><span class="hljs-params">(<span class="hljs-number">10</span>, <span class="hljs-number">100</span>)</span></span>;<br><span class="hljs-built_in">printVector</span>(v3);<br><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v4</span><span class="hljs-params">(v3)</span></span>;<br><span class="hljs-built_in">printVector</span>(v4);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>**总结：**vector的多种构造方式没有可比性，灵活使用即可</p><h4 id="3-2-3-vector赋值操作">3.2.3 vector赋值操作</h4><p><strong>功能描述：</strong></p><ul><li>给vector容器进行赋值</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>vector&amp; operator=(const vector &amp;vec);</code>//重载等号操作符</p></li><li><p><code>assign(beg, end);</code>       //将[beg, end)区间中的数据拷贝赋值给本身。</p></li><li><p><code>assign(n, elem);</code>        //将n个elem拷贝赋值给本身。</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printVector</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; v)</span> </span>&#123;<br><br><span class="hljs-keyword">for</span> (vector&lt;<span class="hljs-type">int</span>&gt;::iterator it = v.<span class="hljs-built_in">begin</span>(); it != v.<span class="hljs-built_in">end</span>(); it++) &#123;<br>cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">//赋值操作</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt; v1; <span class="hljs-comment">//无参构造</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br>v<span class="hljs-number">1.</span><span class="hljs-built_in">push_back</span>(i);<br>&#125;<br><span class="hljs-built_in">printVector</span>(v1);<br><br>vector&lt;<span class="hljs-type">int</span>&gt;v2;<br>v2 = v1;<br><span class="hljs-built_in">printVector</span>(v2);<br><br>vector&lt;<span class="hljs-type">int</span>&gt;v3;<br>v<span class="hljs-number">3.</span><span class="hljs-built_in">assign</span>(v<span class="hljs-number">1.</span><span class="hljs-built_in">begin</span>(), v<span class="hljs-number">1.</span><span class="hljs-built_in">end</span>());<br><span class="hljs-built_in">printVector</span>(v3);<br><br>vector&lt;<span class="hljs-type">int</span>&gt;v4;<br>v<span class="hljs-number">4.</span><span class="hljs-built_in">assign</span>(<span class="hljs-number">10</span>, <span class="hljs-number">100</span>);<br><span class="hljs-built_in">printVector</span>(v4);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>总结： vector赋值方式比较简单，使用operator=，或者assign都可以</p><h4 id="3-2-4-vector容量和大小">3.2.4  vector容量和大小</h4><p><strong>功能描述：</strong></p><ul><li>对vector容器的容量和大小操作</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>empty(); </code>                            //判断容器是否为空</p></li><li><p><code>capacity();</code>                      //容器的容量</p></li><li><p><code>size();</code>                              //返回容器中元素的个数</p></li><li><p><code>resize(int num);</code>             //重新指定容器的长度为num，若容器变长，则以默认值填充新位置。</p><p>​      //如果容器变短，则末尾超出容器长度的元素被删除。</p></li><li><p><code>resize(int num, elem);</code>  //重新指定容器的长度为num，若容器变长，则以elem值填充新位置。</p><p>​              //如果容器变短，则末尾超出容器长度的元素被删除</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printVector</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; v)</span> </span>&#123;<br><br><span class="hljs-keyword">for</span> (vector&lt;<span class="hljs-type">int</span>&gt;::iterator it = v.<span class="hljs-built_in">begin</span>(); it != v.<span class="hljs-built_in">end</span>(); it++) &#123;<br>cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt; v1;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br>v<span class="hljs-number">1.</span><span class="hljs-built_in">push_back</span>(i);<br>&#125;<br><span class="hljs-built_in">printVector</span>(v1);<br><span class="hljs-keyword">if</span> (v<span class="hljs-number">1.</span><span class="hljs-built_in">empty</span>())<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;v1为空&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;v1不为空&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;v1的容量 = &quot;</span> &lt;&lt; v<span class="hljs-number">1.</span><span class="hljs-built_in">capacity</span>() &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;v1的大小 = &quot;</span> &lt;&lt; v<span class="hljs-number">1.</span><span class="hljs-built_in">size</span>() &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">//resize 重新指定大小 ，若指定的更大，默认用0填充新位置，可以利用重载版本替换默认填充</span><br>v<span class="hljs-number">1.</span><span class="hljs-built_in">resize</span>(<span class="hljs-number">15</span>,<span class="hljs-number">10</span>);<br><span class="hljs-built_in">printVector</span>(v1);<br><br><span class="hljs-comment">//resize 重新指定大小 ，若指定的更小，超出部分元素被删除</span><br>v<span class="hljs-number">1.</span><span class="hljs-built_in">resize</span>(<span class="hljs-number">5</span>);<br><span class="hljs-built_in">printVector</span>(v1);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>判断是否为空  — empty</li><li>返回元素个数  — size</li><li>返回容器容量  — capacity</li><li>重新指定大小  —  resize</li></ul><h4 id="3-2-5-vector插入和删除">3.2.5 vector插入和删除</h4><p><strong>功能描述：</strong></p><ul><li>对vector容器进行插入、删除操作</li></ul><p><strong>函数原型：</strong></p><ul><li><code>push_back(ele);</code>                                         //尾部插入元素ele</li><li><code>pop_back();</code>                                                //删除最后一个元素</li><li><code>insert(const_iterator pos, ele);</code>        //迭代器指向位置pos插入元素ele</li><li><code>insert(const_iterator pos, int count,ele);</code>//迭代器指向位置pos插入count个元素ele</li><li><code>erase(const_iterator pos);</code>                     //删除迭代器指向的元素</li><li><code>erase(const_iterator start, const_iterator end);</code>//删除迭代器从start到end之间的元素</li><li><code>clear();</code>                                                        //删除容器中所有元素</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs C++"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printVector</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; v)</span> </span>&#123;<br><br><span class="hljs-keyword">for</span> (vector&lt;<span class="hljs-type">int</span>&gt;::iterator it = v.<span class="hljs-built_in">begin</span>(); it != v.<span class="hljs-built_in">end</span>(); it++) &#123;<br>cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">//插入和删除</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt; v1;<br><span class="hljs-comment">//尾插</span><br>v<span class="hljs-number">1.</span><span class="hljs-built_in">push_back</span>(<span class="hljs-number">10</span>);<br>v<span class="hljs-number">1.</span><span class="hljs-built_in">push_back</span>(<span class="hljs-number">20</span>);<br>v<span class="hljs-number">1.</span><span class="hljs-built_in">push_back</span>(<span class="hljs-number">30</span>);<br>v<span class="hljs-number">1.</span><span class="hljs-built_in">push_back</span>(<span class="hljs-number">40</span>);<br>v<span class="hljs-number">1.</span><span class="hljs-built_in">push_back</span>(<span class="hljs-number">50</span>);<br><span class="hljs-built_in">printVector</span>(v1);<br><span class="hljs-comment">//尾删</span><br>v<span class="hljs-number">1.</span><span class="hljs-built_in">pop_back</span>();<br><span class="hljs-built_in">printVector</span>(v1);<br><span class="hljs-comment">//插入</span><br>v<span class="hljs-number">1.</span><span class="hljs-built_in">insert</span>(v<span class="hljs-number">1.</span><span class="hljs-built_in">begin</span>(), <span class="hljs-number">100</span>);<br><span class="hljs-built_in">printVector</span>(v1);<br><br>v<span class="hljs-number">1.</span><span class="hljs-built_in">insert</span>(v<span class="hljs-number">1.</span><span class="hljs-built_in">begin</span>(), <span class="hljs-number">2</span>, <span class="hljs-number">1000</span>);<br><span class="hljs-built_in">printVector</span>(v1);<br><br><span class="hljs-comment">//删除</span><br>v<span class="hljs-number">1.</span><span class="hljs-built_in">erase</span>(v<span class="hljs-number">1.</span><span class="hljs-built_in">begin</span>());<br><span class="hljs-built_in">printVector</span>(v1);<br><br><span class="hljs-comment">//清空</span><br>v<span class="hljs-number">1.</span><span class="hljs-built_in">erase</span>(v<span class="hljs-number">1.</span><span class="hljs-built_in">begin</span>(), v<span class="hljs-number">1.</span><span class="hljs-built_in">end</span>());<br>v<span class="hljs-number">1.</span><span class="hljs-built_in">clear</span>();<br><span class="hljs-built_in">printVector</span>(v1);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>尾插  — push_back</li><li>尾删  — pop_back</li><li>插入  — insert    (位置迭代器)</li><li>删除  — erase  （位置迭代器）</li><li>清空  —  clear</li></ul><h4 id="3-2-6-vector数据存取">3.2.6 vector数据存取</h4><p><strong>功能描述：</strong></p><ul><li>对vector中的数据的存取操作</li></ul><p><strong>函数原型：</strong></p><ul><li><code>at(int idx); </code>     //返回索引idx所指的数据</li><li><code>operator[]; </code>       //返回索引idx所指的数据</li><li><code>front(); </code>            //返回容器中第一个数据元素</li><li><code>back();</code>              //返回容器中最后一个数据元素</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt;v1;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br>v<span class="hljs-number">1.</span><span class="hljs-built_in">push_back</span>(i);<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; v<span class="hljs-number">1.</span><span class="hljs-built_in">size</span>(); i++)<br>&#123;<br>cout &lt;&lt; v1[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; v<span class="hljs-number">1.</span><span class="hljs-built_in">size</span>(); i++)<br>&#123;<br>cout &lt;&lt; v<span class="hljs-number">1.</span><span class="hljs-built_in">at</span>(i) &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;v1的第一个元素为： &quot;</span> &lt;&lt; v<span class="hljs-number">1.f</span>ront() &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;v1的最后一个元素为： &quot;</span> &lt;&lt; v<span class="hljs-number">1.</span><span class="hljs-built_in">back</span>() &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>除了用迭代器获取vector容器中元素，[ ]和at也可以</li><li>front返回容器第一个元素</li><li>back返回容器最后一个元素</li></ul><h4 id="3-2-7-vector互换容器">3.2.7 vector互换容器</h4><p><strong>功能描述：</strong></p><ul><li>实现两个容器内元素进行互换</li></ul><p><strong>函数原型：</strong></p><ul><li><code>swap(vec);</code>  // 将vec与本身的元素互换</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printVector</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; v)</span> </span>&#123;<br><br><span class="hljs-keyword">for</span> (vector&lt;<span class="hljs-type">int</span>&gt;::iterator it = v.<span class="hljs-built_in">begin</span>(); it != v.<span class="hljs-built_in">end</span>(); it++) &#123;<br>cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt;v1;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br>v<span class="hljs-number">1.</span><span class="hljs-built_in">push_back</span>(i);<br>&#125;<br><span class="hljs-built_in">printVector</span>(v1);<br><br>vector&lt;<span class="hljs-type">int</span>&gt;v2;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">10</span>; i &gt; <span class="hljs-number">0</span>; i--)<br>&#123;<br>v<span class="hljs-number">2.</span><span class="hljs-built_in">push_back</span>(i);<br>&#125;<br><span class="hljs-built_in">printVector</span>(v2);<br><br><span class="hljs-comment">//互换容器</span><br>cout &lt;&lt; <span class="hljs-string">&quot;互换后&quot;</span> &lt;&lt; endl;<br>v<span class="hljs-number">1.</span><span class="hljs-built_in">swap</span>(v2);<br><span class="hljs-built_in">printVector</span>(v1);<br><span class="hljs-built_in">printVector</span>(v2);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt; v;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100000</span>; i++) &#123;<br>v.<span class="hljs-built_in">push_back</span>(i);<br>&#125;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;v的容量为：&quot;</span> &lt;&lt; v.<span class="hljs-built_in">capacity</span>() &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;v的大小为：&quot;</span> &lt;&lt; v.<span class="hljs-built_in">size</span>() &lt;&lt; endl;<br><br>v.<span class="hljs-built_in">resize</span>(<span class="hljs-number">3</span>);<br><br>cout &lt;&lt; <span class="hljs-string">&quot;v的容量为：&quot;</span> &lt;&lt; v.<span class="hljs-built_in">capacity</span>() &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;v的大小为：&quot;</span> &lt;&lt; v.<span class="hljs-built_in">size</span>() &lt;&lt; endl;<br><br><span class="hljs-comment">//收缩内存</span><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(v).<span class="hljs-built_in">swap</span>(v); <span class="hljs-comment">//匿名对象</span><br><br>cout &lt;&lt; <span class="hljs-string">&quot;v的容量为：&quot;</span> &lt;&lt; v.<span class="hljs-built_in">capacity</span>() &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;v的大小为：&quot;</span> &lt;&lt; v.<span class="hljs-built_in">size</span>() &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">test02</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>总结：swap可以使两个容器互换，可以达到实用的收缩内存效果</p><h4 id="3-2-8-vector预留空间">3.2.8 vector预留空间</h4><p><strong>功能描述：</strong></p><ul><li>减少vector在动态扩展容量时的扩展次数</li></ul><p><strong>函数原型：</strong></p><ul><li><code>reserve(int len);</code>//容器预留len个元素长度，预留位置不初始化，元素不可访问。</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt; v;<br><br><span class="hljs-comment">//预留空间</span><br>v.<span class="hljs-built_in">reserve</span>(<span class="hljs-number">100000</span>);<br><br><span class="hljs-type">int</span> num = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span>* p = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100000</span>; i++) &#123;<br>v.<span class="hljs-built_in">push_back</span>(i);<br><span class="hljs-keyword">if</span> (p != &amp;v[<span class="hljs-number">0</span>]) &#123;<br>p = &amp;v[<span class="hljs-number">0</span>];<br>num++;<br>&#125;<br>&#125;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;num:&quot;</span> &lt;&lt; num &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br>    <br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：如果数据量较大，可以一开始利用reserve预留空间</p><h3 id="3-3-deque容器">3.3 deque容器</h3><h4 id="3-3-1-deque容器基本概念">3.3.1 deque容器基本概念</h4><p><strong>功能：</strong></p><ul><li>双端数组，可以对头端进行插入删除操作</li></ul><p><strong>deque与vector区别：</strong></p><ul><li>vector对于头部的插入删除效率低，数据量越大，效率越低</li><li>deque相对而言，对头部的插入删除速度回比vector快</li><li>vector访问元素时的速度会比deque快,这和两者内部实现有关</li></ul><p><img src="/assetss/clip_image002-1547547642923.jpg" alt="说明: 2015-11-19_204101"></p><p>deque内部工作原理:</p><p>deque内部有个<strong>中控器</strong>，维护每段缓冲区中的内容，缓冲区中存放真实数据</p><p>中控器维护的是每个缓冲区的地址，使得使用deque时像一片连续的内存空间</p><p><img src="/assetss/clip_image002-1547547896341.jpg" alt="clip_image002-1547547896341"></p><ul><li>deque容器的迭代器也是支持随机访问的</li></ul><h4 id="3-3-2-deque构造函数">3.3.2 deque构造函数</h4><p><strong>功能描述：</strong></p><ul><li>deque容器构造</li></ul><p><strong>函数原型：</strong></p><ul><li><code>deque&lt;T&gt;</code> deqT;                      //默认构造形式</li><li><code>deque(beg, end);</code>                  //构造函数将[beg, end)区间中的元素拷贝给本身。</li><li><code>deque(n, elem);</code>                    //构造函数将n个elem拷贝给本身。</li><li><code>deque(const deque &amp;deq);</code>   //拷贝构造函数</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;deque&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printDeque</span><span class="hljs-params">(<span class="hljs-type">const</span> deque&lt;<span class="hljs-type">int</span>&gt;&amp; d)</span> </span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (deque&lt;<span class="hljs-type">int</span>&gt;::const_iterator it = d.<span class="hljs-built_in">begin</span>(); it != d.<span class="hljs-built_in">end</span>(); it++) &#123;<br>cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br><br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br><span class="hljs-comment">//deque构造</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br><br>deque&lt;<span class="hljs-type">int</span>&gt; d1; <span class="hljs-comment">//无参构造函数</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br>d<span class="hljs-number">1.</span><span class="hljs-built_in">push_back</span>(i);<br>&#125;<br><span class="hljs-built_in">printDeque</span>(d1);<br><span class="hljs-function">deque&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">d2</span><span class="hljs-params">(d<span class="hljs-number">1.</span>begin(),d<span class="hljs-number">1.</span>end())</span></span>;<br><span class="hljs-built_in">printDeque</span>(d2);<br><br>deque&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">d3</span>(<span class="hljs-number">10</span>,<span class="hljs-number">100</span>);<br><span class="hljs-built_in">printDeque</span>(d3);<br><br>deque&lt;<span class="hljs-type">int</span>&gt;d4 = d3;<br><span class="hljs-built_in">printDeque</span>(d4);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>**总结：**deque容器和vector容器的构造方式几乎一致，灵活使用即可</p><h4 id="3-3-3-deque赋值操作">3.3.3 deque赋值操作</h4><p><strong>功能描述：</strong></p><ul><li>给deque容器进行赋值</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>deque&amp; operator=(const deque &amp;deq); </code>         //重载等号操作符</p></li><li><p><code>assign(beg, end);</code>                                           //将[beg, end)区间中的数据拷贝赋值给本身。</p></li><li><p><code>assign(n, elem);</code>                                             //将n个elem拷贝赋值给本身。</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;deque&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printDeque</span><span class="hljs-params">(<span class="hljs-type">const</span> deque&lt;<span class="hljs-type">int</span>&gt;&amp; d)</span> </span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (deque&lt;<span class="hljs-type">int</span>&gt;::const_iterator it = d.<span class="hljs-built_in">begin</span>(); it != d.<span class="hljs-built_in">end</span>(); it++) &#123;<br>cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br><br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br><span class="hljs-comment">//赋值操作</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>deque&lt;<span class="hljs-type">int</span>&gt; d1;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br>d<span class="hljs-number">1.</span><span class="hljs-built_in">push_back</span>(i);<br>&#125;<br><span class="hljs-built_in">printDeque</span>(d1);<br><br>deque&lt;<span class="hljs-type">int</span>&gt;d2;<br>d2 = d1;<br><span class="hljs-built_in">printDeque</span>(d2);<br><br>deque&lt;<span class="hljs-type">int</span>&gt;d3;<br>d<span class="hljs-number">3.</span><span class="hljs-built_in">assign</span>(d<span class="hljs-number">1.</span><span class="hljs-built_in">begin</span>(), d<span class="hljs-number">1.</span><span class="hljs-built_in">end</span>());<br><span class="hljs-built_in">printDeque</span>(d3);<br><br>deque&lt;<span class="hljs-type">int</span>&gt;d4;<br>d<span class="hljs-number">4.</span><span class="hljs-built_in">assign</span>(<span class="hljs-number">10</span>, <span class="hljs-number">100</span>);<br><span class="hljs-built_in">printDeque</span>(d4);<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：deque赋值操作也与vector相同，需熟练掌握</p><h4 id="3-3-4-deque大小操作">3.3.4 deque大小操作</h4><p><strong>功能描述：</strong></p><ul><li>对deque容器的大小进行操作</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>deque.empty();</code>                       //判断容器是否为空</p></li><li><p><code>deque.size();</code>                         //返回容器中元素的个数</p></li><li><p><code>deque.resize(num);</code>                //重新指定容器的长度为num,若容器变长，则以默认值填充新位置。</p><p>​                             //如果容器变短，则末尾超出容器长度的元素被删除。</p></li><li><p><code>deque.resize(num, elem);</code>     //重新指定容器的长度为num,若容器变长，则以elem值填充新位置。</p><p>​                                                     //如果容器变短，则末尾超出容器长度的元素被删除。</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;deque&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printDeque</span><span class="hljs-params">(<span class="hljs-type">const</span> deque&lt;<span class="hljs-type">int</span>&gt;&amp; d)</span> </span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (deque&lt;<span class="hljs-type">int</span>&gt;::const_iterator it = d.<span class="hljs-built_in">begin</span>(); it != d.<span class="hljs-built_in">end</span>(); it++) &#123;<br>cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br><br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">//大小操作</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>deque&lt;<span class="hljs-type">int</span>&gt; d1;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br>d<span class="hljs-number">1.</span><span class="hljs-built_in">push_back</span>(i);<br>&#125;<br><span class="hljs-built_in">printDeque</span>(d1);<br><br><span class="hljs-comment">//判断容器是否为空</span><br><span class="hljs-keyword">if</span> (d<span class="hljs-number">1.</span><span class="hljs-built_in">empty</span>()) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;d1为空!&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;d1不为空!&quot;</span> &lt;&lt; endl;<br><span class="hljs-comment">//统计大小</span><br>cout &lt;&lt; <span class="hljs-string">&quot;d1的大小为：&quot;</span> &lt;&lt; d<span class="hljs-number">1.</span><span class="hljs-built_in">size</span>() &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">//重新指定大小</span><br>d<span class="hljs-number">1.</span><span class="hljs-built_in">resize</span>(<span class="hljs-number">15</span>, <span class="hljs-number">1</span>);<br><span class="hljs-built_in">printDeque</span>(d1);<br><br>d<span class="hljs-number">1.</span><span class="hljs-built_in">resize</span>(<span class="hljs-number">5</span>);<br><span class="hljs-built_in">printDeque</span>(d1);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>deque没有容量的概念</li><li>判断是否为空   — empty</li><li>返回元素个数   — size</li><li>重新指定个数   — resize</li></ul><h4 id="3-3-5-deque-插入和删除">3.3.5 deque 插入和删除</h4><p><strong>功能描述：</strong></p><ul><li>向deque容器中插入和删除数据</li></ul><p><strong>函数原型：</strong></p><p>两端插入操作：</p><ul><li><code>push_back(elem);</code>          //在容器尾部添加一个数据</li><li><code>push_front(elem);</code>        //在容器头部插入一个数据</li><li><code>pop_back();</code>                   //删除容器最后一个数据</li><li><code>pop_front();</code>                 //删除容器第一个数据</li></ul><p>指定位置操作：</p><ul><li><p><code>insert(pos,elem);</code>         //在pos位置插入一个elem元素的拷贝，返回新数据的位置。</p></li><li><p><code>insert(pos,n,elem);</code>     //在pos位置插入n个elem数据，无返回值。</p></li><li><p><code>insert(pos,beg,end);</code>    //在pos位置插入[beg,end)区间的数据，无返回值。</p></li><li><p><code>clear();</code>                           //清空容器的所有数据</p></li><li><p><code>erase(beg,end);</code>             //删除[beg,end)区间的数据，返回下一个数据的位置。</p></li><li><p><code>erase(pos);</code>                    //删除pos位置的数据，返回下一个数据的位置。</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;deque&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printDeque</span><span class="hljs-params">(<span class="hljs-type">const</span> deque&lt;<span class="hljs-type">int</span>&gt;&amp; d)</span> </span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (deque&lt;<span class="hljs-type">int</span>&gt;::const_iterator it = d.<span class="hljs-built_in">begin</span>(); it != d.<span class="hljs-built_in">end</span>(); it++) &#123;<br>cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br><br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br><span class="hljs-comment">//两端操作</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>deque&lt;<span class="hljs-type">int</span>&gt; d;<br><span class="hljs-comment">//尾插</span><br>d.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">10</span>);<br>d.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">20</span>);<br><span class="hljs-comment">//头插</span><br>d.<span class="hljs-built_in">push_front</span>(<span class="hljs-number">100</span>);<br>d.<span class="hljs-built_in">push_front</span>(<span class="hljs-number">200</span>);<br><br><span class="hljs-built_in">printDeque</span>(d);<br><br><span class="hljs-comment">//尾删</span><br>d.<span class="hljs-built_in">pop_back</span>();<br><span class="hljs-comment">//头删</span><br>d.<span class="hljs-built_in">pop_front</span>();<br><span class="hljs-built_in">printDeque</span>(d);<br>&#125;<br><br><span class="hljs-comment">//插入</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>deque&lt;<span class="hljs-type">int</span>&gt; d;<br>d.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">10</span>);<br>d.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">20</span>);<br>d.<span class="hljs-built_in">push_front</span>(<span class="hljs-number">100</span>);<br>d.<span class="hljs-built_in">push_front</span>(<span class="hljs-number">200</span>);<br><span class="hljs-built_in">printDeque</span>(d);<br><br>d.<span class="hljs-built_in">insert</span>(d.<span class="hljs-built_in">begin</span>(), <span class="hljs-number">1000</span>);<br><span class="hljs-built_in">printDeque</span>(d);<br><br>d.<span class="hljs-built_in">insert</span>(d.<span class="hljs-built_in">begin</span>(), <span class="hljs-number">2</span>,<span class="hljs-number">10000</span>);<br><span class="hljs-built_in">printDeque</span>(d);<br><br>deque&lt;<span class="hljs-type">int</span>&gt;d2;<br>d<span class="hljs-number">2.</span><span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>d<span class="hljs-number">2.</span><span class="hljs-built_in">push_back</span>(<span class="hljs-number">2</span>);<br>d<span class="hljs-number">2.</span><span class="hljs-built_in">push_back</span>(<span class="hljs-number">3</span>);<br><br>d.<span class="hljs-built_in">insert</span>(d.<span class="hljs-built_in">begin</span>(), d<span class="hljs-number">2.</span><span class="hljs-built_in">begin</span>(), d<span class="hljs-number">2.</span><span class="hljs-built_in">end</span>());<br><span class="hljs-built_in">printDeque</span>(d);<br><br>&#125;<br><br><span class="hljs-comment">//删除</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test03</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>deque&lt;<span class="hljs-type">int</span>&gt; d;<br>d.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">10</span>);<br>d.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">20</span>);<br>d.<span class="hljs-built_in">push_front</span>(<span class="hljs-number">100</span>);<br>d.<span class="hljs-built_in">push_front</span>(<span class="hljs-number">200</span>);<br><span class="hljs-built_in">printDeque</span>(d);<br><br>d.<span class="hljs-built_in">erase</span>(d.<span class="hljs-built_in">begin</span>());<br><span class="hljs-built_in">printDeque</span>(d);<br><br>d.<span class="hljs-built_in">erase</span>(d.<span class="hljs-built_in">begin</span>(), d.<span class="hljs-built_in">end</span>());<br>d.<span class="hljs-built_in">clear</span>();<br><span class="hljs-built_in">printDeque</span>(d);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//test01();</span><br><br><span class="hljs-comment">//test02();</span><br><br>    <span class="hljs-built_in">test03</span>();<br>    <br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>插入和删除提供的位置是迭代器！</li><li>尾插   —  push_back</li><li>尾删   —  pop_back</li><li>头插   —  push_front</li><li>头删   —  pop_front</li></ul><h4 id="3-3-6-deque-数据存取">3.3.6 deque 数据存取</h4><p><strong>功能描述：</strong></p><ul><li>对deque 中的数据的存取操作</li></ul><p><strong>函数原型：</strong></p><ul><li><code>at(int idx); </code>     //返回索引idx所指的数据</li><li><code>operator[]; </code>      //返回索引idx所指的数据</li><li><code>front(); </code>            //返回容器中第一个数据元素</li><li><code>back();</code>              //返回容器中最后一个数据元素</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;deque&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printDeque</span><span class="hljs-params">(<span class="hljs-type">const</span> deque&lt;<span class="hljs-type">int</span>&gt;&amp; d)</span> </span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (deque&lt;<span class="hljs-type">int</span>&gt;::const_iterator it = d.<span class="hljs-built_in">begin</span>(); it != d.<span class="hljs-built_in">end</span>(); it++) &#123;<br>cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br><br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">//数据存取</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br>deque&lt;<span class="hljs-type">int</span>&gt; d;<br>d.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">10</span>);<br>d.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">20</span>);<br>d.<span class="hljs-built_in">push_front</span>(<span class="hljs-number">100</span>);<br>d.<span class="hljs-built_in">push_front</span>(<span class="hljs-number">200</span>);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; d.<span class="hljs-built_in">size</span>(); i++) &#123;<br>cout &lt;&lt; d[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br><br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; d.<span class="hljs-built_in">size</span>(); i++) &#123;<br>cout &lt;&lt; d.<span class="hljs-built_in">at</span>(i) &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;front:&quot;</span> &lt;&lt; d.<span class="hljs-built_in">front</span>() &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;back:&quot;</span> &lt;&lt; d.<span class="hljs-built_in">back</span>() &lt;&lt; endl;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>除了用迭代器获取deque容器中元素，[ ]和at也可以</li><li>front返回容器第一个元素</li><li>back返回容器最后一个元素</li></ul><h4 id="3-3-7-deque-排序">3.3.7  deque 排序</h4><p><strong>功能描述：</strong></p><ul><li>利用算法实现对deque容器进行排序</li></ul><p><strong>算法：</strong></p><ul><li><code>sort(iterator beg, iterator end)</code>  //对beg和end区间内元素进行排序</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;deque&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printDeque</span><span class="hljs-params">(<span class="hljs-type">const</span> deque&lt;<span class="hljs-type">int</span>&gt;&amp; d)</span> </span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (deque&lt;<span class="hljs-type">int</span>&gt;::const_iterator it = d.<span class="hljs-built_in">begin</span>(); it != d.<span class="hljs-built_in">end</span>(); it++) &#123;<br>cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br><br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br>deque&lt;<span class="hljs-type">int</span>&gt; d;<br>d.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">10</span>);<br>d.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">20</span>);<br>d.<span class="hljs-built_in">push_front</span>(<span class="hljs-number">100</span>);<br>d.<span class="hljs-built_in">push_front</span>(<span class="hljs-number">200</span>);<br><br><span class="hljs-built_in">printDeque</span>(d);<br><span class="hljs-built_in">sort</span>(d.<span class="hljs-built_in">begin</span>(), d.<span class="hljs-built_in">end</span>());<br><span class="hljs-built_in">printDeque</span>(d);<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：sort算法非常实用，使用时包含头文件 algorithm即可</p><h3 id="3-4-案例-评委打分">3.4 案例-评委打分</h3><h4 id="3-4-1-案例描述">3.4.1 案例描述</h4><p>有5名选手：选手ABCDE，10个评委分别对每一名选手打分，去除最高分，去除评委中最低分，取平均分。</p><h4 id="3-4-2-实现步骤">3.4.2 实现步骤</h4><ol><li>创建五名选手，放到vector中</li><li>遍历vector容器，取出来每一个选手，执行for循环，可以把10个评分打分存到deque容器中</li><li>sort算法对deque容器中分数排序，去除最高和最低分</li><li>deque容器遍历一遍，累加总分</li><li>获取平均分</li></ol><p><strong>示例代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//选手类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Person</span>(string name, <span class="hljs-type">int</span> score)<br>&#123;<br><span class="hljs-keyword">this</span>-&gt;m_Name = name;<br><span class="hljs-keyword">this</span>-&gt;m_Score = score;<br>&#125;<br><br>string m_Name; <span class="hljs-comment">//姓名</span><br><span class="hljs-type">int</span> m_Score;  <span class="hljs-comment">//平均分</span><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">createPerson</span><span class="hljs-params">(vector&lt;Person&gt;&amp;v)</span></span><br><span class="hljs-function"></span>&#123;<br>string nameSeed = <span class="hljs-string">&quot;ABCDE&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>&#123;<br>string name = <span class="hljs-string">&quot;选手&quot;</span>;<br>name += nameSeed[i];<br><br><span class="hljs-type">int</span> score = <span class="hljs-number">0</span>;<br><br><span class="hljs-function">Person <span class="hljs-title">p</span><span class="hljs-params">(name, score)</span></span>;<br><br><span class="hljs-comment">//将创建的person对象 放入到容器中</span><br>v.<span class="hljs-built_in">push_back</span>(p);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//打分</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setScore</span><span class="hljs-params">(vector&lt;Person&gt;&amp;v)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (vector&lt;Person&gt;::iterator it = v.<span class="hljs-built_in">begin</span>(); it != v.<span class="hljs-built_in">end</span>(); it++)<br>&#123;<br><span class="hljs-comment">//将评委的分数 放入到deque容器中</span><br>deque&lt;<span class="hljs-type">int</span>&gt;d;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br><span class="hljs-type">int</span> score = <span class="hljs-built_in">rand</span>() % <span class="hljs-number">41</span> + <span class="hljs-number">60</span>;  <span class="hljs-comment">// 60 ~ 100</span><br>d.<span class="hljs-built_in">push_back</span>(score);<br>&#125;<br><br><span class="hljs-comment">//cout &lt;&lt; &quot;选手： &quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot; 打分： &quot; &lt;&lt; endl;</span><br><span class="hljs-comment">//for (deque&lt;int&gt;::iterator dit = d.begin(); dit != d.end(); dit++)</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//cout &lt;&lt; *dit &lt;&lt; &quot; &quot;;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//cout &lt;&lt; endl;</span><br><br><span class="hljs-comment">//排序</span><br><span class="hljs-built_in">sort</span>(d.<span class="hljs-built_in">begin</span>(), d.<span class="hljs-built_in">end</span>());<br><br><span class="hljs-comment">//去除最高和最低分</span><br>d.<span class="hljs-built_in">pop_back</span>();<br>d.<span class="hljs-built_in">pop_front</span>();<br><br><span class="hljs-comment">//取平均分</span><br><span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (deque&lt;<span class="hljs-type">int</span>&gt;::iterator dit = d.<span class="hljs-built_in">begin</span>(); dit != d.<span class="hljs-built_in">end</span>(); dit++)<br>&#123;<br>sum += *dit; <span class="hljs-comment">//累加每个评委的分数</span><br>&#125;<br><br><span class="hljs-type">int</span> avg = sum / d.<span class="hljs-built_in">size</span>();<br><br><span class="hljs-comment">//将平均分 赋值给选手身上</span><br>it-&gt;m_Score = avg;<br>&#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showScore</span><span class="hljs-params">(vector&lt;Person&gt;&amp;v)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (vector&lt;Person&gt;::iterator it = v.<span class="hljs-built_in">begin</span>(); it != v.<span class="hljs-built_in">end</span>(); it++)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;姓名： &quot;</span> &lt;&lt; it-&gt;m_Name &lt;&lt; <span class="hljs-string">&quot; 平均分： &quot;</span> &lt;&lt; it-&gt;m_Score &lt;&lt; endl;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//随机数种子</span><br><span class="hljs-built_in">srand</span>((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)<span class="hljs-built_in">time</span>(<span class="hljs-literal">NULL</span>));<br><br><span class="hljs-comment">//1、创建5名选手</span><br>vector&lt;Person&gt;v;  <span class="hljs-comment">//存放选手容器</span><br><span class="hljs-built_in">createPerson</span>(v);<br><br><span class="hljs-comment">//测试</span><br><span class="hljs-comment">//for (vector&lt;Person&gt;::iterator it = v.begin(); it != v.end(); it++)</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; (*it).m_Name &lt;&lt; &quot; 分数： &quot; &lt;&lt; (*it).m_Score &lt;&lt; endl;</span><br><span class="hljs-comment">//&#125;</span><br><br><span class="hljs-comment">//2、给5名选手打分</span><br><span class="hljs-built_in">setScore</span>(v);<br><br><span class="hljs-comment">//3、显示最后得分</span><br><span class="hljs-built_in">showScore</span>(v);<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>总结：</strong> 选取不同的容器操作数据，可以提升代码的效率</p><h3 id="3-5-stack容器">3.5 stack容器</h3><h4 id="3-5-1-stack-基本概念">3.5.1 stack 基本概念</h4><p><strong>概念：<strong>stack是一种</strong>先进后出</strong>(First In Last Out,FILO)的数据结构，它只有一个出口</p><p><img src="/assetss/clip_image002-1547604555425.jpg" alt="说明: 2015-11-15_195707"></p><p>栈中只有顶端的元素才可以被外界使用，因此栈不允许有遍历行为</p><p>栈中进入数据称为  — <strong>入栈</strong>  <code>push</code></p><p>栈中弹出数据称为  — <strong>出栈</strong>  <code>pop</code></p><p>生活中的栈：</p><p><img src="/assetss/clip_image002.png" alt="img"></p><p><img src="/assetss/clip_image002-1547605111510.jpg" alt="img"></p><h4 id="3-5-2-stack-常用接口">3.5.2 stack 常用接口</h4><p>功能描述：栈容器常用的对外接口</p><p>构造函数：</p><ul><li><code>stack&lt;T&gt; stk;</code>                                 //stack采用模板类实现， stack对象的默认构造形式</li><li><code>stack(const stack &amp;stk);</code>            //拷贝构造函数</li></ul><p>赋值操作：</p><ul><li><code>stack&amp; operator=(const stack &amp;stk);</code>           //重载等号操作符</li></ul><p>数据存取：</p><ul><li><code>push(elem);</code>      //向栈顶添加元素</li><li><code>pop();</code>                //从栈顶移除第一个元素</li><li><code>top(); </code>                //返回栈顶元素</li></ul><p>大小操作：</p><ul><li><code>empty();</code>            //判断堆栈是否为空</li><li><code>size(); </code>              //返回栈的大小</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><br><span class="hljs-comment">//栈容器常用接口</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//创建栈容器 栈容器必须符合先进后出</span><br>stack&lt;<span class="hljs-type">int</span>&gt; s;<br><br><span class="hljs-comment">//向栈中添加元素，叫做 压栈 入栈</span><br>s.<span class="hljs-built_in">push</span>(<span class="hljs-number">10</span>);<br>s.<span class="hljs-built_in">push</span>(<span class="hljs-number">20</span>);<br>s.<span class="hljs-built_in">push</span>(<span class="hljs-number">30</span>);<br><br><span class="hljs-keyword">while</span> (!s.<span class="hljs-built_in">empty</span>()) &#123;<br><span class="hljs-comment">//输出栈顶元素</span><br>cout &lt;&lt; <span class="hljs-string">&quot;栈顶元素为： &quot;</span> &lt;&lt; s.<span class="hljs-built_in">top</span>() &lt;&lt; endl;<br><span class="hljs-comment">//弹出栈顶元素</span><br>s.<span class="hljs-built_in">pop</span>();<br>&#125;<br>cout &lt;&lt; <span class="hljs-string">&quot;栈的大小为：&quot;</span> &lt;&lt; s.<span class="hljs-built_in">size</span>() &lt;&lt; endl;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>入栈   — push</li><li>出栈   — pop</li><li>返回栈顶   — top</li><li>判断栈是否为空   — empty</li><li>返回栈大小   — size</li></ul><h3 id="3-6-queue-容器">3.6 queue 容器</h3><h4 id="3-6-1-queue-基本概念">3.6.1 queue 基本概念</h4><p><strong>概念：<strong>Queue是一种</strong>先进先出</strong>(First In First Out,FIFO)的数据结构，它有两个出口</p><p><img src="/assetss/clip_image002-1547606475892.jpg" alt="说明: 2015-11-15_214429"></p><p>队列容器允许从一端新增元素，从另一端移除元素</p><p>队列中只有队头和队尾才可以被外界使用，因此队列不允许有遍历行为</p><p>队列中进数据称为 — <strong>入队</strong>    <code>push</code></p><p>队列中出数据称为 — <strong>出队</strong>    <code>pop</code></p><p>生活中的队列：</p><p><img src="/assetss/1547606785041.png" alt="1547606785041"></p><h4 id="3-6-2-queue-常用接口">3.6.2 queue 常用接口</h4><p>功能描述：栈容器常用的对外接口</p><p>构造函数：</p><ul><li><code>queue&lt;T&gt; que;</code>                                 //queue采用模板类实现，queue对象的默认构造形式</li><li><code>queue(const queue &amp;que);</code>            //拷贝构造函数</li></ul><p>赋值操作：</p><ul><li><code>queue&amp; operator=(const queue &amp;que);</code>           //重载等号操作符</li></ul><p>数据存取：</p><ul><li><code>push(elem);</code>                             //往队尾添加元素</li><li><code>pop();</code>                                      //从队头移除第一个元素</li><li><code>back();</code>                                    //返回最后一个元素</li><li><code>front(); </code>                                  //返回第一个元素</li></ul><p>大小操作：</p><ul><li><code>empty();</code>            //判断堆栈是否为空</li><li><code>size(); </code>              //返回栈的大小</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Person</span>(string name, <span class="hljs-type">int</span> age)<br>&#123;<br><span class="hljs-keyword">this</span>-&gt;m_Name = name;<br><span class="hljs-keyword">this</span>-&gt;m_Age = age;<br>&#125;<br><br>string m_Name;<br><span class="hljs-type">int</span> m_Age;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//创建队列</span><br>queue&lt;Person&gt; q;<br><br><span class="hljs-comment">//准备数据</span><br><span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-string">&quot;唐僧&quot;</span>, <span class="hljs-number">30</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-string">&quot;孙悟空&quot;</span>, <span class="hljs-number">1000</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p3</span><span class="hljs-params">(<span class="hljs-string">&quot;猪八戒&quot;</span>, <span class="hljs-number">900</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p4</span><span class="hljs-params">(<span class="hljs-string">&quot;沙僧&quot;</span>, <span class="hljs-number">800</span>)</span></span>;<br><br><span class="hljs-comment">//向队列中添加元素  入队操作</span><br>q.<span class="hljs-built_in">push</span>(p1);<br>q.<span class="hljs-built_in">push</span>(p2);<br>q.<span class="hljs-built_in">push</span>(p3);<br>q.<span class="hljs-built_in">push</span>(p4);<br><br><span class="hljs-comment">//队列不提供迭代器，更不支持随机访问</span><br><span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>()) &#123;<br><span class="hljs-comment">//输出队头元素</span><br>cout &lt;&lt; <span class="hljs-string">&quot;队头元素-- 姓名： &quot;</span> &lt;&lt; q.<span class="hljs-built_in">front</span>().m_Name <br>              &lt;&lt; <span class="hljs-string">&quot; 年龄： &quot;</span>&lt;&lt; q.<span class="hljs-built_in">front</span>().m_Age &lt;&lt; endl;<br>        <br>cout &lt;&lt; <span class="hljs-string">&quot;队尾元素-- 姓名： &quot;</span> &lt;&lt; q.<span class="hljs-built_in">back</span>().m_Name  <br>              &lt;&lt; <span class="hljs-string">&quot; 年龄： &quot;</span> &lt;&lt; q.<span class="hljs-built_in">back</span>().m_Age &lt;&lt; endl;<br>        <br>cout &lt;&lt; endl;<br><span class="hljs-comment">//弹出队头元素</span><br>q.<span class="hljs-built_in">pop</span>();<br>&#125;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;队列大小为：&quot;</span> &lt;&lt; q.<span class="hljs-built_in">size</span>() &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>入队   — push</li><li>出队   — pop</li><li>返回队头元素   — front</li><li>返回队尾元素   — back</li><li>判断队是否为空   — empty</li><li>返回队列大小   — size</li></ul><h3 id="3-7-list容器">3.7 list容器</h3><h4 id="3-7-1-list基本概念">3.7.1 list基本概念</h4><p>**功能：**将数据进行链式存储</p><p><strong>链表</strong>（list）是一种物理存储单元上非连续的存储结构，数据元素的逻辑顺序是通过链表中的指针链接实现的</p><p>链表的组成：链表由一系列<strong>结点</strong>组成</p><p>结点的组成：一个是存储数据元素的<strong>数据域</strong>，另一个是存储下一个结点地址的<strong>指针域</strong></p><p>STL中的链表是一个双向循环链表</p><p><img src="/assetss/clip_image002-1547608564071.jpg" alt="说明: 2015-11-15_225145"></p><p>由于链表的存储方式并不是连续的内存空间，因此链表list中的迭代器只支持前移和后移，属于<strong>双向迭代器</strong></p><p>list的优点：</p><ul><li>采用动态存储分配，不会造成内存浪费和溢出</li><li>链表执行插入和删除操作十分方便，修改指针即可，不需要移动大量元素</li></ul><p>list的缺点：</p><ul><li>链表灵活，但是空间(指针域) 和 时间（遍历）额外耗费较大</li></ul><p>List有一个重要的性质，插入操作和删除操作都不会造成原有list迭代器的失效，这在vector是不成立的。</p><p>总结：STL中<strong>List和vector是两个最常被使用的容器</strong>，各有优缺点</p><h4 id="3-7-2-list构造函数">3.7.2  list构造函数</h4><p><strong>功能描述：</strong></p><ul><li>创建list容器</li></ul><p><strong>函数原型：</strong></p><ul><li><code>list&lt;T&gt; lst;</code>                               //list采用采用模板类实现,对象的默认构造形式：</li><li><code>list(beg,end);</code>                           //构造函数将[beg, end)区间中的元素拷贝给本身。</li><li><code>list(n,elem);</code>                             //构造函数将n个elem拷贝给本身。</li><li><code>list(const list &amp;lst);</code>            //拷贝构造函数。</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;list&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printList</span><span class="hljs-params">(<span class="hljs-type">const</span> list&lt;<span class="hljs-type">int</span>&gt;&amp; L)</span> </span>&#123;<br><br><span class="hljs-keyword">for</span> (list&lt;<span class="hljs-type">int</span>&gt;::const_iterator it = L.<span class="hljs-built_in">begin</span>(); it != L.<span class="hljs-built_in">end</span>(); it++) &#123;<br>cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>list&lt;<span class="hljs-type">int</span>&gt;L1;<br>L<span class="hljs-number">1.</span><span class="hljs-built_in">push_back</span>(<span class="hljs-number">10</span>);<br>L<span class="hljs-number">1.</span><span class="hljs-built_in">push_back</span>(<span class="hljs-number">20</span>);<br>L<span class="hljs-number">1.</span><span class="hljs-built_in">push_back</span>(<span class="hljs-number">30</span>);<br>L<span class="hljs-number">1.</span><span class="hljs-built_in">push_back</span>(<span class="hljs-number">40</span>);<br><br><span class="hljs-built_in">printList</span>(L1);<br><br>list&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">L2</span>(L<span class="hljs-number">1.</span><span class="hljs-built_in">begin</span>(),L<span class="hljs-number">1.</span><span class="hljs-built_in">end</span>());<br><span class="hljs-built_in">printList</span>(L2);<br><br>list&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">L3</span>(L2);<br><span class="hljs-built_in">printList</span>(L3);<br><br>list&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">L4</span>(<span class="hljs-number">10</span>, <span class="hljs-number">1000</span>);<br><span class="hljs-built_in">printList</span>(L4);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：list构造方式同其他几个STL常用容器，熟练掌握即可</p><h4 id="3-7-3-list-赋值和交换">3.7.3 list 赋值和交换</h4><p><strong>功能描述：</strong></p><ul><li>给list容器进行赋值，以及交换list容器</li></ul><p><strong>函数原型：</strong></p><ul><li><code>assign(beg, end);</code>            //将[beg, end)区间中的数据拷贝赋值给本身。</li><li><code>assign(n, elem);</code>              //将n个elem拷贝赋值给本身。</li><li><code>list&amp; operator=(const list &amp;lst);</code>         //重载等号操作符</li><li><code>swap(lst);</code>                         //将lst与本身的元素互换。</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;list&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printList</span><span class="hljs-params">(<span class="hljs-type">const</span> list&lt;<span class="hljs-type">int</span>&gt;&amp; L)</span> </span>&#123;<br><br><span class="hljs-keyword">for</span> (list&lt;<span class="hljs-type">int</span>&gt;::const_iterator it = L.<span class="hljs-built_in">begin</span>(); it != L.<span class="hljs-built_in">end</span>(); it++) &#123;<br>cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">//赋值和交换</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>list&lt;<span class="hljs-type">int</span>&gt;L1;<br>L<span class="hljs-number">1.</span><span class="hljs-built_in">push_back</span>(<span class="hljs-number">10</span>);<br>L<span class="hljs-number">1.</span><span class="hljs-built_in">push_back</span>(<span class="hljs-number">20</span>);<br>L<span class="hljs-number">1.</span><span class="hljs-built_in">push_back</span>(<span class="hljs-number">30</span>);<br>L<span class="hljs-number">1.</span><span class="hljs-built_in">push_back</span>(<span class="hljs-number">40</span>);<br><span class="hljs-built_in">printList</span>(L1);<br><br><span class="hljs-comment">//赋值</span><br>list&lt;<span class="hljs-type">int</span>&gt;L2;<br>L2 = L1;<br><span class="hljs-built_in">printList</span>(L2);<br><br>list&lt;<span class="hljs-type">int</span>&gt;L3;<br>L<span class="hljs-number">3.</span><span class="hljs-built_in">assign</span>(L<span class="hljs-number">2.</span><span class="hljs-built_in">begin</span>(), L<span class="hljs-number">2.</span><span class="hljs-built_in">end</span>());<br><span class="hljs-built_in">printList</span>(L3);<br><br>list&lt;<span class="hljs-type">int</span>&gt;L4;<br>L<span class="hljs-number">4.</span><span class="hljs-built_in">assign</span>(<span class="hljs-number">10</span>, <span class="hljs-number">100</span>);<br><span class="hljs-built_in">printList</span>(L4);<br><br>&#125;<br><br><span class="hljs-comment">//交换</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br>list&lt;<span class="hljs-type">int</span>&gt;L1;<br>L<span class="hljs-number">1.</span><span class="hljs-built_in">push_back</span>(<span class="hljs-number">10</span>);<br>L<span class="hljs-number">1.</span><span class="hljs-built_in">push_back</span>(<span class="hljs-number">20</span>);<br>L<span class="hljs-number">1.</span><span class="hljs-built_in">push_back</span>(<span class="hljs-number">30</span>);<br>L<span class="hljs-number">1.</span><span class="hljs-built_in">push_back</span>(<span class="hljs-number">40</span>);<br><br>list&lt;<span class="hljs-type">int</span>&gt;L2;<br>L<span class="hljs-number">2.</span><span class="hljs-built_in">assign</span>(<span class="hljs-number">10</span>, <span class="hljs-number">100</span>);<br><br>cout &lt;&lt; <span class="hljs-string">&quot;交换前： &quot;</span> &lt;&lt; endl;<br><span class="hljs-built_in">printList</span>(L1);<br><span class="hljs-built_in">printList</span>(L2);<br><br>cout &lt;&lt; endl;<br><br>L<span class="hljs-number">1.</span><span class="hljs-built_in">swap</span>(L2);<br><br>cout &lt;&lt; <span class="hljs-string">&quot;交换后： &quot;</span> &lt;&lt; endl;<br><span class="hljs-built_in">printList</span>(L1);<br><span class="hljs-built_in">printList</span>(L2);<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//test01();</span><br><br><span class="hljs-built_in">test02</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：list赋值和交换操作能够灵活运用即可</p><h4 id="3-7-4-list-大小操作">3.7.4 list 大小操作</h4><p><strong>功能描述：</strong></p><ul><li>对list容器的大小进行操作</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>size(); </code>                             //返回容器中元素的个数</p></li><li><p><code>empty(); </code>                           //判断容器是否为空</p></li><li><p><code>resize(num);</code>                   //重新指定容器的长度为num，若容器变长，则以默认值填充新位置。</p><p>​    //如果容器变短，则末尾超出容器长度的元素被删除。</p></li><li><p><code>resize(num, elem); </code>       //重新指定容器的长度为num，若容器变长，则以elem值填充新位置。</p><pre><code class="hljs">        //如果容器变短，则末尾超出容器长度的元素被删除。</code></pre></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;list&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printList</span><span class="hljs-params">(<span class="hljs-type">const</span> list&lt;<span class="hljs-type">int</span>&gt;&amp; L)</span> </span>&#123;<br><br><span class="hljs-keyword">for</span> (list&lt;<span class="hljs-type">int</span>&gt;::const_iterator it = L.<span class="hljs-built_in">begin</span>(); it != L.<span class="hljs-built_in">end</span>(); it++) &#123;<br>cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">//大小操作</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>list&lt;<span class="hljs-type">int</span>&gt;L1;<br>L<span class="hljs-number">1.</span><span class="hljs-built_in">push_back</span>(<span class="hljs-number">10</span>);<br>L<span class="hljs-number">1.</span><span class="hljs-built_in">push_back</span>(<span class="hljs-number">20</span>);<br>L<span class="hljs-number">1.</span><span class="hljs-built_in">push_back</span>(<span class="hljs-number">30</span>);<br>L<span class="hljs-number">1.</span><span class="hljs-built_in">push_back</span>(<span class="hljs-number">40</span>);<br><br><span class="hljs-keyword">if</span> (L<span class="hljs-number">1.</span><span class="hljs-built_in">empty</span>())<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;L1为空&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;L1不为空&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;L1的大小为： &quot;</span> &lt;&lt; L<span class="hljs-number">1.</span><span class="hljs-built_in">size</span>() &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">//重新指定大小</span><br>L<span class="hljs-number">1.</span><span class="hljs-built_in">resize</span>(<span class="hljs-number">10</span>);<br><span class="hljs-built_in">printList</span>(L1);<br><br>L<span class="hljs-number">1.</span><span class="hljs-built_in">resize</span>(<span class="hljs-number">2</span>);<br><span class="hljs-built_in">printList</span>(L1);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>判断是否为空   — empty</li><li>返回元素个数   — size</li><li>重新指定个数   — resize</li></ul><h4 id="3-7-5-list-插入和删除">3.7.5 list 插入和删除</h4><p><strong>功能描述：</strong></p><ul><li>对list容器进行数据的插入和删除</li></ul><p><strong>函数原型：</strong></p><ul><li>push_back(elem);//在容器尾部加入一个元素</li><li>pop_back();//删除容器中最后一个元素</li><li>push_front(elem);//在容器开头插入一个元素</li><li>pop_front();//从容器开头移除第一个元素</li><li>insert(pos,elem);//在pos位置插elem元素的拷贝，返回新数据的位置。</li><li>insert(pos,n,elem);//在pos位置插入n个elem数据，无返回值。</li><li>insert(pos,beg,end);//在pos位置插入[beg,end)区间的数据，无返回值。</li><li>clear();//移除容器的所有数据</li><li>erase(beg,end);//删除[beg,end)区间的数据，返回下一个数据的位置。</li><li>erase(pos);//删除pos位置的数据，返回下一个数据的位置。</li><li>remove(elem);//删除容器中所有与elem值匹配的元素。</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;list&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printList</span><span class="hljs-params">(<span class="hljs-type">const</span> list&lt;<span class="hljs-type">int</span>&gt;&amp; L)</span> </span>&#123;<br><br><span class="hljs-keyword">for</span> (list&lt;<span class="hljs-type">int</span>&gt;::const_iterator it = L.<span class="hljs-built_in">begin</span>(); it != L.<span class="hljs-built_in">end</span>(); it++) &#123;<br>cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">//插入和删除</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>list&lt;<span class="hljs-type">int</span>&gt; L;<br><span class="hljs-comment">//尾插</span><br>L.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">10</span>);<br>L.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">20</span>);<br>L.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">30</span>);<br><span class="hljs-comment">//头插</span><br>L.<span class="hljs-built_in">push_front</span>(<span class="hljs-number">100</span>);<br>L.<span class="hljs-built_in">push_front</span>(<span class="hljs-number">200</span>);<br>L.<span class="hljs-built_in">push_front</span>(<span class="hljs-number">300</span>);<br><br><span class="hljs-built_in">printList</span>(L);<br><br><span class="hljs-comment">//尾删</span><br>L.<span class="hljs-built_in">pop_back</span>();<br><span class="hljs-built_in">printList</span>(L);<br><br><span class="hljs-comment">//头删</span><br>L.<span class="hljs-built_in">pop_front</span>();<br><span class="hljs-built_in">printList</span>(L);<br><br><span class="hljs-comment">//插入</span><br>list&lt;<span class="hljs-type">int</span>&gt;::iterator it = L.<span class="hljs-built_in">begin</span>();<br>L.<span class="hljs-built_in">insert</span>(++it, <span class="hljs-number">1000</span>);<br><span class="hljs-built_in">printList</span>(L);<br><br><span class="hljs-comment">//删除</span><br>it = L.<span class="hljs-built_in">begin</span>();<br>L.<span class="hljs-built_in">erase</span>(++it);<br><span class="hljs-built_in">printList</span>(L);<br><br><span class="hljs-comment">//移除</span><br>L.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">10000</span>);<br>L.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">10000</span>);<br>L.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">10000</span>);<br><span class="hljs-built_in">printList</span>(L);<br>L.<span class="hljs-built_in">remove</span>(<span class="hljs-number">10000</span>);<br><span class="hljs-built_in">printList</span>(L);<br>    <br>    <span class="hljs-comment">//清空</span><br>L.<span class="hljs-built_in">clear</span>();<br><span class="hljs-built_in">printList</span>(L);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>尾插   — push_back</li><li>尾删   — pop_back</li><li>头插   — push_front</li><li>头删   — pop_front</li><li>插入   — insert</li><li>删除   — erase</li><li>移除   — remove</li><li>清空   — clear</li></ul><h4 id="3-7-6-list-数据存取">3.7.6 list 数据存取</h4><p><strong>功能描述：</strong></p><ul><li>对list容器中数据进行存取</li></ul><p><strong>函数原型：</strong></p><ul><li><code>front();</code>        //返回第一个元素。</li><li><code>back();</code>         //返回最后一个元素。</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;list&gt;</span></span><br><br><span class="hljs-comment">//数据存取</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>list&lt;<span class="hljs-type">int</span>&gt;L1;<br>L<span class="hljs-number">1.</span><span class="hljs-built_in">push_back</span>(<span class="hljs-number">10</span>);<br>L<span class="hljs-number">1.</span><span class="hljs-built_in">push_back</span>(<span class="hljs-number">20</span>);<br>L<span class="hljs-number">1.</span><span class="hljs-built_in">push_back</span>(<span class="hljs-number">30</span>);<br>L<span class="hljs-number">1.</span><span class="hljs-built_in">push_back</span>(<span class="hljs-number">40</span>);<br><br><br><span class="hljs-comment">//cout &lt;&lt; L1.at(0) &lt;&lt; endl;//错误 不支持at访问数据</span><br><span class="hljs-comment">//cout &lt;&lt; L1[0] &lt;&lt; endl; //错误  不支持[]方式访问数据</span><br>cout &lt;&lt; <span class="hljs-string">&quot;第一个元素为： &quot;</span> &lt;&lt; L<span class="hljs-number">1.f</span>ront() &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;最后一个元素为： &quot;</span> &lt;&lt; L<span class="hljs-number">1.</span><span class="hljs-built_in">back</span>() &lt;&lt; endl;<br><br><span class="hljs-comment">//list容器的迭代器是双向迭代器，不支持随机访问</span><br>list&lt;<span class="hljs-type">int</span>&gt;::iterator it = L<span class="hljs-number">1.</span><span class="hljs-built_in">begin</span>();<br><span class="hljs-comment">//it = it + 1;//错误，不可以跳跃访问，即使是+1</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>list容器中不可以通过[]或者at方式访问数据</li><li>返回第一个元素   — front</li><li>返回最后一个元素   — back</li></ul><h4 id="3-7-7-list-反转和排序">3.7.7 list 反转和排序</h4><p><strong>功能描述：</strong></p><ul><li>将容器中的元素反转，以及将容器中的数据进行排序</li></ul><p><strong>函数原型：</strong></p><ul><li><code>reverse();</code>   //反转链表</li><li><code>sort();</code>        //链表排序</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printList</span><span class="hljs-params">(<span class="hljs-type">const</span> list&lt;<span class="hljs-type">int</span>&gt;&amp; L)</span> </span>&#123;<br><br><span class="hljs-keyword">for</span> (list&lt;<span class="hljs-type">int</span>&gt;::const_iterator it = L.<span class="hljs-built_in">begin</span>(); it != L.<span class="hljs-built_in">end</span>(); it++) &#123;<br>cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">myCompare</span><span class="hljs-params">(<span class="hljs-type">int</span> val1 , <span class="hljs-type">int</span> val2)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> val1 &gt; val2;<br>&#125;<br><br><span class="hljs-comment">//反转和排序</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>list&lt;<span class="hljs-type">int</span>&gt; L;<br>L.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">90</span>);<br>L.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">30</span>);<br>L.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">20</span>);<br>L.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">70</span>);<br><span class="hljs-built_in">printList</span>(L);<br><br><span class="hljs-comment">//反转容器的元素</span><br>L.<span class="hljs-built_in">reverse</span>();<br><span class="hljs-built_in">printList</span>(L);<br><br><span class="hljs-comment">//排序</span><br>L.<span class="hljs-built_in">sort</span>(); <span class="hljs-comment">//默认的排序规则 从小到大</span><br><span class="hljs-built_in">printList</span>(L);<br><br>L.<span class="hljs-built_in">sort</span>(myCompare); <span class="hljs-comment">//指定规则，从大到小</span><br><span class="hljs-built_in">printList</span>(L);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>反转   — reverse</li><li>排序   — sort （成员函数）</li></ul><h4 id="3-7-8-排序案例">3.7.8 排序案例</h4><p>案例描述：将Person自定义数据类型进行排序，Person中属性有姓名、年龄、身高</p><p>排序规则：按照年龄进行升序，如果年龄相同按照身高进行降序</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;list&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Person</span>(string name, <span class="hljs-type">int</span> age , <span class="hljs-type">int</span> height) &#123;<br>m_Name = name;<br>m_Age = age;<br>m_Height = height;<br>&#125;<br><br><span class="hljs-keyword">public</span>:<br>string m_Name;  <span class="hljs-comment">//姓名</span><br><span class="hljs-type">int</span> m_Age;      <span class="hljs-comment">//年龄</span><br><span class="hljs-type">int</span> m_Height;   <span class="hljs-comment">//身高</span><br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">ComparePerson</span><span class="hljs-params">(Person&amp; p1, Person&amp; p2)</span> </span>&#123;<br><br><span class="hljs-keyword">if</span> (p<span class="hljs-number">1.</span>m_Age == p<span class="hljs-number">2.</span>m_Age) &#123;<br><span class="hljs-keyword">return</span> p<span class="hljs-number">1.</span>m_Height  &gt; p<span class="hljs-number">2.</span>m_Height;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span>  p<span class="hljs-number">1.</span>m_Age &lt; p<span class="hljs-number">2.</span>m_Age;<br>&#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br><br>list&lt;Person&gt; L;<br><br><span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-string">&quot;刘备&quot;</span>, <span class="hljs-number">35</span> , <span class="hljs-number">175</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-string">&quot;曹操&quot;</span>, <span class="hljs-number">45</span> , <span class="hljs-number">180</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p3</span><span class="hljs-params">(<span class="hljs-string">&quot;孙权&quot;</span>, <span class="hljs-number">40</span> , <span class="hljs-number">170</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p4</span><span class="hljs-params">(<span class="hljs-string">&quot;赵云&quot;</span>, <span class="hljs-number">25</span> , <span class="hljs-number">190</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p5</span><span class="hljs-params">(<span class="hljs-string">&quot;张飞&quot;</span>, <span class="hljs-number">35</span> , <span class="hljs-number">160</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p6</span><span class="hljs-params">(<span class="hljs-string">&quot;关羽&quot;</span>, <span class="hljs-number">35</span> , <span class="hljs-number">200</span>)</span></span>;<br><br>L.<span class="hljs-built_in">push_back</span>(p1);<br>L.<span class="hljs-built_in">push_back</span>(p2);<br>L.<span class="hljs-built_in">push_back</span>(p3);<br>L.<span class="hljs-built_in">push_back</span>(p4);<br>L.<span class="hljs-built_in">push_back</span>(p5);<br>L.<span class="hljs-built_in">push_back</span>(p6);<br><br><span class="hljs-keyword">for</span> (list&lt;Person&gt;::iterator it = L.<span class="hljs-built_in">begin</span>(); it != L.<span class="hljs-built_in">end</span>(); it++) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;姓名： &quot;</span> &lt;&lt; it-&gt;m_Name &lt;&lt; <span class="hljs-string">&quot; 年龄： &quot;</span> &lt;&lt; it-&gt;m_Age <br>              &lt;&lt; <span class="hljs-string">&quot; 身高： &quot;</span> &lt;&lt; it-&gt;m_Height &lt;&lt; endl;<br>&#125;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;---------------------------------&quot;</span> &lt;&lt; endl;<br>L.<span class="hljs-built_in">sort</span>(ComparePerson); <span class="hljs-comment">//排序</span><br><br><span class="hljs-keyword">for</span> (list&lt;Person&gt;::iterator it = L.<span class="hljs-built_in">begin</span>(); it != L.<span class="hljs-built_in">end</span>(); it++) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;姓名： &quot;</span> &lt;&lt; it-&gt;m_Name &lt;&lt; <span class="hljs-string">&quot; 年龄： &quot;</span> &lt;&lt; it-&gt;m_Age <br>              &lt;&lt; <span class="hljs-string">&quot; 身高： &quot;</span> &lt;&lt; it-&gt;m_Height &lt;&lt; endl;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li><p>对于自定义数据类型，必须要指定排序规则，否则编译器不知道如何进行排序</p></li><li><p>高级排序只是在排序规则上再进行一次逻辑规则制定，并不复杂</p></li></ul><h3 id="3-8-set-multiset-容器">3.8 set/ multiset 容器</h3><h4 id="3-8-1-set基本概念">3.8.1 set基本概念</h4><p><strong>简介：</strong></p><ul><li>所有元素都会在插入时自动被排序</li></ul><p><strong>本质：</strong></p><ul><li>set/multiset属于<strong>关联式容器</strong>，底层结构是用<strong>二叉树</strong>实现。</li></ul><p><strong>set和multiset区别</strong>：</p><ul><li>set不允许容器中有重复的元素</li><li>multiset允许容器中有重复的元素</li></ul><h4 id="3-8-2-set构造和赋值">3.8.2 set构造和赋值</h4><p>功能描述：创建set容器以及赋值</p><p>构造：</p><ul><li><code>set&lt;T&gt; st;</code>                        //默认构造函数：</li><li><code>set(const set &amp;st);</code>       //拷贝构造函数</li></ul><p>赋值：</p><ul><li><code>set&amp; operator=(const set &amp;st);</code>    //重载等号操作符</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printSet</span><span class="hljs-params">(set&lt;<span class="hljs-type">int</span>&gt; &amp; s)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (set&lt;<span class="hljs-type">int</span>&gt;::iterator it = s.<span class="hljs-built_in">begin</span>(); it != s.<span class="hljs-built_in">end</span>(); it++)<br>&#123;<br>cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">//构造和赋值</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>set&lt;<span class="hljs-type">int</span>&gt; s1;<br><br>s<span class="hljs-number">1.</span><span class="hljs-built_in">insert</span>(<span class="hljs-number">10</span>);<br>s<span class="hljs-number">1.</span><span class="hljs-built_in">insert</span>(<span class="hljs-number">30</span>);<br>s<span class="hljs-number">1.</span><span class="hljs-built_in">insert</span>(<span class="hljs-number">20</span>);<br>s<span class="hljs-number">1.</span><span class="hljs-built_in">insert</span>(<span class="hljs-number">40</span>);<br><span class="hljs-built_in">printSet</span>(s1);<br><br><span class="hljs-comment">//拷贝构造</span><br>set&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">s2</span>(s1);<br><span class="hljs-built_in">printSet</span>(s2);<br><br><span class="hljs-comment">//赋值</span><br>set&lt;<span class="hljs-type">int</span>&gt;s3;<br>s3 = s2;<br><span class="hljs-built_in">printSet</span>(s3);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>set容器插入数据时用insert</li><li>set容器插入数据的数据会自动排序</li></ul><h4 id="3-8-3-set大小和交换">3.8.3 set大小和交换</h4><p><strong>功能描述：</strong></p><ul><li>统计set容器大小以及交换set容器</li></ul><p><strong>函数原型：</strong></p><ul><li><code>size();</code>          //返回容器中元素的数目</li><li><code>empty();</code>        //判断容器是否为空</li><li><code>swap(st);</code>      //交换两个集合容器</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printSet</span><span class="hljs-params">(set&lt;<span class="hljs-type">int</span>&gt; &amp; s)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (set&lt;<span class="hljs-type">int</span>&gt;::iterator it = s.<span class="hljs-built_in">begin</span>(); it != s.<span class="hljs-built_in">end</span>(); it++)<br>&#123;<br>cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">//大小</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br>set&lt;<span class="hljs-type">int</span>&gt; s1;<br><br>s<span class="hljs-number">1.</span><span class="hljs-built_in">insert</span>(<span class="hljs-number">10</span>);<br>s<span class="hljs-number">1.</span><span class="hljs-built_in">insert</span>(<span class="hljs-number">30</span>);<br>s<span class="hljs-number">1.</span><span class="hljs-built_in">insert</span>(<span class="hljs-number">20</span>);<br>s<span class="hljs-number">1.</span><span class="hljs-built_in">insert</span>(<span class="hljs-number">40</span>);<br><br><span class="hljs-keyword">if</span> (s<span class="hljs-number">1.</span><span class="hljs-built_in">empty</span>())<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;s1为空&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;s1不为空&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;s1的大小为： &quot;</span> &lt;&lt; s<span class="hljs-number">1.</span><span class="hljs-built_in">size</span>() &lt;&lt; endl;<br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">//交换</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>set&lt;<span class="hljs-type">int</span>&gt; s1;<br><br>s<span class="hljs-number">1.</span><span class="hljs-built_in">insert</span>(<span class="hljs-number">10</span>);<br>s<span class="hljs-number">1.</span><span class="hljs-built_in">insert</span>(<span class="hljs-number">30</span>);<br>s<span class="hljs-number">1.</span><span class="hljs-built_in">insert</span>(<span class="hljs-number">20</span>);<br>s<span class="hljs-number">1.</span><span class="hljs-built_in">insert</span>(<span class="hljs-number">40</span>);<br><br>set&lt;<span class="hljs-type">int</span>&gt; s2;<br><br>s<span class="hljs-number">2.</span><span class="hljs-built_in">insert</span>(<span class="hljs-number">100</span>);<br>s<span class="hljs-number">2.</span><span class="hljs-built_in">insert</span>(<span class="hljs-number">300</span>);<br>s<span class="hljs-number">2.</span><span class="hljs-built_in">insert</span>(<span class="hljs-number">200</span>);<br>s<span class="hljs-number">2.</span><span class="hljs-built_in">insert</span>(<span class="hljs-number">400</span>);<br><br>cout &lt;&lt; <span class="hljs-string">&quot;交换前&quot;</span> &lt;&lt; endl;<br><span class="hljs-built_in">printSet</span>(s1);<br><span class="hljs-built_in">printSet</span>(s2);<br>cout &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;交换后&quot;</span> &lt;&lt; endl;<br>s<span class="hljs-number">1.</span><span class="hljs-built_in">swap</span>(s2);<br><span class="hljs-built_in">printSet</span>(s1);<br><span class="hljs-built_in">printSet</span>(s2);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//test01();</span><br><br><span class="hljs-built_in">test02</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>统计大小   — size</li><li>判断是否为空   — empty</li><li>交换容器   — swap</li></ul><h4 id="3-8-4-set插入和删除">3.8.4 set插入和删除</h4><p><strong>功能描述：</strong></p><ul><li>set容器进行插入数据和删除数据</li></ul><p><strong>函数原型：</strong></p><ul><li><code>insert(elem);</code>           //在容器中插入元素。</li><li><code>clear();</code>                    //清除所有元素</li><li><code>erase(pos);</code>              //删除pos迭代器所指的元素，返回下一个元素的迭代器。</li><li><code>erase(beg, end);</code>    //删除区间[beg,end)的所有元素 ，返回下一个元素的迭代器。</li><li><code>erase(elem);</code>            //删除容器中值为elem的元素。</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printSet</span><span class="hljs-params">(set&lt;<span class="hljs-type">int</span>&gt; &amp; s)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (set&lt;<span class="hljs-type">int</span>&gt;::iterator it = s.<span class="hljs-built_in">begin</span>(); it != s.<span class="hljs-built_in">end</span>(); it++)<br>&#123;<br>cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">//插入和删除</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>set&lt;<span class="hljs-type">int</span>&gt; s1;<br><span class="hljs-comment">//插入</span><br>s<span class="hljs-number">1.</span><span class="hljs-built_in">insert</span>(<span class="hljs-number">10</span>);<br>s<span class="hljs-number">1.</span><span class="hljs-built_in">insert</span>(<span class="hljs-number">30</span>);<br>s<span class="hljs-number">1.</span><span class="hljs-built_in">insert</span>(<span class="hljs-number">20</span>);<br>s<span class="hljs-number">1.</span><span class="hljs-built_in">insert</span>(<span class="hljs-number">40</span>);<br><span class="hljs-built_in">printSet</span>(s1);<br><br><span class="hljs-comment">//删除</span><br>s<span class="hljs-number">1.</span><span class="hljs-built_in">erase</span>(s<span class="hljs-number">1.</span><span class="hljs-built_in">begin</span>());<br><span class="hljs-built_in">printSet</span>(s1);<br><br>s<span class="hljs-number">1.</span><span class="hljs-built_in">erase</span>(<span class="hljs-number">30</span>);<br><span class="hljs-built_in">printSet</span>(s1);<br><br><span class="hljs-comment">//清空</span><br><span class="hljs-comment">//s1.erase(s1.begin(), s1.end());</span><br>s<span class="hljs-number">1.</span><span class="hljs-built_in">clear</span>();<br><span class="hljs-built_in">printSet</span>(s1);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>插入   — insert</li><li>删除   — erase</li><li>清空   — clear</li></ul><h4 id="3-8-5-set查找和统计">3.8.5 set查找和统计</h4><p><strong>功能描述：</strong></p><ul><li>对set容器进行查找数据以及统计数据</li></ul><p><strong>函数原型：</strong></p><ul><li><code>find(key);</code>                  //查找key是否存在,若存在，返回该键的元素的迭代器；若不存在，返回set.end();</li><li><code>count(key);</code>                //统计key的元素个数</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><br><span class="hljs-comment">//查找和统计</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>set&lt;<span class="hljs-type">int</span>&gt; s1;<br><span class="hljs-comment">//插入</span><br>s<span class="hljs-number">1.</span><span class="hljs-built_in">insert</span>(<span class="hljs-number">10</span>);<br>s<span class="hljs-number">1.</span><span class="hljs-built_in">insert</span>(<span class="hljs-number">30</span>);<br>s<span class="hljs-number">1.</span><span class="hljs-built_in">insert</span>(<span class="hljs-number">20</span>);<br>s<span class="hljs-number">1.</span><span class="hljs-built_in">insert</span>(<span class="hljs-number">40</span>);<br><br><span class="hljs-comment">//查找</span><br>set&lt;<span class="hljs-type">int</span>&gt;::iterator pos = s<span class="hljs-number">1.f</span>ind(<span class="hljs-number">30</span>);<br><br><span class="hljs-keyword">if</span> (pos != s<span class="hljs-number">1.</span><span class="hljs-built_in">end</span>())<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;找到了元素 ： &quot;</span> &lt;&lt; *pos &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;未找到元素&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">//统计</span><br><span class="hljs-type">int</span> num = s<span class="hljs-number">1.</span><span class="hljs-built_in">count</span>(<span class="hljs-number">30</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;num = &quot;</span> &lt;&lt; num &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>查找   —  find    （返回的是迭代器）</li><li>统计   —  count  （对于set，结果为0或者1）</li></ul><h4 id="3-8-6-set和multiset区别">3.8.6 set和multiset区别</h4><p><strong>学习目标：</strong></p><ul><li>掌握set和multiset的区别</li></ul><p><strong>区别：</strong></p><ul><li>set不可以插入重复数据，而multiset可以</li><li>set插入数据的同时会返回插入结果，表示插入是否成功</li><li>multiset不会检测数据，因此可以插入重复数据</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><br><span class="hljs-comment">//set和multiset区别</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>set&lt;<span class="hljs-type">int</span>&gt; s;<br>pair&lt;set&lt;<span class="hljs-type">int</span>&gt;::iterator, <span class="hljs-type">bool</span>&gt;  ret = s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">10</span>);<br><span class="hljs-keyword">if</span> (ret.second) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;第一次插入成功!&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;第一次插入失败!&quot;</span> &lt;&lt; endl;<br>&#125;<br><br>ret = s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">10</span>);<br><span class="hljs-keyword">if</span> (ret.second) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;第二次插入成功!&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;第二次插入失败!&quot;</span> &lt;&lt; endl;<br>&#125;<br>    <br><span class="hljs-comment">//multiset</span><br>multiset&lt;<span class="hljs-type">int</span>&gt; ms;<br>ms.<span class="hljs-built_in">insert</span>(<span class="hljs-number">10</span>);<br>ms.<span class="hljs-built_in">insert</span>(<span class="hljs-number">10</span>);<br><br><span class="hljs-keyword">for</span> (multiset&lt;<span class="hljs-type">int</span>&gt;::iterator it = ms.<span class="hljs-built_in">begin</span>(); it != ms.<span class="hljs-built_in">end</span>(); it++) &#123;<br>cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>如果不允许插入重复数据可以利用set</li><li>如果需要插入重复数据利用multiset</li></ul><h4 id="3-8-7-pair对组创建">3.8.7 pair对组创建</h4><p><strong>功能描述：</strong></p><ul><li>成对出现的数据，利用对组可以返回两个数据</li></ul><p><strong>两种创建方式：</strong></p><ul><li><code>pair&lt;type, type&gt; p ( value1, value2 );</code></li><li><code>pair&lt;type, type&gt; p = make_pair( value1, value2 );</code></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-comment">//对组创建</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function">pair&lt;string, <span class="hljs-type">int</span>&gt; <span class="hljs-title">p</span><span class="hljs-params">(string(<span class="hljs-string">&quot;Tom&quot;</span>), <span class="hljs-number">20</span>)</span></span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;姓名： &quot;</span> &lt;&lt;  p.first &lt;&lt; <span class="hljs-string">&quot; 年龄： &quot;</span> &lt;&lt; p.second &lt;&lt; endl;<br><br>pair&lt;string, <span class="hljs-type">int</span>&gt; p2 = <span class="hljs-built_in">make_pair</span>(<span class="hljs-string">&quot;Jerry&quot;</span>, <span class="hljs-number">10</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;姓名： &quot;</span> &lt;&lt; p<span class="hljs-number">2.f</span>irst &lt;&lt; <span class="hljs-string">&quot; 年龄： &quot;</span> &lt;&lt; p<span class="hljs-number">2.</span>second &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><p>两种方式都可以创建对组，记住一种即可</p><h4 id="3-8-8-set容器排序">3.8.8 set容器排序</h4><p>学习目标：</p><ul><li>set容器默认排序规则为从小到大，掌握如何改变排序规则</li></ul><p>主要技术点：</p><ul><li>利用仿函数，可以改变排序规则</li></ul><p><strong>示例一</strong>   set存放内置数据类型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCompare</span> <br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> v1, <span class="hljs-type">int</span> v2)</span> </span>&#123;<br><span class="hljs-keyword">return</span> v1 &gt; v2;<br>&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123;    <br>set&lt;<span class="hljs-type">int</span>&gt; s1;<br>s<span class="hljs-number">1.</span><span class="hljs-built_in">insert</span>(<span class="hljs-number">10</span>);<br>s<span class="hljs-number">1.</span><span class="hljs-built_in">insert</span>(<span class="hljs-number">40</span>);<br>s<span class="hljs-number">1.</span><span class="hljs-built_in">insert</span>(<span class="hljs-number">20</span>);<br>s<span class="hljs-number">1.</span><span class="hljs-built_in">insert</span>(<span class="hljs-number">30</span>);<br>s<span class="hljs-number">1.</span><span class="hljs-built_in">insert</span>(<span class="hljs-number">50</span>);<br><br><span class="hljs-comment">//默认从小到大</span><br><span class="hljs-keyword">for</span> (set&lt;<span class="hljs-type">int</span>&gt;::iterator it = s<span class="hljs-number">1.</span><span class="hljs-built_in">begin</span>(); it != s<span class="hljs-number">1.</span><span class="hljs-built_in">end</span>(); it++) &#123;<br>cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br><br><span class="hljs-comment">//指定排序规则</span><br>set&lt;<span class="hljs-type">int</span>,MyCompare&gt; s2;<br>s<span class="hljs-number">2.</span><span class="hljs-built_in">insert</span>(<span class="hljs-number">10</span>);<br>s<span class="hljs-number">2.</span><span class="hljs-built_in">insert</span>(<span class="hljs-number">40</span>);<br>s<span class="hljs-number">2.</span><span class="hljs-built_in">insert</span>(<span class="hljs-number">20</span>);<br>s<span class="hljs-number">2.</span><span class="hljs-built_in">insert</span>(<span class="hljs-number">30</span>);<br>s<span class="hljs-number">2.</span><span class="hljs-built_in">insert</span>(<span class="hljs-number">50</span>);<br><br><span class="hljs-keyword">for</span> (set&lt;<span class="hljs-type">int</span>, MyCompare&gt;::iterator it = s<span class="hljs-number">2.</span><span class="hljs-built_in">begin</span>(); it != s<span class="hljs-number">2.</span><span class="hljs-built_in">end</span>(); it++) &#123;<br>cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：利用仿函数可以指定set容器的排序规则</p><p><strong>示例二</strong> set存放自定义数据类型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Person</span>(string name, <span class="hljs-type">int</span> age)<br>&#123;<br><span class="hljs-keyword">this</span>-&gt;m_Name = name;<br><span class="hljs-keyword">this</span>-&gt;m_Age = age;<br>&#125;<br><br>string m_Name;<br><span class="hljs-type">int</span> m_Age;<br><br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">comparePerson</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">const</span> Person&amp; p1, <span class="hljs-type">const</span> Person &amp;p2)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//按照年龄进行排序  降序</span><br><span class="hljs-keyword">return</span> p<span class="hljs-number">1.</span>m_Age &gt; p<span class="hljs-number">2.</span>m_Age;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>set&lt;Person, comparePerson&gt; s;<br><br><span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-string">&quot;刘备&quot;</span>, <span class="hljs-number">23</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-string">&quot;关羽&quot;</span>, <span class="hljs-number">27</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p3</span><span class="hljs-params">(<span class="hljs-string">&quot;张飞&quot;</span>, <span class="hljs-number">25</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p4</span><span class="hljs-params">(<span class="hljs-string">&quot;赵云&quot;</span>, <span class="hljs-number">21</span>)</span></span>;<br><br>s.<span class="hljs-built_in">insert</span>(p1);<br>s.<span class="hljs-built_in">insert</span>(p2);<br>s.<span class="hljs-built_in">insert</span>(p3);<br>s.<span class="hljs-built_in">insert</span>(p4);<br><br><span class="hljs-keyword">for</span> (set&lt;Person, comparePerson&gt;::iterator it = s.<span class="hljs-built_in">begin</span>(); it != s.<span class="hljs-built_in">end</span>(); it++)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;姓名： &quot;</span> &lt;&lt; it-&gt;m_Name &lt;&lt; <span class="hljs-string">&quot; 年龄： &quot;</span> &lt;&lt; it-&gt;m_Age &lt;&lt; endl;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><p>对于自定义数据类型，set必须指定排序规则才可以插入数据</p><h3 id="3-9-map-multimap容器">3.9 map/ multimap容器</h3><h4 id="3-9-1-map基本概念">3.9.1 map基本概念</h4><p><strong>简介：</strong></p><ul><li>map中所有元素都是pair</li><li>pair中第一个元素为key（键值），起到索引作用，第二个元素为value（实值）</li><li>所有元素都会根据元素的键值自动排序</li></ul><p><strong>本质：</strong></p><ul><li>map/multimap属于<strong>关联式容器</strong>，底层结构是用二叉树实现。</li></ul><p><strong>优点：</strong></p><ul><li>可以根据key值快速找到value值</li></ul><p>map和multimap<strong>区别</strong>：</p><ul><li>map不允许容器中有重复key值元素</li><li>multimap允许容器中有重复key值元素</li></ul><h4 id="3-9-2-map构造和赋值">3.9.2  map构造和赋值</h4><p><strong>功能描述：</strong></p><ul><li>对map容器进行构造和赋值操作</li></ul><p><strong>函数原型：</strong></p><p><strong>构造：</strong></p><ul><li><code>map&lt;T1, T2&gt; mp;</code>                     //map默认构造函数:</li><li><code>map(const map &amp;mp);</code>             //拷贝构造函数</li></ul><p><strong>赋值：</strong></p><ul><li><code>map&amp; operator=(const map &amp;mp);</code>    //重载等号操作符</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printMap</span><span class="hljs-params">(map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;&amp;m)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;::iterator it = m.<span class="hljs-built_in">begin</span>(); it != m.<span class="hljs-built_in">end</span>(); it++)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;key = &quot;</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="hljs-string">&quot; value = &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;<br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;m; <span class="hljs-comment">//默认构造</span><br>m.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>));<br>m.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;(<span class="hljs-number">2</span>, <span class="hljs-number">20</span>));<br>m.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;(<span class="hljs-number">3</span>, <span class="hljs-number">30</span>));<br><span class="hljs-built_in">printMap</span>(m);<br><br>map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;<span class="hljs-built_in">m2</span>(m); <span class="hljs-comment">//拷贝构造</span><br><span class="hljs-built_in">printMap</span>(m2);<br><br>map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;m3;<br>m3 = m2; <span class="hljs-comment">//赋值</span><br><span class="hljs-built_in">printMap</span>(m3);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：map中所有元素都是成对出现，插入数据时候要使用对组</p><h4 id="3-9-3-map大小和交换">3.9.3 map大小和交换</h4><p><strong>功能描述：</strong></p><ul><li>统计map容器大小以及交换map容器</li></ul><p>函数原型：</p><ul><li><code>size();</code>          //返回容器中元素的数目</li><li><code>empty();</code>        //判断容器是否为空</li><li><code>swap(st);</code>      //交换两个集合容器</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printMap</span><span class="hljs-params">(map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;&amp;m)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;::iterator it = m.<span class="hljs-built_in">begin</span>(); it != m.<span class="hljs-built_in">end</span>(); it++)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;key = &quot;</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="hljs-string">&quot; value = &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;<br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;m;<br>m.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>));<br>m.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;(<span class="hljs-number">2</span>, <span class="hljs-number">20</span>));<br>m.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;(<span class="hljs-number">3</span>, <span class="hljs-number">30</span>));<br><br><span class="hljs-keyword">if</span> (m.<span class="hljs-built_in">empty</span>())<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;m为空&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;m不为空&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;m的大小为： &quot;</span> &lt;&lt; m.<span class="hljs-built_in">size</span>() &lt;&lt; endl;<br>&#125;<br>&#125;<br><br><br><span class="hljs-comment">//交换</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;m;<br>m.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>));<br>m.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;(<span class="hljs-number">2</span>, <span class="hljs-number">20</span>));<br>m.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;(<span class="hljs-number">3</span>, <span class="hljs-number">30</span>));<br><br>map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;m2;<br>m<span class="hljs-number">2.</span><span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;(<span class="hljs-number">4</span>, <span class="hljs-number">100</span>));<br>m<span class="hljs-number">2.</span><span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;(<span class="hljs-number">5</span>, <span class="hljs-number">200</span>));<br>m<span class="hljs-number">2.</span><span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;(<span class="hljs-number">6</span>, <span class="hljs-number">300</span>));<br><br>cout &lt;&lt; <span class="hljs-string">&quot;交换前&quot;</span> &lt;&lt; endl;<br><span class="hljs-built_in">printMap</span>(m);<br><span class="hljs-built_in">printMap</span>(m2);<br><br>cout &lt;&lt; <span class="hljs-string">&quot;交换后&quot;</span> &lt;&lt; endl;<br>m.<span class="hljs-built_in">swap</span>(m2);<br><span class="hljs-built_in">printMap</span>(m);<br><span class="hljs-built_in">printMap</span>(m2);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">test02</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>统计大小   — size</li><li>判断是否为空   — empty</li><li>交换容器   — swap</li></ul><h4 id="3-9-4-map插入和删除">3.9.4 map插入和删除</h4><p><strong>功能描述：</strong></p><ul><li>map容器进行插入数据和删除数据</li></ul><p><strong>函数原型：</strong></p><ul><li><code>insert(elem);</code>           //在容器中插入元素。</li><li><code>clear();</code>                    //清除所有元素</li><li><code>erase(pos);</code>              //删除pos迭代器所指的元素，返回下一个元素的迭代器。</li><li><code>erase(beg, end);</code>    //删除区间[beg,end)的所有元素 ，返回下一个元素的迭代器。</li><li><code>erase(key);</code>            //删除容器中值为key的元素。</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printMap</span><span class="hljs-params">(map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;&amp;m)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;::iterator it = m.<span class="hljs-built_in">begin</span>(); it != m.<span class="hljs-built_in">end</span>(); it++)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;key = &quot;</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="hljs-string">&quot; value = &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;<br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//插入</span><br>map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; m;<br><span class="hljs-comment">//第一种插入方式</span><br>m.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>));<br><span class="hljs-comment">//第二种插入方式</span><br>m.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">make_pair</span>(<span class="hljs-number">2</span>, <span class="hljs-number">20</span>));<br><span class="hljs-comment">//第三种插入方式</span><br>m.<span class="hljs-built_in">insert</span>(map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;::<span class="hljs-built_in">value_type</span>(<span class="hljs-number">3</span>, <span class="hljs-number">30</span>));<br><span class="hljs-comment">//第四种插入方式</span><br>m[<span class="hljs-number">4</span>] = <span class="hljs-number">40</span>; <br><span class="hljs-built_in">printMap</span>(m);<br><br><span class="hljs-comment">//删除</span><br>m.<span class="hljs-built_in">erase</span>(m.<span class="hljs-built_in">begin</span>());<br><span class="hljs-built_in">printMap</span>(m);<br><br>m.<span class="hljs-built_in">erase</span>(<span class="hljs-number">3</span>);<br><span class="hljs-built_in">printMap</span>(m);<br><br><span class="hljs-comment">//清空</span><br>m.<span class="hljs-built_in">erase</span>(m.<span class="hljs-built_in">begin</span>(),m.<span class="hljs-built_in">end</span>());<br>m.<span class="hljs-built_in">clear</span>();<br><span class="hljs-built_in">printMap</span>(m);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>map插入方式很多，记住其一即可</li></ul><ul><li>插入   — insert</li><li>删除   — erase</li><li>清空   — clear</li></ul><h4 id="3-9-5-map查找和统计">3.9.5 map查找和统计</h4><p><strong>功能描述：</strong></p><ul><li>对map容器进行查找数据以及统计数据</li></ul><p><strong>函数原型：</strong></p><ul><li><code>find(key);</code>                  //查找key是否存在,若存在，返回该键的元素的迭代器；若不存在，返回set.end();</li><li><code>count(key);</code>                //统计key的元素个数</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><br><span class="hljs-comment">//查找和统计</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;m; <br>m.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>));<br>m.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;(<span class="hljs-number">2</span>, <span class="hljs-number">20</span>));<br>m.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;(<span class="hljs-number">3</span>, <span class="hljs-number">30</span>));<br><br><span class="hljs-comment">//查找</span><br>map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;::iterator pos = m.<span class="hljs-built_in">find</span>(<span class="hljs-number">3</span>);<br><br><span class="hljs-keyword">if</span> (pos != m.<span class="hljs-built_in">end</span>())<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;找到了元素 key = &quot;</span> &lt;&lt; (*pos).first &lt;&lt; <span class="hljs-string">&quot; value = &quot;</span> &lt;&lt; (*pos).second &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;未找到元素&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">//统计</span><br><span class="hljs-type">int</span> num = m.<span class="hljs-built_in">count</span>(<span class="hljs-number">3</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;num = &quot;</span> &lt;&lt; num &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>查找   —  find    （返回的是迭代器）</li><li>统计   —  count  （对于map，结果为0或者1）</li></ul><h4 id="3-9-6-map容器排序">3.9.6 map容器排序</h4><p><strong>学习目标：</strong></p><ul><li>map容器默认排序规则为 按照key值进行 从小到大排序，掌握如何改变排序规则</li></ul><p><strong>主要技术点:</strong></p><ul><li>利用仿函数，可以改变排序规则</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCompare</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> v1, <span class="hljs-type">int</span> v2)</span> </span>&#123;<br><span class="hljs-keyword">return</span> v1 &gt; v2;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//默认从小到大排序</span><br><span class="hljs-comment">//利用仿函数实现从大到小排序</span><br>map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>, MyCompare&gt; m;<br><br>m.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">make_pair</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>));<br>m.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">make_pair</span>(<span class="hljs-number">2</span>, <span class="hljs-number">20</span>));<br>m.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">make_pair</span>(<span class="hljs-number">3</span>, <span class="hljs-number">30</span>));<br>m.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">make_pair</span>(<span class="hljs-number">4</span>, <span class="hljs-number">40</span>));<br>m.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">make_pair</span>(<span class="hljs-number">5</span>, <span class="hljs-number">50</span>));<br><br><span class="hljs-keyword">for</span> (map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>, MyCompare&gt;::iterator it = m.<span class="hljs-built_in">begin</span>(); it != m.<span class="hljs-built_in">end</span>(); it++) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;key:&quot;</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="hljs-string">&quot; value:&quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>利用仿函数可以指定map容器的排序规则</li><li>对于自定义数据类型，map必须要指定排序规则,同set容器</li></ul><h3 id="3-10-案例-员工分组">3.10 案例-员工分组</h3><h4 id="3-10-1-案例描述">3.10.1 案例描述</h4><ul><li>公司今天招聘了10个员工（ABCDEFGHIJ），10名员工进入公司之后，需要指派员工在那个部门工作</li><li>员工信息有: 姓名  工资组成；部门分为：策划、美术、研发</li><li>随机给10名员工分配部门和工资</li><li>通过multimap进行信息的插入  key(部门编号) value(员工)</li><li>分部门显示员工信息</li></ul><h4 id="3-10-2-实现步骤">3.10.2 实现步骤</h4><ol><li>创建10名员工，放到vector中</li><li>遍历vector容器，取出每个员工，进行随机分组</li><li>分组后，将员工部门编号作为key，具体员工作为value，放入到multimap容器中</li><li>分部门显示员工信息</li></ol><p><strong>案例代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctime&gt;</span></span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">- 公司今天招聘了10个员工（ABCDEFGHIJ），10名员工进入公司之后，需要指派员工在那个部门工作</span><br><span class="hljs-comment">- 员工信息有: 姓名  工资组成；部门分为：策划、美术、研发</span><br><span class="hljs-comment">- 随机给10名员工分配部门和工资</span><br><span class="hljs-comment">- 通过multimap进行信息的插入  key(部门编号) value(员工)</span><br><span class="hljs-comment">- 分部门显示员工信息</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CEHUA  0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MEISHU 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> YANFA  2</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Worker</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>string m_Name;<br><span class="hljs-type">int</span> m_Salary;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">createWorker</span><span class="hljs-params">(vector&lt;Worker&gt;&amp;v)</span></span><br><span class="hljs-function"></span>&#123;<br>string nameSeed = <span class="hljs-string">&quot;ABCDEFGHIJ&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br>Worker worker;<br>worker.m_Name = <span class="hljs-string">&quot;员工&quot;</span>;<br>worker.m_Name += nameSeed[i];<br><br>worker.m_Salary = <span class="hljs-built_in">rand</span>() % <span class="hljs-number">10000</span> + <span class="hljs-number">10000</span>; <span class="hljs-comment">// 10000 ~ 19999</span><br><span class="hljs-comment">//将员工放入到容器中</span><br>v.<span class="hljs-built_in">push_back</span>(worker);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//员工分组</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setGroup</span><span class="hljs-params">(vector&lt;Worker&gt;&amp;v,multimap&lt;<span class="hljs-type">int</span>,Worker&gt;&amp;m)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (vector&lt;Worker&gt;::iterator it = v.<span class="hljs-built_in">begin</span>(); it != v.<span class="hljs-built_in">end</span>(); it++)<br>&#123;<br><span class="hljs-comment">//产生随机部门编号</span><br><span class="hljs-type">int</span> deptId = <span class="hljs-built_in">rand</span>() % <span class="hljs-number">3</span>; <span class="hljs-comment">// 0 1 2 </span><br><br><span class="hljs-comment">//将员工插入到分组中</span><br><span class="hljs-comment">//key部门编号，value具体员工</span><br>m.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">make_pair</span>(deptId, *it));<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showWorkerByGourp</span><span class="hljs-params">(multimap&lt;<span class="hljs-type">int</span>,Worker&gt;&amp;m)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// 0  A  B  C   1  D  E   2  F G ...</span><br>cout &lt;&lt; <span class="hljs-string">&quot;策划部门：&quot;</span> &lt;&lt; endl;<br><br>multimap&lt;<span class="hljs-type">int</span>,Worker&gt;::iterator pos = m.<span class="hljs-built_in">find</span>(CEHUA);<br><span class="hljs-type">int</span> count = m.<span class="hljs-built_in">count</span>(CEHUA); <span class="hljs-comment">// 统计具体人数</span><br><span class="hljs-type">int</span> index = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (; pos != m.<span class="hljs-built_in">end</span>() &amp;&amp; index &lt; count; pos++ , index++)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;姓名： &quot;</span> &lt;&lt; pos-&gt;second.m_Name &lt;&lt; <span class="hljs-string">&quot; 工资： &quot;</span> &lt;&lt; pos-&gt;second.m_Salary &lt;&lt; endl;<br>&#125;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;----------------------&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;美术部门： &quot;</span> &lt;&lt; endl;<br>pos = m.<span class="hljs-built_in">find</span>(MEISHU);<br>count = m.<span class="hljs-built_in">count</span>(MEISHU); <span class="hljs-comment">// 统计具体人数</span><br>index = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (; pos != m.<span class="hljs-built_in">end</span>() &amp;&amp; index &lt; count; pos++, index++)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;姓名： &quot;</span> &lt;&lt; pos-&gt;second.m_Name &lt;&lt; <span class="hljs-string">&quot; 工资： &quot;</span> &lt;&lt; pos-&gt;second.m_Salary &lt;&lt; endl;<br>&#125;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;----------------------&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;研发部门： &quot;</span> &lt;&lt; endl;<br>pos = m.<span class="hljs-built_in">find</span>(YANFA);<br>count = m.<span class="hljs-built_in">count</span>(YANFA); <span class="hljs-comment">// 统计具体人数</span><br>index = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (; pos != m.<span class="hljs-built_in">end</span>() &amp;&amp; index &lt; count; pos++, index++)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;姓名： &quot;</span> &lt;&lt; pos-&gt;second.m_Name &lt;&lt; <span class="hljs-string">&quot; 工资： &quot;</span> &lt;&lt; pos-&gt;second.m_Salary &lt;&lt; endl;<br>&#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">srand</span>((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)<span class="hljs-built_in">time</span>(<span class="hljs-literal">NULL</span>));<br><br><span class="hljs-comment">//1、创建员工</span><br>vector&lt;Worker&gt;vWorker;<br><span class="hljs-built_in">createWorker</span>(vWorker);<br><br><span class="hljs-comment">//2、员工分组</span><br>multimap&lt;<span class="hljs-type">int</span>, Worker&gt;mWorker;<br><span class="hljs-built_in">setGroup</span>(vWorker, mWorker);<br><br><br><span class="hljs-comment">//3、分组显示员工</span><br><span class="hljs-built_in">showWorkerByGourp</span>(mWorker);<br><br><span class="hljs-comment">////测试</span><br><span class="hljs-comment">//for (vector&lt;Worker&gt;::iterator it = vWorker.begin(); it != vWorker.end(); it++)</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot; 工资： &quot; &lt;&lt; it-&gt;m_Salary &lt;&lt; endl;</span><br><span class="hljs-comment">//&#125;</span><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>当数据以键值对形式存在，可以考虑用map 或 multimap</li></ul><h2 id="4-STL-函数对象">4 STL- 函数对象</h2><h3 id="4-1-函数对象">4.1 函数对象</h3><h4 id="4-1-1-函数对象概念">4.1.1 函数对象概念</h4><p><strong>概念：</strong></p><ul><li>重载<strong>函数调用操作符</strong>的类，其对象常称为<strong>函数对象</strong></li><li><strong>函数对象</strong>使用重载的()时，行为类似函数调用，也叫<strong>仿函数</strong></li></ul><p><strong>本质：</strong></p><p>函数对象(仿函数)是一个<strong>类</strong>，不是一个函数</p><h4 id="4-1-2-函数对象使用">4.1.2  函数对象使用</h4><p><strong>特点：</strong></p><ul><li>函数对象在使用时，可以像普通函数那样调用, 可以有参数，可以有返回值</li><li>函数对象超出普通函数的概念，函数对象可以有自己的状态</li><li>函数对象可以作为参数传递</li></ul><p><strong>示例:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-comment">//1、函数对象在使用时，可以像普通函数那样调用, 可以有参数，可以有返回值</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAdd</span><br>&#123;<br><span class="hljs-keyword">public</span> :<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> v1,<span class="hljs-type">int</span> v2)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> v1 + v2;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>MyAdd myAdd;<br>cout &lt;&lt; <span class="hljs-built_in">myAdd</span>(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>) &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">//2、函数对象可以有自己的状态</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyPrint</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">MyPrint</span>()<br>&#123;<br>count = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(string test)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; test &lt;&lt; endl;<br>count++; <span class="hljs-comment">//统计使用次数</span><br>&#125;<br><br><span class="hljs-type">int</span> count; <span class="hljs-comment">//内部自己的状态</span><br>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>MyPrint myPrint;<br><span class="hljs-built_in">myPrint</span>(<span class="hljs-string">&quot;hello world&quot;</span>);<br><span class="hljs-built_in">myPrint</span>(<span class="hljs-string">&quot;hello world&quot;</span>);<br><span class="hljs-built_in">myPrint</span>(<span class="hljs-string">&quot;hello world&quot;</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;myPrint调用次数为： &quot;</span> &lt;&lt; myPrint.count &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">//3、函数对象可以作为参数传递</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">doPrint</span><span class="hljs-params">(MyPrint &amp;mp , string test)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">mp</span>(test);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test03</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>MyPrint myPrint;<br><span class="hljs-built_in">doPrint</span>(myPrint, <span class="hljs-string">&quot;Hello C++&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//test01();</span><br><span class="hljs-comment">//test02();</span><br><span class="hljs-built_in">test03</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>仿函数写法非常灵活，可以作为参数进行传递。</li></ul><h3 id="4-2-谓词">4.2  谓词</h3><h4 id="4-2-1-谓词概念">4.2.1 谓词概念</h4><p><strong>概念：</strong></p><ul><li>返回bool类型的仿函数称为<strong>谓词</strong></li><li>如果operator()接受一个参数，那么叫做一元谓词</li><li>如果operator()接受两个参数，那么叫做二元谓词</li></ul><h4 id="4-2-2-一元谓词">4.2.2 一元谓词</h4><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-comment">//1.一元谓词</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">GreaterFive</span>&#123;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> </span>&#123;<br><span class="hljs-keyword">return</span> val &gt; <span class="hljs-number">5</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br><br>vector&lt;<span class="hljs-type">int</span>&gt; v;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br>v.<span class="hljs-built_in">push_back</span>(i);<br>&#125;<br><br>vector&lt;<span class="hljs-type">int</span>&gt;::iterator it = <span class="hljs-built_in">find_if</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">GreaterFive</span>());<br><span class="hljs-keyword">if</span> (it == v.<span class="hljs-built_in">end</span>()) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;没找到!&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;找到:&quot;</span> &lt;&lt; *it &lt;&lt; endl;<br>&#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：参数只有一个的谓词，称为一元谓词</p><h4 id="4-2-3-二元谓词">4.2.3 二元谓词</h4><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-comment">//二元谓词</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCompare</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> num1, <span class="hljs-type">int</span> num2)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> num1 &gt; num2;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt; v;<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">10</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">40</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">20</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">30</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">50</span>);<br><br><span class="hljs-comment">//默认从小到大</span><br><span class="hljs-built_in">sort</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>());<br><span class="hljs-keyword">for</span> (vector&lt;<span class="hljs-type">int</span>&gt;::iterator it = v.<span class="hljs-built_in">begin</span>(); it != v.<span class="hljs-built_in">end</span>(); it++)<br>&#123;<br>cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;----------------------------&quot;</span> &lt;&lt; endl;<br><br><span class="hljs-comment">//使用函数对象改变算法策略，排序从大到小</span><br><span class="hljs-built_in">sort</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">MyCompare</span>());<br><span class="hljs-keyword">for</span> (vector&lt;<span class="hljs-type">int</span>&gt;::iterator it = v.<span class="hljs-built_in">begin</span>(); it != v.<span class="hljs-built_in">end</span>(); it++)<br>&#123;<br>cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：参数只有两个的谓词，称为二元谓词</p><h3 id="4-3-内建函数对象">4.3 内建函数对象</h3><h4 id="4-3-1-内建函数对象意义">4.3.1 内建函数对象意义</h4><p><strong>概念：</strong></p><ul><li>STL内建了一些函数对象</li></ul><p><strong>分类:</strong></p><ul><li><p>算术仿函数</p></li><li><p>关系仿函数</p></li><li><p>逻辑仿函数</p></li></ul><p><strong>用法：</strong></p><ul><li>这些仿函数所产生的对象，用法和一般函数完全相同</li><li>使用内建函数对象，需要引入头文件 <code>#include&lt;functional&gt;</code></li></ul><h4 id="4-3-2-算术仿函数">4.3.2 算术仿函数</h4><p><strong>功能描述：</strong></p><ul><li>实现四则运算</li><li>其中negate是一元运算，其他都是二元运算</li></ul><p><strong>仿函数原型：</strong></p><ul><li><code>template&lt;class T&gt; T plus&lt;T&gt;</code>                //加法仿函数</li><li><code>template&lt;class T&gt; T minus&lt;T&gt;</code>              //减法仿函数</li><li><code>template&lt;class T&gt; T multiplies&lt;T&gt;</code>    //乘法仿函数</li><li><code>template&lt;class T&gt; T divides&lt;T&gt;</code>         //除法仿函数</li><li><code>template&lt;class T&gt; T modulus&lt;T&gt;</code>         //取模仿函数</li><li><code>template&lt;class T&gt; T negate&lt;T&gt;</code>           //取反仿函数</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;functional&gt;</span></span><br><span class="hljs-comment">//negate</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>negate&lt;<span class="hljs-type">int</span>&gt; n;<br>cout &lt;&lt; <span class="hljs-built_in">n</span>(<span class="hljs-number">50</span>) &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">//plus</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>plus&lt;<span class="hljs-type">int</span>&gt; p;<br>cout &lt;&lt; <span class="hljs-built_in">p</span>(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>) &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><span class="hljs-built_in">test02</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：使用内建函数对象时，需要引入头文件 <code>#include &lt;functional&gt;</code></p><h4 id="4-3-3-关系仿函数">4.3.3 关系仿函数</h4><p><strong>功能描述：</strong></p><ul><li>实现关系对比</li></ul><p><strong>仿函数原型：</strong></p><ul><li><code>template&lt;class T&gt; bool equal_to&lt;T&gt;</code>                    //等于</li><li><code>template&lt;class T&gt; bool not_equal_to&lt;T&gt;</code>            //不等于</li><li><code>template&lt;class T&gt; bool greater&lt;T&gt;</code>                      //大于</li><li><code>template&lt;class T&gt; bool greater_equal&lt;T&gt;</code>          //大于等于</li><li><code>template&lt;class T&gt; bool less&lt;T&gt;</code>                           //小于</li><li><code>template&lt;class T&gt; bool less_equal&lt;T&gt;</code>               //小于等于</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;functional&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCompare</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> v1,<span class="hljs-type">int</span> v2)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> v1 &gt; v2;<br>&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt; v;<br><br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">10</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">30</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">50</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">40</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">20</span>);<br><br><span class="hljs-keyword">for</span> (vector&lt;<span class="hljs-type">int</span>&gt;::iterator it = v.<span class="hljs-built_in">begin</span>(); it != v.<span class="hljs-built_in">end</span>(); it++) &#123;<br>cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br><br><span class="hljs-comment">//自己实现仿函数</span><br><span class="hljs-comment">//sort(v.begin(), v.end(), MyCompare());</span><br><span class="hljs-comment">//STL内建仿函数  大于仿函数</span><br><span class="hljs-built_in">sort</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">greater</span>&lt;<span class="hljs-type">int</span>&gt;());<br><br><span class="hljs-keyword">for</span> (vector&lt;<span class="hljs-type">int</span>&gt;::iterator it = v.<span class="hljs-built_in">begin</span>(); it != v.<span class="hljs-built_in">end</span>(); it++) &#123;<br>cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：关系仿函数中最常用的就是greater&lt;&gt;大于</p><h4 id="4-3-4-逻辑仿函数">4.3.4 逻辑仿函数</h4><p><strong>功能描述：</strong></p><ul><li>实现逻辑运算</li></ul><p><strong>函数原型：</strong></p><ul><li><code>template&lt;class T&gt; bool logical_and&lt;T&gt;</code>              //逻辑与</li><li><code>template&lt;class T&gt; bool logical_or&lt;T&gt;</code>                //逻辑或</li><li><code>template&lt;class T&gt; bool logical_not&lt;T&gt;</code>              //逻辑非</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;functional&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>vector&lt;<span class="hljs-type">bool</span>&gt; v;<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-literal">true</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-literal">false</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-literal">true</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-literal">false</span>);<br><br><span class="hljs-keyword">for</span> (vector&lt;<span class="hljs-type">bool</span>&gt;::iterator it = v.<span class="hljs-built_in">begin</span>();it!= v.<span class="hljs-built_in">end</span>();it++)<br>&#123;<br>cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br><br><span class="hljs-comment">//逻辑非  将v容器搬运到v2中，并执行逻辑非运算</span><br>vector&lt;<span class="hljs-type">bool</span>&gt; v2;<br>v<span class="hljs-number">2.</span><span class="hljs-built_in">resize</span>(v.<span class="hljs-built_in">size</span>());<br><span class="hljs-built_in">transform</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(),  v<span class="hljs-number">2.</span><span class="hljs-built_in">begin</span>(), <span class="hljs-built_in">logical_not</span>&lt;<span class="hljs-type">bool</span>&gt;());<br><span class="hljs-keyword">for</span> (vector&lt;<span class="hljs-type">bool</span>&gt;::iterator it = v<span class="hljs-number">2.</span><span class="hljs-built_in">begin</span>(); it != v<span class="hljs-number">2.</span><span class="hljs-built_in">end</span>(); it++)<br>&#123;<br>cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：逻辑仿函数实际应用较少，了解即可</p><h2 id="5-STL-常用算法">5 STL- 常用算法</h2><p><strong>概述</strong>:</p><ul><li><p>算法主要是由头文件<code>&lt;algorithm&gt;</code> <code>&lt;functional&gt;</code> <code>&lt;numeric&gt;</code>组成。</p></li><li><p><code>&lt;algorithm&gt;</code>是所有STL头文件中最大的一个，范围涉及到比较、 交换、查找、遍历操作、复制、修改等等</p></li><li><p><code>&lt;numeric&gt;</code>体积很小，只包括几个在序列上面进行简单数学运算的模板函数</p></li><li><p><code>&lt;functional&gt;</code>定义了一些模板类,用以声明函数对象。</p></li></ul><h3 id="5-1-常用遍历算法">5.1 常用遍历算法</h3><p><strong>学习目标：</strong></p><ul><li>掌握常用的遍历算法</li></ul><p><strong>算法简介：</strong></p><ul><li><code>for_each</code>     //遍历容器</li><li><code>transform</code>   //搬运容器到另一个容器中</li></ul><h4 id="5-1-1-for-each">5.1.1 for_each</h4><p><strong>功能描述：</strong></p><ul><li>实现遍历容器</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>for_each(iterator beg, iterator end, _func);  </code></p><p>// 遍历算法 遍历容器元素</p><p>// beg 开始迭代器</p><p>// end 结束迭代器</p><p>// _func 函数或者函数对象</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-comment">//普通函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print01</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> </span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-comment">//函数对象</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">print02</span> <br>&#123;<br> <span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> </span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-comment">//for_each算法基本用法</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br><br>vector&lt;<span class="hljs-type">int</span>&gt; v;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) <br>&#123;<br>v.<span class="hljs-built_in">push_back</span>(i);<br>&#125;<br><br><span class="hljs-comment">//遍历算法</span><br>for_each(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), print01);<br>cout &lt;&lt; endl;<br><br>for_each(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">print02</span>());<br>cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>**总结：**for_each在实际开发中是最常用遍历算法，需要熟练掌握</p><h4 id="5-1-2-transform">5.1.2 transform</h4><p><strong>功能描述：</strong></p><ul><li>搬运容器到另一个容器中</li></ul><p><strong>函数原型：</strong></p><ul><li><code>transform(iterator beg1, iterator end1, iterator beg2, _func);</code></li></ul><p>//beg1 源容器开始迭代器</p><p>//end1 源容器结束迭代器</p><p>//beg2 目标容器开始迭代器</p><p>//_func 函数或者函数对象</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-comment">//常用遍历算法  搬运 transform</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TransForm</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> val;<br>&#125;<br><br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyPrint</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt;v;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br>v.<span class="hljs-built_in">push_back</span>(i);<br>&#125;<br><br>vector&lt;<span class="hljs-type">int</span>&gt;vTarget; <span class="hljs-comment">//目标容器</span><br><br>vTarget.<span class="hljs-built_in">resize</span>(v.<span class="hljs-built_in">size</span>()); <span class="hljs-comment">// 目标容器需要提前开辟空间</span><br><br><span class="hljs-built_in">transform</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), vTarget.<span class="hljs-built_in">begin</span>(), <span class="hljs-built_in">TransForm</span>());<br><br>for_each(vTarget.<span class="hljs-built_in">begin</span>(), vTarget.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">MyPrint</span>());<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>总结：</strong> 搬运的目标容器必须要提前开辟空间，否则无法正常搬运</p><h3 id="5-2-常用查找算法">5.2 常用查找算法</h3><p>学习目标：</p><ul><li>掌握常用的查找算法</li></ul><p><strong>算法简介：</strong></p><ul><li><code>find</code>                     //查找元素</li><li><code>find_if</code>               //按条件查找元素</li><li><code>adjacent_find</code>    //查找相邻重复元素</li><li><code>binary_search</code>    //二分查找法</li><li><code>count</code>                   //统计元素个数</li><li><code>count_if</code>             //按条件统计元素个数</li></ul><h4 id="5-2-1-find">5.2.1 find</h4><p><strong>功能描述：</strong></p><ul><li>查找指定元素，找到返回指定元素的迭代器，找不到返回结束迭代器end()</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>find(iterator beg, iterator end, value);  </code></p><p>// 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</p><p>// beg 开始迭代器</p><p>// end 结束迭代器</p><p>// value 查找的元素</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br><br>vector&lt;<span class="hljs-type">int</span>&gt; v;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>v.<span class="hljs-built_in">push_back</span>(i + <span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-comment">//查找容器中是否有 5 这个元素</span><br>vector&lt;<span class="hljs-type">int</span>&gt;::iterator it = <span class="hljs-built_in">find</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-number">5</span>);<br><span class="hljs-keyword">if</span> (it == v.<span class="hljs-built_in">end</span>()) <br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;没有找到!&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span> <br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;找到:&quot;</span> &lt;&lt; *it &lt;&lt; endl;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Person</span>(string name, <span class="hljs-type">int</span> age) <br>&#123;<br><span class="hljs-keyword">this</span>-&gt;m_Name = name;<br><span class="hljs-keyword">this</span>-&gt;m_Age = age;<br>&#125;<br><span class="hljs-comment">//重载==</span><br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>==(<span class="hljs-type">const</span> Person&amp; p) <br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;m_Name == p.m_Name &amp;&amp; <span class="hljs-keyword">this</span>-&gt;m_Age == p.m_Age) <br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span>:<br>string m_Name;<br><span class="hljs-type">int</span> m_Age;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span> </span>&#123;<br><br>vector&lt;Person&gt; v;<br><br><span class="hljs-comment">//创建数据</span><br><span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-number">10</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-string">&quot;bbb&quot;</span>, <span class="hljs-number">20</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p3</span><span class="hljs-params">(<span class="hljs-string">&quot;ccc&quot;</span>, <span class="hljs-number">30</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p4</span><span class="hljs-params">(<span class="hljs-string">&quot;ddd&quot;</span>, <span class="hljs-number">40</span>)</span></span>;<br><br>v.<span class="hljs-built_in">push_back</span>(p1);<br>v.<span class="hljs-built_in">push_back</span>(p2);<br>v.<span class="hljs-built_in">push_back</span>(p3);<br>v.<span class="hljs-built_in">push_back</span>(p4);<br><br>vector&lt;Person&gt;::iterator it = <span class="hljs-built_in">find</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), p2);<br><span class="hljs-keyword">if</span> (it == v.<span class="hljs-built_in">end</span>()) <br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;没有找到!&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span> <br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;找到姓名:&quot;</span> &lt;&lt; it-&gt;m_Name &lt;&lt; <span class="hljs-string">&quot; 年龄: &quot;</span> &lt;&lt; it-&gt;m_Age &lt;&lt; endl;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结： 利用find可以在容器中找指定的元素，返回值是<strong>迭代器</strong></p><h4 id="5-2-2-find-if">5.2.2 find_if</h4><p><strong>功能描述：</strong></p><ul><li>按条件查找元素</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>find_if(iterator beg, iterator end, _Pred);  </code></p><p>// 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</p><p>// beg 开始迭代器</p><p>// end 结束迭代器</p><p>// _Pred 函数或者谓词（返回bool类型的仿函数）</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-comment">//内置数据类型</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GreaterFive</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> val &gt; <span class="hljs-number">5</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br><br>vector&lt;<span class="hljs-type">int</span>&gt; v;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>v.<span class="hljs-built_in">push_back</span>(i + <span class="hljs-number">1</span>);<br>&#125;<br><br>vector&lt;<span class="hljs-type">int</span>&gt;::iterator it = <span class="hljs-built_in">find_if</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">GreaterFive</span>());<br><span class="hljs-keyword">if</span> (it == v.<span class="hljs-built_in">end</span>()) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;没有找到!&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;找到大于5的数字:&quot;</span> &lt;&lt; *it &lt;&lt; endl;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//自定义数据类型</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Person</span>(string name, <span class="hljs-type">int</span> age)<br>&#123;<br><span class="hljs-keyword">this</span>-&gt;m_Name = name;<br><span class="hljs-keyword">this</span>-&gt;m_Age = age;<br>&#125;<br><span class="hljs-keyword">public</span>:<br>string m_Name;<br><span class="hljs-type">int</span> m_Age;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Greater20</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(Person &amp;p)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> p.m_Age &gt; <span class="hljs-number">20</span>;<br>&#125;<br><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span> </span>&#123;<br><br>vector&lt;Person&gt; v;<br><br><span class="hljs-comment">//创建数据</span><br><span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-number">10</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-string">&quot;bbb&quot;</span>, <span class="hljs-number">20</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p3</span><span class="hljs-params">(<span class="hljs-string">&quot;ccc&quot;</span>, <span class="hljs-number">30</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p4</span><span class="hljs-params">(<span class="hljs-string">&quot;ddd&quot;</span>, <span class="hljs-number">40</span>)</span></span>;<br><br>v.<span class="hljs-built_in">push_back</span>(p1);<br>v.<span class="hljs-built_in">push_back</span>(p2);<br>v.<span class="hljs-built_in">push_back</span>(p3);<br>v.<span class="hljs-built_in">push_back</span>(p4);<br><br>vector&lt;Person&gt;::iterator it = <span class="hljs-built_in">find_if</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">Greater20</span>());<br><span class="hljs-keyword">if</span> (it == v.<span class="hljs-built_in">end</span>())<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;没有找到!&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;找到姓名:&quot;</span> &lt;&lt; it-&gt;m_Name &lt;&lt; <span class="hljs-string">&quot; 年龄: &quot;</span> &lt;&lt; it-&gt;m_Age &lt;&lt; endl;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//test01();</span><br><br><span class="hljs-built_in">test02</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：find_if按条件查找使查找更加灵活，提供的仿函数可以改变不同的策略</p><h4 id="5-2-3-adjacent-find">5.2.3 adjacent_find</h4><p><strong>功能描述：</strong></p><ul><li>查找相邻重复元素</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>adjacent_find(iterator beg, iterator end);  </code></p><p>// 查找相邻重复元素,返回相邻元素的第一个位置的迭代器</p><p>// beg 开始迭代器</p><p>// end 结束迭代器</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt; v;<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">2</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">5</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">2</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">4</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">4</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">3</span>);<br><br><span class="hljs-comment">//查找相邻重复元素</span><br>vector&lt;<span class="hljs-type">int</span>&gt;::iterator it = <span class="hljs-built_in">adjacent_find</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>());<br><span class="hljs-keyword">if</span> (it == v.<span class="hljs-built_in">end</span>()) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;找不到!&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;找到相邻重复元素为:&quot;</span> &lt;&lt; *it &lt;&lt; endl;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：面试题中如果出现查找相邻重复元素，记得用STL中的adjacent_find算法</p><h4 id="5-2-4-binary-search">5.2.4 binary_search</h4><p><strong>功能描述：</strong></p><ul><li>查找指定元素是否存在</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>bool binary_search(iterator beg, iterator end, value);  </code></p><p>// 查找指定的元素，查到 返回true  否则false</p><p>// 注意: 在<strong>无序序列中不可用</strong></p><p>// beg 开始迭代器</p><p>// end 结束迭代器</p><p>// value 查找的元素</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt;v;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br>v.<span class="hljs-built_in">push_back</span>(i);<br>&#125;<br><span class="hljs-comment">//二分查找</span><br><span class="hljs-type">bool</span> ret = <span class="hljs-built_in">binary_search</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(),<span class="hljs-number">2</span>);<br><span class="hljs-keyword">if</span> (ret)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;找到了&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;未找到&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>**总结：**二分查找法查找效率很高，值得注意的是查找的容器中元素必须的有序序列</p><h4 id="5-2-5-count">5.2.5 count</h4><p><strong>功能描述：</strong></p><ul><li>统计元素个数</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>count(iterator beg, iterator end, value);  </code></p><p>// 统计元素出现次数</p><p>// beg 开始迭代器</p><p>// end 结束迭代器</p><p>// value 统计的元素</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-comment">//内置数据类型</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt; v;<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">2</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">4</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">5</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">3</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">4</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">4</span>);<br><br><span class="hljs-type">int</span> num = <span class="hljs-built_in">count</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-number">4</span>);<br><br>cout &lt;&lt; <span class="hljs-string">&quot;4的个数为： &quot;</span> &lt;&lt; num &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">//自定义数据类型</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Person</span>(string name, <span class="hljs-type">int</span> age)<br>&#123;<br><span class="hljs-keyword">this</span>-&gt;m_Name = name;<br><span class="hljs-keyword">this</span>-&gt;m_Age = age;<br>&#125;<br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>==(<span class="hljs-type">const</span> Person &amp; p)<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;m_Age == p.m_Age)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br>string m_Name;<br><span class="hljs-type">int</span> m_Age;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>vector&lt;Person&gt; v;<br><br><span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-string">&quot;刘备&quot;</span>, <span class="hljs-number">35</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-string">&quot;关羽&quot;</span>, <span class="hljs-number">35</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p3</span><span class="hljs-params">(<span class="hljs-string">&quot;张飞&quot;</span>, <span class="hljs-number">35</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p4</span><span class="hljs-params">(<span class="hljs-string">&quot;赵云&quot;</span>, <span class="hljs-number">30</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p5</span><span class="hljs-params">(<span class="hljs-string">&quot;曹操&quot;</span>, <span class="hljs-number">25</span>)</span></span>;<br><br>v.<span class="hljs-built_in">push_back</span>(p1);<br>v.<span class="hljs-built_in">push_back</span>(p2);<br>v.<span class="hljs-built_in">push_back</span>(p3);<br>v.<span class="hljs-built_in">push_back</span>(p4);<br>v.<span class="hljs-built_in">push_back</span>(p5);<br>    <br>    <span class="hljs-function">Person <span class="hljs-title">p</span><span class="hljs-params">(<span class="hljs-string">&quot;诸葛亮&quot;</span>,<span class="hljs-number">35</span>)</span></span>;<br><br><span class="hljs-type">int</span> num = <span class="hljs-built_in">count</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), p);<br>cout &lt;&lt; <span class="hljs-string">&quot;num = &quot;</span> &lt;&lt; num &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//test01();</span><br><br><span class="hljs-built_in">test02</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>总结：</strong> 统计自定义数据类型时候，需要配合重载 <code>operator==</code></p><h4 id="5-2-6-count-if">5.2.6 count_if</h4><p><strong>功能描述：</strong></p><ul><li>按条件统计元素个数</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>count_if(iterator beg, iterator end, _Pred);  </code></p><p>// 按条件统计元素出现次数</p><p>// beg 开始迭代器</p><p>// end 结束迭代器</p><p>// _Pred 谓词</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Greater4</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> val &gt;= <span class="hljs-number">4</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-comment">//内置数据类型</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt; v;<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">2</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">4</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">5</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">3</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">4</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">4</span>);<br><br><span class="hljs-type">int</span> num = <span class="hljs-built_in">count_if</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">Greater4</span>());<br><br>cout &lt;&lt; <span class="hljs-string">&quot;大于4的个数为： &quot;</span> &lt;&lt; num &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">//自定义数据类型</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Person</span>(string name, <span class="hljs-type">int</span> age)<br>&#123;<br><span class="hljs-keyword">this</span>-&gt;m_Name = name;<br><span class="hljs-keyword">this</span>-&gt;m_Age = age;<br>&#125;<br><br>string m_Name;<br><span class="hljs-type">int</span> m_Age;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AgeLess35</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">const</span> Person &amp;p)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> p.m_Age &lt; <span class="hljs-number">35</span>;<br>&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>vector&lt;Person&gt; v;<br><br><span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-string">&quot;刘备&quot;</span>, <span class="hljs-number">35</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-string">&quot;关羽&quot;</span>, <span class="hljs-number">35</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p3</span><span class="hljs-params">(<span class="hljs-string">&quot;张飞&quot;</span>, <span class="hljs-number">35</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p4</span><span class="hljs-params">(<span class="hljs-string">&quot;赵云&quot;</span>, <span class="hljs-number">30</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p5</span><span class="hljs-params">(<span class="hljs-string">&quot;曹操&quot;</span>, <span class="hljs-number">25</span>)</span></span>;<br><br>v.<span class="hljs-built_in">push_back</span>(p1);<br>v.<span class="hljs-built_in">push_back</span>(p2);<br>v.<span class="hljs-built_in">push_back</span>(p3);<br>v.<span class="hljs-built_in">push_back</span>(p4);<br>v.<span class="hljs-built_in">push_back</span>(p5);<br><br><span class="hljs-type">int</span> num = <span class="hljs-built_in">count_if</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">AgeLess35</span>());<br>cout &lt;&lt; <span class="hljs-string">&quot;小于35岁的个数：&quot;</span> &lt;&lt; num &lt;&lt; endl;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//test01();</span><br><br><span class="hljs-built_in">test02</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>**总结：**按值统计用count，按条件统计用count_if</p><h3 id="5-3-常用排序算法">5.3 常用排序算法</h3><p><strong>学习目标：</strong></p><ul><li>掌握常用的排序算法</li></ul><p><strong>算法简介：</strong></p><ul><li><code>sort</code>             //对容器内元素进行排序</li><li><code>random_shuffle</code>   //洗牌   指定范围内的元素随机调整次序</li><li><code>merge </code>           // 容器元素合并，并存储到另一容器中</li><li><code>reverse</code>       // 反转指定范围的元素</li></ul><h4 id="5-3-1-sort">5.3.1 sort</h4><p><strong>功能描述：</strong></p><ul><li>对容器内元素进行排序</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>sort(iterator beg, iterator end, _Pred);  </code></p><p>// 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</p><p>//  beg    开始迭代器</p><p>//  end    结束迭代器</p><p>// _Pred  谓词</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">myPrint</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt; v;<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">10</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">30</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">50</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">20</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">40</span>);<br><br><span class="hljs-comment">//sort默认从小到大排序</span><br><span class="hljs-built_in">sort</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>());<br>for_each(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), myPrint);<br>cout &lt;&lt; endl;<br><br><span class="hljs-comment">//从大到小排序</span><br><span class="hljs-built_in">sort</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">greater</span>&lt;<span class="hljs-type">int</span>&gt;());<br>for_each(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), myPrint);<br>cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>**总结：**sort属于开发中最常用的算法之一，需熟练掌握</p><h4 id="5-3-2-random-shuffle">5.3.2 random_shuffle</h4><p><strong>功能描述：</strong></p><ul><li>洗牌   指定范围内的元素随机调整次序</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>random_shuffle(iterator beg, iterator end);  </code></p><p>// 指定范围内的元素随机调整次序</p><p>// beg 开始迭代器</p><p>// end 结束迭代器</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctime&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">myPrint</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">srand</span>((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)<span class="hljs-built_in">time</span>(<span class="hljs-literal">NULL</span>));<br>vector&lt;<span class="hljs-type">int</span>&gt; v;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span> ; i &lt; <span class="hljs-number">10</span>;i++)<br>&#123;<br>v.<span class="hljs-built_in">push_back</span>(i);<br>&#125;<br>for_each(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">myPrint</span>());<br>cout &lt;&lt; endl;<br><br><span class="hljs-comment">//打乱顺序</span><br><span class="hljs-built_in">random_shuffle</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>());<br>for_each(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">myPrint</span>());<br>cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>**总结：**random_shuffle洗牌算法比较实用，使用时记得加随机数种子</p><h4 id="5-3-3-merge">5.3.3 merge</h4><p><strong>功能描述：</strong></p><ul><li>两个容器元素合并，并存储到另一容器中</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>merge(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);  </code></p><p>// 容器元素合并，并存储到另一容器中</p><p>// 注意: 两个容器必须是<strong>有序的</strong></p><p>// beg1   容器1开始迭代器// end1   容器1结束迭代器// beg2   容器2开始迭代器// end2   容器2结束迭代器// dest    目标容器开始迭代器</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">myPrint</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt; v1;<br>vector&lt;<span class="hljs-type">int</span>&gt; v2;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span> ; i++) <br>    &#123;<br>v<span class="hljs-number">1.</span><span class="hljs-built_in">push_back</span>(i);<br>v<span class="hljs-number">2.</span><span class="hljs-built_in">push_back</span>(i + <span class="hljs-number">1</span>);<br>&#125;<br><br>vector&lt;<span class="hljs-type">int</span>&gt; vtarget;<br><span class="hljs-comment">//目标容器需要提前开辟空间</span><br>vtarget.<span class="hljs-built_in">resize</span>(v<span class="hljs-number">1.</span><span class="hljs-built_in">size</span>() + v<span class="hljs-number">2.</span><span class="hljs-built_in">size</span>());<br><span class="hljs-comment">//合并  需要两个有序序列</span><br><span class="hljs-built_in">merge</span>(v<span class="hljs-number">1.</span><span class="hljs-built_in">begin</span>(), v<span class="hljs-number">1.</span><span class="hljs-built_in">end</span>(), v<span class="hljs-number">2.</span><span class="hljs-built_in">begin</span>(), v<span class="hljs-number">2.</span><span class="hljs-built_in">end</span>(), vtarget.<span class="hljs-built_in">begin</span>());<br>for_each(vtarget.<span class="hljs-built_in">begin</span>(), vtarget.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">myPrint</span>());<br>cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>**总结：**merge合并的两个容器必须的有序序列</p><h4 id="5-3-4-reverse">5.3.4 reverse</h4><p><strong>功能描述：</strong></p><ul><li>将容器内元素进行反转</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>reverse(iterator beg, iterator end);  </code></p><p>// 反转指定范围的元素</p><p>// beg 开始迭代器</p><p>// end 结束迭代器</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">myPrint</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt; v;<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">10</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">30</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">50</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">20</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">40</span>);<br><br>cout &lt;&lt; <span class="hljs-string">&quot;反转前： &quot;</span> &lt;&lt; endl;<br>for_each(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">myPrint</span>());<br>cout &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;反转后： &quot;</span> &lt;&lt; endl;<br><br><span class="hljs-built_in">reverse</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>());<br>for_each(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">myPrint</span>());<br>cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>**总结：**reverse反转区间内元素，面试题可能涉及到</p><h3 id="5-4-常用拷贝和替换算法">5.4 常用拷贝和替换算法</h3><p><strong>学习目标：</strong></p><ul><li>掌握常用的拷贝和替换算法</li></ul><p><strong>算法简介：</strong></p><ul><li><code>copy</code>                      // 容器内指定范围的元素拷贝到另一容器中</li><li><code>replace</code>                // 将容器内指定范围的旧元素修改为新元素</li><li><code>replace_if </code>          // 容器内指定范围满足条件的元素替换为新元素</li><li><code>swap</code>                     // 互换两个容器的元素</li></ul><h4 id="5-4-1-copy">5.4.1 copy</h4><p><strong>功能描述：</strong></p><ul><li>容器内指定范围的元素拷贝到另一容器中</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>copy(iterator beg, iterator end, iterator dest);  </code></p><p>// 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</p><p>// beg  开始迭代器</p><p>// end  结束迭代器</p><p>// dest 目标起始迭代器</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">myPrint</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt; v1;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>v<span class="hljs-number">1.</span><span class="hljs-built_in">push_back</span>(i + <span class="hljs-number">1</span>);<br>&#125;<br>vector&lt;<span class="hljs-type">int</span>&gt; v2;<br>v<span class="hljs-number">2.</span><span class="hljs-built_in">resize</span>(v<span class="hljs-number">1.</span><span class="hljs-built_in">size</span>());<br><span class="hljs-built_in">copy</span>(v<span class="hljs-number">1.</span><span class="hljs-built_in">begin</span>(), v<span class="hljs-number">1.</span><span class="hljs-built_in">end</span>(), v<span class="hljs-number">2.</span><span class="hljs-built_in">begin</span>());<br><br>for_each(v<span class="hljs-number">2.</span><span class="hljs-built_in">begin</span>(), v<span class="hljs-number">2.</span><span class="hljs-built_in">end</span>(), <span class="hljs-built_in">myPrint</span>());<br>cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>**总结：**利用copy算法在拷贝时，目标容器记得提前开辟空间</p><h4 id="5-4-2-replace">5.4.2 replace</h4><p><strong>功能描述：</strong></p><ul><li>将容器内指定范围的旧元素修改为新元素</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>replace(iterator beg, iterator end, oldvalue, newvalue);  </code></p><p>// 将区间内旧元素 替换成 新元素</p><p>// beg 开始迭代器</p><p>// end 结束迭代器</p><p>// oldvalue 旧元素</p><p>// newvalue 新元素</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">myPrint</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt; v;<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">20</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">30</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">20</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">40</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">50</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">10</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">20</span>);<br><br>cout &lt;&lt; <span class="hljs-string">&quot;替换前：&quot;</span> &lt;&lt; endl;<br>for_each(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">myPrint</span>());<br>cout &lt;&lt; endl;<br><br><span class="hljs-comment">//将容器中的20 替换成 2000</span><br>cout &lt;&lt; <span class="hljs-string">&quot;替换后：&quot;</span> &lt;&lt; endl;<br><span class="hljs-built_in">replace</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-number">20</span>,<span class="hljs-number">2000</span>);<br>for_each(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">myPrint</span>());<br>cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>**总结：**replace会替换区间内满足条件的元素</p><h4 id="5-4-3-replace-if">5.4.3 replace_if</h4><p><strong>功能描述:</strong></p><ul><li>将区间内满足条件的元素，替换成指定元素</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>replace_if(iterator beg, iterator end, _pred, newvalue);  </code></p><p>// 按条件替换元素，满足条件的替换成指定元素</p><p>// beg 开始迭代器</p><p>// end 结束迭代器</p><p>// _pred 谓词</p><p>// newvalue 替换的新元素</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">myPrint</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ReplaceGreater30</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> val &gt;= <span class="hljs-number">30</span>;<br>&#125;<br><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt; v;<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">20</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">30</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">20</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">40</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">50</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">10</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">20</span>);<br><br>cout &lt;&lt; <span class="hljs-string">&quot;替换前：&quot;</span> &lt;&lt; endl;<br>for_each(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">myPrint</span>());<br>cout &lt;&lt; endl;<br><br><span class="hljs-comment">//将容器中大于等于的30 替换成 3000</span><br>cout &lt;&lt; <span class="hljs-string">&quot;替换后：&quot;</span> &lt;&lt; endl;<br><span class="hljs-built_in">replace_if</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">ReplaceGreater30</span>(), <span class="hljs-number">3000</span>);<br>for_each(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">myPrint</span>());<br>cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>**总结：**replace_if按条件查找，可以利用仿函数灵活筛选满足的条件</p><h4 id="5-4-4-swap">5.4.4 swap</h4><p><strong>功能描述：</strong></p><ul><li>互换两个容器的元素</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>swap(container c1, container c2);  </code></p><p>// 互换两个容器的元素</p><p>// c1容器1</p><p>// c2容器2</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">myPrint</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt; v1;<br>vector&lt;<span class="hljs-type">int</span>&gt; v2;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>v<span class="hljs-number">1.</span><span class="hljs-built_in">push_back</span>(i);<br>v<span class="hljs-number">2.</span><span class="hljs-built_in">push_back</span>(i<span class="hljs-number">+100</span>);<br>&#125;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;交换前： &quot;</span> &lt;&lt; endl;<br>for_each(v<span class="hljs-number">1.</span><span class="hljs-built_in">begin</span>(), v<span class="hljs-number">1.</span><span class="hljs-built_in">end</span>(), <span class="hljs-built_in">myPrint</span>());<br>cout &lt;&lt; endl;<br>for_each(v<span class="hljs-number">2.</span><span class="hljs-built_in">begin</span>(), v<span class="hljs-number">2.</span><span class="hljs-built_in">end</span>(), <span class="hljs-built_in">myPrint</span>());<br>cout &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;交换后： &quot;</span> &lt;&lt; endl;<br><span class="hljs-built_in">swap</span>(v1, v2);<br>for_each(v<span class="hljs-number">1.</span><span class="hljs-built_in">begin</span>(), v<span class="hljs-number">1.</span><span class="hljs-built_in">end</span>(), <span class="hljs-built_in">myPrint</span>());<br>cout &lt;&lt; endl;<br>for_each(v<span class="hljs-number">2.</span><span class="hljs-built_in">begin</span>(), v<span class="hljs-number">2.</span><span class="hljs-built_in">end</span>(), <span class="hljs-built_in">myPrint</span>());<br>cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>**总结：**swap交换容器时，注意交换的容器要同种类型</p><h3 id="5-5-常用算术生成算法">5.5 常用算术生成算法</h3><p><strong>学习目标：</strong></p><ul><li>掌握常用的算术生成算法</li></ul><p><strong>注意：</strong></p><ul><li>算术生成算法属于小型算法，使用时包含的头文件为 <code>#include &lt;numeric&gt;</code></li></ul><p><strong>算法简介：</strong></p><ul><li><p><code>accumulate</code>      // 计算容器元素累计总和</p></li><li><p><code>fill</code>                 // 向容器中添加元素</p></li></ul><h4 id="5-5-1-accumulate">5.5.1 accumulate</h4><p><strong>功能描述：</strong></p><ul><li>计算区间内 容器元素累计总和</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>accumulate(iterator beg, iterator end, value);  </code></p><p>// 计算容器元素累计总和</p><p>// beg 开始迭代器</p><p>// end 结束迭代器</p><p>// value 起始值</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;numeric&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt; v;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br>v.<span class="hljs-built_in">push_back</span>(i);<br>&#125;<br><br><span class="hljs-type">int</span> total = <span class="hljs-built_in">accumulate</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-number">0</span>);<br><br>cout &lt;&lt; <span class="hljs-string">&quot;total = &quot;</span> &lt;&lt; total &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>**总结：**accumulate使用时头文件注意是 numeric，这个算法很实用</p><h4 id="5-5-2-fill">5.5.2 fill</h4><p><strong>功能描述：</strong></p><ul><li>向容器中填充指定的元素</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>fill(iterator beg, iterator end, value);  </code></p><p>// 向容器中填充元素</p><p>// beg 开始迭代器</p><p>// end 结束迭代器</p><p>// value 填充的值</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;numeric&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">myPrint</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br>vector&lt;<span class="hljs-type">int</span>&gt; v;<br>v.<span class="hljs-built_in">resize</span>(<span class="hljs-number">10</span>);<br><span class="hljs-comment">//填充</span><br><span class="hljs-built_in">fill</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-number">100</span>);<br><br>for_each(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">myPrint</span>());<br>cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>**总结：**利用fill可以将容器区间内元素填充为 指定的值</p><h3 id="5-6-常用集合算法">5.6 常用集合算法</h3><p><strong>学习目标：</strong></p><ul><li>掌握常用的集合算法</li></ul><p><strong>算法简介：</strong></p><ul><li><p><code>set_intersection</code>          // 求两个容器的交集</p></li><li><p><code>set_union</code>                       // 求两个容器的并集</p></li><li><p><code>set_difference </code>              // 求两个容器的差集</p></li></ul><h4 id="5-6-1-set-intersection">5.6.1 set_intersection</h4><p><strong>功能描述：</strong></p><ul><li>求两个容器的交集</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>set_intersection(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);  </code></p><p>// 求两个集合的交集</p><p>// <strong>注意:两个集合必须是有序序列</strong></p><p>// beg1 容器1开始迭代器// end1 容器1结束迭代器// beg2 容器2开始迭代器// end2 容器2结束迭代器// dest 目标容器开始迭代器</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">myPrint</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt; v1;<br>vector&lt;<span class="hljs-type">int</span>&gt; v2;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>    &#123;<br>v<span class="hljs-number">1.</span><span class="hljs-built_in">push_back</span>(i);<br>v<span class="hljs-number">2.</span><span class="hljs-built_in">push_back</span>(i<span class="hljs-number">+5</span>);<br>&#125;<br><br>vector&lt;<span class="hljs-type">int</span>&gt; vTarget;<br><span class="hljs-comment">//取两个里面较小的值给目标容器开辟空间</span><br>vTarget.<span class="hljs-built_in">resize</span>(<span class="hljs-built_in">min</span>(v<span class="hljs-number">1.</span><span class="hljs-built_in">size</span>(), v<span class="hljs-number">2.</span><span class="hljs-built_in">size</span>()));<br><br><span class="hljs-comment">//返回目标容器的最后一个元素的迭代器地址</span><br>vector&lt;<span class="hljs-type">int</span>&gt;::iterator itEnd = <br>        <span class="hljs-built_in">set_intersection</span>(v<span class="hljs-number">1.</span><span class="hljs-built_in">begin</span>(), v<span class="hljs-number">1.</span><span class="hljs-built_in">end</span>(), v<span class="hljs-number">2.</span><span class="hljs-built_in">begin</span>(), v<span class="hljs-number">2.</span><span class="hljs-built_in">end</span>(), vTarget.<span class="hljs-built_in">begin</span>());<br><br>for_each(vTarget.<span class="hljs-built_in">begin</span>(), itEnd, <span class="hljs-built_in">myPrint</span>());<br>cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>总结：</strong></p><ul><li>求交集的两个集合必须的有序序列</li><li>目标容器开辟空间需要从<strong>两个容器中取小值</strong></li><li>set_intersection返回值既是交集中最后一个元素的位置</li></ul><h4 id="5-6-2-set-union">5.6.2 set_union</h4><p><strong>功能描述：</strong></p><ul><li>求两个集合的并集</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>set_union(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);  </code></p><p>// 求两个集合的并集</p><p>// <strong>注意:两个集合必须是有序序列</strong></p><p>// beg1 容器1开始迭代器// end1 容器1结束迭代器// beg2 容器2开始迭代器// end2 容器2结束迭代器// dest 目标容器开始迭代器</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">myPrint</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt; v1;<br>vector&lt;<span class="hljs-type">int</span>&gt; v2;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>v<span class="hljs-number">1.</span><span class="hljs-built_in">push_back</span>(i);<br>v<span class="hljs-number">2.</span><span class="hljs-built_in">push_back</span>(i<span class="hljs-number">+5</span>);<br>&#125;<br><br>vector&lt;<span class="hljs-type">int</span>&gt; vTarget;<br><span class="hljs-comment">//取两个容器的和给目标容器开辟空间</span><br>vTarget.<span class="hljs-built_in">resize</span>(v<span class="hljs-number">1.</span><span class="hljs-built_in">size</span>() + v<span class="hljs-number">2.</span><span class="hljs-built_in">size</span>());<br><br><span class="hljs-comment">//返回目标容器的最后一个元素的迭代器地址</span><br>vector&lt;<span class="hljs-type">int</span>&gt;::iterator itEnd = <br>        <span class="hljs-built_in">set_union</span>(v<span class="hljs-number">1.</span><span class="hljs-built_in">begin</span>(), v<span class="hljs-number">1.</span><span class="hljs-built_in">end</span>(), v<span class="hljs-number">2.</span><span class="hljs-built_in">begin</span>(), v<span class="hljs-number">2.</span><span class="hljs-built_in">end</span>(), vTarget.<span class="hljs-built_in">begin</span>());<br><br>for_each(vTarget.<span class="hljs-built_in">begin</span>(), itEnd, <span class="hljs-built_in">myPrint</span>());<br>cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>总结：</strong></p><ul><li>求并集的两个集合必须的有序序列</li><li>目标容器开辟空间需要<strong>两个容器相加</strong></li><li>set_union返回值既是并集中最后一个元素的位置</li></ul><h4 id="5-6-3-set-difference">5.6.3  set_difference</h4><p><strong>功能描述：</strong></p><ul><li>求两个集合的差集</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>set_difference(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);  </code></p><p>// 求两个集合的差集</p><p>// <strong>注意:两个集合必须是有序序列</strong></p><p>// beg1 容器1开始迭代器// end1 容器1结束迭代器// beg2 容器2开始迭代器// end2 容器2结束迭代器// dest 目标容器开始迭代器</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">myPrint</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt; v1;<br>vector&lt;<span class="hljs-type">int</span>&gt; v2;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>v<span class="hljs-number">1.</span><span class="hljs-built_in">push_back</span>(i);<br>v<span class="hljs-number">2.</span><span class="hljs-built_in">push_back</span>(i<span class="hljs-number">+5</span>);<br>&#125;<br><br>vector&lt;<span class="hljs-type">int</span>&gt; vTarget;<br><span class="hljs-comment">//取两个里面较大的值给目标容器开辟空间</span><br>vTarget.<span class="hljs-built_in">resize</span>( <span class="hljs-built_in">max</span>(v<span class="hljs-number">1.</span><span class="hljs-built_in">size</span>() , v<span class="hljs-number">2.</span><span class="hljs-built_in">size</span>()));<br><br><span class="hljs-comment">//返回目标容器的最后一个元素的迭代器地址</span><br>cout &lt;&lt; <span class="hljs-string">&quot;v1与v2的差集为： &quot;</span> &lt;&lt; endl;<br>vector&lt;<span class="hljs-type">int</span>&gt;::iterator itEnd = <br>        <span class="hljs-built_in">set_difference</span>(v<span class="hljs-number">1.</span><span class="hljs-built_in">begin</span>(), v<span class="hljs-number">1.</span><span class="hljs-built_in">end</span>(), v<span class="hljs-number">2.</span><span class="hljs-built_in">begin</span>(), v<span class="hljs-number">2.</span><span class="hljs-built_in">end</span>(), vTarget.<span class="hljs-built_in">begin</span>());<br>for_each(vTarget.<span class="hljs-built_in">begin</span>(), itEnd, <span class="hljs-built_in">myPrint</span>());<br>cout &lt;&lt; endl;<br><br><br>cout &lt;&lt; <span class="hljs-string">&quot;v2与v1的差集为： &quot;</span> &lt;&lt; endl;<br>itEnd = <span class="hljs-built_in">set_difference</span>(v<span class="hljs-number">2.</span><span class="hljs-built_in">begin</span>(), v<span class="hljs-number">2.</span><span class="hljs-built_in">end</span>(), v<span class="hljs-number">1.</span><span class="hljs-built_in">begin</span>(), v<span class="hljs-number">1.</span><span class="hljs-built_in">end</span>(), vTarget.<span class="hljs-built_in">begin</span>());<br>for_each(vTarget.<span class="hljs-built_in">begin</span>(), itEnd, <span class="hljs-built_in">myPrint</span>());<br>cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>总结：</strong></p><ul><li>求差集的两个集合必须的有序序列</li><li>目标容器开辟空间需要从<strong>两个容器取较大值</strong></li><li>set_difference返回值既是差集中最后一个元素的位置</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++教程专辑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C++提高编程讲解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言项目】爱的征途游戏开源</title>
      <link href="/2022/06/05/%E3%80%90C%E8%AF%AD%E8%A8%80%E9%A1%B9%E7%9B%AE%E3%80%91%E7%88%B1%E7%9A%84%E5%BE%81%E9%80%94%E6%B8%B8%E6%88%8F%E5%BC%80%E6%BA%90/"/>
      <url>/2022/06/05/%E3%80%90C%E8%AF%AD%E8%A8%80%E9%A1%B9%E7%9B%AE%E3%80%91%E7%88%B1%E7%9A%84%E5%BE%81%E9%80%94%E6%B8%B8%E6%88%8F%E5%BC%80%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<h1>【C语言项目】爱的征途游戏开源</h1><p>不知道多少年前写的了，是我写的第一个角色扮演的游戏，写这个游戏的时间在我的高中时代。没办法写实现的教程了，只能直接放代码出来。</p><h2 id="成品展示">成品展示</h2><p><img src="/images/2022-6-5-000006.png" alt="游戏背景"></p><p><img src="/images/2022-6-5-000007.png" alt="游戏地图"></p><h2 id="源码展示">源码展示</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br><span class="line">1177</span><br><span class="line">1178</span><br><span class="line">1179</span><br><span class="line">1180</span><br><span class="line">1181</span><br><span class="line">1182</span><br><span class="line">1183</span><br><span class="line">1184</span><br><span class="line">1185</span><br><span class="line">1186</span><br><span class="line">1187</span><br><span class="line">1188</span><br><span class="line">1189</span><br><span class="line">1190</span><br><span class="line">1191</span><br><span class="line">1192</span><br><span class="line">1193</span><br><span class="line">1194</span><br><span class="line">1195</span><br><span class="line">1196</span><br><span class="line">1197</span><br><span class="line">1198</span><br><span class="line">1199</span><br><span class="line">1200</span><br><span class="line">1201</span><br><span class="line">1202</span><br><span class="line">1203</span><br><span class="line">1204</span><br><span class="line">1205</span><br><span class="line">1206</span><br><span class="line">1207</span><br><span class="line">1208</span><br><span class="line">1209</span><br><span class="line">1210</span><br><span class="line">1211</span><br><span class="line">1212</span><br><span class="line">1213</span><br><span class="line">1214</span><br><span class="line">1215</span><br><span class="line">1216</span><br><span class="line">1217</span><br><span class="line">1218</span><br><span class="line">1219</span><br><span class="line">1220</span><br><span class="line">1221</span><br><span class="line">1222</span><br><span class="line">1223</span><br><span class="line">1224</span><br><span class="line">1225</span><br><span class="line">1226</span><br><span class="line">1227</span><br><span class="line">1228</span><br><span class="line">1229</span><br><span class="line">1230</span><br><span class="line">1231</span><br><span class="line">1232</span><br><span class="line">1233</span><br><span class="line">1234</span><br><span class="line">1235</span><br><span class="line">1236</span><br><span class="line">1237</span><br><span class="line">1238</span><br><span class="line">1239</span><br><span class="line">1240</span><br><span class="line">1241</span><br><span class="line">1242</span><br><span class="line">1243</span><br><span class="line">1244</span><br><span class="line">1245</span><br><span class="line">1246</span><br><span class="line">1247</span><br><span class="line">1248</span><br><span class="line">1249</span><br><span class="line">1250</span><br><span class="line">1251</span><br><span class="line">1252</span><br><span class="line">1253</span><br><span class="line">1254</span><br><span class="line">1255</span><br><span class="line">1256</span><br><span class="line">1257</span><br><span class="line">1258</span><br><span class="line">1259</span><br><span class="line">1260</span><br><span class="line">1261</span><br><span class="line">1262</span><br><span class="line">1263</span><br><span class="line">1264</span><br><span class="line">1265</span><br><span class="line">1266</span><br><span class="line">1267</span><br><span class="line">1268</span><br><span class="line">1269</span><br><span class="line">1270</span><br><span class="line">1271</span><br><span class="line">1272</span><br><span class="line">1273</span><br><span class="line">1274</span><br><span class="line">1275</span><br><span class="line">1276</span><br><span class="line">1277</span><br><span class="line">1278</span><br><span class="line">1279</span><br><span class="line">1280</span><br><span class="line">1281</span><br><span class="line">1282</span><br><span class="line">1283</span><br><span class="line">1284</span><br><span class="line">1285</span><br><span class="line">1286</span><br><span class="line">1287</span><br><span class="line">1288</span><br><span class="line">1289</span><br><span class="line">1290</span><br><span class="line">1291</span><br><span class="line">1292</span><br><span class="line">1293</span><br><span class="line">1294</span><br><span class="line">1295</span><br><span class="line">1296</span><br><span class="line">1297</span><br><span class="line">1298</span><br><span class="line">1299</span><br><span class="line">1300</span><br><span class="line">1301</span><br><span class="line">1302</span><br><span class="line">1303</span><br><span class="line">1304</span><br><span class="line">1305</span><br><span class="line">1306</span><br><span class="line">1307</span><br><span class="line">1308</span><br><span class="line">1309</span><br><span class="line">1310</span><br><span class="line">1311</span><br><span class="line">1312</span><br><span class="line">1313</span><br><span class="line">1314</span><br><span class="line">1315</span><br><span class="line">1316</span><br><span class="line">1317</span><br><span class="line">1318</span><br><span class="line">1319</span><br><span class="line">1320</span><br><span class="line">1321</span><br><span class="line">1322</span><br><span class="line">1323</span><br><span class="line">1324</span><br><span class="line">1325</span><br><span class="line">1326</span><br><span class="line">1327</span><br><span class="line">1328</span><br><span class="line">1329</span><br><span class="line">1330</span><br><span class="line">1331</span><br><span class="line">1332</span><br><span class="line">1333</span><br><span class="line">1334</span><br><span class="line">1335</span><br><span class="line">1336</span><br><span class="line">1337</span><br><span class="line">1338</span><br><span class="line">1339</span><br><span class="line">1340</span><br><span class="line">1341</span><br><span class="line">1342</span><br><span class="line">1343</span><br><span class="line">1344</span><br><span class="line">1345</span><br><span class="line">1346</span><br><span class="line">1347</span><br><span class="line">1348</span><br><span class="line">1349</span><br><span class="line">1350</span><br><span class="line">1351</span><br><span class="line">1352</span><br><span class="line">1353</span><br><span class="line">1354</span><br><span class="line">1355</span><br><span class="line">1356</span><br><span class="line">1357</span><br><span class="line">1358</span><br><span class="line">1359</span><br><span class="line">1360</span><br><span class="line">1361</span><br><span class="line">1362</span><br><span class="line">1363</span><br><span class="line">1364</span><br><span class="line">1365</span><br><span class="line">1366</span><br><span class="line">1367</span><br><span class="line">1368</span><br><span class="line">1369</span><br><span class="line">1370</span><br><span class="line">1371</span><br><span class="line">1372</span><br><span class="line">1373</span><br><span class="line">1374</span><br><span class="line">1375</span><br><span class="line">1376</span><br><span class="line">1377</span><br><span class="line">1378</span><br><span class="line">1379</span><br><span class="line">1380</span><br><span class="line">1381</span><br><span class="line">1382</span><br><span class="line">1383</span><br><span class="line">1384</span><br><span class="line">1385</span><br><span class="line">1386</span><br><span class="line">1387</span><br><span class="line">1388</span><br><span class="line">1389</span><br><span class="line">1390</span><br><span class="line">1391</span><br><span class="line">1392</span><br><span class="line">1393</span><br><span class="line">1394</span><br><span class="line">1395</span><br><span class="line">1396</span><br><span class="line">1397</span><br><span class="line">1398</span><br><span class="line">1399</span><br><span class="line">1400</span><br><span class="line">1401</span><br><span class="line">1402</span><br><span class="line">1403</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span> </span><br><span class="hljs-comment">//初始化地图 </span><br><span class="hljs-comment">//第一张地图 </span><br>    <span class="hljs-type">int</span> map1[<span class="hljs-number">20</span>][<span class="hljs-number">20</span>]=&#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">50</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">9</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">8</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,&#125;;<br>   <span class="hljs-comment">//第二张地图 魔塔第一层 </span><br>  <span class="hljs-type">int</span> map2[<span class="hljs-number">20</span>][<span class="hljs-number">20</span>]=&#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">11</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">15</span>,<span class="hljs-number">3</span>,<span class="hljs-number">14</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">19</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">25</span>,<span class="hljs-number">15</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">15</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">14</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">16</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">18</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">18</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">19</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">18</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">19</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">15</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">18</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">19</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">7</span>,<span class="hljs-number">7</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">17</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">15</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">23</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">7</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">18</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">24</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">7</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">18</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">7</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">19</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,&#125;;<br>   <span class="hljs-comment">//第三张地图 魔塔第二层 </span><br>  <span class="hljs-type">int</span> map3[<span class="hljs-number">20</span>][<span class="hljs-number">20</span>]=&#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">7</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">24</span>,<span class="hljs-number">3</span>,<span class="hljs-number">16</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">17</span>,<span class="hljs-number">3</span>,<span class="hljs-number">23</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">7</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">14</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">14</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">7</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">18</span>,<span class="hljs-number">1</span>,<span class="hljs-number">19</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">15</span>,<span class="hljs-number">18</span>,<span class="hljs-number">1</span>,<span class="hljs-number">19</span>,<span class="hljs-number">15</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">15</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">15</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">7</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">1</span>,<span class="hljs-number">7</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">15</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">15</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">12</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">21</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,&#125;;<br>   <span class="hljs-comment">//第四张地图 魔塔第三层 </span><br>  <span class="hljs-type">int</span> map4[<span class="hljs-number">20</span>][<span class="hljs-number">20</span>]=&#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">15</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">7</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">18</span>,<span class="hljs-number">18</span>,<span class="hljs-number">3</span>,<span class="hljs-number">17</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">18</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">19</span>,<span class="hljs-number">19</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">16</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">7</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">19</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">14</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">7</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">16</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">17</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">14</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">14</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">23</span>,<span class="hljs-number">3</span>,<span class="hljs-number">13</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">31</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">22</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,&#125;;<br>   <span class="hljs-comment">//第五张地图 魔塔第四层 </span><br>  <span class="hljs-type">int</span> map5[<span class="hljs-number">20</span>][<span class="hljs-number">20</span>]=&#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">17</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">16</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">17</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">16</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">17</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">16</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">17</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">16</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">23</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">24</span>,<span class="hljs-number">3</span>,<span class="hljs-number">13</span>,<span class="hljs-number">13</span>,<span class="hljs-number">13</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">32</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">41</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,&#125;;<br>   <span class="hljs-comment">//第六张地图 魔塔第五层 </span><br>  <span class="hljs-type">int</span> map6[<span class="hljs-number">20</span>][<span class="hljs-number">20</span>]=&#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">100</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">13</span>,<span class="hljs-number">13</span>,<span class="hljs-number">13</span>,<span class="hljs-number">13</span>,<span class="hljs-number">13</span>,<span class="hljs-number">13</span>,<span class="hljs-number">13</span>,<span class="hljs-number">13</span>,<span class="hljs-number">13</span>,<span class="hljs-number">13</span>,<span class="hljs-number">13</span>,<span class="hljs-number">13</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">13</span>,<span class="hljs-number">13</span>,<span class="hljs-number">13</span>,<span class="hljs-number">13</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">13</span>,<span class="hljs-number">13</span>,<span class="hljs-number">13</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">13</span>,<span class="hljs-number">13</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">13</span>,<span class="hljs-number">13</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">13</span>,<span class="hljs-number">13</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">42</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,<br>   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,&#125;;<br><br><span class="hljs-comment">//角色信息</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">hero</span>&#123;</span><br><span class="hljs-type">char</span> name[<span class="hljs-number">20</span>];<span class="hljs-comment">//主角姓名 </span><br><span class="hljs-type">int</span> z_x;<span class="hljs-comment">//主角横坐标 </span><br><span class="hljs-type">int</span> z_y;<span class="hljs-comment">//主角纵坐标 </span><br><span class="hljs-type">int</span> jade;<span class="hljs-comment">//镇魂之玉 </span><br><span class="hljs-type">int</span> is_over;<span class="hljs-comment">//判断一个移动的结束 </span><br><span class="hljs-type">int</span> hp;<span class="hljs-comment">//主角的血量 </span><br><span class="hljs-type">int</span> carry;<span class="hljs-comment">//主角的攻击力 </span><br><span class="hljs-type">int</span> defend;<span class="hljs-comment">//主角的防御力 </span><br><span class="hljs-type">int</span> fortune; <span class="hljs-comment">//主角的金币 </span><br><span class="hljs-type">int</span> actor;<span class="hljs-comment">//主角的信息激活码 </span><br><span class="hljs-type">int</span> backpack; <span class="hljs-comment">//怪物图谱的激活码 </span><br><span class="hljs-type">int</span> shop;<span class="hljs-comment">//商店的激活码 </span><br><span class="hljs-type">int</span> <span class="hljs-built_in">floor</span>;<span class="hljs-comment">//楼层数 </span><br><span class="hljs-type">int</span> money;<span class="hljs-comment">//用于购买东西的金币 </span><br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">monster</span>&#123;</span><br><span class="hljs-type">char</span> m1_name[<span class="hljs-number">20</span>];<span class="hljs-comment">//小史莱姆怪 </span><br><span class="hljs-type">int</span> m1_hp;<br><span class="hljs-type">int</span> m1_carry;<br><span class="hljs-type">int</span> m1_defend;<br><span class="hljs-type">char</span> m1_lose[<span class="hljs-number">20</span>];<br><span class="hljs-type">int</span> m1Lose;<br><span class="hljs-type">char</span> m2_name[<span class="hljs-number">20</span>];<span class="hljs-comment">//大史莱姆怪 </span><br><span class="hljs-type">int</span> m2_hp;<br><span class="hljs-type">int</span> m2_carry;<br><span class="hljs-type">int</span> m2_defend;<br><span class="hljs-type">char</span> m2_lose[<span class="hljs-number">20</span>];<br><span class="hljs-type">int</span> m2Lose;<br><span class="hljs-type">char</span> m3_name[<span class="hljs-number">20</span>];<span class="hljs-comment">//邪恶巫师 </span><br><span class="hljs-type">int</span> m3_hp;<br><span class="hljs-type">int</span> m3_carry;<br><span class="hljs-type">int</span> m3_defend;<br><span class="hljs-type">char</span> m3_lose[<span class="hljs-number">20</span>];<br><span class="hljs-type">int</span> m3Lose;<br><span class="hljs-type">char</span> m4_name[<span class="hljs-number">20</span>];<span class="hljs-comment">//双剑武士 </span><br><span class="hljs-type">int</span> m4_hp;<br><span class="hljs-type">int</span> m4_carry;<br><span class="hljs-type">int</span> m4_defend;<br><span class="hljs-type">char</span> m4_lose[<span class="hljs-number">20</span>];<br><span class="hljs-type">int</span> m4Lose;<br><span class="hljs-type">char</span> m5_name[<span class="hljs-number">20</span>];<span class="hljs-comment">//大法师 </span><br><span class="hljs-type">int</span> m5_hp;<br><span class="hljs-type">int</span> m5_carry;<br><span class="hljs-type">int</span> m5_defend;<br><span class="hljs-type">char</span> m5_lose[<span class="hljs-number">20</span>];<br><span class="hljs-type">int</span> m5Lose;<br>&#125; ;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">contain</span>&#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">hero</span> <span class="hljs-title">person</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">monster</span> <span class="hljs-title">ms</span>;</span><br>&#125;;<br><br><span class="hljs-keyword">struct</span> contain <span class="hljs-title function_">move</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> contain zd,<span class="hljs-type">int</span> a[<span class="hljs-number">20</span>][<span class="hljs-number">20</span>])</span>;<br><span class="hljs-keyword">struct</span> contain <span class="hljs-title function_">moveDown</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> contain zd,<span class="hljs-type">int</span> a[<span class="hljs-number">20</span>][<span class="hljs-number">20</span>])</span>; <br><span class="hljs-keyword">struct</span> contain <span class="hljs-title function_">moveUp</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> contain zd,<span class="hljs-type">int</span> a[<span class="hljs-number">20</span>][<span class="hljs-number">20</span>])</span>;<br><span class="hljs-keyword">struct</span> contain <span class="hljs-title function_">moveRight</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> contain zd,<span class="hljs-type">int</span> a[<span class="hljs-number">20</span>][<span class="hljs-number">20</span>])</span>;<br><span class="hljs-keyword">struct</span> contain <span class="hljs-title function_">moveLeft</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> contain zd,<span class="hljs-type">int</span> a[<span class="hljs-number">20</span>][<span class="hljs-number">20</span>])</span>;<br><span class="hljs-keyword">struct</span> contain <span class="hljs-title function_">information</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> contain zd,<span class="hljs-type">int</span> a[<span class="hljs-number">20</span>][<span class="hljs-number">20</span>])</span>;<br><span class="hljs-keyword">struct</span> contain <span class="hljs-title function_">monsterBP</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> contain zd,<span class="hljs-type">int</span> a[<span class="hljs-number">20</span>][<span class="hljs-number">20</span>])</span>;<br><span class="hljs-keyword">struct</span> contain <span class="hljs-title function_">login</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> contain zd)</span>;<br><span class="hljs-keyword">struct</span> contain <span class="hljs-title function_">account</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> contain zd)</span>;<br><span class="hljs-keyword">struct</span> contain <span class="hljs-title function_">ShowMap</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> contain zd,<span class="hljs-type">int</span> a[<span class="hljs-number">20</span>][<span class="hljs-number">20</span>])</span>;<br><span class="hljs-keyword">struct</span> contain <span class="hljs-title function_">fightM1</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> contain zd)</span>;<br><span class="hljs-keyword">struct</span> contain <span class="hljs-title function_">fightM2</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> contain zd)</span>; <br><span class="hljs-keyword">struct</span> contain <span class="hljs-title function_">fightM3</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> contain zd)</span>; <br><span class="hljs-keyword">struct</span> contain <span class="hljs-title function_">fightM4</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> contain zd)</span>; <br><span class="hljs-keyword">struct</span> contain <span class="hljs-title function_">fightM5</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> contain zd)</span>;<br><span class="hljs-keyword">struct</span> contain <span class="hljs-title function_">addCarry</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> contain zd)</span>;<br><span class="hljs-keyword">struct</span> contain <span class="hljs-title function_">addDefend</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> contain zd)</span>;<br><span class="hljs-keyword">struct</span> contain <span class="hljs-title function_">addCarry10</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> contain zd)</span>;<br><span class="hljs-keyword">struct</span> contain <span class="hljs-title function_">addDefend10</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> contain zd)</span>;<br><span class="hljs-keyword">struct</span> contain <span class="hljs-title function_">addHp</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> contain zd)</span>;<br><span class="hljs-keyword">struct</span> contain <span class="hljs-title function_">SHOP</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> contain zd)</span>;<br><span class="hljs-keyword">struct</span> contain <span class="hljs-title function_">openshop</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> contain zd)</span>;<br><br>   <span class="hljs-comment">//定义一个地图的函数，名字叫ShowMap </span><br><span class="hljs-keyword">struct</span> contain <span class="hljs-title function_">ShowMap</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> contain zd,<span class="hljs-type">int</span> a[<span class="hljs-number">20</span>][<span class="hljs-number">20</span>])</span>&#123;<br>system(<span class="hljs-string">&quot;cls&quot;</span>); <br> zd=account(zd);<br>system(<span class="hljs-string">&quot;color 75&quot;</span>);<br><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">20</span>;i++)&#123;<br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">20</span>;j++)&#123;<br><span class="hljs-keyword">if</span>(a[i][j]==<span class="hljs-number">1</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;■&quot;</span>);<span class="hljs-comment">//墙 </span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[i][j]==<span class="hljs-number">2</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;♀&quot;</span>);<span class="hljs-comment">//主角 </span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[i][j]==<span class="hljs-number">3</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;  &quot;</span>);<span class="hljs-comment">//空格 </span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[i][j]==<span class="hljs-number">4</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;￠&quot;</span>);<span class="hljs-comment">//镇魂之玉 </span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[i][j]==<span class="hljs-number">5</span>||a[i][j]==<span class="hljs-number">8</span>||a[i][j]==<span class="hljs-number">9</span>||a[i][j]==<span class="hljs-number">50</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;卍&quot;</span>);<span class="hljs-comment">//怪物 </span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[i][j]==<span class="hljs-number">6</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;♂&quot;</span>);<span class="hljs-comment">//王子 </span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[i][j]==<span class="hljs-number">7</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c%c&quot;</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>);<span class="hljs-comment">//血瓶 200点 </span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[i][j]==<span class="hljs-number">10</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;智&quot;</span>);<span class="hljs-comment">//怪物图谱 </span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[i][j]==<span class="hljs-number">11</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;上&quot;</span>);<span class="hljs-comment">//一楼往上走 </span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[i][j]==<span class="hljs-number">12</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;下&quot;</span>);<span class="hljs-comment">//二楼往下走</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[i][j]==<span class="hljs-number">21</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;上&quot;</span>);<span class="hljs-comment">//二楼往上走 </span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[i][j]==<span class="hljs-number">22</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;下&quot;</span>);<span class="hljs-comment">//三楼往下走</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[i][j]==<span class="hljs-number">31</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;上&quot;</span>);<span class="hljs-comment">//三楼往上走 </span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[i][j]==<span class="hljs-number">32</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;下&quot;</span>);<span class="hljs-comment">//四楼往下走</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[i][j]==<span class="hljs-number">41</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;上&quot;</span>);<span class="hljs-comment">//四楼往上走 </span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[i][j]==<span class="hljs-number">42</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;下&quot;</span>);<span class="hljs-comment">//五楼往下走 </span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[i][j]==<span class="hljs-number">13</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;■&quot;</span>);<span class="hljs-comment">//可以穿透的墙</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[i][j]==<span class="hljs-number">14</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;○&quot;</span>);<span class="hljs-comment">//小史莱姆怪 </span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[i][j]==<span class="hljs-number">15</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;◎&quot;</span>);<span class="hljs-comment">//大史莱姆怪 </span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[i][j]==<span class="hljs-number">16</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;☆&quot;</span>);<span class="hljs-comment">//邪恶巫师 </span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[i][j]==<span class="hljs-number">17</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;¤&quot;</span>);<span class="hljs-comment">//双剑武士 </span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[i][j]==<span class="hljs-number">18</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ㄨ&quot;</span>);<span class="hljs-comment">//攻击  2点 </span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[i][j]==<span class="hljs-number">19</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;◇&quot;</span>);<span class="hljs-comment">//防御2点 </span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[i][j]==<span class="hljs-number">23</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;剑&quot;</span>);<span class="hljs-comment">//剑  攻击  10点 </span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[i][j]==<span class="hljs-number">24</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;盾&quot;</span>);<span class="hljs-comment">//盾  防御  10点 </span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[i][j]==<span class="hljs-number">25</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;商&quot;</span>);<span class="hljs-comment">//激活商店 </span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[i][j]==<span class="hljs-number">100</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;№&quot;</span>);<span class="hljs-comment">//大法师  </span><br>&#125;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(zd.person.<span class="hljs-built_in">floor</span>&gt;=<span class="hljs-number">1</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t        魔塔第%d层\n&quot;</span>,zd.person.<span class="hljs-built_in">floor</span>);<br><span class="hljs-keyword">return</span> zd;<br>&#125;<br><span class="hljs-comment">//怪物与主角的损血计算</span><br><span class="hljs-keyword">struct</span> contain <span class="hljs-title function_">account</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> contain zd)</span>&#123;<br><span class="hljs-comment">//小史莱姆怪 </span><br><span class="hljs-type">int</span> x=<span class="hljs-number">0</span>,y=<span class="hljs-number">0</span>,z=<span class="hljs-number">0</span>; <br>z=zd.person.carry-zd.ms.m1_defend;<br><span class="hljs-keyword">if</span>(z!=<span class="hljs-number">0</span>) x=zd.ms.m1_hp/z;<br>  y=(x<span class="hljs-number">-1</span>)*(zd.ms.m1_carry-zd.person.defend);<br><span class="hljs-keyword">if</span>(zd.person.carry&lt;=zd.ms.m1_defend||zd.person.hp&lt;=y)&#123;<br><span class="hljs-built_in">strcpy</span>(zd.ms.m1_lose,<span class="hljs-string">&quot;?????&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">if</span>(zd.ms.m1_carry&lt;=zd.person.defend)&#123;<br><span class="hljs-built_in">strcpy</span>(zd.ms.m1_lose,<span class="hljs-string">&quot;0&quot;</span>);<br>zd.ms.m1Lose=<span class="hljs-number">0</span>;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>      zd.ms.m1Lose=y;<br>itoa(zd.ms.m1Lose,zd.ms.m1_lose,<span class="hljs-number">10</span>);<br>&#125;<br>&#125;<br><span class="hljs-comment">//大史莱姆怪 </span><br>z=zd.person.carry-zd.ms.m2_defend;<br><span class="hljs-keyword">if</span>(z!=<span class="hljs-number">0</span>) x=zd.ms.m2_hp/z;<br>y=(x<span class="hljs-number">-1</span>)*(zd.ms.m2_carry-zd.person.defend);<br><span class="hljs-keyword">if</span>(zd.person.carry&lt;=zd.ms.m2_defend||zd.person.hp&lt;=y)&#123;<br><span class="hljs-built_in">strcpy</span>(zd.ms.m2_lose,<span class="hljs-string">&quot;?????&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">if</span>(zd.ms.m2_carry&lt;=zd.person.defend)&#123;<br><span class="hljs-built_in">strcpy</span>(zd.ms.m2_lose,<span class="hljs-string">&quot;0&quot;</span>);<br>zd.ms.m2Lose=<span class="hljs-number">0</span>;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>       zd.ms.m2Lose=y;<br>itoa(zd.ms.m2Lose,zd.ms.m2_lose,<span class="hljs-number">10</span>);<br>&#125;<br>&#125;<br><span class="hljs-comment">//邪恶巫师  </span><br>z=zd.person.carry-zd.ms.m3_defend;<br><span class="hljs-keyword">if</span>(z!=<span class="hljs-number">0</span>) x=zd.ms.m3_hp/z;<br>y=(x<span class="hljs-number">-1</span>)*(zd.ms.m3_carry-zd.person.defend);<br><span class="hljs-keyword">if</span>(zd.person.carry&lt;=zd.ms.m3_defend||zd.person.hp&lt;=y)&#123;<br><span class="hljs-built_in">strcpy</span>(zd.ms.m3_lose,<span class="hljs-string">&quot;?????&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">if</span>(zd.ms.m3_carry&lt;=zd.person.defend)&#123;<br><span class="hljs-built_in">strcpy</span>(zd.ms.m3_lose,<span class="hljs-string">&quot;0&quot;</span>);<br>zd.ms.m3Lose=<span class="hljs-number">0</span>;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>  zd.ms.m3Lose=y;<br>itoa(zd.ms.m3Lose,zd.ms.m3_lose,<span class="hljs-number">10</span>);<br>&#125;<br>&#125;<br><span class="hljs-comment">//双剑武士 </span><br>z=zd.person.carry-zd.ms.m4_defend;<br><span class="hljs-keyword">if</span>(z!=<span class="hljs-number">0</span>) x=zd.ms.m4_hp/z;<br>y=(x<span class="hljs-number">-1</span>)*(zd.ms.m4_carry-zd.person.defend);<br><span class="hljs-keyword">if</span>(zd.person.carry&lt;=zd.ms.m4_defend||zd.person.hp&lt;=y)&#123;<br><span class="hljs-built_in">strcpy</span>(zd.ms.m4_lose,<span class="hljs-string">&quot;?????&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">if</span>(zd.ms.m4_carry&lt;=zd.person.defend)&#123;<br><span class="hljs-built_in">strcpy</span>(zd.ms.m4_lose,<span class="hljs-string">&quot;0&quot;</span>);<br>zd.ms.m4Lose=<span class="hljs-number">0</span>;<br>&#125;<span class="hljs-keyword">else</span> &#123; <br>       zd.ms.m4Lose=y;<br>itoa(zd.ms.m4Lose,zd.ms.m4_lose,<span class="hljs-number">10</span>);<br>&#125;<br>&#125;<br><span class="hljs-comment">//大法师 </span><br>z=zd.person.carry-zd.ms.m5_defend;<br><span class="hljs-keyword">if</span>(z!=<span class="hljs-number">0</span>) x=zd.ms.m5_hp/z;<br>y=(x<span class="hljs-number">-1</span>)*(zd.ms.m5_carry-zd.person.defend);<br><span class="hljs-keyword">if</span>(zd.person.carry&lt;=zd.ms.m5_defend||zd.person.hp&lt;=y)&#123;<br><span class="hljs-built_in">strcpy</span>(zd.ms.m5_lose,<span class="hljs-string">&quot;?????&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">if</span>(zd.ms.m5_carry&lt;=zd.person.defend)&#123;<br><span class="hljs-built_in">strcpy</span>(zd.ms.m5_lose,<span class="hljs-string">&quot;0&quot;</span>);<br>zd.ms.m5Lose=<span class="hljs-number">0</span>;<br>&#125;<span class="hljs-keyword">else</span> &#123; <br>zd.ms.m5Lose=y;<br>itoa(zd.ms.m5Lose,zd.ms.m5_lose,<span class="hljs-number">10</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> zd;<br>&#125; <br><span class="hljs-comment">//主函数 </span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">hero</span> <span class="hljs-title">person</span>=</span>&#123;<span class="hljs-string">&quot;公主&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">400</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">monster</span> <span class="hljs-title">ms</span>=</span>&#123; <span class="hljs-string">&quot;小史莱姆怪&quot;</span>,<span class="hljs-number">100</span>,<span class="hljs-number">20</span>,<span class="hljs-number">0</span>,<span class="hljs-string">&quot;???&quot;</span>,<span class="hljs-number">1000000</span>, <br><span class="hljs-string">&quot;大史莱姆怪&quot;</span>,<span class="hljs-number">100</span>,<span class="hljs-number">50</span>,<span class="hljs-number">0</span>,<span class="hljs-string">&quot;???&quot;</span>,<span class="hljs-number">1000000</span>,<br><span class="hljs-string">&quot;邪恶巫师&quot;</span>,<span class="hljs-number">200</span>,<span class="hljs-number">70</span>,<span class="hljs-number">10</span>,<span class="hljs-string">&quot;???&quot;</span>,<span class="hljs-number">1000000</span>,<br><span class="hljs-string">&quot;双剑武士&quot;</span>,<span class="hljs-number">300</span>,<span class="hljs-number">100</span>,<span class="hljs-number">25</span>,<span class="hljs-string">&quot;???&quot;</span>,<span class="hljs-number">1000000</span>,<br><span class="hljs-string">&quot;大法师&quot;</span>,<span class="hljs-number">500</span>,<span class="hljs-number">200</span>,<span class="hljs-number">60</span>,<span class="hljs-string">&quot;???&quot;</span>,<span class="hljs-number">1000000</span>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">contain</span> <span class="hljs-title">zd</span>;</span><br>zd.ms=ms;<br>zd.person=person;<br>load();<br>post();<br>background(); <br>scene();<br>mention();<br>jiazai();<br>ShowMap(zd,map1);<br>zd=move(zd,map1);<br>theme();<br>zd=login(zd);<br>ShowMap(zd,map2);<br>zd=move(zd,map2);<br>gameover();<br>getch();<br>&#125; <br><span class="hljs-comment">//游戏前的小提醒</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">mention</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n\t\t\t游戏小提示:\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t游戏前请将输入法切换为英文输入\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t向上：w\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t向下：s\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t向左：a\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t向右：d\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\t\t\t按任意键继续...\n&quot;</span>);<br>getch();<br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br>&#125; <br><span class="hljs-comment">//剧情——开端——公主的独白 </span><br><span class="hljs-type">int</span> <span class="hljs-title function_">scene</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n\n\n\t\tloading&quot;</span>);<br><span class="hljs-type">int</span> x=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(x=<span class="hljs-number">0</span>;x&lt;<span class="hljs-number">7</span>;x++)&#123;<br> Sleep(<span class="hljs-number">100</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;.&quot;</span>);<br> &#125;<br> system(<span class="hljs-string">&quot;cls&quot;</span>);<br> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n\n\n    \t\t王子小鑫的独白:\n&quot;</span>);Sleep(<span class="hljs-number">1000</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t很&quot;</span>);Sleep(<span class="hljs-number">200</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;久&quot;</span>);Sleep(<span class="hljs-number">200</span>);<br> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;以&quot;</span>);Sleep(<span class="hljs-number">200</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;前&quot;</span>);Sleep(<span class="hljs-number">500</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;我&quot;</span>);Sleep(<span class="hljs-number">200</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;不&quot;</span>);Sleep(<span class="hljs-number">200</span>);<br> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;相\n&quot;</span>);Sleep(<span class="hljs-number">1000</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t信&quot;</span>);Sleep(<span class="hljs-number">500</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;爱&quot;</span>);Sleep(<span class="hljs-number">100</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;情&quot;</span>);Sleep(<span class="hljs-number">100</span>);<br> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;直&quot;</span>);Sleep(<span class="hljs-number">100</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;到&quot;</span>);Sleep(<span class="hljs-number">100</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;有&quot;</span>);Sleep(<span class="hljs-number">100</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;一\n&quot;</span>);Sleep(<span class="hljs-number">1000</span>);<br> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t天&quot;</span>);Sleep(<span class="hljs-number">100</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;遇见了你\n&quot;</span>);Sleep(<span class="hljs-number">1000</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t我&quot;</span>);Sleep(<span class="hljs-number">100</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;深&quot;</span>);Sleep(<span class="hljs-number">700</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;情&quot;</span>);Sleep(<span class="hljs-number">100</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;的&quot;</span>);Sleep(<span class="hljs-number">100</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;爱&quot;</span>);Sleep(<span class="hljs-number">100</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;着&quot;</span>);Sleep(<span class="hljs-number">100</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;你&quot;</span>);Sleep(<span class="hljs-number">100</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;啊\n&quot;</span>);Sleep(<span class="hljs-number">1000</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t可&quot;</span>);Sleep(<span class="hljs-number">100</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;你&quot;</span>);Sleep(<span class="hljs-number">100</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;突然\n&quot;</span>);Sleep(<span class="hljs-number">1000</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t消失&quot;</span>);Sleep(<span class="hljs-number">100</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;在&quot;</span>);Sleep(<span class="hljs-number">100</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;我的&quot;</span>);Sleep(<span class="hljs-number">100</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;世&quot;</span>);Sleep(<span class="hljs-number">100</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;界\n&quot;</span>);Sleep(<span class="hljs-number">500</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\t\t\t按任意键继续...\n&quot;</span>);<br>getch();<br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br>&#125;<br><span class="hljs-comment">//剧情——开端——画面渲染</span><br><span class="hljs-comment">//字幕一</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">postOne</span><span class="hljs-params">(<span class="hljs-type">int</span> count)</span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n\n&quot;</span>);<br><span class="hljs-keyword">switch</span>(count)&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t***************************************\n&quot;</span>);<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t*       ♀                            *\n&quot;</span>);<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t*             爱的征途                *\n&quot;</span>);<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t*                            ♂       *\n&quot;</span>); <br>   <span class="hljs-keyword">default</span>:<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t***************************************\n&quot;</span>);<br>&#125;<br>&#125; <br><span class="hljs-comment">//字幕二 </span><br><span class="hljs-type">int</span> <span class="hljs-title function_">postTwo</span><span class="hljs-params">(<span class="hljs-type">int</span> count)</span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n\n&quot;</span>);<br><span class="hljs-keyword">switch</span>(count)&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t***************************************\n&quot;</span>);<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t*                              ##     *\n&quot;</span>);<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t*        演员：王子小鑫和公主某某     *\n&quot;</span>);<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t*                                     *\n&quot;</span>); <br>   <span class="hljs-keyword">default</span>:<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t***************************************\n&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-comment">//字幕三 </span><br><span class="hljs-type">int</span> <span class="hljs-title function_">postThree</span><span class="hljs-params">(<span class="hljs-type">int</span> count)</span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n\n&quot;</span>);<br><span class="hljs-keyword">switch</span>(count)&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t***************************************\n&quot;</span>);<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t*         导演             №         *\n&quot;</span>);<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t*             金笔连少     №         *\n&quot;</span>);<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t*                      №      ^-^    *\n&quot;</span>); <br>   <span class="hljs-keyword">default</span>:<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t***************************************\n&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-comment">//字幕循环</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">post</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">int</span> count=<span class="hljs-number">0</span>,num=<span class="hljs-number">1</span>;<br>Sleep(<span class="hljs-number">1000</span>);<br><span class="hljs-keyword">for</span>(;num!=<span class="hljs-number">4</span>;)&#123;<br><span class="hljs-keyword">for</span>(;count!=<span class="hljs-number">5</span>;)&#123;<br><span class="hljs-keyword">switch</span>(num)&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:postOne(count);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:postTwo(count);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:postThree(count);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>Sleep(<span class="hljs-number">400</span>); <br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br>count++;<br>&#125;<br>count--;<br><span class="hljs-keyword">for</span>(;count!=<span class="hljs-number">-1</span>;)&#123;<br><span class="hljs-keyword">switch</span>(num)&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:postOne(count);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:postTwo(count);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:postThree(count);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>Sleep(<span class="hljs-number">200</span>); <br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br>count--;<br>&#125;<br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br>Sleep(<span class="hljs-number">1000</span>);<br>count=<span class="hljs-number">0</span>;<br>num++;<br>&#125;<br><br>&#125; <br><span class="hljs-comment">//剧情——背景引入</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">background</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">char</span> test[<span class="hljs-number">1000</span>]=<span class="hljs-string">&quot;\n \n \n \n \t\t\t血 腥 的 风 放 肆 嘲 笑 \n \t\t\t漫 天 的 黄 叶 \n \t\t\t这 古 堡 的 路 \n \t\t\t已 横 尸 遍 野 \n \t\t\t听 说 \n \t\t\t你 落 入 封 闭 的 地 牢 \n \t\t\t发 不 出 求 救 的 讯 号 \n \t\t\t我 折 返 这 古 堡 \n \t\t\t提 着 刀 \n \t\t\t杀 红 了 眼 \n \t\t\t不 依 不 饶 \n&quot;</span>;<br><span class="hljs-type">char</span> *p ;<br>p = strtok(test,<span class="hljs-string">&quot; &quot;</span>);<br><span class="hljs-keyword">while</span>(p)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>,p);<br>p = strtok(<span class="hljs-literal">NULL</span>,<span class="hljs-string">&quot; &quot;</span>);<br>Sleep(<span class="hljs-number">100</span>);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\t\t\t按任意键继续\n&quot;</span>);<br>getch();<br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br>&#125; <br><span class="hljs-comment">//正在加载中</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">jiazai</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">1</span>;i++)&#123;<br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\t\t\t请稍等，正在加载中...\n&quot;</span>);Sleep(<span class="hljs-number">15</span>);system(<span class="hljs-string">&quot;cls&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t请\n&quot;</span>); <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t  稍等，正在加载中...\n&quot;</span>);Sleep(<span class="hljs-number">50</span>);system(<span class="hljs-string">&quot;cls&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t  稍\n&quot;</span>); <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t请  等，正在加载中...\n&quot;</span>);Sleep(<span class="hljs-number">50</span>);system(<span class="hljs-string">&quot;cls&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t    等\n&quot;</span>); <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t请稍  ，正在加载中...\n&quot;</span>);Sleep(<span class="hljs-number">50</span>);system(<span class="hljs-string">&quot;cls&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t      ，\n&quot;</span>); <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t请稍等  正在加载中...\n&quot;</span>);Sleep(<span class="hljs-number">50</span>);system(<span class="hljs-string">&quot;cls&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t        正\n&quot;</span>); <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t请稍等，  在加载中...\n&quot;</span>);Sleep(<span class="hljs-number">50</span>);system(<span class="hljs-string">&quot;cls&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t          在\n&quot;</span>); <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t请稍等，正  加载中...\n&quot;</span>);Sleep(<span class="hljs-number">50</span>);system(<span class="hljs-string">&quot;cls&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t            加\n&quot;</span>); <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t请稍等，正在  载中...\n&quot;</span>);Sleep(<span class="hljs-number">50</span>);system(<span class="hljs-string">&quot;cls&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t              载\n&quot;</span>); <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t请稍等，正在加  中...\n&quot;</span>);Sleep(<span class="hljs-number">50</span>);system(<span class="hljs-string">&quot;cls&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t                中\n&quot;</span>); <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t请稍等，正在加载  ...\n&quot;</span>);Sleep(<span class="hljs-number">50</span>);system(<span class="hljs-string">&quot;cls&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t                  .\n&quot;</span>); <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t请稍等，正在加载中 ..\n&quot;</span>);Sleep(<span class="hljs-number">50</span>);system(<span class="hljs-string">&quot;cls&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t                   .\n&quot;</span>); <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t请稍等，正在加载中. .\n&quot;</span>);Sleep(<span class="hljs-number">50</span>);system(<span class="hljs-string">&quot;cls&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t                    .\n&quot;</span>); <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t请稍等，正在加载中.. \n&quot;</span>);Sleep(<span class="hljs-number">50</span>);system(<span class="hljs-string">&quot;cls&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\t\t\t请稍等，正在加载中...\n&quot;</span>);Sleep(<span class="hljs-number">200</span>);<br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br>&#125;<br>&#125; <br><span class="hljs-comment">//剧情——结尾</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">last</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n\n\n\t\t\t王&quot;</span>);Sleep(<span class="hljs-number">300</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;子&quot;</span>);Sleep(<span class="hljs-number">300</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;看&quot;</span>);Sleep(<span class="hljs-number">300</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;见&quot;</span>);Sleep(<span class="hljs-number">500</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;来&quot;</span>);Sleep(<span class="hljs-number">200</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;找&quot;</span>);Sleep(<span class="hljs-number">200</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;自&quot;</span>);Sleep(<span class="hljs-number">200</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;己&quot;</span>);Sleep(<span class="hljs-number">200</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;的&quot;</span>);Sleep(<span class="hljs-number">200</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;公&quot;</span>);Sleep(<span class="hljs-number">200</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;主\n&quot;</span>);Sleep(<span class="hljs-number">2000</span>);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t非&quot;</span>);Sleep(<span class="hljs-number">300</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;常&quot;</span>);Sleep(<span class="hljs-number">300</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;的&quot;</span>);Sleep(<span class="hljs-number">600</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;高兴&quot;</span>);Sleep(<span class="hljs-number">300</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;王子&quot;</span>);Sleep(<span class="hljs-number">300</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;小鑫&quot;</span>);Sleep(<span class="hljs-number">300</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;将公主&quot;</span>);Sleep(<span class="hljs-number">300</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;拥入怀中\n&quot;</span>);Sleep(<span class="hljs-number">1000</span>);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t王子：\n&quot;</span>); Sleep(<span class="hljs-number">2000</span>); <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t我&quot;</span>);Sleep(<span class="hljs-number">200</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;以为&quot;</span>);Sleep(<span class="hljs-number">200</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;在也&quot;</span>);Sleep(<span class="hljs-number">200</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;见不到&quot;</span>);Sleep(<span class="hljs-number">200</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;你了！&quot;</span>);Sleep(<span class="hljs-number">3000</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\t\t\t两&quot;</span>);Sleep(<span class="hljs-number">400</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;人&quot;</span>);Sleep(<span class="hljs-number">400</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;紧&quot;</span>);Sleep(<span class="hljs-number">400</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;紧&quot;</span>);Sleep(<span class="hljs-number">400</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;相&quot;</span>);Sleep(<span class="hljs-number">400</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;拥\n&quot;</span>);Sleep(<span class="hljs-number">5000</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t公主：\n&quot;</span>);Sleep(<span class="hljs-number">2000</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t距离&quot;</span>);Sleep(<span class="hljs-number">1000</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;终究&quot;</span>);Sleep(<span class="hljs-number">300</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;没&quot;</span>);Sleep(<span class="hljs-number">700</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;能阻挡&quot;</span>);Sleep(<span class="hljs-number">200</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;我们&quot;</span>);Sleep(<span class="hljs-number">200</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;的爱\n&quot;</span>);Sleep(<span class="hljs-number">2000</span>);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t我不想&quot;</span>);Sleep(<span class="hljs-number">700</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;失去&quot;</span>);Sleep(<span class="hljs-number">200</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;你，&quot;</span>);Sleep(<span class="hljs-number">200</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;可是&quot;</span>);Sleep(<span class="hljs-number">200</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;我。。。。\n&quot;</span>);Sleep(<span class="hljs-number">2000</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t我的&quot;</span>);Sleep(<span class="hljs-number">200</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;王子殿下&quot;</span>);Sleep(<span class="hljs-number">200</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;我&quot;</span>);Sleep(<span class="hljs-number">200</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;爱&quot;</span>);Sleep(<span class="hljs-number">200</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;你\n&quot;</span>);Sleep(<span class="hljs-number">2000</span>);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\t\t\t公&quot;</span>);Sleep(<span class="hljs-number">700</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;主&quot;</span>);Sleep(<span class="hljs-number">200</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;转&quot;</span>);Sleep(<span class="hljs-number">200</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;身&quot;</span>);Sleep(<span class="hljs-number">200</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);Sleep(<span class="hljs-number">2000</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t黑&quot;</span>);Sleep(<span class="hljs-number">200</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;白&quot;</span>);Sleep(<span class="hljs-number">200</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;分&quot;</span>);Sleep(<span class="hljs-number">200</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;明&quot;</span>);Sleep(<span class="hljs-number">200</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;的&quot;</span>);Sleep(<span class="hljs-number">200</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;眼&quot;</span>);Sleep(<span class="hljs-number">200</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;眸&quot;</span>);Sleep(<span class="hljs-number">700</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;泛&quot;</span>);Sleep(<span class="hljs-number">200</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;着&quot;</span>);Sleep(<span class="hljs-number">200</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;红&quot;</span>);Sleep(<span class="hljs-number">200</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;宝&quot;</span>);Sleep(<span class="hljs-number">200</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;石&quot;</span>);Sleep(<span class="hljs-number">200</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;一&quot;</span>);Sleep(<span class="hljs-number">200</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;样&quot;</span>);Sleep(<span class="hljs-number">200</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;的&quot;</span>);Sleep(<span class="hljs-number">700</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;光&quot;</span>);Sleep(<span class="hljs-number">200</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;泽\n&quot;</span>);Sleep(<span class="hljs-number">2000</span>);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\t\t\t她&quot;</span>);Sleep(<span class="hljs-number">700</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;又一次&quot;</span>);Sleep(<span class="hljs-number">300</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;消失&quot;</span>);Sleep(<span class="hljs-number">200</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;不见\n&quot;</span>);Sleep(<span class="hljs-number">2000</span>);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t王&quot;</span>);Sleep(<span class="hljs-number">700</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;子&quot;</span>);Sleep(<span class="hljs-number">300</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;痛&quot;</span>);Sleep(<span class="hljs-number">200</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;哭：\n&quot;</span>);Sleep(<span class="hljs-number">5000</span>);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t我一定&quot;</span>);Sleep(<span class="hljs-number">1000</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;把你&quot;</span>);Sleep(<span class="hljs-number">1000</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;找&quot;</span>);Sleep(<span class="hljs-number">1000</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;回来！！\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n\t\t\t按任意键继续\n&quot;</span>);<br>getch();<br>&#125;  <br> <span class="hljs-comment">//进度条</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">load</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<br><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>,count=<span class="hljs-number">0</span>;<br>system(<span class="hljs-string">&quot;color 73&quot;</span>);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">50</span>;i++)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n\n\n\t\t\t\t     Installing%d%%\n&quot;</span>,count);<br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;=count/<span class="hljs-number">2</span>;j++)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;_&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(count!=<span class="hljs-number">100</span>)&#123;<br>count=count+<span class="hljs-number">2</span>;<br>Sleep(<span class="hljs-number">10</span>);<br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>Sleep(<span class="hljs-number">500</span>);<br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br>&#125; <br><span class="hljs-comment">//效果一</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">actionOne</span><span class="hljs-params">()</span>&#123;<br>Sleep(<span class="hljs-number">1000</span>);<br>system(<span class="hljs-string">&quot;color 75&quot;</span>);<br>Sleep(<span class="hljs-number">1000</span>);<br>system(<span class="hljs-string">&quot;color 71&quot;</span>);<br>Sleep(<span class="hljs-number">1000</span>);<br>system(<span class="hljs-string">&quot;color 72&quot;</span>);<br>Sleep(<span class="hljs-number">1000</span>);<br>system(<span class="hljs-string">&quot;color 74&quot;</span>);<br>Sleep(<span class="hljs-number">1000</span>);<br>system(<span class="hljs-string">&quot;color 70&quot;</span>);<br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br>&#125; <br><span class="hljs-comment">//蘑菇</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">monsterOne</span><span class="hljs-params">()</span>&#123;<br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t\t可爱的蘑菇甜甜\n\n&quot;</span>); <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t           &#x27;&#x27;&#x27;&#x27;&#x27;&#x27;           \n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t        &#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;         \n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t      &#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;§      \n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t    &#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;     \n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t   &#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;   \n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t  &#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;灬灬灬灬灬 &#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;  \n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t  &#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;〞≯   ≮  〃&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27; \n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t   &#x27;&#x27;&#x27;&#x27;&#x27;&#x27;〞      ミ 〃&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;  \n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t      〃〃   ︺     〃〃      \n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t         &#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;         \n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t         &#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;         \n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t         &#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;         \n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t         &#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;         \n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t         &#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;         \n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t          &#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;          \n&quot;</span>);<br>&#125; <br><span class="hljs-comment">//女巫</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">monsterTwo</span><span class="hljs-params">()</span>&#123;<br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t      可恶的巫婆\n\n&quot;</span>); <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t           @@@\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t          #   #\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t         / \\     \n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t       /  @-.\\\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t     /_  )\\\\  _\\\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t    /\\/\\/ | \\/\\/\\\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t       /~~~~~\\\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t      |  ^ ^  |\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t      |   .   |\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t      | (\\_/) |\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t  / .-. \\___/ .-. \\\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t @/` /.-.   .-.\\ `\\@\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t    @`   \\ /   `@\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125; <br><span class="hljs-comment">//厨师 </span><br><span class="hljs-type">int</span> <span class="hljs-title function_">monsterThree</span><span class="hljs-params">()</span>&#123;<br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t      奇厨师佳倩\n\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t               〃〃〃         \n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t             ≈≈≈≈№         \n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t           ≈≈≈≈ㄨ ξζ      \n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t          ≈≈灬灬灬灬灬ξξ    \n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t        √∫∫∫       ζξξ   \n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t       ∫∫∫∫ E    E   ζξξ \n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t       ∫∫∫∫~       ミζξξ \n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t       ∫∫∫∫    -     ζξξ \n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t       ∫∫∫∫      ㄨ         \n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n\n\n&quot;</span>);<br>&#125;<br><span class="hljs-comment">//移动的总函数 </span><br><span class="hljs-keyword">struct</span> contain <span class="hljs-title function_">move</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> contain zd,<span class="hljs-type">int</span> a[<span class="hljs-number">20</span>][<span class="hljs-number">20</span>])</span>&#123;<br><span class="hljs-keyword">for</span>(;;)&#123;<br><span class="hljs-type">char</span> position=getch();<br><span class="hljs-keyword">switch</span>(position)&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;w&#x27;</span>:zd=moveUp(zd,a);<br>  system(<span class="hljs-string">&quot;cls&quot;</span>);<br>  zd=ShowMap(zd,a);<br> <span class="hljs-keyword">break</span>;<br> <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;a&#x27;</span>:zd=moveLeft(zd,a);<br>          system(<span class="hljs-string">&quot;cls&quot;</span>);<br>  zd=ShowMap(zd,a);<br> <span class="hljs-keyword">break</span>;<br> <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;s&#x27;</span>:zd=moveDown(zd,a);<br>  system(<span class="hljs-string">&quot;cls&quot;</span>);<br>  zd=ShowMap(zd,a);<br> <span class="hljs-keyword">break</span>;<br> <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;d&#x27;</span>:zd=moveRight(zd,a);<br> <span class="hljs-keyword">if</span>(zd.person.is_over==<span class="hljs-number">0</span>)&#123;<br>     system(<span class="hljs-string">&quot;cls&quot;</span>);<br>  zd=ShowMap(zd,a);<br> &#125; <br>  <span class="hljs-keyword">break</span>;<br> <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;c&#x27;</span>:<span class="hljs-comment">//查看人物信息 </span><br> <span class="hljs-keyword">if</span>(zd.person.actor==<span class="hljs-number">1</span>)&#123;<br> zd=information(zd,a);<br>  system(<span class="hljs-string">&quot;cls&quot;</span>);<br>  zd=ShowMap(zd,a);<br> &#125;<br> <span class="hljs-keyword">break</span>;<br> <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;p&#x27;</span>:<span class="hljs-comment">//进入商店 </span><br> <span class="hljs-keyword">if</span>(zd.person.shop==<span class="hljs-number">1</span>)&#123;<br> zd=SHOP(zd);<br>  system(<span class="hljs-string">&quot;cls&quot;</span>);<br>  zd=ShowMap(zd,a);<br> &#125;<br> <span class="hljs-keyword">break</span>;<br> <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;b&#x27;</span>:<span class="hljs-comment">//查看怪物图谱 </span><br>  <span class="hljs-keyword">if</span>(zd.person.backpack==<span class="hljs-number">1</span>)&#123;<br>  zd=monsterBP(zd,a);<br>  system(<span class="hljs-string">&quot;cls&quot;</span>);<br>  zd=ShowMap(zd,a);<br>  &#125;<br> <span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(zd.person.is_over==<span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">return</span> zd;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> zd;<br>&#125; <br><span class="hljs-comment">//向上移动 </span><br><span class="hljs-keyword">struct</span> contain <span class="hljs-title function_">moveUp</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> contain zd,<span class="hljs-type">int</span> a[<span class="hljs-number">20</span>][<span class="hljs-number">20</span>])</span>&#123;<br><span class="hljs-keyword">if</span>(a[zd.person.z_x<span class="hljs-number">-1</span>][zd.person.z_y]==<span class="hljs-number">3</span>||a[zd.person.z_x<span class="hljs-number">-1</span>][zd.person.z_y]==<span class="hljs-number">13</span>)&#123;<span class="hljs-comment">//下一步是空格 </span><br>a[zd.person.z_x][zd.person.z_y]=<span class="hljs-number">3</span>;<br>a[zd.person.z_x<span class="hljs-number">-1</span>][zd.person.z_y]=<span class="hljs-number">2</span>;<br>zd.person.z_x=zd.person.z_x<span class="hljs-number">-1</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[zd.person.z_x<span class="hljs-number">-1</span>][zd.person.z_y]==<span class="hljs-number">4</span>)&#123;<span class="hljs-comment">//收集镇魂之玉 </span><br>a[zd.person.z_x<span class="hljs-number">-1</span>][zd.person.z_y]=<span class="hljs-number">3</span>;<br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br>zd.person.jade++;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n\t\t收集到%d个镇魂之玉\n\t\t集齐4个镇魂之玉才可以救王子&quot;</span>,zd.person.jade);<br><span class="hljs-keyword">if</span>(zd.person.jade==<span class="hljs-number">4</span>)&#123;<br>getch();<br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n\t\t你已集齐4颗镇魂之玉\n\t\t快去救你的王子吧\n&quot;</span>);<br>&#125;<br>getch();<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[zd.person.z_x<span class="hljs-number">-1</span>][zd.person.z_y]==<span class="hljs-number">10</span>)&#123;<span class="hljs-comment">//激活怪物图谱 </span><br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n\t\t\t智者：\n\t\t\t    恭喜你获得怪物图谱一本，\n\t\t\t    游戏中按b键可随时查看怪物信息\n&quot;</span>);<br>zd.person.backpack=<span class="hljs-number">1</span>;<br>a[zd.person.z_x<span class="hljs-number">-1</span>][zd.person.z_y]=<span class="hljs-number">3</span>;<br>getch();<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[zd.person.z_x<span class="hljs-number">-1</span>][zd.person.z_y]==<span class="hljs-number">14</span>)&#123;<span class="hljs-comment">//下一步是小史莱姆怪 </span><br><span class="hljs-keyword">if</span>(zd.person.hp&gt;zd.ms.m1Lose)&#123;<br>a[zd.person.z_x<span class="hljs-number">-1</span>][zd.person.z_y]=<span class="hljs-number">3</span>;<br>zd=fightM1(zd); <br>&#125;<span class="hljs-keyword">else</span> &#123;<br>faild(zd);<br>&#125; <br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[zd.person.z_x<span class="hljs-number">-1</span>][zd.person.z_y]==<span class="hljs-number">15</span>)&#123;<span class="hljs-comment">//下一步是大史莱姆怪 </span><br><span class="hljs-keyword">if</span>(zd.person.hp&gt;zd.ms.m2Lose)&#123;<br>a[zd.person.z_x<span class="hljs-number">-1</span>][zd.person.z_y]=<span class="hljs-number">3</span>;<br>zd=fightM2(zd); <br>&#125;<span class="hljs-keyword">else</span> &#123;<br>faild(zd);<br>&#125; <br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[zd.person.z_x<span class="hljs-number">-1</span>][zd.person.z_y]==<span class="hljs-number">16</span>)&#123;<span class="hljs-comment">//下一步是邪恶巫师 </span><br><span class="hljs-keyword">if</span>(zd.person.hp&gt;zd.ms.m3Lose)&#123;<br>a[zd.person.z_x<span class="hljs-number">-1</span>][zd.person.z_y]=<span class="hljs-number">3</span>;<br>zd=fightM3(zd); <br>&#125;<span class="hljs-keyword">else</span> &#123;<br>faild(zd);<br>&#125; <br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[zd.person.z_x<span class="hljs-number">-1</span>][zd.person.z_y]==<span class="hljs-number">17</span>)&#123;<span class="hljs-comment">//下一步是双剑武士 </span><br><span class="hljs-keyword">if</span>(zd.person.hp&gt;zd.ms.m4Lose)&#123;<br>a[zd.person.z_x<span class="hljs-number">-1</span>][zd.person.z_y]=<span class="hljs-number">3</span>;<br>zd=fightM4(zd); <br>&#125;<span class="hljs-keyword">else</span> &#123;<br>faild(zd);<br>&#125; <br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[zd.person.z_x<span class="hljs-number">-1</span>][zd.person.z_y]==<span class="hljs-number">100</span>)&#123;<span class="hljs-comment">//下一步是大法师 </span><br><span class="hljs-keyword">if</span>(zd.person.hp&gt;zd.ms.m5Lose)&#123;<br>a[zd.person.z_x<span class="hljs-number">-1</span>][zd.person.z_y]=<span class="hljs-number">3</span>;<br>zd=fightM5(zd);<br>zd.person.is_over=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> zd; <br>&#125;<span class="hljs-keyword">else</span> &#123;<br>faild(zd);<br>&#125; <br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[zd.person.z_x<span class="hljs-number">-1</span>][zd.person.z_y]==<span class="hljs-number">18</span>)&#123;<span class="hljs-comment">//下一步是加攻击力2点 </span><br>zd=addCarry(zd);<br>a[zd.person.z_x<span class="hljs-number">-1</span>][zd.person.z_y]=<span class="hljs-number">3</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[zd.person.z_x<span class="hljs-number">-1</span>][zd.person.z_y]==<span class="hljs-number">19</span>)&#123;<span class="hljs-comment">//下一步是加防御力2点 </span><br>zd=addDefend(zd);<br>a[zd.person.z_x<span class="hljs-number">-1</span>][zd.person.z_y]=<span class="hljs-number">3</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[zd.person.z_x<span class="hljs-number">-1</span>][zd.person.z_y]==<span class="hljs-number">23</span>)&#123;<span class="hljs-comment">//下一步是加攻击力10点 </span><br>zd=addCarry10(zd);<br>a[zd.person.z_x<span class="hljs-number">-1</span>][zd.person.z_y]=<span class="hljs-number">3</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[zd.person.z_x<span class="hljs-number">-1</span>][zd.person.z_y]==<span class="hljs-number">24</span>)&#123;<span class="hljs-comment">//下一步是加防御力10点 </span><br>zd=addDefend10(zd);<br>a[zd.person.z_x<span class="hljs-number">-1</span>][zd.person.z_y]=<span class="hljs-number">3</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[zd.person.z_x<span class="hljs-number">-1</span>][zd.person.z_y]==<span class="hljs-number">7</span>)&#123;<span class="hljs-comment">//下一步是加血200 </span><br>zd=addHp(zd);<br>a[zd.person.z_x<span class="hljs-number">-1</span>][zd.person.z_y]=<span class="hljs-number">3</span>;<br>&#125;<br><span class="hljs-keyword">return</span> zd;<br>&#125;<br> <span class="hljs-comment">//向下移动 </span><br><span class="hljs-keyword">struct</span> contain <span class="hljs-title function_">moveDown</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> contain zd,<span class="hljs-type">int</span> a[<span class="hljs-number">20</span>][<span class="hljs-number">20</span>])</span>&#123;<br><span class="hljs-keyword">if</span>(a[zd.person.z_x+<span class="hljs-number">1</span>][zd.person.z_y]==<span class="hljs-number">3</span>||a[zd.person.z_x+<span class="hljs-number">1</span>][zd.person.z_y]==<span class="hljs-number">13</span>)&#123;<span class="hljs-comment">//向下一步是空格 </span><br>a[zd.person.z_x][zd.person.z_y]=<span class="hljs-number">3</span>;<br>a[zd.person.z_x+<span class="hljs-number">1</span>][zd.person.z_y]=<span class="hljs-number">2</span>;<br>zd.person.z_x=zd.person.z_x+<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[zd.person.z_x+<span class="hljs-number">1</span>][zd.person.z_y]==<span class="hljs-number">12</span>)&#123;<span class="hljs-comment">//下一步是下一楼 </span><br>zd.person.<span class="hljs-built_in">floor</span>=<span class="hljs-number">1</span>;<br>ShowMap(zd,map2);<br>zd.person.z_x=<span class="hljs-number">1</span>;<br>zd.person.z_y=<span class="hljs-number">1</span>; <br>zd=move(zd,map2);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[zd.person.z_x+<span class="hljs-number">1</span>][zd.person.z_y]==<span class="hljs-number">21</span>)&#123;<span class="hljs-comment">//下一步是上三楼 </span><br>zd.person.<span class="hljs-built_in">floor</span>=<span class="hljs-number">3</span>;<br>ShowMap(zd,map4);<br>zd.person.z_x=<span class="hljs-number">17</span>;<br>zd.person.z_y=<span class="hljs-number">9</span>;<br>zd=move(zd,map4);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[zd.person.z_x+<span class="hljs-number">1</span>][zd.person.z_y]==<span class="hljs-number">22</span>)&#123;<span class="hljs-comment">//下一步是下二楼 </span><br>zd.person.<span class="hljs-built_in">floor</span>=<span class="hljs-number">2</span>;<br>ShowMap(zd,map3);<br>zd.person.z_x=<span class="hljs-number">17</span>;<br>zd.person.z_y=<span class="hljs-number">17</span>;<br>zd=move(zd,map3);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[zd.person.z_x+<span class="hljs-number">1</span>][zd.person.z_y]==<span class="hljs-number">31</span>)&#123;<span class="hljs-comment">//下一步是上四楼 </span><br>zd.person.<span class="hljs-built_in">floor</span>=<span class="hljs-number">4</span>;<br>ShowMap(zd,map5);<br>zd.person.z_x=<span class="hljs-number">17</span>;<br>zd.person.z_y=<span class="hljs-number">2</span>;<br>zd=move(zd,map5);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[zd.person.z_x+<span class="hljs-number">1</span>][zd.person.z_y]==<span class="hljs-number">32</span>)&#123;<span class="hljs-comment">//下一步是下三楼 </span><br>zd.person.<span class="hljs-built_in">floor</span>=<span class="hljs-number">3</span>;<br>ShowMap(zd,map4);<br>zd.person.z_x=<span class="hljs-number">17</span>;<br>zd.person.z_y=<span class="hljs-number">2</span>;<br>zd=move(zd,map4);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[zd.person.z_x+<span class="hljs-number">1</span>][zd.person.z_y]==<span class="hljs-number">41</span>)&#123;<span class="hljs-comment">//下一步是上五楼 </span><br>zd.person.<span class="hljs-built_in">floor</span>=<span class="hljs-number">5</span>;<br>ShowMap(zd,map6);<br>zd.person.z_x=<span class="hljs-number">17</span>;<br>zd.person.z_y=<span class="hljs-number">17</span>;<br>zd=move(zd,map6);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[zd.person.z_x+<span class="hljs-number">1</span>][zd.person.z_y]==<span class="hljs-number">42</span>)&#123;<span class="hljs-comment">//下一步是下四楼 </span><br>zd.person.<span class="hljs-built_in">floor</span>=<span class="hljs-number">4</span>;<br>ShowMap(zd,map5);<br>zd.person.z_x=<span class="hljs-number">17</span>;<br>zd.person.z_y=<span class="hljs-number">17</span>;<br>zd=move(zd,map5);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[zd.person.z_x+<span class="hljs-number">1</span>][zd.person.z_y]==<span class="hljs-number">5</span>) &#123;<span class="hljs-comment">//向下一步是第一个怪物 (1)</span><br>jiazai();<br>monsterOne();<br>sceneFirst();<br>a[zd.person.z_x+<span class="hljs-number">1</span>][zd.person.z_y]=<span class="hljs-number">3</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[zd.person.z_x+<span class="hljs-number">1</span>][zd.person.z_y]==<span class="hljs-number">50</span>) &#123;<span class="hljs-comment">//向下一步是第一个怪物 (2)</span><br>jiazai();<br>monsterOne();<br>sceneFirstII();<br>a[zd.person.z_x+<span class="hljs-number">1</span>][zd.person.z_y]=<span class="hljs-number">3</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[zd.person.z_x+<span class="hljs-number">1</span>][zd.person.z_y]==<span class="hljs-number">8</span>) &#123;<span class="hljs-comment">//向下一步是第二个怪物 </span><br>jiazai();<br>monsterTwo();<br>sceneSecond();<br>a[zd.person.z_x+<span class="hljs-number">1</span>][zd.person.z_y]=<span class="hljs-number">3</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[zd.person.z_x+<span class="hljs-number">1</span>][zd.person.z_y]==<span class="hljs-number">9</span>) &#123;<span class="hljs-comment">//向下一步是第三个怪物 </span><br>jiazai();<br>monsterThree();<br>sceneThird();<br>a[zd.person.z_x+<span class="hljs-number">1</span>][zd.person.z_y]=<span class="hljs-number">3</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[zd.person.z_x+<span class="hljs-number">1</span>][zd.person.z_y]==<span class="hljs-number">14</span>)&#123;<span class="hljs-comment">//下一步是小史莱姆怪 </span><br><span class="hljs-keyword">if</span>(zd.person.hp&gt;zd.ms.m1Lose)&#123;<br>a[zd.person.z_x+<span class="hljs-number">1</span>][zd.person.z_y]=<span class="hljs-number">3</span>;<br>zd=fightM1(zd); <br>&#125;<span class="hljs-keyword">else</span> &#123;<br>faild(zd);<br>&#125; <br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[zd.person.z_x+<span class="hljs-number">1</span>][zd.person.z_y]==<span class="hljs-number">15</span>)&#123;<span class="hljs-comment">//下一步是大史莱姆怪 </span><br><span class="hljs-keyword">if</span>(zd.person.hp&gt;zd.ms.m2Lose)&#123;<br>a[zd.person.z_x+<span class="hljs-number">1</span>][zd.person.z_y]=<span class="hljs-number">3</span>;<br>zd=fightM2(zd); <br>&#125;<span class="hljs-keyword">else</span> &#123;<br>faild(zd);<br>&#125; <br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[zd.person.z_x+<span class="hljs-number">1</span>][zd.person.z_y]==<span class="hljs-number">16</span>)&#123;<span class="hljs-comment">//下一步是邪恶巫师 </span><br><span class="hljs-keyword">if</span>(zd.person.hp&gt;zd.ms.m3Lose)&#123;<br>a[zd.person.z_x+<span class="hljs-number">1</span>][zd.person.z_y]=<span class="hljs-number">3</span>;<br>zd=fightM3(zd); <br>&#125;<span class="hljs-keyword">else</span> &#123;<br>faild(zd);<br>&#125; <br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[zd.person.z_x+<span class="hljs-number">1</span>][zd.person.z_y]==<span class="hljs-number">17</span>)&#123;<span class="hljs-comment">//下一步是双剑武士 </span><br><span class="hljs-keyword">if</span>(zd.person.hp&gt;zd.ms.m4Lose)&#123;<br>a[zd.person.z_x+<span class="hljs-number">1</span>][zd.person.z_y]=<span class="hljs-number">3</span>;<br>zd=fightM4(zd); <br>&#125;<span class="hljs-keyword">else</span> &#123;<br>faild(zd);<br>&#125; <br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[zd.person.z_x+<span class="hljs-number">1</span>][zd.person.z_y]==<span class="hljs-number">18</span>)&#123;<span class="hljs-comment">//下一步是加攻击力2点 </span><br>zd=addCarry(zd);<br>a[zd.person.z_x+<span class="hljs-number">1</span>][zd.person.z_y]=<span class="hljs-number">3</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[zd.person.z_x+<span class="hljs-number">1</span>][zd.person.z_y]==<span class="hljs-number">19</span>)&#123;<span class="hljs-comment">//下一步是加防御力2点 </span><br>zd=addDefend(zd);<br>a[zd.person.z_x+<span class="hljs-number">1</span>][zd.person.z_y]=<span class="hljs-number">3</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[zd.person.z_x+<span class="hljs-number">1</span>][zd.person.z_y]==<span class="hljs-number">23</span>)&#123;<span class="hljs-comment">//下一步是加攻击力10点 </span><br>zd=addCarry10(zd);<br>a[zd.person.z_x+<span class="hljs-number">1</span>][zd.person.z_y]=<span class="hljs-number">3</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[zd.person.z_x+<span class="hljs-number">1</span>][zd.person.z_y]==<span class="hljs-number">24</span>)&#123;<span class="hljs-comment">//下一步是加防御力10点 </span><br>zd=addDefend10(zd);<br>a[zd.person.z_x+<span class="hljs-number">1</span>][zd.person.z_y]=<span class="hljs-number">3</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[zd.person.z_x+<span class="hljs-number">1</span>][zd.person.z_y]==<span class="hljs-number">7</span>)&#123;<span class="hljs-comment">//下一步是加血200 </span><br>zd=addHp(zd);<br>a[zd.person.z_x+<span class="hljs-number">1</span>][zd.person.z_y]=<span class="hljs-number">3</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[zd.person.z_x+<span class="hljs-number">1</span>][zd.person.z_y]==<span class="hljs-number">4</span>)&#123;<br>a[zd.person.z_x+<span class="hljs-number">1</span>][zd.person.z_y]=<span class="hljs-number">3</span>;<br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br>zd.person.jade++;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n\t\t收集到%d个镇魂之玉\n\t\t集齐4个镇魂之玉才可以救王子&quot;</span>,zd.person.jade);<br><span class="hljs-keyword">if</span>(zd.person.jade==<span class="hljs-number">4</span>)&#123;<br>getch();<br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n\t\t你已集齐4颗镇魂之玉\n\t\t快去救你的王子吧\n&quot;</span>);<br>&#125;<br>getch();<br>&#125;<br><span class="hljs-keyword">return</span> zd;<br>&#125;<br> <span class="hljs-comment">//向左移动 </span><br><span class="hljs-keyword">struct</span> contain <span class="hljs-title function_">moveLeft</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> contain zd,<span class="hljs-type">int</span> a[<span class="hljs-number">20</span>][<span class="hljs-number">20</span>])</span>&#123;<br><span class="hljs-keyword">if</span>(a[zd.person.z_x][zd.person.z_y<span class="hljs-number">-1</span>]==<span class="hljs-number">3</span>||a[zd.person.z_x][zd.person.z_y<span class="hljs-number">-1</span>]==<span class="hljs-number">13</span>)&#123;<span class="hljs-comment">//下一步是空格 </span><br>a[zd.person.z_x][zd.person.z_y]=<span class="hljs-number">3</span>;<br>a[zd.person.z_x][zd.person.z_y<span class="hljs-number">-1</span>]=<span class="hljs-number">2</span>;<br>zd.person.z_y=zd.person.z_y<span class="hljs-number">-1</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[zd.person.z_x][zd.person.z_y<span class="hljs-number">-1</span>]==<span class="hljs-number">11</span>)&#123;<span class="hljs-comment">//下一步是上二楼 </span><br>zd.person.<span class="hljs-built_in">floor</span>=<span class="hljs-number">2</span>;<br>ShowMap(zd,map3);<br>zd.person.z_x=<span class="hljs-number">17</span>;<br>zd.person.z_y=<span class="hljs-number">2</span>;<br>zd=move(zd,map3);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[zd.person.z_x][zd.person.z_y<span class="hljs-number">-1</span>]==<span class="hljs-number">14</span>)&#123;<span class="hljs-comment">//下一步是小史莱姆怪 </span><br><span class="hljs-keyword">if</span>(zd.person.hp&gt;zd.ms.m1Lose)&#123;<br>a[zd.person.z_x][zd.person.z_y<span class="hljs-number">-1</span>]=<span class="hljs-number">3</span>;<br>zd=fightM1(zd); <br>&#125;<span class="hljs-keyword">else</span> &#123;<br>faild(zd);<br>&#125; <br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[zd.person.z_x][zd.person.z_y<span class="hljs-number">-1</span>]==<span class="hljs-number">15</span>)&#123;<span class="hljs-comment">//下一步是大史莱姆怪 </span><br><span class="hljs-keyword">if</span>(zd.person.hp&gt;zd.ms.m2Lose)&#123;<br>a[zd.person.z_x][zd.person.z_y<span class="hljs-number">-1</span>]=<span class="hljs-number">3</span>;<br>zd=fightM2(zd); <br>&#125;<span class="hljs-keyword">else</span> &#123;<br>faild(zd);<br>&#125; <br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[zd.person.z_x][zd.person.z_y<span class="hljs-number">-1</span>]==<span class="hljs-number">16</span>)&#123;<span class="hljs-comment">//下一步是邪恶巫师 </span><br><span class="hljs-keyword">if</span>(zd.person.hp&gt;zd.ms.m3Lose)&#123;<br>a[zd.person.z_x][zd.person.z_y<span class="hljs-number">-1</span>]=<span class="hljs-number">3</span>;<br>zd=fightM3(zd); <br>&#125;<span class="hljs-keyword">else</span> &#123;<br>faild(zd);<br>&#125; <br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[zd.person.z_x][zd.person.z_y<span class="hljs-number">-1</span>]==<span class="hljs-number">17</span>)&#123;<span class="hljs-comment">//下一步是双剑武士 </span><br><span class="hljs-keyword">if</span>(zd.person.hp&gt;zd.ms.m4Lose)&#123;<br>a[zd.person.z_x][zd.person.z_y<span class="hljs-number">-1</span>]=<span class="hljs-number">3</span>;<br>zd=fightM4(zd); <br>&#125;<span class="hljs-keyword">else</span> &#123;<br>faild(zd);<br>&#125; <br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[zd.person.z_x][zd.person.z_y<span class="hljs-number">-1</span>]==<span class="hljs-number">18</span>)&#123;<span class="hljs-comment">//下一步是加攻击力2点 </span><br>zd=addCarry(zd);<br>a[zd.person.z_x][zd.person.z_y<span class="hljs-number">-1</span>]=<span class="hljs-number">3</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[zd.person.z_x][zd.person.z_y<span class="hljs-number">-1</span>]==<span class="hljs-number">19</span>)&#123;<span class="hljs-comment">//下一步是加防御力2点 </span><br>zd=addDefend(zd);<br>a[zd.person.z_x][zd.person.z_y<span class="hljs-number">-1</span>]=<span class="hljs-number">3</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[zd.person.z_x][zd.person.z_y<span class="hljs-number">-1</span>]==<span class="hljs-number">23</span>)&#123;<span class="hljs-comment">//下一步是加攻击力10点 </span><br>zd=addCarry10(zd);<br>a[zd.person.z_x][zd.person.z_y<span class="hljs-number">-1</span>]=<span class="hljs-number">3</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[zd.person.z_x][zd.person.z_y<span class="hljs-number">-1</span>]==<span class="hljs-number">24</span>)&#123;<span class="hljs-comment">//下一步是加防御力10点 </span><br>zd=addDefend10(zd);<br>a[zd.person.z_x][zd.person.z_y<span class="hljs-number">-1</span>]=<span class="hljs-number">3</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[zd.person.z_x][zd.person.z_y<span class="hljs-number">-1</span>]==<span class="hljs-number">7</span>)&#123;<span class="hljs-comment">//下一步是加血200 </span><br>zd=addHp(zd);<br>a[zd.person.z_x][zd.person.z_y<span class="hljs-number">-1</span>]=<span class="hljs-number">3</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[zd.person.z_x][zd.person.z_y<span class="hljs-number">-1</span>]==<span class="hljs-number">25</span>)&#123;<span class="hljs-comment">//下一步是商店</span><br>zd=openshop(zd);<br>a[zd.person.z_x][zd.person.z_y<span class="hljs-number">-1</span>]=<span class="hljs-number">3</span>;<br>&#125;<br><span class="hljs-keyword">return</span> zd;<br>&#125;<br> <span class="hljs-comment">//向右移动 </span><br><span class="hljs-keyword">struct</span> contain <span class="hljs-title function_">moveRight</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> contain zd,<span class="hljs-type">int</span> a[<span class="hljs-number">20</span>][<span class="hljs-number">20</span>])</span>&#123;<br><span class="hljs-keyword">if</span>(a[zd.person.z_x][zd.person.z_y+<span class="hljs-number">1</span>]==<span class="hljs-number">3</span>||a[zd.person.z_x][zd.person.z_y+<span class="hljs-number">1</span>]==<span class="hljs-number">13</span>)&#123;<span class="hljs-comment">//下一步是空格 </span><br>a[zd.person.z_x][zd.person.z_y]=<span class="hljs-number">3</span>;<br>a[zd.person.z_x][zd.person.z_y+<span class="hljs-number">1</span>]=<span class="hljs-number">2</span>;<br>zd.person.z_y=zd.person.z_y+<span class="hljs-number">1</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[zd.person.z_x][zd.person.z_y+<span class="hljs-number">1</span>]==<span class="hljs-number">6</span>&amp;&amp;zd.person.jade==<span class="hljs-number">4</span>)&#123;<span class="hljs-comment">//游戏铺垫完毕 </span><br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br>last();<br>gameBegin();<br>zd.person.is_over=<span class="hljs-number">1</span>;<br>zd.person.z_x=<span class="hljs-number">18</span>;<br>zd.person.z_y=<span class="hljs-number">10</span>;<br><span class="hljs-keyword">return</span> zd;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[zd.person.z_x][zd.person.z_y+<span class="hljs-number">1</span>]==<span class="hljs-number">14</span>)&#123;<span class="hljs-comment">//下一步是小史莱姆怪 </span><br><span class="hljs-keyword">if</span>(zd.person.hp&gt;zd.ms.m1Lose)&#123;<br>a[zd.person.z_x][zd.person.z_y+<span class="hljs-number">1</span>]=<span class="hljs-number">3</span>;<br>zd=fightM1(zd); <br>&#125;<span class="hljs-keyword">else</span> &#123;<br>faild(zd);<br>&#125; <br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[zd.person.z_x][zd.person.z_y+<span class="hljs-number">1</span>]==<span class="hljs-number">15</span>)&#123;<span class="hljs-comment">//下一步是大史莱姆怪 </span><br><span class="hljs-keyword">if</span>(zd.person.hp&gt;zd.ms.m2Lose)&#123;<br>a[zd.person.z_x][zd.person.z_y+<span class="hljs-number">1</span>]=<span class="hljs-number">3</span>;<br>zd=fightM2(zd); <br>&#125;<span class="hljs-keyword">else</span> &#123;<br>faild(zd);<br>&#125; <br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[zd.person.z_x][zd.person.z_y+<span class="hljs-number">1</span>]==<span class="hljs-number">16</span>)&#123;<span class="hljs-comment">//下一步是邪恶巫师 </span><br><span class="hljs-keyword">if</span>(zd.person.hp&gt;zd.ms.m3Lose)&#123;<br>a[zd.person.z_x][zd.person.z_y+<span class="hljs-number">1</span>]=<span class="hljs-number">3</span>;<br>zd=fightM3(zd); <br>&#125;<span class="hljs-keyword">else</span> &#123;<br>faild(zd);<br>&#125; <br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[zd.person.z_x][zd.person.z_y+<span class="hljs-number">1</span>]==<span class="hljs-number">17</span>)&#123;<span class="hljs-comment">//下一步是双剑武士 </span><br><span class="hljs-keyword">if</span>(zd.person.hp&gt;zd.ms.m4Lose)&#123;<br>a[zd.person.z_x][zd.person.z_y+<span class="hljs-number">1</span>]=<span class="hljs-number">3</span>;<br>zd=fightM4(zd); <br>&#125;<span class="hljs-keyword">else</span> &#123;<br>faild(zd);<br>&#125; <br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[zd.person.z_x][zd.person.z_y+<span class="hljs-number">1</span>]==<span class="hljs-number">18</span>)&#123;<span class="hljs-comment">//下一步是加攻击力2点 </span><br>zd=addCarry(zd);<br>a[zd.person.z_x][zd.person.z_y+<span class="hljs-number">1</span>]=<span class="hljs-number">3</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[zd.person.z_x][zd.person.z_y+<span class="hljs-number">1</span>]==<span class="hljs-number">19</span>)&#123;<span class="hljs-comment">//下一步是加防御力2点 </span><br>zd=addDefend(zd);<br>a[zd.person.z_x][zd.person.z_y+<span class="hljs-number">1</span>]=<span class="hljs-number">3</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[zd.person.z_x][zd.person.z_y+<span class="hljs-number">1</span>]==<span class="hljs-number">23</span>)&#123;<span class="hljs-comment">//下一步是加攻击力10点 </span><br>zd=addCarry10(zd);<br>a[zd.person.z_x][zd.person.z_y+<span class="hljs-number">1</span>]=<span class="hljs-number">3</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[zd.person.z_x][zd.person.z_y+<span class="hljs-number">1</span>]==<span class="hljs-number">24</span>)&#123;<span class="hljs-comment">//下一步是加防御力10点 </span><br>zd=addDefend10(zd);<br>a[zd.person.z_x][zd.person.z_y+<span class="hljs-number">1</span>]=<span class="hljs-number">3</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[zd.person.z_x][zd.person.z_y+<span class="hljs-number">1</span>]==<span class="hljs-number">7</span>)&#123;<span class="hljs-comment">//下一步是加血200 </span><br>zd=addHp(zd);<br>a[zd.person.z_x][zd.person.z_y+<span class="hljs-number">1</span>]=<span class="hljs-number">3</span>;<br>&#125;<br><span class="hljs-keyword">return</span> zd;<br>&#125;<br><span class="hljs-comment">//查看人物信息</span><br><span class="hljs-keyword">struct</span> contain <span class="hljs-title function_">information</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> contain zd,<span class="hljs-type">int</span> a[<span class="hljs-number">20</span>][<span class="hljs-number">20</span>])</span>&#123;<br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n\t\t\t    人物属性\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t昵称  ：%s\n&quot;</span>,zd.person.name);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t生命值：%d\n&quot;</span>,zd.person.hp);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t攻击  ：%d\n&quot;</span>,zd.person.carry);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t防御  ：%d\n&quot;</span>,zd.person.defend);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t金币  ：%d\n&quot;</span>,zd.person.fortune);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\t\t\t按任意键返回\n&quot;</span>);<br>getch();<br><span class="hljs-keyword">return</span> zd;<br>&#125; <br><span class="hljs-comment">//怪物图谱</span><br><span class="hljs-keyword">struct</span> contain <span class="hljs-title function_">monsterBP</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> contain zd,<span class="hljs-type">int</span> a[<span class="hljs-number">20</span>][<span class="hljs-number">20</span>])</span>&#123;<br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\t\t\t\t    &lt;怪物图谱&gt;\n\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t○:%-10s   血量：%4d  攻击：%-4d   防御：%-4d   损血：%s\n\n&quot;</span>,zd.ms.m1_name,zd.ms.m1_hp,zd.ms.m1_carry,zd.ms.m1_defend,zd.ms.m1_lose); <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t◎:%-10s   血量：%4d  攻击：%-4d   防御：%-4d   损血：%s\n\n&quot;</span>,zd.ms.m2_name,zd.ms.m2_hp,zd.ms.m2_carry,zd.ms.m2_defend,zd.ms.m2_lose); <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t☆:%-10s   血量：%4d  攻击：%-4d   防御：%-4d   损血：%s\n\n&quot;</span>,zd.ms.m3_name,zd.ms.m3_hp,zd.ms.m3_carry,zd.ms.m3_defend,zd.ms.m3_lose); <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t¤:%-10s   血量：%4d  攻击：%-4d   防御：%-4d   损血：%s\n\n&quot;</span>,zd.ms.m4_name,zd.ms.m4_hp,zd.ms.m4_carry,zd.ms.m4_defend,zd.ms.m4_lose); <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t№:%-10s   血量：%4d  攻击：%-4d   防御：%-4d   损血：%s\n\n&quot;</span>,zd.ms.m5_name,zd.ms.m5_hp,zd.ms.m5_carry,zd.ms.m5_defend,zd.ms.m5_lose); <br>getch();<br><span class="hljs-keyword">return</span> zd;<br>&#125; <br><span class="hljs-comment">//商店 </span><br><span class="hljs-keyword">struct</span> contain <span class="hljs-title function_">SHOP</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> contain zd)</span>&#123;<br><span class="hljs-keyword">for</span>(;;)&#123;<br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\t\t\t\t  &lt;魔法商店&gt;\n\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t亲爱的%s，花%d金币你可以购买\n\n&quot;</span>,zd.person.name,zd.person.money);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t\tj 、2点攻击力\n\n&quot;</span>); <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t\tk 、2点防御力\n\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t\tl 、离开\n\n&quot;</span>); <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t您当前金币余额为：%d\n\n\t\t\t请输入你选择的项目代号（如 j ）：\n\n&quot;</span>,zd.person.fortune);<br><span class="hljs-type">char</span> num1=getchar();<br><span class="hljs-type">char</span> num=getchar();<br><span class="hljs-keyword">switch</span>(num)&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;j&#x27;</span>:<span class="hljs-keyword">if</span>(zd.person.fortune&gt;=zd.person.money)&#123;<span class="hljs-comment">//加攻击力2点 </span><br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br>zd.person.fortune=zd.person.fortune-zd.person.money;<br>zd.person.carry=zd.person.carry+<span class="hljs-number">2</span>;<br>zd.person.money=zd.person.money*<span class="hljs-number">2</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n\t\t\t您的攻击力提升了2点\n\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t当前攻击力为：%d\n\n&quot;</span>,zd.person.carry);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t您还剩下金币：%d\n\n&quot;</span>,zd.person.fortune);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t按任意键返回\n&quot;</span>);<br>getch();<br><span class="hljs-keyword">return</span> zd;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n\t\t\t很抱歉，您没有足够的金币\n\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t按任意键返回\n&quot;</span>);<br>getch();<br><span class="hljs-keyword">return</span> zd;<br>&#125;<span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;k&#x27;</span>:<span class="hljs-keyword">if</span>(zd.person.fortune&gt;=zd.person.money)&#123;<span class="hljs-comment">//加防御力2点 </span><br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br>zd.person.fortune=zd.person.fortune-zd.person.money;<br>zd.person.defend=zd.person.defend+<span class="hljs-number">2</span>;<br>zd.person.money=zd.person.money*<span class="hljs-number">2</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n\t\t\t您的防御力提升了2点\n\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t当前防御力为：%d\n\n&quot;</span>,zd.person.defend);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t您还剩下金币：%d\n\n&quot;</span>,zd.person.fortune);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t按任意键返回\n&quot;</span>);<br>getch();<br><span class="hljs-keyword">return</span> zd;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n\t\t\t很抱歉，您没有足够的金币\n\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t按任意键返回\n&quot;</span>);<br>getch();<br><span class="hljs-keyword">return</span> zd;<br>&#125;<span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;l&#x27;</span>: <span class="hljs-keyword">return</span> zd;<span class="hljs-comment">//返回 </span><br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:system(<span class="hljs-string">&quot;cls&quot;</span>);<span class="hljs-comment">//输入错误 </span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n\t\t\t输入错误！！！\n\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t按任意键返回\n&quot;</span>);<br>getch();<br><span class="hljs-keyword">return</span> zd; <br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> zd;<br>&#125; <br><span class="hljs-type">int</span> <span class="hljs-title function_">sceneFirst</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<br>getch();<br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t===============================\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t路遇野生蘑菇一枚\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t===============================\n\n&quot;</span>);getch();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t公主(嗨森)：\n\t\t\t好可爱啊！\n&quot;</span>);getch();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t蘑菇甜甜（微笑）：\n\t\t\t带我回家吧，我会陪你度过很多美好时光.\n&quot;</span>);getch();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t公主（皱眉）：\n\t\t\t对不起哦，我已经有陪我度过美好时光的人了，我要去找他\n&quot;</span>);getch();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t蘑菇甜甜（难过）：\n\t\t\t那你只有把我杀了才可以过去\n&quot;</span>);getch();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t公主带着浅浅笑意，缓缓起身\n&quot;</span>);getch();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t轻轻合上刀剑，徐徐前行\n&quot;</span>);getch();<br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br><span class="hljs-type">int</span> <span class="hljs-title function_">sceneFirstII</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<br>getch();<br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t===============================\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t路遇野生蘑菇一枚\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t===============================\n\n&quot;</span>);getch();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t蘑菇甜甜（平静）：\n\t\t\t如果再给你一次机会，你会选我吗？\n&quot;</span>);getch();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t公主（冷漠）：\n\t\t\t不会\n&quot;</span>);getch();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t蘑菇甜甜（难过）：\n\t\t\t去拿下一个镇魂之玉吧，早点救到王子。\n&quot;</span>);getch();<br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">sceneSecond</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<br>getch();<br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t===============================\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t遭遇到可恶的巫婆\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t===============================\n\n&quot;</span>);getch();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t巫婆（笑盈盈）：\n\t\t\t年轻的公主哟，我有一件奇幻连衣裙，穿上它，\n&quot;</span>);getch();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t你将成为举世瞩目的人，倾国倾城\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t公主（警觉）：\n\t\t\t交换条件是什么？\n&quot;</span>);getch();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t巫婆（笑盈盈）：\n\t\t\t你只需要原路返回，王子的身体供我享乐\n&quot;</span>);getch();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t公主（大怒）：\n\t\t\t淫邪的巫婆，我要杀了你\n&quot;</span>);getch();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t巫婆（阴险地笑）：\n\t\t\t那就没办法了，出手吧！\n&quot;</span>);getch();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t公主轻笑，再一次展示了杀手素养。\n&quot;</span>);getch();<br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">sceneThird</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<br>getch();<br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t===============================\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t 遇到西国奇厨师\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t===============================\n\n&quot;</span>);getch();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t某某（冷漠）：\n\t\t\t能走到这儿，我想你已经很清楚，\n&quot;</span>);getch();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t要通过去古堡的路，必须...除掉我们这群暧昧党\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t公主拔剑：\n\t\t\t来吧\n&quot;</span>);getch();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t空气中弥漫着各种情仇的味道\n&quot;</span>);getch();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t公主举剑，直刺向某某心脏\n&quot;</span>);getch();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t20cm,某某没有动静\n&quot;</span>);getch();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t10cm,某某没有动静\n&quot;</span>);getch();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t鲜血殷红了某某白色的衣服\n&quot;</span>);getch();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t某某：\n\t\t\t你过去吧\n&quot;</span>);getch();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t公主愣住两秒，用力抽出满是鲜血的剑\n&quot;</span>);getch();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t公主前行,她一句话，又停住脚步\n&quot;</span>);getch();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t某某：\n\t\t\t我和你有相似的过往\n&quot;</span>);getch();<br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">gameBegin</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<br>system(<span class="hljs-string">&quot;cls&quot;</span>); <br>system(<span class="hljs-string">&quot;color 07&quot;</span>);<br><span class="hljs-type">char</span> test[<span class="hljs-number">1000</span>]=<span class="hljs-string">&quot;\n\n\n\t\t\t你 以 为 我 们 的 游 戏 已 经 结 束 了 ？那 只 是 背 景 介 绍， \n\t\t\t 游 戏 才 刚 刚 开 始\n&quot;</span>;<br><span class="hljs-type">char</span> *p ;<br>p = strtok(test,<span class="hljs-string">&quot; &quot;</span>);<br><span class="hljs-keyword">while</span>(p)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>,p);<br>p = strtok(<span class="hljs-literal">NULL</span>,<span class="hljs-string">&quot; &quot;</span>);<br>Sleep(<span class="hljs-number">100</span>);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\t\t\t按任意键继续...\n&quot;</span>);<br>getch();<br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br>&#125;<br><span class="hljs-comment">//正式的游戏</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">theme</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">switch</span>(j)&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:one();<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t■======公主救王子======■\n&quot;</span>);two();<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:one();<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t■======公主救王  ======■\n&quot;</span>);two();<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:one();<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t■======公主救    ======■\n&quot;</span>);two();<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:one();<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t■======公主      ======■\n&quot;</span>);two();<br><span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:one();<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t■======公        ======■\n&quot;</span>);two();<br><span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:one();<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t■======          ======■\n&quot;</span>);two();<br><span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:one();<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t■======王        ======■\n&quot;</span>);two();<br><span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:one();<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t■======王子      ======■\n&quot;</span>);two();<br><span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:one();<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t■======王子救    ======■\n&quot;</span>);two();<br><span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:one();<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t■======王子救公  ======■\n&quot;</span>);two();<br><span class="hljs-keyword">case</span> <span class="hljs-number">11</span>:one();<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t■======王子救公主======■\n&quot;</span>);two();<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n\t\t■■■■■■■■■■■■■\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t■======================■\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t■====== 爱的征途 ======■\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t■======================■\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t■■■■■■■■■■■■■\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n\t\t\t按任意键继续...\n&quot;</span>);<br>getch();<br>&#125; <br><span class="hljs-type">int</span> <span class="hljs-title function_">one</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n\t\t■■■■■■■■■■■■■\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t■======================■\n&quot;</span>);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">two</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t■======================■\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t■■■■■■■■■■■■■\n&quot;</span>);<br>Sleep(<span class="hljs-number">150</span>);<br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br>&#125;<br><span class="hljs-comment">//玩家注册</span><br><span class="hljs-keyword">struct</span> contain <span class="hljs-title function_">login</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> contain zd)</span>&#123;<br><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n\n\t\t\t你是王子，请输入你的角色名：\n&quot;</span>);<br>Sleep(<span class="hljs-number">5</span>);<br>system(<span class="hljs-string">&quot;color f2&quot;</span>); <br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n\n\t\t\t 你是王子，请输入你的角色名：\n&quot;</span>);<br>Sleep(<span class="hljs-number">5</span>);<br>system(<span class="hljs-string">&quot;color f4&quot;</span>);<br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br>&#125; <br>system(<span class="hljs-string">&quot;color f0&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n\n\t\t\t你是王子，请输入你的角色名：\n\t\t\t\t&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,&amp;zd.person.name);<br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n\t\t\t    人物属性\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t昵称  ：%s\n&quot;</span>,zd.person.name);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t生命值：%d\n&quot;</span>,zd.person.hp);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t攻击  ：%d\n&quot;</span>,zd.person.carry);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t防御  ：%d\n&quot;</span>,zd.person.defend);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t\t金币  ：%d\n&quot;</span>,zd.person.fortune);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\t\t游戏过程中可按‘c’键查看人物属性\n&quot;</span>);<br>getch();<br>zd.person.is_over=<span class="hljs-number">0</span>;<br>zd.person.actor=<span class="hljs-number">1</span>;<br>zd.person.<span class="hljs-built_in">floor</span>=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> zd;<br>&#125; <br><span class="hljs-comment">//打不过</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">faild</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> contain zd)</span>&#123;<br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n\t\t亲爱的%s，你还打不过它！\n&quot;</span>,zd.person.name);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\t\t按任意键返回\n&quot;</span>);<br>getch();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br><span class="hljs-comment">//和小史莱姆怪打斗 </span><br><span class="hljs-keyword">struct</span> contain <span class="hljs-title function_">fightM1</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> contain zd)</span>&#123;<br>zd.person.hp=zd.person.hp-zd.ms.m1Lose; <br>zd.person.fortune=zd.person.fortune+<span class="hljs-number">10</span>;<br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n\t\t您损失了%d点血，打败了%s\n&quot;</span>,zd.ms.m1Lose,zd.ms.m1_name);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t获得金币：10\n&quot;</span>); <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\t\t按任意键返回\n&quot;</span>);<br>getch();<br><span class="hljs-keyword">return</span> zd;<br>&#125;<br><span class="hljs-comment">//和大史莱姆怪打斗 </span><br><span class="hljs-keyword">struct</span> contain <span class="hljs-title function_">fightM2</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> contain zd)</span>&#123;<br>zd.person.hp=zd.person.hp-zd.ms.m2Lose; <br>zd.person.fortune=zd.person.fortune+<span class="hljs-number">20</span>;<br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n\t\t您损失了%d点血，打败了%s\n&quot;</span>,zd.ms.m2Lose,zd.ms.m2_name);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t获得金币：20\n&quot;</span>); <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\t\t按任意键返回\n&quot;</span>);<br>getch();<br><span class="hljs-keyword">return</span> zd;<br>&#125;<br><span class="hljs-comment">//和邪恶巫师打斗 </span><br><span class="hljs-keyword">struct</span> contain <span class="hljs-title function_">fightM3</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> contain zd)</span>&#123;<br>zd.person.hp=zd.person.hp-zd.ms.m3Lose; <br>zd.person.fortune=zd.person.fortune+<span class="hljs-number">50</span>;<br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n\t\t您损失了%d点血，打败了%s\n&quot;</span>,zd.ms.m3Lose,zd.ms.m3_name);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t获得金币：50\n&quot;</span>); <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\t\t按任意键返回\n&quot;</span>);<br>getch();<br><span class="hljs-keyword">return</span> zd;<br>&#125;<br><span class="hljs-comment">//和双剑武士打斗 </span><br><span class="hljs-keyword">struct</span> contain <span class="hljs-title function_">fightM4</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> contain zd)</span>&#123;<br>zd.person.hp=zd.person.hp-zd.ms.m4Lose; <br>zd.person.fortune=zd.person.fortune+<span class="hljs-number">100</span>;<br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n\t\t您损失了%d点血，打败了%s\n&quot;</span>,zd.ms.m4Lose,zd.ms.m4_name);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t获得金币：100\n&quot;</span>); <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\t\t按任意键返回\n&quot;</span>);<br>getch();<br><span class="hljs-keyword">return</span> zd;<br>&#125;<br><span class="hljs-comment">//和大法师打斗 </span><br><span class="hljs-keyword">struct</span> contain <span class="hljs-title function_">fightM5</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> contain zd)</span>&#123;<br>zd.person.hp=zd.person.hp-zd.ms.m5Lose; <br>zd.person.fortune=zd.person.fortune+<span class="hljs-number">1000</span>;<br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n\t\t您损失了%d点血，打败了%s\n&quot;</span>,zd.ms.m5Lose,zd.ms.m5_name);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t获得金币：1000\n&quot;</span>); <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\t\t按任意键返回\n&quot;</span>);<br>getch();<br><span class="hljs-keyword">return</span> zd;<br>&#125;<br><span class="hljs-comment">//加攻击力2点</span><br><span class="hljs-keyword">struct</span> contain <span class="hljs-title function_">addCarry</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> contain zd)</span>&#123;<br>zd.person.carry=zd.person.carry+<span class="hljs-number">2</span>; <br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n\t\t您的攻击力提升了2点\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\t\t按任意键返回\n&quot;</span>);<br>getch();<br><span class="hljs-keyword">return</span> zd;<br>&#125; <br><span class="hljs-comment">//加防御力2点</span><br><span class="hljs-keyword">struct</span> contain <span class="hljs-title function_">addDefend</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> contain zd)</span>&#123;<br>zd.person.defend=zd.person.defend+<span class="hljs-number">2</span>; <br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n\t\t您的防御力提升了2点\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\t\t按任意键返回\n&quot;</span>);<br>getch();<br><span class="hljs-keyword">return</span> zd;<br>&#125;<br><span class="hljs-comment">//加攻击力10点</span><br><span class="hljs-keyword">struct</span> contain <span class="hljs-title function_">addCarry10</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> contain zd)</span>&#123;<br>zd.person.carry=zd.person.carry+<span class="hljs-number">10</span>; <br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n\t\t您的攻击力提升了10点\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\t\t按任意键返回\n&quot;</span>);<br>getch();<br><span class="hljs-keyword">return</span> zd;<br>&#125; <br><span class="hljs-comment">//加防御力10点</span><br><span class="hljs-keyword">struct</span> contain <span class="hljs-title function_">addDefend10</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> contain zd)</span>&#123;<br>zd.person.defend=zd.person.defend+<span class="hljs-number">10</span>; <br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n\t\t您的防御力提升了10点\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\t\t按任意键返回\n&quot;</span>);<br>getch();<br><span class="hljs-keyword">return</span> zd;<br>&#125;<br><span class="hljs-comment">//加血 </span><br><span class="hljs-keyword">struct</span> contain <span class="hljs-title function_">addHp</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> contain zd)</span>&#123;<br>zd.person.hp=zd.person.hp+<span class="hljs-number">200</span>;<br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n\t\t您的血量提升了200点\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\t\t按任意键返回\n&quot;</span>);<br>getch();<br><span class="hljs-keyword">return</span> zd;<br>&#125;<br><span class="hljs-comment">//商店</span><br><span class="hljs-keyword">struct</span> contain <span class="hljs-title function_">openshop</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> contain zd)</span>&#123;<br>zd.person.shop=<span class="hljs-number">1</span>;<br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n\t\t您已经激活商店\n\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t\t在游戏进程中按&#x27;p&#x27;键可随时购买商品\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\t\t按任意键返回\n&quot;</span>);<br>getch();<br><span class="hljs-keyword">return</span> zd;<br>&#125;<br><span class="hljs-comment">//全剧终</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">gameover</span><span class="hljs-params">()</span>&#123;<br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n\t\t王子：我拿一生去信仰，赌注为我相信的爱情。梦琪，我们永远都不要分开了好吗？\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\t\t按任意键继续\n&quot;</span>);<br>getch();<br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n\t\t谢谢您的试玩\n&quot;</span>);<br>getch(); <br>&#125; <br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
          <category> 开源项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 开源i项目 </tag>
            
            <tag> 爱的征途 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言项目】贪吃蛇游戏开源</title>
      <link href="/2022/06/05/%E8%B4%AA%E5%90%83%E8%9B%87%E6%B8%B8%E6%88%8F%E5%BC%80%E6%BA%90/"/>
      <url>/2022/06/05/%E8%B4%AA%E5%90%83%E8%9B%87%E6%B8%B8%E6%88%8F%E5%BC%80%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<h1>贪吃蛇游戏开源</h1><p>直接放源代码吧，大部分地方都写注释了。因为是18年写的，现在我也没办法从头讲起。</p><h2 id="成品展示">成品展示</h2><p><img src="/images/2022-6-5-0002.png" alt="主页面"></p><p><img src="/images/2022-6-5-00003.png" alt="游戏说明"></p><p><img src="/images/2022-6-5-00004.png" alt="游戏展示"></p><h2 id="源代码实现">源代码实现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//2018-7-10   创作者：小鑫 </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> U 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> D 2</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> L 3</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> R 4       <span class="hljs-comment">//蛇的状态，U：上 ；D：下；L:左 R：右</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SNAKE</span> &#123;</span> <span class="hljs-comment">//蛇身的一个节点</span><br><span class="hljs-type">int</span> x;<br><span class="hljs-type">int</span> y;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SNAKE</span> *<span class="hljs-title">next</span>;</span><br>&#125; snake;<br><span class="hljs-comment">//全局变量//</span><br><span class="hljs-type">int</span> score=<span class="hljs-number">0</span>,add=<span class="hljs-number">10</span>;<span class="hljs-comment">//总得分与每次吃食物得分。</span><br><span class="hljs-type">int</span> status,sleeptime=<span class="hljs-number">200</span>;<span class="hljs-comment">//每次运行的时间间隔</span><br>snake *head, *food;<span class="hljs-comment">//蛇头指针，食物指针</span><br>snake *q;<span class="hljs-comment">//遍历蛇的时候用到的指针</span><br><span class="hljs-type">int</span> endgamestatus=<span class="hljs-number">0</span>; <span class="hljs-comment">//游戏结束的情况，1：撞到墙；2：咬到自己；3：主动退出游戏。</span><br><span class="hljs-comment">//声明全部函数//</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">Pos</span><span class="hljs-params">()</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">creatMap</span><span class="hljs-params">()</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">initsnake</span><span class="hljs-params">()</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">biteself</span><span class="hljs-params">()</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">createfood</span><span class="hljs-params">()</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">cantcrosswall</span><span class="hljs-params">()</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">snakemove</span><span class="hljs-params">()</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">pause</span><span class="hljs-params">()</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">gamecircle</span><span class="hljs-params">()</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">welcometogame</span><span class="hljs-params">()</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">endgame</span><span class="hljs-params">()</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">gamestart</span><span class="hljs-params">()</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Pos</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span><span class="hljs-comment">//设置光标位置</span><br>&#123;<br>COORD pos;<br>HANDLE hOutput;<br>pos.X=x;<br>pos.Y=y;<br>hOutput=GetStdHandle(STD_OUTPUT_HANDLE);<br>SetConsoleCursorPosition(hOutput,pos);<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">creatMap</span><span class="hljs-params">()</span><span class="hljs-comment">//创建地图</span><br>&#123;<br><span class="hljs-type">int</span> i;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">58</span>; i+=<span class="hljs-number">2</span>) &#123; <span class="hljs-comment">//打印上下边框</span><br>Pos(i,<span class="hljs-number">0</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;■&quot;</span>);<br>Pos(i,<span class="hljs-number">26</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;■&quot;</span>);<br>&#125;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;<span class="hljs-number">26</span>; i++) &#123; <span class="hljs-comment">//打印左右边框</span><br>Pos(<span class="hljs-number">0</span>,i);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;■&quot;</span>);<br>Pos(<span class="hljs-number">56</span>,i);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;■&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">initsnake</span><span class="hljs-params">()</span><span class="hljs-comment">//初始化蛇身</span><br>&#123;<br>snake *tail;<br><span class="hljs-type">int</span> i;<br>tail=(snake*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(snake));<span class="hljs-comment">//从蛇尾开始，头插法，以x,y设定开始的位置//</span><br>tail-&gt;x=<span class="hljs-number">24</span>;<br>tail-&gt;y=<span class="hljs-number">5</span>;<br>tail-&gt;next=<span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;=<span class="hljs-number">4</span>; i++) &#123;<br>head=(snake*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(snake));<br>head-&gt;next=tail;<br>head-&gt;x=<span class="hljs-number">24</span>+<span class="hljs-number">2</span>*i;<br>head-&gt;y=<span class="hljs-number">5</span>;<br>tail=head;<br>&#125;<br><span class="hljs-keyword">while</span>(tail!=<span class="hljs-literal">NULL</span>) &#123; <span class="hljs-comment">//从头到为，输出蛇身</span><br>Pos(tail-&gt;x,tail-&gt;y);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;■&quot;</span>);<br>tail=tail-&gt;next;<br>&#125;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">biteself</span><span class="hljs-params">()</span><span class="hljs-comment">//判断是否咬到了自己</span><br>&#123;<br>snake *self;<br>self=head-&gt;next;<br><span class="hljs-keyword">while</span>(self!=<span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-keyword">if</span>(self-&gt;x==head-&gt;x &amp;&amp; self-&gt;y==head-&gt;y) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br>self=self-&gt;next;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">createfood</span><span class="hljs-params">()</span><span class="hljs-comment">//随机出现食物</span><br>&#123;<br>snake *food_1;<br>srand((<span class="hljs-type">unsigned</span>)time(<span class="hljs-literal">NULL</span>));<br>food_1=(snake*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(snake));<br><span class="hljs-keyword">while</span>((food_1-&gt;x%<span class="hljs-number">2</span>)!=<span class="hljs-number">0</span>) &#123;  <span class="hljs-comment">//保证其为偶数，使得食物能与蛇头对其</span><br>food_1-&gt;x=rand()%<span class="hljs-number">52</span>+<span class="hljs-number">2</span>;<br>&#125;<br>food_1-&gt;y=rand()%<span class="hljs-number">24</span>+<span class="hljs-number">1</span>;<br>q=head;<br><span class="hljs-keyword">while</span>(q-&gt;next==<span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-keyword">if</span>(q-&gt;x==food_1-&gt;x &amp;&amp; q-&gt;y==food_1-&gt;y) &#123; <span class="hljs-comment">//判断蛇身是否与食物重合</span><br><span class="hljs-built_in">free</span>(food_1);<br>createfood();<br>&#125;<br>q=q-&gt;next;<br>&#125;<br>Pos(food_1-&gt;x,food_1-&gt;y);<br>food=food_1;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;■&quot;</span>);<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">cantcrosswall</span><span class="hljs-params">()</span><span class="hljs-comment">//不能穿墙</span><br>&#123;<br><span class="hljs-keyword">if</span>(head-&gt;x==<span class="hljs-number">0</span> || head-&gt;x==<span class="hljs-number">56</span> ||head-&gt;y==<span class="hljs-number">0</span> || head-&gt;y==<span class="hljs-number">26</span>) &#123;<br>endgamestatus=<span class="hljs-number">1</span>;<br>endgame();<br>&#125;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">snakemove</span><span class="hljs-params">()</span><span class="hljs-comment">//蛇前进,上U,下D,左L,右R</span><br>&#123;<br>snake * nexthead;<br>cantcrosswall();<br>nexthead=(snake*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(snake));<br><span class="hljs-keyword">if</span>(status==U) &#123;<br>nexthead-&gt;x=head-&gt;x;<br>nexthead-&gt;y=head-&gt;y<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">if</span>(nexthead-&gt;x==food-&gt;x &amp;&amp; nexthead-&gt;y==food-&gt;y) &#123; <span class="hljs-comment">//如果下一个有食物//</span><br>nexthead-&gt;next=head;<br>head=nexthead;<br>q=head;<br><span class="hljs-keyword">while</span>(q!=<span class="hljs-literal">NULL</span>) &#123;<br>Pos(q-&gt;x,q-&gt;y);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;■&quot;</span>);<br>q=q-&gt;next;<br>&#125;<br>score=score+add;<br>createfood();<br>&#125; <span class="hljs-keyword">else</span> &#123;                                           <span class="hljs-comment">//如果没有食物//</span><br>nexthead-&gt;next=head;<br>head=nexthead;<br>q=head;<br><span class="hljs-keyword">while</span>(q-&gt;next-&gt;next!=<span class="hljs-literal">NULL</span>) &#123;<br>Pos(q-&gt;x,q-&gt;y);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;■&quot;</span>);<br>q=q-&gt;next;<br>&#125;<br>Pos(q-&gt;next-&gt;x,q-&gt;next-&gt;y);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;  &quot;</span>);<br><span class="hljs-built_in">free</span>(q-&gt;next);<br>q-&gt;next=<span class="hljs-literal">NULL</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(status==D) &#123;<br>nexthead-&gt;x=head-&gt;x;<br>nexthead-&gt;y=head-&gt;y+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(nexthead-&gt;x==food-&gt;x &amp;&amp; nexthead-&gt;y==food-&gt;y) &#123; <span class="hljs-comment">//有食物</span><br>nexthead-&gt;next=head;<br>head=nexthead;<br>q=head;<br><span class="hljs-keyword">while</span>(q!=<span class="hljs-literal">NULL</span>) &#123;<br>Pos(q-&gt;x,q-&gt;y);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;■&quot;</span>);<br>q=q-&gt;next;<br>&#125;<br>score=score+add;<br>createfood();<br>&#125; <span class="hljs-keyword">else</span> &#123;                           <span class="hljs-comment">//没有食物</span><br>nexthead-&gt;next=head;<br>head=nexthead;<br>q=head;<br><span class="hljs-keyword">while</span>(q-&gt;next-&gt;next!=<span class="hljs-literal">NULL</span>) &#123;<br>Pos(q-&gt;x,q-&gt;y);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;■&quot;</span>);<br>q=q-&gt;next;<br>&#125;<br>Pos(q-&gt;next-&gt;x,q-&gt;next-&gt;y);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;  &quot;</span>);<br><span class="hljs-built_in">free</span>(q-&gt;next);<br>q-&gt;next=<span class="hljs-literal">NULL</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(status==L) &#123;<br>nexthead-&gt;x=head-&gt;x<span class="hljs-number">-2</span>;<br>nexthead-&gt;y=head-&gt;y;<br><span class="hljs-keyword">if</span>(nexthead-&gt;x==food-&gt;x &amp;&amp; nexthead-&gt;y==food-&gt;y) &#123; <span class="hljs-comment">//有食物</span><br>nexthead-&gt;next=head;<br>head=nexthead;<br>q=head;<br><span class="hljs-keyword">while</span>(q!=<span class="hljs-literal">NULL</span>) &#123;<br>Pos(q-&gt;x,q-&gt;y);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;■&quot;</span>);<br>q=q-&gt;next;<br>&#125;<br>score=score+add;<br>createfood();<br>&#125; <span class="hljs-keyword">else</span> &#123;                            <span class="hljs-comment">//没有食物</span><br>nexthead-&gt;next=head;<br>head=nexthead;<br>q=head;<br><span class="hljs-keyword">while</span>(q-&gt;next-&gt;next!=<span class="hljs-literal">NULL</span>) &#123;<br>Pos(q-&gt;x,q-&gt;y);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;■&quot;</span>);<br>q=q-&gt;next;<br>&#125;<br>Pos(q-&gt;next-&gt;x,q-&gt;next-&gt;y);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;  &quot;</span>);<br><span class="hljs-built_in">free</span>(q-&gt;next);<br>q-&gt;next=<span class="hljs-literal">NULL</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(status==R) &#123;<br>nexthead-&gt;x=head-&gt;x+<span class="hljs-number">2</span>;<br>nexthead-&gt;y=head-&gt;y;<br><span class="hljs-keyword">if</span>(nexthead-&gt;x==food-&gt;x &amp;&amp; nexthead-&gt;y==food-&gt;y) &#123; <span class="hljs-comment">//有食物</span><br>nexthead-&gt;next=head;<br>head=nexthead;<br>q=head;<br><span class="hljs-keyword">while</span>(q!=<span class="hljs-literal">NULL</span>) &#123;<br>Pos(q-&gt;x,q-&gt;y);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;■&quot;</span>);<br>q=q-&gt;next;<br>&#125;<br>score=score+add;<br>createfood();<br>&#125; <span class="hljs-keyword">else</span> &#123;                                     <span class="hljs-comment">//没有食物</span><br>nexthead-&gt;next=head;<br>head=nexthead;<br>q=head;<br><span class="hljs-keyword">while</span>(q-&gt;next-&gt;next!=<span class="hljs-literal">NULL</span>) &#123;<br>Pos(q-&gt;x,q-&gt;y);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;■&quot;</span>);<br>q=q-&gt;next;<br>&#125;<br>Pos(q-&gt;next-&gt;x,q-&gt;next-&gt;y);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;  &quot;</span>);<br><span class="hljs-built_in">free</span>(q-&gt;next);<br>q-&gt;next=<span class="hljs-literal">NULL</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(biteself()==<span class="hljs-number">1</span>) &#123;     <span class="hljs-comment">//判断是否会咬到自己</span><br>endgamestatus=<span class="hljs-number">2</span>;<br>endgame();<br>&#125;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">pause</span><span class="hljs-params">()</span><span class="hljs-comment">//暂停</span><br>&#123;<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) &#123;<br>Sleep(<span class="hljs-number">300</span>);<br><span class="hljs-keyword">if</span>(GetAsyncKeyState(VK_SPACE)) &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">gamecircle</span><span class="hljs-params">()</span><span class="hljs-comment">//控制游戏</span><br>&#123;<br>Pos(<span class="hljs-number">64</span>,<span class="hljs-number">15</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;不能穿墙，不能咬到自己\n&quot;</span>);<br>Pos(<span class="hljs-number">64</span>,<span class="hljs-number">16</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;用↑.↓.←.→分别控制蛇的移动.&quot;</span>);<br>Pos(<span class="hljs-number">64</span>,<span class="hljs-number">17</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;F1 为加速，F2 为减速\n&quot;</span>);<br>Pos(<span class="hljs-number">64</span>,<span class="hljs-number">18</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ESC ：退出游戏.space：暂停游戏.&quot;</span>);<br>Pos(<span class="hljs-number">64</span>,<span class="hljs-number">20</span>);<br><span class="hljs-comment">//</span><br>status=R;<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) &#123;<br>Pos(<span class="hljs-number">64</span>,<span class="hljs-number">10</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;得分：%d  &quot;</span>,score);<br>Pos(<span class="hljs-number">64</span>,<span class="hljs-number">11</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;每个食物得分：%d分&quot;</span>,add);<br><span class="hljs-keyword">if</span>(GetAsyncKeyState(VK_UP) &amp;&amp; status!=D) &#123;<br>status=U;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(GetAsyncKeyState(VK_DOWN) &amp;&amp; status!=U) &#123;<br>status=D;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(GetAsyncKeyState(VK_LEFT)&amp;&amp; status!=R) &#123;<br>status=L;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(GetAsyncKeyState(VK_RIGHT)&amp;&amp; status!=L) &#123;<br>status=R;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(GetAsyncKeyState(VK_SPACE)) &#123;<br>pause();<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(GetAsyncKeyState(VK_ESCAPE)) &#123;<br>endgamestatus=<span class="hljs-number">3</span>;<br><span class="hljs-keyword">break</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(GetAsyncKeyState(VK_F1)) &#123;<br><span class="hljs-keyword">if</span>(sleeptime&gt;=<span class="hljs-number">50</span>) &#123;<br>sleeptime=sleeptime<span class="hljs-number">-30</span>;<br>add=add+<span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span>(sleeptime==<span class="hljs-number">320</span>) &#123;<br>add=<span class="hljs-number">2</span>;<span class="hljs-comment">//防止减到1之后再加回来有错</span><br>&#125;<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(GetAsyncKeyState(VK_F2)) &#123;<br><span class="hljs-keyword">if</span>(sleeptime&lt;<span class="hljs-number">350</span>) &#123;<br>sleeptime=sleeptime+<span class="hljs-number">30</span>;<br>add=add<span class="hljs-number">-2</span>;<br><span class="hljs-keyword">if</span>(sleeptime==<span class="hljs-number">350</span>) &#123;<br>add=<span class="hljs-number">1</span>;  <span class="hljs-comment">//保证最低分为1</span><br>&#125;<br>&#125;<br>&#125;<br>Sleep(sleeptime);<br>snakemove();<br>&#125;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">welcometogame</span><span class="hljs-params">()</span><span class="hljs-comment">//开始界面</span><br>&#123;<br>Pos(<span class="hljs-number">40</span>,<span class="hljs-number">12</span>);<br><span class="hljs-comment">//</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;欢迎来到小鑫家的贪食蛇游戏！&quot;</span>);<br>Pos(<span class="hljs-number">40</span>,<span class="hljs-number">25</span>);<br><span class="hljs-comment">//</span><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br>Pos(<span class="hljs-number">25</span>,<span class="hljs-number">12</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;用↑.↓.←.→分别控制蛇的移动， F1 为加速，2 为减速\n&quot;</span>);<br>Pos(<span class="hljs-number">25</span>,<span class="hljs-number">13</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;加速将能得到更高的分数。\n&quot;</span>);<br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">endgame</span><span class="hljs-params">()</span><span class="hljs-comment">//结束游戏</span><br>&#123;<br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br>Pos(<span class="hljs-number">24</span>,<span class="hljs-number">12</span>);<br><span class="hljs-keyword">if</span>(endgamestatus==<span class="hljs-number">1</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;对不起，您撞到墙了。游戏结束.&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(endgamestatus==<span class="hljs-number">2</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;对不起，您咬到自己了。游戏结束.&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(endgamestatus==<span class="hljs-number">3</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;您的已经结束了游戏。&quot;</span>);<br>&#125;<br>Pos(<span class="hljs-number">24</span>,<span class="hljs-number">13</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;您的得分是%d\n&quot;</span>,score);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">gamestart</span><span class="hljs-params">()</span><span class="hljs-comment">//游戏初始化</span><br>&#123;<br>system(<span class="hljs-string">&quot;mode con cols=100 lines=30&quot;</span>);<br>welcometogame();<br>creatMap();<br>initsnake();<br>createfood();<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>gamestart();<br>gamecircle();<br>endgame();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
          <category> 开源项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 开源代码 </tag>
            
            <tag> 贪吃蛇 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小鑫降重软件开源</title>
      <link href="/2022/06/05/%E5%B0%8F%E9%91%AB%E9%99%8D%E9%87%8D%E8%BD%AF%E4%BB%B6%E5%BC%80%E6%BA%90/"/>
      <url>/2022/06/05/%E5%B0%8F%E9%91%AB%E9%99%8D%E9%87%8D%E8%BD%AF%E4%BB%B6%E5%BC%80%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<h2 id="小鑫降重软件开源">小鑫降重软件开源</h2><h3 id="成品展示">成品展示</h3><p><img src="/images/2022-6-5-001.png" alt="upload successful"></p><h3 id="主程序main-py"><a href="http://xn--main-zh5fy87fgv6b.py">主程序main.py</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># author ：Liansixin</span><br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> http<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> translate <span class="hljs-keyword">import</span> Translator<br><span class="hljs-keyword">import</span> http.client<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> json<br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(sys, <span class="hljs-string">&#x27;frozen&#x27;</span>):<br>    os.environ[<span class="hljs-string">&#x27;PATH&#x27;</span>] = sys._MEIPASS + <span class="hljs-string">&quot;;&quot;</span> + os.environ[<span class="hljs-string">&#x27;PATH&#x27;</span>]<br><br><span class="hljs-keyword">from</span> mainWindow <span class="hljs-keyword">import</span> Ui_MainWindow<br><span class="hljs-keyword">from</span> PyQt5.Qt <span class="hljs-keyword">import</span> *<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyWindow</span>(QMainWindow, Ui_MainWindow):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, parent=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-built_in">super</span>(MyWindow, <span class="hljs-variable language_">self</span>).__init__(parent)<br>        <span class="hljs-variable language_">self</span>.setupUi(<span class="hljs-variable language_">self</span>)<br>        <span class="hljs-variable language_">self</span>.pushButton.clicked.connect(<span class="hljs-variable language_">self</span>.click_pushButton)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">click_pushButton</span>(<span class="hljs-params">self</span>):<br>        tst = <span class="hljs-variable language_">self</span>.textEdit.toPlainText()<br>        tst = youdao_en(tst)<br>        <span class="hljs-built_in">print</span>(tst)<br>        translation = trans_lang(tst)<br>        <span class="hljs-built_in">print</span>(translation)<br>        <span class="hljs-variable language_">self</span>.textEdit_2.setText(translation)<br>        <span class="hljs-keyword">return</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">youdao_en</span>(<span class="hljs-params">query</span>):<br>    url = <span class="hljs-string">&#x27;http://fanyi.youdao.com/translate&#x27;</span><br>    data = &#123;<br>        <span class="hljs-string">&quot;i&quot;</span>: query,  <span class="hljs-comment"># 待翻译的字符串</span><br>        <span class="hljs-string">&quot;from&quot;</span>: <span class="hljs-string">&quot;zh-CHS&quot;</span>,<br>        <span class="hljs-string">&quot;to&quot;</span>: <span class="hljs-string">&quot;en&quot;</span>,<br>        <span class="hljs-string">&quot;smartresult&quot;</span>: <span class="hljs-string">&quot;dict&quot;</span>,<br>        <span class="hljs-string">&quot;client&quot;</span>: <span class="hljs-string">&quot;fanyideskweb&quot;</span>,<br>        <span class="hljs-string">&quot;salt&quot;</span>: <span class="hljs-string">&quot;16081210430989&quot;</span>,<br>        <span class="hljs-string">&quot;doctype&quot;</span>: <span class="hljs-string">&quot;json&quot;</span>,<br>        <span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-string">&quot;2.1&quot;</span>,<br>        <span class="hljs-string">&quot;keyfrom&quot;</span>: <span class="hljs-string">&quot;fanyi.web&quot;</span>,<br>        <span class="hljs-string">&quot;action&quot;</span>: <span class="hljs-string">&quot;FY_BY_CLICKBUTTION&quot;</span><br>    &#125;<br>    res = requests.post(url, data=data).json()<br>    <span class="hljs-keyword">return</span> res[<span class="hljs-string">&#x27;translateResult&#x27;</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;tgt&#x27;</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">trans_lang</span>(<span class="hljs-params">q</span>):<br>    trans_result = q<br>    <span class="hljs-comment"># 百度appid和密钥需要通过注册百度【翻译开放平台】账号后获得</span><br>    appid = <span class="hljs-string">&#x27;20211103000990117&#x27;</span>  <span class="hljs-comment"># 填写你的appid</span><br>    secretKey = <span class="hljs-string">&#x27;LXQgIXAj9aoKoHGMA7zs&#x27;</span>  <span class="hljs-comment"># 填写你的密钥</span><br><br>    httpClient = <span class="hljs-literal">None</span><br>    myurl = <span class="hljs-string">&#x27;/api/trans/vip/translate&#x27;</span>  <span class="hljs-comment"># 通用翻译API HTTP地址</span><br><br>    fromLang = <span class="hljs-string">&#x27;auto&#x27;</span>  <span class="hljs-comment"># 原文语种</span><br>    toLang = <span class="hljs-string">&#x27;zh&#x27;</span>  <span class="hljs-comment"># 译文语种</span><br>    salt = random.randint(<span class="hljs-number">32768</span>, <span class="hljs-number">65536</span>)<br>    <span class="hljs-comment"># 手动录入翻译内容，q存放</span><br>    sign = appid + q + <span class="hljs-built_in">str</span>(salt) + secretKey<br>    sign = hashlib.md5(sign.encode()).hexdigest()<br>    myurl = myurl + <span class="hljs-string">&#x27;?appid=&#x27;</span> + appid + <span class="hljs-string">&#x27;&amp;q=&#x27;</span> + urllib.parse.quote(q) + <span class="hljs-string">&#x27;&amp;from=&#x27;</span> + fromLang + \<br>            <span class="hljs-string">&#x27;&amp;to=&#x27;</span> + toLang + <span class="hljs-string">&#x27;&amp;salt=&#x27;</span> + <span class="hljs-built_in">str</span>(salt) + <span class="hljs-string">&#x27;&amp;sign=&#x27;</span> + sign<br><br>    <span class="hljs-comment"># 建立会话，返回结果</span><br>    <span class="hljs-keyword">try</span>:<br>        httpClient = http.client.HTTPConnection(<span class="hljs-string">&#x27;api.fanyi.baidu.com&#x27;</span>)<br>        httpClient.request(<span class="hljs-string">&#x27;GET&#x27;</span>, myurl)<br>        <span class="hljs-comment"># response是HTTPResponse对象</span><br>        response = httpClient.getresponse()<br>        result_all = response.read().decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>        result = json.loads(result_all)<br>        trans_result = result[<span class="hljs-string">&#x27;trans_result&#x27;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;dst&#x27;</span>]<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(e)<br>    <span class="hljs-keyword">finally</span>:<br>        <span class="hljs-keyword">if</span> httpClient:<br>            httpClient.close()<br>    <span class="hljs-keyword">return</span> trans_result<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app = QApplication(sys.argv)<br>    show = MyWindow()<br>    show.show()<br>    sys.exit(app.exec_())<br><br><br></code></pre></td></tr></table></figure><h3 id="视图实现mainWindow-py"><a href="http://xn--mainWindow-622r675b0i0fsv4c.py">视图实现mainWindow.py</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># author ：Liansixin</span><br><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">from</span> PyQt5 <span class="hljs-keyword">import</span> QtCore, QtGui, QtWidgets<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Ui_MainWindow</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setupUi</span>(<span class="hljs-params">self, MainWindow</span>):<br>        MainWindow.setObjectName(<span class="hljs-string">&quot;MainWindow&quot;</span>)<br>        MainWindow.resize(<span class="hljs-number">1059</span>, <span class="hljs-number">431</span>)<br>        <span class="hljs-variable language_">self</span>.centralWidget = QtWidgets.QWidget(MainWindow)<br>        <span class="hljs-variable language_">self</span>.centralWidget.setObjectName(<span class="hljs-string">&quot;centralWidget&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.textEdit = QtWidgets.QTextEdit(<span class="hljs-variable language_">self</span>.centralWidget)<br>        <span class="hljs-variable language_">self</span>.textEdit.setGeometry(QtCore.QRect(<span class="hljs-number">110</span>, <span class="hljs-number">60</span>, <span class="hljs-number">321</span>, <span class="hljs-number">291</span>))<br>        <span class="hljs-variable language_">self</span>.textEdit.setLocale(QtCore.QLocale(QtCore.QLocale.Chinese, QtCore.QLocale.China))<br>        <span class="hljs-variable language_">self</span>.textEdit.setObjectName(<span class="hljs-string">&quot;textEdit&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.textEdit_2 = QtWidgets.QTextEdit(<span class="hljs-variable language_">self</span>.centralWidget)<br>        <span class="hljs-variable language_">self</span>.textEdit_2.setGeometry(QtCore.QRect(<span class="hljs-number">600</span>, <span class="hljs-number">60</span>, <span class="hljs-number">321</span>, <span class="hljs-number">291</span>))<br>        <span class="hljs-variable language_">self</span>.textEdit_2.setLocale(QtCore.QLocale(QtCore.QLocale.Chinese, QtCore.QLocale.China))<br>        <span class="hljs-variable language_">self</span>.textEdit_2.setObjectName(<span class="hljs-string">&quot;textEdit_2&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.pushButton = QtWidgets.QPushButton(<span class="hljs-variable language_">self</span>.centralWidget)<br>        <span class="hljs-variable language_">self</span>.pushButton.setGeometry(QtCore.QRect(<span class="hljs-number">460</span>, <span class="hljs-number">190</span>, <span class="hljs-number">101</span>, <span class="hljs-number">61</span>))<br>        <span class="hljs-variable language_">self</span>.pushButton.setObjectName(<span class="hljs-string">&quot;pushButton&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.label = QtWidgets.QLabel(<span class="hljs-variable language_">self</span>.centralWidget)<br>        <span class="hljs-variable language_">self</span>.label.setGeometry(QtCore.QRect(<span class="hljs-number">240</span>, <span class="hljs-number">20</span>, <span class="hljs-number">41</span>, <span class="hljs-number">31</span>))<br>        <span class="hljs-variable language_">self</span>.label.setObjectName(<span class="hljs-string">&quot;label&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.label_2 = QtWidgets.QLabel(<span class="hljs-variable language_">self</span>.centralWidget)<br>        <span class="hljs-variable language_">self</span>.label_2.setGeometry(QtCore.QRect(<span class="hljs-number">750</span>, <span class="hljs-number">30</span>, <span class="hljs-number">41</span>, <span class="hljs-number">16</span>))<br>        <span class="hljs-variable language_">self</span>.label_2.setObjectName(<span class="hljs-string">&quot;label_2&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.label_3 = QtWidgets.QLabel(<span class="hljs-variable language_">self</span>.centralWidget)<br>        <span class="hljs-variable language_">self</span>.label_3.setGeometry(QtCore.QRect(<span class="hljs-number">430</span>, <span class="hljs-number">370</span>, <span class="hljs-number">161</span>, <span class="hljs-number">20</span>))<br>        <span class="hljs-variable language_">self</span>.label_3.setObjectName(<span class="hljs-string">&quot;label_3&quot;</span>)<br>        MainWindow.setCentralWidget(<span class="hljs-variable language_">self</span>.centralWidget)<br>        <span class="hljs-variable language_">self</span>.statusBar = QtWidgets.QStatusBar(MainWindow)<br>        <span class="hljs-variable language_">self</span>.statusBar.setObjectName(<span class="hljs-string">&quot;statusBar&quot;</span>)<br>        MainWindow.setStatusBar(<span class="hljs-variable language_">self</span>.statusBar)<br><br>        <span class="hljs-variable language_">self</span>.retranslateUi(MainWindow)<br>        QtCore.QMetaObject.connectSlotsByName(MainWindow)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">retranslateUi</span>(<span class="hljs-params">self, MainWindow</span>):<br>        _translate = QtCore.QCoreApplication.translate<br>        MainWindow.setWindowTitle(_translate(<span class="hljs-string">&quot;MainWindow&quot;</span>, <span class="hljs-string">&quot;小鑫降重工具&quot;</span>))<br>        <span class="hljs-variable language_">self</span>.pushButton.setText(_translate(<span class="hljs-string">&quot;MainWindow&quot;</span>, <span class="hljs-string">&quot;开始降重&quot;</span>))<br>        <span class="hljs-variable language_">self</span>.label.setText(_translate(<span class="hljs-string">&quot;MainWindow&quot;</span>, <span class="hljs-string">&quot;原文&quot;</span>))<br>        <span class="hljs-variable language_">self</span>.label_2.setText(_translate(<span class="hljs-string">&quot;MainWindow&quot;</span>, <span class="hljs-string">&quot;结果&quot;</span>))<br>        <span class="hljs-variable language_">self</span>.label_3.setText(_translate(<span class="hljs-string">&quot;MainWindow&quot;</span>, <span class="hljs-string">&quot;该工具使用需要联网哦&quot;</span>))<br><br></code></pre></td></tr></table></figure><h3 id="开源库地址：">开源库地址：</h3><p><a href="https://github.com/JinBiLianShao/XiaoxinPaper">https://github.com/JinBiLianShao/XiaoxinPaper</a></p><p><a href="https://github.com/JinBiLianShao/XiaoxinPaper">点我访问</a></p>]]></content>
      
      
      <categories>
          
          <category> 小鑫软件开源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 降重软件 </tag>
            
            <tag> 开源代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心编程讲解</title>
      <link href="/2022/06/05/C-%E8%BF%9B%E9%98%B6%E5%86%85%E5%AE%B9%E8%AE%B2%E8%A7%A3/"/>
      <url>/2022/06/05/C-%E8%BF%9B%E9%98%B6%E5%86%85%E5%AE%B9%E8%AE%B2%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1>C++核心编程</h1><p>本阶段主要针对C++==面向对象==编程技术做详细讲解，探讨C++中的核心和精髓。</p><h2 id="1-内存分区模型">1 内存分区模型</h2><p>C++程序在执行时，将内存大方向划分为<strong>4个区域</strong></p><ul><li>代码区：存放函数体的二进制代码，由操作系统进行管理的</li><li>全局区：存放全局变量和静态变量以及常量</li><li>栈区：由编译器自动分配释放, 存放函数的参数值,局部变量等</li><li>堆区：由程序员分配和释放,若程序员不释放,程序结束时由操作系统回收</li></ul><p><strong>内存四区意义：</strong></p><p>不同区域存放的数据，赋予不同的生命周期, 给我们更大的灵活编程</p><h3 id="1-1-程序运行前">1.1 程序运行前</h3><p>​在程序编译后，生成了exe可执行程序，<strong>未执行该程序前</strong>分为两个区域</p><p>​<strong>代码区：</strong></p><p>​存放 CPU 执行的机器指令</p><p>​代码区是<strong>共享</strong>的，共享的目的是对于频繁被执行的程序，只需要在内存中有一份代码即可</p><p>​代码区是<strong>只读</strong>的，使其只读的原因是防止程序意外地修改了它的指令</p><p>​<strong>全局区：</strong></p><p>​全局变量和静态变量存放在此.</p><p>​全局区还包含了常量区, 字符串常量和其他常量也存放在此.</p><p>​==该区域的数据在程序结束后由操作系统释放==.</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//全局变量</span><br><span class="hljs-type">int</span> g_a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> g_b = <span class="hljs-number">10</span>;<br><br><span class="hljs-comment">//全局常量</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> c_g_a = <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> c_g_b = <span class="hljs-number">10</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//局部变量</span><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">10</span>;<br><br><span class="hljs-comment">//打印地址</span><br>cout &lt;&lt; <span class="hljs-string">&quot;局部变量a地址为： &quot;</span> &lt;&lt; (<span class="hljs-type">int</span>)&amp;a &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;局部变量b地址为： &quot;</span> &lt;&lt; (<span class="hljs-type">int</span>)&amp;b &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;全局变量g_a地址为： &quot;</span> &lt;&lt;  (<span class="hljs-type">int</span>)&amp;g_a &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;全局变量g_b地址为： &quot;</span> &lt;&lt;  (<span class="hljs-type">int</span>)&amp;g_b &lt;&lt; endl;<br><br><span class="hljs-comment">//静态变量</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> s_a = <span class="hljs-number">10</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> s_b = <span class="hljs-number">10</span>;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;静态变量s_a地址为： &quot;</span> &lt;&lt; (<span class="hljs-type">int</span>)&amp;s_a &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;静态变量s_b地址为： &quot;</span> &lt;&lt; (<span class="hljs-type">int</span>)&amp;s_b &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;字符串常量地址为： &quot;</span> &lt;&lt; (<span class="hljs-type">int</span>)&amp;<span class="hljs-string">&quot;hello world&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;字符串常量地址为： &quot;</span> &lt;&lt; (<span class="hljs-type">int</span>)&amp;<span class="hljs-string">&quot;hello world1&quot;</span> &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;全局常量c_g_a地址为： &quot;</span> &lt;&lt; (<span class="hljs-type">int</span>)&amp;c_g_a &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;全局常量c_g_b地址为： &quot;</span> &lt;&lt; (<span class="hljs-type">int</span>)&amp;c_g_b &lt;&lt; endl;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> c_l_a = <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> c_l_b = <span class="hljs-number">10</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;局部常量c_l_a地址为： &quot;</span> &lt;&lt; (<span class="hljs-type">int</span>)&amp;c_l_a &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;局部常量c_l_b地址为： &quot;</span> &lt;&lt; (<span class="hljs-type">int</span>)&amp;c_l_b &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>打印结果：</p><p><img src="/assets/1545017602518.png" alt="1545017602518"></p><p>总结：</p><ul><li>C++中在程序运行前分为全局区和代码区</li><li>代码区特点是共享和只读</li><li>全局区中存放全局变量、静态变量、常量</li><li>常量区中存放 const修饰的全局常量  和 字符串常量</li></ul><h3 id="1-2-程序运行后">1.2 程序运行后</h3><p>​<strong>栈区：</strong></p><p>​由编译器自动分配释放, 存放函数的参数值,局部变量等</p><p>​注意事项：不要返回局部变量的地址，栈区开辟的数据由编译器自动释放</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> * <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">return</span> &amp;a;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> *p = <span class="hljs-built_in">func</span>();<br><br>cout &lt;&lt; *p &lt;&lt; endl;<br>cout &lt;&lt; *p &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>​<strong>堆区：</strong></p><p>​由程序员分配释放,若程序员不释放,程序结束时由操作系统回收</p><p>​在C++中主要利用new在堆区开辟内存</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span>* <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span>* a = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">10</span>);<br><span class="hljs-keyword">return</span> a;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> *p = <span class="hljs-built_in">func</span>();<br><br>cout &lt;&lt; *p &lt;&lt; endl;<br>cout &lt;&lt; *p &lt;&lt; endl;<br>    <br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>总结：</strong></p><p>堆区数据由程序员管理开辟和释放</p><p>堆区数据利用new关键字进行开辟内存</p><h3 id="1-3-new操作符">1.3 new操作符</h3><p>​C++中利用==new==操作符在堆区开辟数据</p><p>​堆区开辟的数据，由程序员手动开辟，手动释放，释放利用操作符 ==delete==</p><p>​语法：<code> new 数据类型</code></p><p>​利用new创建的数据，会返回该数据对应的类型的指针</p><p><strong>示例1： 基本语法</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span>* <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span>* a = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">10</span>);<br><span class="hljs-keyword">return</span> a;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> *p = <span class="hljs-built_in">func</span>();<br><br>cout &lt;&lt; *p &lt;&lt; endl;<br>cout &lt;&lt; *p &lt;&lt; endl;<br><br><span class="hljs-comment">//利用delete释放堆区数据</span><br><span class="hljs-keyword">delete</span> p;<br><br><span class="hljs-comment">//cout &lt;&lt; *p &lt;&lt; endl; //报错，释放的空间不可访问</span><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>示例2：开辟数组</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//堆区开辟数组</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span>* arr = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">10</span>];<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br>arr[i] = i + <span class="hljs-number">100</span>;<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br>cout &lt;&lt; arr[i] &lt;&lt; endl;<br>&#125;<br><span class="hljs-comment">//释放数组 delete 后加 []</span><br><span class="hljs-keyword">delete</span>[] arr;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="2-引用">2 引用</h2><h3 id="2-1-引用的基本使用">2.1 引用的基本使用</h3><p>**作用： **给变量起别名</p><p><strong>语法：</strong> <code>数据类型 &amp;别名 = 原名</code></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> &amp;b = a;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;<br><br>b = <span class="hljs-number">100</span>;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-引用注意事项">2.2 引用注意事项</h3><ul><li>引用必须初始化</li><li>引用在初始化后，不可以改变</li></ul><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">20</span>;<br><span class="hljs-comment">//int &amp;c; //错误，引用必须初始化</span><br><span class="hljs-type">int</span> &amp;c = a; <span class="hljs-comment">//一旦初始化后，就不可以更改</span><br>c = b; <span class="hljs-comment">//这是赋值操作，不是更改引用</span><br><br>cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3-引用做函数参数">2.3 引用做函数参数</h3><p>**作用：**函数传参时，可以利用引用的技术让形参修饰实参</p><p>**优点：**可以简化指针修改实参</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//1. 值传递</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mySwap01</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br><span class="hljs-type">int</span> temp = a;<br>a = b;<br>b = temp;<br>&#125;<br><br><span class="hljs-comment">//2. 地址传递</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mySwap02</span><span class="hljs-params">(<span class="hljs-type">int</span>* a, <span class="hljs-type">int</span>* b)</span> </span>&#123;<br><span class="hljs-type">int</span> temp = *a;<br>*a = *b;<br>*b = temp;<br>&#125;<br><br><span class="hljs-comment">//3. 引用传递</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mySwap03</span><span class="hljs-params">(<span class="hljs-type">int</span>&amp; a, <span class="hljs-type">int</span>&amp; b)</span> </span>&#123;<br><span class="hljs-type">int</span> temp = a;<br>a = b;<br>b = temp;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">20</span>;<br><br><span class="hljs-built_in">mySwap01</span>(a, b);<br>cout &lt;&lt; <span class="hljs-string">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; <span class="hljs-string">&quot; b:&quot;</span> &lt;&lt; b &lt;&lt; endl;<br><br><span class="hljs-built_in">mySwap02</span>(&amp;a, &amp;b);<br>cout &lt;&lt; <span class="hljs-string">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; <span class="hljs-string">&quot; b:&quot;</span> &lt;&lt; b &lt;&lt; endl;<br><br><span class="hljs-built_in">mySwap03</span>(a, b);<br>cout &lt;&lt; <span class="hljs-string">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; <span class="hljs-string">&quot; b:&quot;</span> &lt;&lt; b &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>总结：通过引用参数产生的效果同按地址传递是一样的。引用的语法更清楚简单</p></blockquote><h3 id="2-4-引用做函数返回值">2.4 引用做函数返回值</h3><p>作用：引用是可以作为函数的返回值存在的</p><p>注意：<strong>不要返回局部变量引用</strong></p><p>用法：函数调用作为左值</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//返回局部变量引用</span><br><span class="hljs-function"><span class="hljs-type">int</span>&amp; <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>; <span class="hljs-comment">//局部变量</span><br><span class="hljs-keyword">return</span> a;<br>&#125;<br><br><span class="hljs-comment">//返回静态变量引用</span><br><span class="hljs-function"><span class="hljs-type">int</span>&amp; <span class="hljs-title">test02</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> a = <span class="hljs-number">20</span>;<br><span class="hljs-keyword">return</span> a;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//不能返回局部变量的引用</span><br><span class="hljs-type">int</span>&amp; ref = <span class="hljs-built_in">test01</span>();<br>cout &lt;&lt; <span class="hljs-string">&quot;ref = &quot;</span> &lt;&lt; ref &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;ref = &quot;</span> &lt;&lt; ref &lt;&lt; endl;<br><br><span class="hljs-comment">//如果函数做左值，那么必须返回引用</span><br><span class="hljs-type">int</span>&amp; ref2 = <span class="hljs-built_in">test02</span>();<br>cout &lt;&lt; <span class="hljs-string">&quot;ref2 = &quot;</span> &lt;&lt; ref2 &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;ref2 = &quot;</span> &lt;&lt; ref2 &lt;&lt; endl;<br><br><span class="hljs-built_in">test02</span>() = <span class="hljs-number">1000</span>;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;ref2 = &quot;</span> &lt;&lt; ref2 &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;ref2 = &quot;</span> &lt;&lt; ref2 &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>​</p><h3 id="2-5-引用的本质">2.5 引用的本质</h3><p>本质：<strong>引用的本质在c++内部实现是一个指针常量.</strong></p><p>讲解示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//发现是引用，转换为 int* const ref = &amp;a;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span>&amp; ref)</span></span>&#123;<br>ref = <span class="hljs-number">100</span>; <span class="hljs-comment">// ref是引用，转换为*ref = 100</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br>    <br>    <span class="hljs-comment">//自动转换为 int* const ref = &amp;a; 指针常量是指针指向不可改，也说明为什么引用不可更改</span><br><span class="hljs-type">int</span>&amp; ref = a; <br>ref = <span class="hljs-number">20</span>; <span class="hljs-comment">//内部发现ref是引用，自动帮我们转换为: *ref = 20;</span><br>    <br>cout &lt;&lt; <span class="hljs-string">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;ref:&quot;</span> &lt;&lt; ref &lt;&lt; endl;<br>    <br><span class="hljs-built_in">func</span>(a);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>结论：C++推荐用引用技术，因为语法方便，引用本质是指针常量，但是所有的指针操作编译器都帮我们做了</p><h3 id="2-6-常量引用">2.6 常量引用</h3><p>**作用：**常量引用主要用来修饰形参，防止误操作</p><p>在函数形参列表中，可以加==const修饰形参==，防止形参改变实参</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//引用使用的场景，通常用来修饰形参</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showValue</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span>&amp; v)</span> </span>&#123;<br><span class="hljs-comment">//v += 10;</span><br>cout &lt;&lt; v &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//int&amp; ref = 10;  引用本身需要一个合法的内存空间，因此这行错误</span><br><span class="hljs-comment">//加入const就可以了，编译器优化代码，int temp = 10; const int&amp; ref = temp;</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span>&amp; ref = <span class="hljs-number">10</span>;<br><br><span class="hljs-comment">//ref = 100;  //加入const后不可以修改变量</span><br>cout &lt;&lt; ref &lt;&lt; endl;<br><br><span class="hljs-comment">//函数中利用常量引用防止误操作修改实参</span><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">showValue</span>(a);<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-函数提高">3 函数提高</h2><h3 id="3-1-函数默认参数">3.1 函数默认参数</h3><p>在C++中，函数的形参列表中的形参是可以有默认值的。</p><p>语法：<code> 返回值类型  函数名 （参数= 默认值）&#123;&#125;</code></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b = <span class="hljs-number">10</span>, <span class="hljs-type">int</span> c = <span class="hljs-number">10</span>)</span> </span>&#123;<br><span class="hljs-keyword">return</span> a + b + c;<br>&#125;<br><br><span class="hljs-comment">//1. 如果某个位置参数有默认值，那么从这个位置往后，从左向右，必须都要有默认值</span><br><span class="hljs-comment">//2. 如果函数声明有默认值，函数实现的时候就不能有默认参数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">func2</span><span class="hljs-params">(<span class="hljs-type">int</span> a = <span class="hljs-number">10</span>, <span class="hljs-type">int</span> b = <span class="hljs-number">10</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">func2</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br><span class="hljs-keyword">return</span> a + b;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;ret = &quot;</span> &lt;&lt; <span class="hljs-built_in">func</span>(<span class="hljs-number">20</span>, <span class="hljs-number">20</span>) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;ret = &quot;</span> &lt;&lt; <span class="hljs-built_in">func</span>(<span class="hljs-number">100</span>) &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-函数占位参数">3.2 函数占位参数</h3><p>C++中函数的形参列表里可以有占位参数，用来做占位，调用函数时必须填补该位置</p><p><strong>语法：</strong> <code>返回值类型 函数名 (数据类型)&#123;&#125;</code></p><p>在现阶段函数的占位参数存在意义不大，但是后面的课程中会用到该技术</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//函数占位参数 ，占位参数也可以有默认参数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span>)</span> </span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;this is func&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">func</span>(<span class="hljs-number">10</span>,<span class="hljs-number">10</span>); <span class="hljs-comment">//占位参数必须填补</span><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-3-函数重载">3.3 函数重载</h3><h4 id="3-3-1-函数重载概述">3.3.1 函数重载概述</h4><p>**作用：**函数名可以相同，提高复用性</p><p><strong>函数重载满足条件：</strong></p><ul><li>同一个作用域下</li><li>函数名称相同</li><li>函数参数<strong>类型不同</strong>  或者 <strong>个数不同</strong> 或者 <strong>顺序不同</strong></li></ul><p><strong>注意:</strong>  函数的返回值不可以作为函数重载的条件</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//函数重载需要函数都在同一个作用域下</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;func 的调用！&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;func (int a) 的调用！&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">double</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;func (double a)的调用！&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span> a ,<span class="hljs-type">double</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;func (int a ,double b) 的调用！&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">double</span> a ,<span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;func (double a ,int b)的调用！&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">//函数返回值不可以作为函数重载条件</span><br><span class="hljs-comment">//int func(double a, int b)</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//cout &lt;&lt; &quot;func (double a ,int b)的调用！&quot; &lt;&lt; endl;</span><br><span class="hljs-comment">//&#125;</span><br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">func</span>();<br><span class="hljs-built_in">func</span>(<span class="hljs-number">10</span>);<br><span class="hljs-built_in">func</span>(<span class="hljs-number">3.14</span>);<br><span class="hljs-built_in">func</span>(<span class="hljs-number">10</span>,<span class="hljs-number">3.14</span>);<br><span class="hljs-built_in">func</span>(<span class="hljs-number">3.14</span> , <span class="hljs-number">10</span>);<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-3-2-函数重载注意事项">3.3.2 函数重载注意事项</h4><ul><li>引用作为重载条件</li><li>函数重载碰到函数默认参数</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//函数重载注意事项</span><br><span class="hljs-comment">//1、引用作为重载条件</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;a)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;func (int &amp;a) 调用 &quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span> &amp;a)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;func (const int &amp;a) 调用 &quot;</span> &lt;&lt; endl;<br>&#125;<br><br><br><span class="hljs-comment">//2、函数重载碰到函数默认参数</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func2</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b = <span class="hljs-number">10</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;func2(int a, int b = 10) 调用&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func2</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;func2(int a) 调用&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">func</span>(a); <span class="hljs-comment">//调用无const</span><br><span class="hljs-built_in">func</span>(<span class="hljs-number">10</span>);<span class="hljs-comment">//调用有const</span><br><br><br><span class="hljs-comment">//func2(10); //碰到默认参数产生歧义，需要避免</span><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-类和对象"><strong>4</strong> 类和对象</h2><p>C++面向对象的三大特性为：==封装、继承、多态==</p><p>C++认为==万事万物都皆为对象==，对象上有其属性和行为</p><p><strong>例如：</strong></p><p>​人可以作为对象，属性有姓名、年龄、身高、体重…，行为有走、跑、跳、吃饭、唱歌…</p><p>​车也可以作为对象，属性有轮胎、方向盘、车灯…,行为有载人、放音乐、放空调…</p><p>​具有相同性质的==对象==，我们可以抽象称为==类==，人属于人类，车属于车类</p><h3 id="4-1-封装">4.1 封装</h3><h4 id="4-1-1-封装的意义">4.1.1  封装的意义</h4><p>封装是C++面向对象三大特性之一</p><p>封装的意义：</p><ul><li>将属性和行为作为一个整体，表现生活中的事物</li><li>将属性和行为加以权限控制</li></ul><p><strong>封装意义一：</strong></p><p>​在设计类的时候，属性和行为写在一起，表现事物</p><p><strong>语法：</strong> <code>class 类名&#123;   访问权限： 属性  / 行为  &#125;;</code></p><p>**示例1：**设计一个圆类，求圆的周长</p><p><strong>示例代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//圆周率</span><br><span class="hljs-type">const</span> <span class="hljs-type">double</span> PI = <span class="hljs-number">3.14</span>;<br><br><span class="hljs-comment">//1、封装的意义</span><br><span class="hljs-comment">//将属性和行为作为一个整体，用来表现生活中的事物</span><br><br><span class="hljs-comment">//封装一个圆类，求圆的周长</span><br><span class="hljs-comment">//class代表设计一个类，后面跟着的是类名</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span><br>&#123;<br><span class="hljs-keyword">public</span>:  <span class="hljs-comment">//访问权限  公共的权限</span><br><br><span class="hljs-comment">//属性</span><br><span class="hljs-type">int</span> m_r;<span class="hljs-comment">//半径</span><br><br><span class="hljs-comment">//行为</span><br><span class="hljs-comment">//获取到圆的周长</span><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">calculateZC</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//2 * pi  * r</span><br><span class="hljs-comment">//获取圆的周长</span><br><span class="hljs-keyword">return</span>  <span class="hljs-number">2</span> * PI * m_r;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//通过圆类，创建圆的对象</span><br><span class="hljs-comment">// c1就是一个具体的圆</span><br>Circle c1;<br>c<span class="hljs-number">1.</span>m_r = <span class="hljs-number">10</span>; <span class="hljs-comment">//给圆对象的半径 进行赋值操作</span><br><br><span class="hljs-comment">//2 * pi * 10 = = 62.8</span><br>cout &lt;&lt; <span class="hljs-string">&quot;圆的周长为： &quot;</span> &lt;&lt; c<span class="hljs-number">1.</span><span class="hljs-built_in">calculateZC</span>() &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>**示例2：**设计一个学生类，属性有姓名和学号，可以给姓名和学号赋值，可以显示学生的姓名和学号</p><p><strong>示例2代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//学生类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(string name)</span> </span>&#123;<br>m_name = name;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setID</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> </span>&#123;<br>m_id = id;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showStudent</span><span class="hljs-params">()</span> </span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;name:&quot;</span> &lt;&lt; m_name &lt;&lt; <span class="hljs-string">&quot; ID:&quot;</span> &lt;&lt; m_id &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">public</span>:<br>string m_name;<br><span class="hljs-type">int</span> m_id;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>Student stu;<br>stu.<span class="hljs-built_in">setName</span>(<span class="hljs-string">&quot;德玛西亚&quot;</span>);<br>stu.<span class="hljs-built_in">setID</span>(<span class="hljs-number">250</span>);<br>stu.<span class="hljs-built_in">showStudent</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>封装意义二：</strong></p><p>类在设计时，可以把属性和行为放在不同的权限下，加以控制</p><p>访问权限有三种：</p><ol><li>public        公共权限</li><li>protected 保护权限</li><li>private      私有权限</li></ol><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//三种权限</span><br><span class="hljs-comment">//公共权限  public     类内可以访问  类外可以访问</span><br><span class="hljs-comment">//保护权限  protected  类内可以访问  类外不可以访问</span><br><span class="hljs-comment">//私有权限  private    类内可以访问  类外不可以访问</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span><br>&#123;<br><span class="hljs-comment">//姓名  公共权限</span><br><span class="hljs-keyword">public</span>:<br>string m_Name;<br><br><span class="hljs-comment">//汽车  保护权限</span><br><span class="hljs-keyword">protected</span>:<br>string m_Car;<br><br><span class="hljs-comment">//银行卡密码  私有权限</span><br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> m_Password;<br><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>m_Name = <span class="hljs-string">&quot;张三&quot;</span>;<br>m_Car = <span class="hljs-string">&quot;拖拉机&quot;</span>;<br>m_Password = <span class="hljs-number">123456</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>Person p;<br>p.m_Name = <span class="hljs-string">&quot;李四&quot;</span>;<br><span class="hljs-comment">//p.m_Car = &quot;奔驰&quot;;  //保护权限类外访问不到</span><br><span class="hljs-comment">//p.m_Password = 123; //私有权限类外访问不到</span><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-1-2-struct和class区别">4.1.2 struct和class区别</h4><p>在C++中 struct和class唯一的<strong>区别</strong>就在于 <strong>默认的访问权限不同</strong></p><p>区别：</p><ul><li>struct 默认权限为公共</li><li>class   默认权限为私有</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">C1</span><br>&#123;<br><span class="hljs-type">int</span>  m_A; <span class="hljs-comment">//默认是私有权限</span><br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">C2</span><br>&#123;<br><span class="hljs-type">int</span> m_A;  <span class="hljs-comment">//默认是公共权限</span><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>C1 c1;<br>c<span class="hljs-number">1.</span>m_A = <span class="hljs-number">10</span>; <span class="hljs-comment">//错误，访问权限是私有</span><br><br>C2 c2;<br>c<span class="hljs-number">2.</span>m_A = <span class="hljs-number">10</span>; <span class="hljs-comment">//正确，访问权限是公共</span><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-1-3-成员属性设置为私有">4.1.3 成员属性设置为私有</h4><p>**优点1：**将所有成员属性设置为私有，可以自己控制读写权限</p><p>**优点2：**对于写权限，我们可以检测数据的有效性</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span>:<br><br><span class="hljs-comment">//姓名设置可读可写</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(string name)</span> </span>&#123;<br>m_Name = name;<br>&#125;<br><span class="hljs-function">string <span class="hljs-title">getName</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> m_Name;<br>&#125;<br><br><br><span class="hljs-comment">//获取年龄 </span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> m_Age;<br>&#125;<br><span class="hljs-comment">//设置年龄</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (age &lt; <span class="hljs-number">0</span> || age &gt; <span class="hljs-number">150</span>) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;你个老妖精!&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>m_Age = age;<br>&#125;<br><br><span class="hljs-comment">//情人设置为只写</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setLover</span><span class="hljs-params">(string lover)</span> </span>&#123;<br>m_Lover = lover;<br>&#125;<br><br><span class="hljs-keyword">private</span>:<br>string m_Name; <span class="hljs-comment">//可读可写  姓名</span><br><br><span class="hljs-type">int</span> m_Age; <span class="hljs-comment">//只读  年龄</span><br><br>string m_Lover; <span class="hljs-comment">//只写  情人</span><br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>Person p;<br><span class="hljs-comment">//姓名设置</span><br>p.<span class="hljs-built_in">setName</span>(<span class="hljs-string">&quot;张三&quot;</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;姓名： &quot;</span> &lt;&lt; p.<span class="hljs-built_in">getName</span>() &lt;&lt; endl;<br><br><span class="hljs-comment">//年龄设置</span><br>p.<span class="hljs-built_in">setAge</span>(<span class="hljs-number">50</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;年龄： &quot;</span> &lt;&lt; p.<span class="hljs-built_in">getAge</span>() &lt;&lt; endl;<br><br><span class="hljs-comment">//情人设置</span><br>p.<span class="hljs-built_in">setLover</span>(<span class="hljs-string">&quot;苍井&quot;</span>);<br><span class="hljs-comment">//cout &lt;&lt; &quot;情人： &quot; &lt;&lt; p.m_Lover &lt;&lt; endl;  //只写属性，不可以读取</span><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习案例1：设计立方体类</strong></p><p>设计立方体类(Cube)</p><p>求出立方体的面积和体积</p><p>分别用全局函数和成员函数判断两个立方体是否相等。</p><p><img src="/assets/1545533548532.png" alt="1545533548532"></p><p><strong>练习案例2：点和圆的关系</strong></p><p>设计一个圆形类（Circle），和一个点类（Point），计算点和圆的关系。</p><p><img src="/assets/1545533829184.png" alt="1545533829184"></p><h3 id="4-2-对象的初始化和清理">4.2 对象的初始化和清理</h3><ul><li>生活中我们买的电子产品都基本会有出厂设置，在某一天我们不用时候也会删除一些自己信息数据保证安全</li><li>C++中的面向对象来源于生活，每个对象也都会有初始设置以及 对象销毁前的清理数据的设置。</li></ul><h4 id="4-2-1-构造函数和析构函数">4.2.1 构造函数和析构函数</h4><p>对象的<strong>初始化和清理</strong>也是两个非常重要的安全问题</p><p>​一个对象或者变量没有初始状态，对其使用后果是未知</p><p>​同样的使用完一个对象或变量，没有及时清理，也会造成一定的安全问题</p><p>c++利用了<strong>构造函数</strong>和<strong>析构函数</strong>解决上述问题，这两个函数将会被编译器自动调用，完成对象初始化和清理工作。</p><p>对象的初始化和清理工作是编译器强制要我们做的事情，因此如果<strong>我们不提供构造和析构，编译器会提供</strong></p><p><strong>编译器提供的构造函数和析构函数是空实现。</strong></p><ul><li>构造函数：主要作用在于创建对象时为对象的成员属性赋值，构造函数由编译器自动调用，无须手动调用。</li><li>析构函数：主要作用在于对象<strong>销毁前</strong>系统自动调用，执行一些清理工作。</li></ul><p><strong>构造函数语法：</strong><code>类名()&#123;&#125;</code></p><ol><li>构造函数，没有返回值也不写void</li><li>函数名称与类名相同</li><li>构造函数可以有参数，因此可以发生重载</li><li>程序在调用对象时候会自动调用构造，无须手动调用,而且只会调用一次</li></ol><p><strong>析构函数语法：</strong> <code>~类名()&#123;&#125;</code></p><ol><li>析构函数，没有返回值也不写void</li><li>函数名称与类名相同,在名称前加上符号  ~</li><li>析构函数不可以有参数，因此不可以发生重载</li><li>程序在对象销毁前会自动调用析构，无须手动调用,而且只会调用一次</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//构造函数</span><br><span class="hljs-built_in">Person</span>()<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Person的构造函数调用&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-comment">//析构函数</span><br>~<span class="hljs-built_in">Person</span>()<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Person的析构函数调用&quot;</span> &lt;&lt; endl;<br>&#125;<br><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Person p;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-2-2-构造函数的分类及调用">4.2.2 构造函数的分类及调用</h4><p>两种分类方式：</p><p>​按参数分为： 有参构造和无参构造</p><p>​按类型分为： 普通构造和拷贝构造</p><p>三种调用方式：</p><p>​括号法</p><p>​显示法</p><p>​隐式转换法</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//1、构造函数分类</span><br><span class="hljs-comment">// 按照参数分类分为 有参和无参构造   无参又称为默认构造函数</span><br><span class="hljs-comment">// 按照类型分类分为 普通构造和拷贝构造</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//无参（默认）构造函数</span><br><span class="hljs-built_in">Person</span>() &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;无参构造函数!&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-comment">//有参构造函数</span><br><span class="hljs-built_in">Person</span>(<span class="hljs-type">int</span> a) &#123;<br>age = a;<br>cout &lt;&lt; <span class="hljs-string">&quot;有参构造函数!&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-comment">//拷贝构造函数</span><br><span class="hljs-built_in">Person</span>(<span class="hljs-type">const</span> Person&amp; p) &#123;<br>age = p.age;<br>cout &lt;&lt; <span class="hljs-string">&quot;拷贝构造函数!&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-comment">//析构函数</span><br>~<span class="hljs-built_in">Person</span>() &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;析构函数!&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> age;<br>&#125;;<br><br><span class="hljs-comment">//2、构造函数的调用</span><br><span class="hljs-comment">//调用无参构造函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br>Person p; <span class="hljs-comment">//调用无参构造函数</span><br>&#125;<br><br><span class="hljs-comment">//调用有参的构造函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//2.1  括号法，常用</span><br><span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<br><span class="hljs-comment">//注意1：调用无参构造函数不能加括号，如果加了编译器认为这是一个函数声明</span><br><span class="hljs-comment">//Person p2();</span><br><br><span class="hljs-comment">//2.2 显式法</span><br>Person p2 = <span class="hljs-built_in">Person</span>(<span class="hljs-number">10</span>); <br>Person p3 = <span class="hljs-built_in">Person</span>(p2);<br><span class="hljs-comment">//Person(10)单独写就是匿名对象  当前行结束之后，马上析构</span><br><br><span class="hljs-comment">//2.3 隐式转换法</span><br>Person p4 = <span class="hljs-number">10</span>; <span class="hljs-comment">// Person p4 = Person(10); </span><br>Person p5 = p4; <span class="hljs-comment">// Person p5 = Person(p4); </span><br><br><span class="hljs-comment">//注意2：不能利用 拷贝构造函数 初始化匿名对象 编译器认为是对象声明</span><br><span class="hljs-comment">//Person p5(p4);</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><span class="hljs-comment">//test02();</span><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-2-3-拷贝构造函数调用时机">4.2.3 拷贝构造函数调用时机</h4><p>C++中拷贝构造函数调用时机通常有三种情况</p><ul><li>使用一个已经创建完毕的对象来初始化一个新对象</li><li>值传递的方式给函数参数传值</li><li>以值方式返回局部对象</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Person</span>() &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;无参构造函数!&quot;</span> &lt;&lt; endl;<br>mAge = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-built_in">Person</span>(<span class="hljs-type">int</span> age) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;有参构造函数!&quot;</span> &lt;&lt; endl;<br>mAge = age;<br>&#125;<br><span class="hljs-built_in">Person</span>(<span class="hljs-type">const</span> Person&amp; p) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;拷贝构造函数!&quot;</span> &lt;&lt; endl;<br>mAge = p.mAge;<br>&#125;<br><span class="hljs-comment">//析构函数在释放内存之前调用</span><br>~<span class="hljs-built_in">Person</span>() &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;析构函数!&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> mAge;<br>&#125;;<br><br><span class="hljs-comment">//1. 使用一个已经创建完毕的对象来初始化一个新对象</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-function">Person <span class="hljs-title">man</span><span class="hljs-params">(<span class="hljs-number">100</span>)</span></span>; <span class="hljs-comment">//p对象已经创建完毕</span><br><span class="hljs-function">Person <span class="hljs-title">newman</span><span class="hljs-params">(man)</span></span>; <span class="hljs-comment">//调用拷贝构造函数</span><br>Person newman2 = man; <span class="hljs-comment">//拷贝构造</span><br><br><span class="hljs-comment">//Person newman3;</span><br><span class="hljs-comment">//newman3 = man; //不是调用拷贝构造函数，赋值操作</span><br>&#125;<br><br><span class="hljs-comment">//2. 值传递的方式给函数参数传值</span><br><span class="hljs-comment">//相当于Person p1 = p;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">doWork</span><span class="hljs-params">(Person p1)</span> </span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span> </span>&#123;<br>Person p; <span class="hljs-comment">//无参构造函数</span><br><span class="hljs-built_in">doWork</span>(p);<br>&#125;<br><br><span class="hljs-comment">//3. 以值方式返回局部对象</span><br><span class="hljs-function">Person <span class="hljs-title">doWork2</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Person p1;<br>cout &lt;&lt; (<span class="hljs-type">int</span> *)&amp;p1 &lt;&lt; endl;<br><span class="hljs-keyword">return</span> p1;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test03</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Person p = <span class="hljs-built_in">doWork2</span>();<br>cout &lt;&lt; (<span class="hljs-type">int</span> *)&amp;p &lt;&lt; endl;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//test01();</span><br><span class="hljs-comment">//test02();</span><br><span class="hljs-built_in">test03</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-2-4-构造函数调用规则">4.2.4 构造函数调用规则</h4><p>默认情况下，c++编译器至少给一个类添加3个函数</p><p>1．默认构造函数(无参，函数体为空)</p><p>2．默认析构函数(无参，函数体为空)</p><p>3．默认拷贝构造函数，对属性进行值拷贝</p><p>构造函数调用规则如下：</p><ul><li><p>如果用户定义有参构造函数，c++不在提供默认无参构造，但是会提供默认拷贝构造</p></li><li><p>如果用户定义拷贝构造函数，c++不会再提供其他构造函数</p></li></ul><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//无参（默认）构造函数</span><br><span class="hljs-built_in">Person</span>() &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;无参构造函数!&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-comment">//有参构造函数</span><br><span class="hljs-built_in">Person</span>(<span class="hljs-type">int</span> a) &#123;<br>age = a;<br>cout &lt;&lt; <span class="hljs-string">&quot;有参构造函数!&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-comment">//拷贝构造函数</span><br><span class="hljs-built_in">Person</span>(<span class="hljs-type">const</span> Person&amp; p) &#123;<br>age = p.age;<br>cout &lt;&lt; <span class="hljs-string">&quot;拷贝构造函数!&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-comment">//析构函数</span><br>~<span class="hljs-built_in">Person</span>() &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;析构函数!&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> age;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-number">18</span>)</span></span>;<br><span class="hljs-comment">//如果不写拷贝构造，编译器会自动添加拷贝构造，并且做浅拷贝操作</span><br><span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(p1)</span></span>;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;p2的年龄为： &quot;</span> &lt;&lt; p<span class="hljs-number">2.</span>age &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//如果用户提供有参构造，编译器不会提供默认构造，会提供拷贝构造</span><br>Person p1; <span class="hljs-comment">//此时如果用户自己没有提供默认构造，会出错</span><br><span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>; <span class="hljs-comment">//用户提供的有参</span><br><span class="hljs-function">Person <span class="hljs-title">p3</span><span class="hljs-params">(p2)</span></span>; <span class="hljs-comment">//此时如果用户没有提供拷贝构造，编译器会提供</span><br><br><span class="hljs-comment">//如果用户提供拷贝构造，编译器不会提供其他构造函数</span><br>Person p4; <span class="hljs-comment">//此时如果用户自己没有提供默认构造，会出错</span><br><span class="hljs-function">Person <span class="hljs-title">p5</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>; <span class="hljs-comment">//此时如果用户自己没有提供有参，会出错</span><br><span class="hljs-function">Person <span class="hljs-title">p6</span><span class="hljs-params">(p5)</span></span>; <span class="hljs-comment">//用户自己提供拷贝构造</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-2-5-深拷贝与浅拷贝">4.2.5 深拷贝与浅拷贝</h4><p>深浅拷贝是面试经典问题，也是常见的一个坑</p><p>浅拷贝：简单的赋值拷贝操作</p><p>深拷贝：在堆区重新申请空间，进行拷贝操作</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//无参（默认）构造函数</span><br><span class="hljs-built_in">Person</span>() &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;无参构造函数!&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-comment">//有参构造函数</span><br><span class="hljs-built_in">Person</span>(<span class="hljs-type">int</span> age ,<span class="hljs-type">int</span> height) &#123;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;有参构造函数!&quot;</span> &lt;&lt; endl;<br><br>m_age = age;<br>m_height = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(height);<br><br>&#125;<br><span class="hljs-comment">//拷贝构造函数  </span><br><span class="hljs-built_in">Person</span>(<span class="hljs-type">const</span> Person&amp; p) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;拷贝构造函数!&quot;</span> &lt;&lt; endl;<br><span class="hljs-comment">//如果不利用深拷贝在堆区创建新内存，会导致浅拷贝带来的重复释放堆区问题</span><br>m_age = p.m_age;<br>m_height = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(*p.m_height);<br><br>&#125;<br><br><span class="hljs-comment">//析构函数</span><br>~<span class="hljs-built_in">Person</span>() &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;析构函数!&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">if</span> (m_height != <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">delete</span> m_height;<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> m_age;<br><span class="hljs-type">int</span>* m_height;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-number">18</span>, <span class="hljs-number">180</span>)</span></span>;<br><br><span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(p1)</span></span>;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;p1的年龄： &quot;</span> &lt;&lt; p<span class="hljs-number">1.</span>m_age &lt;&lt; <span class="hljs-string">&quot; 身高： &quot;</span> &lt;&lt; *p<span class="hljs-number">1.</span>m_height &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;p2的年龄： &quot;</span> &lt;&lt; p<span class="hljs-number">2.</span>m_age &lt;&lt; <span class="hljs-string">&quot; 身高： &quot;</span> &lt;&lt; *p<span class="hljs-number">2.</span>m_height &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结：如果属性有在堆区开辟的，一定要自己提供拷贝构造函数，防止浅拷贝带来的问题</p></blockquote><h4 id="4-2-6-初始化列表">4.2.6 初始化列表</h4><p><strong>作用：</strong></p><p>C++提供了初始化列表语法，用来初始化属性</p><p><strong>语法：</strong><code>构造函数()：属性1(值1),属性2（值2）... &#123;&#125;</code></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span>:<br><br><span class="hljs-comment">////传统方式初始化</span><br><span class="hljs-comment">//Person(int a, int b, int c) &#123;</span><br><span class="hljs-comment">//m_A = a;</span><br><span class="hljs-comment">//m_B = b;</span><br><span class="hljs-comment">//m_C = c;</span><br><span class="hljs-comment">//&#125;</span><br><br><span class="hljs-comment">//初始化列表方式初始化</span><br><span class="hljs-built_in">Person</span>(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c) :<span class="hljs-built_in">m_A</span>(a), <span class="hljs-built_in">m_B</span>(b), <span class="hljs-built_in">m_C</span>(c) &#123;&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PrintPerson</span><span class="hljs-params">()</span> </span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;mA:&quot;</span> &lt;&lt; m_A &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;mB:&quot;</span> &lt;&lt; m_B &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;mC:&quot;</span> &lt;&lt; m_C &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> m_A;<br><span class="hljs-type">int</span> m_B;<br><span class="hljs-type">int</span> m_C;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-function">Person <span class="hljs-title">p</span><span class="hljs-params">(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)</span></span>;<br>p.<span class="hljs-built_in">PrintPerson</span>();<br><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-2-7-类对象作为类成员">4.2.7 类对象作为类成员</h4><p>C++类中的成员可以是另一个类的对象，我们称该成员为 对象成员</p><p>例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span><br>&#123;<br>    A a；<br>&#125;<br></code></pre></td></tr></table></figure><p>B类中有对象A作为成员，A为对象成员</p><p>那么当创建B对象时，A与B的构造和析构的顺序是谁先谁后？</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Phone</span>(string name)<br>&#123;<br>m_PhoneName = name;<br>cout &lt;&lt; <span class="hljs-string">&quot;Phone构造&quot;</span> &lt;&lt; endl;<br>&#125;<br><br>~<span class="hljs-built_in">Phone</span>()<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Phone析构&quot;</span> &lt;&lt; endl;<br>&#125;<br><br>string m_PhoneName;<br><br>&#125;;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><br><span class="hljs-comment">//初始化列表可以告诉编译器调用哪一个构造函数</span><br><span class="hljs-built_in">Person</span>(string name, string pName) :<span class="hljs-built_in">m_Name</span>(name), <span class="hljs-built_in">m_Phone</span>(pName)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Person构造&quot;</span> &lt;&lt; endl;<br>&#125;<br><br>~<span class="hljs-built_in">Person</span>()<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Person析构&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">playGame</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; m_Name &lt;&lt; <span class="hljs-string">&quot; 使用&quot;</span> &lt;&lt; m_Phone.m_PhoneName &lt;&lt; <span class="hljs-string">&quot; 牌手机! &quot;</span> &lt;&lt; endl;<br>&#125;<br><br>string m_Name;<br>Phone m_Phone;<br><br>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//当类中成员是其他类对象时，我们称该成员为 对象成员</span><br><span class="hljs-comment">//构造的顺序是 ：先调用对象成员的构造，再调用本类构造</span><br><span class="hljs-comment">//析构顺序与构造相反</span><br><span class="hljs-function">Person <span class="hljs-title">p</span><span class="hljs-params">(<span class="hljs-string">&quot;张三&quot;</span> , <span class="hljs-string">&quot;苹果X&quot;</span>)</span></span>;<br>p.<span class="hljs-built_in">playGame</span>();<br><br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-2-8-静态成员">4.2.8 静态成员</h4><p>静态成员就是在成员变量和成员函数前加上关键字static，称为静态成员</p><p>静态成员分为：</p><ul><li>静态成员变量<ul><li>所有对象共享同一份数据</li><li>在编译阶段分配内存</li><li>类内声明，类外初始化</li></ul></li><li>静态成员函数<ul><li>所有对象共享同一个函数</li><li>静态成员函数只能访问静态成员变量</li></ul></li></ul><p>**示例1 ：**静态成员变量</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span><br>&#123;<br><br><span class="hljs-keyword">public</span>:<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> m_A; <span class="hljs-comment">//静态成员变量</span><br><br><span class="hljs-comment">//静态成员变量特点：</span><br><span class="hljs-comment">//1 在编译阶段分配内存</span><br><span class="hljs-comment">//2 类内声明，类外初始化</span><br><span class="hljs-comment">//3 所有对象共享同一份数据</span><br><br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> m_B; <span class="hljs-comment">//静态成员变量也是有访问权限的</span><br>&#125;;<br><span class="hljs-type">int</span> Person::m_A = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> Person::m_B = <span class="hljs-number">10</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//静态成员变量两种访问方式</span><br><br><span class="hljs-comment">//1、通过对象</span><br>Person p1;<br>p<span class="hljs-number">1.</span>m_A = <span class="hljs-number">100</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;p1.m_A = &quot;</span> &lt;&lt; p<span class="hljs-number">1.</span>m_A &lt;&lt; endl;<br><br>Person p2;<br>p<span class="hljs-number">2.</span>m_A = <span class="hljs-number">200</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;p1.m_A = &quot;</span> &lt;&lt; p<span class="hljs-number">1.</span>m_A &lt;&lt; endl; <span class="hljs-comment">//共享同一份数据</span><br>cout &lt;&lt; <span class="hljs-string">&quot;p2.m_A = &quot;</span> &lt;&lt; p<span class="hljs-number">2.</span>m_A &lt;&lt; endl;<br><br><span class="hljs-comment">//2、通过类名</span><br>cout &lt;&lt; <span class="hljs-string">&quot;m_A = &quot;</span> &lt;&lt; Person::m_A &lt;&lt; endl;<br><br><br><span class="hljs-comment">//cout &lt;&lt; &quot;m_B = &quot; &lt;&lt; Person::m_B &lt;&lt; endl; //私有权限访问不到</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>**示例2：**静态成员函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span><br>&#123;<br><br><span class="hljs-keyword">public</span>:<br><br><span class="hljs-comment">//静态成员函数特点：</span><br><span class="hljs-comment">//1 程序共享一个函数</span><br><span class="hljs-comment">//2 静态成员函数只能访问静态成员变量</span><br><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;func调用&quot;</span> &lt;&lt; endl;<br>m_A = <span class="hljs-number">100</span>;<br><span class="hljs-comment">//m_B = 100; //错误，不可以访问非静态成员变量</span><br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> m_A; <span class="hljs-comment">//静态成员变量</span><br><span class="hljs-type">int</span> m_B; <span class="hljs-comment">// </span><br><span class="hljs-keyword">private</span>:<br><br><span class="hljs-comment">//静态成员函数也是有访问权限的</span><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">func2</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;func2调用&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><span class="hljs-type">int</span> Person::m_A = <span class="hljs-number">10</span>;<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//静态成员变量两种访问方式</span><br><br><span class="hljs-comment">//1、通过对象</span><br>Person p1;<br>p<span class="hljs-number">1.f</span>unc();<br><br><span class="hljs-comment">//2、通过类名</span><br>Person::<span class="hljs-built_in">func</span>();<br><br><br><span class="hljs-comment">//Person::func2(); //私有权限访问不到</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-3-C-对象模型和this指针">4.3 C++对象模型和this指针</h3><h4 id="4-3-1-成员变量和成员函数分开存储">4.3.1 成员变量和成员函数分开存储</h4><p>在C++中，类内的成员变量和成员函数分开存储</p><p>只有非静态成员变量才属于类的对象上</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Person</span>() &#123;<br>mA = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//非静态成员变量占对象空间</span><br><span class="hljs-type">int</span> mA;<br><span class="hljs-comment">//静态成员变量不占对象空间</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> mB; <br><span class="hljs-comment">//函数也不占对象空间，所有函数共享一个函数实例</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span> </span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;mA:&quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;mA &lt;&lt; endl;<br>&#125;<br><span class="hljs-comment">//静态成员函数也不占对象空间</span><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">sfunc</span><span class="hljs-params">()</span> </span>&#123;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>cout &lt;&lt; <span class="hljs-built_in">sizeof</span>(Person) &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-3-2-this指针概念">4.3.2 this指针概念</h4><p>通过4.3.1我们知道在C++中成员变量和成员函数是分开存储的</p><p>每一个非静态成员函数只会诞生一份函数实例，也就是说多个同类型的对象会共用一块代码</p><p>那么问题是：这一块代码是如何区分那个对象调用自己的呢？</p><p>c++通过提供特殊的对象指针，this指针，解决上述问题。<strong>this指针指向被调用的成员函数所属的对象</strong></p><p>this指针是隐含每一个非静态成员函数内的一种指针</p><p>this指针不需要定义，直接使用即可</p><p>this指针的用途：</p><ul><li>当形参和成员变量同名时，可用this指针来区分</li><li>在类的非静态成员函数中返回对象本身，可使用return *this</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><br><span class="hljs-built_in">Person</span>(<span class="hljs-type">int</span> age)<br>&#123;<br><span class="hljs-comment">//1、当形参和成员变量同名时，可用this指针来区分</span><br><span class="hljs-keyword">this</span>-&gt;age = age;<br>&#125;<br><br><span class="hljs-function">Person&amp; <span class="hljs-title">PersonAddPerson</span><span class="hljs-params">(Person p)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">this</span>-&gt;age += p.age;<br><span class="hljs-comment">//返回对象本身</span><br><span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br><br><span class="hljs-type">int</span> age;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;p1.age = &quot;</span> &lt;&lt; p<span class="hljs-number">1.</span>age &lt;&lt; endl;<br><br><span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<br>p<span class="hljs-number">2.</span><span class="hljs-built_in">PersonAddPerson</span>(p1).<span class="hljs-built_in">PersonAddPerson</span>(p1).<span class="hljs-built_in">PersonAddPerson</span>(p1);<br>cout &lt;&lt; <span class="hljs-string">&quot;p2.age = &quot;</span> &lt;&lt; p<span class="hljs-number">2.</span>age &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-3-3-空指针访问成员函数">4.3.3 空指针访问成员函数</h4><p>C++中空指针也是可以调用成员函数的，但是也要注意有没有用到this指针</p><p>如果用到this指针，需要加以判断保证代码的健壮性</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//空指针访问成员函数</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span>:<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ShowClassName</span><span class="hljs-params">()</span> </span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;我是Person类!&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ShowPerson</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>cout &lt;&lt; mAge &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> mAge;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Person * p = <span class="hljs-literal">NULL</span>;<br>p-&gt;<span class="hljs-built_in">ShowClassName</span>(); <span class="hljs-comment">//空指针，可以调用成员函数</span><br>p-&gt;<span class="hljs-built_in">ShowPerson</span>();  <span class="hljs-comment">//但是如果成员函数中用到了this指针，就不可以了</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-3-4-const修饰成员函数">4.3.4 const修饰成员函数</h4><p><strong>常函数：</strong></p><ul><li>成员函数后加const后我们称为这个函数为<strong>常函数</strong></li><li>常函数内不可以修改成员属性</li><li>成员属性声明时加关键字mutable后，在常函数中依然可以修改</li></ul><p><strong>常对象：</strong></p><ul><li>声明对象前加const称该对象为常对象</li><li>常对象只能调用常函数</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Person</span>() &#123;<br>m_A = <span class="hljs-number">0</span>;<br>m_B = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//this指针的本质是一个指针常量，指针的指向不可修改</span><br><span class="hljs-comment">//如果想让指针指向的值也不可以修改，需要声明常函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ShowPerson</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br><span class="hljs-comment">//const Type* const pointer;</span><br><span class="hljs-comment">//this = NULL; //不能修改指针的指向 Person* const this;</span><br><span class="hljs-comment">//this-&gt;mA = 100; //但是this指针指向的对象的数据是可以修改的</span><br><br><span class="hljs-comment">//const修饰成员函数，表示指针指向的内存空间的数据不能修改，除了mutable修饰的变量</span><br><span class="hljs-keyword">this</span>-&gt;m_B = <span class="hljs-number">100</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">MyFunc</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br><span class="hljs-comment">//mA = 10000;</span><br>&#125;<br><br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> m_A;<br><span class="hljs-keyword">mutable</span> <span class="hljs-type">int</span> m_B; <span class="hljs-comment">//可修改 可变的</span><br>&#125;;<br><br><br><span class="hljs-comment">//const修饰对象  常对象</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">const</span> Person person; <span class="hljs-comment">//常量对象  </span><br>cout &lt;&lt; person.m_A &lt;&lt; endl;<br><span class="hljs-comment">//person.mA = 100; //常对象不能修改成员变量的值,但是可以访问</span><br>person.m_B = <span class="hljs-number">100</span>; <span class="hljs-comment">//但是常对象可以修改mutable修饰成员变量</span><br><br><span class="hljs-comment">//常对象访问成员函数</span><br>person.<span class="hljs-built_in">MyFunc</span>(); <span class="hljs-comment">//常对象不能调用const的函数</span><br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-4-友元">4.4 友元</h3><p>生活中你的家有客厅(Public)，有你的卧室(Private)</p><p>客厅所有来的客人都可以进去，但是你的卧室是私有的，也就是说只有你能进去</p><p>但是呢，你也可以允许你的好闺蜜好基友进去。</p><p>在程序里，有些私有属性 也想让类外特殊的一些函数或者类进行访问，就需要用到友元的技术</p><p>友元的目的就是让一个函数或者类 访问另一个类中私有成员</p><p>友元的关键字为  ==friend==</p><p>友元的三种实现</p><ul><li>全局函数做友元</li><li>类做友元</li><li>成员函数做友元</li></ul><h4 id="4-4-1-全局函数做友元">4.4.1 全局函数做友元</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Building</span><br>&#123;<br><span class="hljs-comment">//告诉编译器 goodGay全局函数 是 Building类的好朋友，可以访问类中的私有内容</span><br><span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-type">void</span> <span class="hljs-title">goodGay</span><span class="hljs-params">(Building * building)</span></span>;<br><br><span class="hljs-keyword">public</span>:<br><br><span class="hljs-built_in">Building</span>()<br>&#123;<br><span class="hljs-keyword">this</span>-&gt;m_SittingRoom = <span class="hljs-string">&quot;客厅&quot;</span>;<br><span class="hljs-keyword">this</span>-&gt;m_BedRoom = <span class="hljs-string">&quot;卧室&quot;</span>;<br>&#125;<br><br><br><span class="hljs-keyword">public</span>:<br>string m_SittingRoom; <span class="hljs-comment">//客厅</span><br><br><span class="hljs-keyword">private</span>:<br>string m_BedRoom; <span class="hljs-comment">//卧室</span><br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">goodGay</span><span class="hljs-params">(Building * building)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;好基友正在访问： &quot;</span> &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;好基友正在访问： &quot;</span> &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Building b;<br><span class="hljs-built_in">goodGay</span>(&amp;b);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-4-2-类做友元">4.4.2 类做友元</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Building</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">goodGay</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><br><span class="hljs-built_in">goodGay</span>();<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">visit</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-keyword">private</span>:<br>Building *building;<br>&#125;;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Building</span><br>&#123;<br><span class="hljs-comment">//告诉编译器 goodGay类是Building类的好朋友，可以访问到Building类中私有内容</span><br><span class="hljs-keyword">friend</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">goodGay</span>;<br><br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Building</span>();<br><br><span class="hljs-keyword">public</span>:<br>string m_SittingRoom; <span class="hljs-comment">//客厅</span><br><span class="hljs-keyword">private</span>:<br>string m_BedRoom;<span class="hljs-comment">//卧室</span><br>&#125;;<br><br>Building::<span class="hljs-built_in">Building</span>()<br>&#123;<br><span class="hljs-keyword">this</span>-&gt;m_SittingRoom = <span class="hljs-string">&quot;客厅&quot;</span>;<br><span class="hljs-keyword">this</span>-&gt;m_BedRoom = <span class="hljs-string">&quot;卧室&quot;</span>;<br>&#125;<br><br>goodGay::<span class="hljs-built_in">goodGay</span>()<br>&#123;<br>building = <span class="hljs-keyword">new</span> Building;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">goodGay::visit</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>goodGay gg;<br>gg.<span class="hljs-built_in">visit</span>();<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-4-3-成员函数做友元">4.4.3 成员函数做友元</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs C++"><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Building</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">goodGay</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><br><span class="hljs-built_in">goodGay</span>();<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">visit</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//只让visit函数作为Building的好朋友，可以发访问Building中私有内容</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">visit2</span><span class="hljs-params">()</span></span>; <br><br><span class="hljs-keyword">private</span>:<br>Building *building;<br>&#125;;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Building</span><br>&#123;<br><span class="hljs-comment">//告诉编译器  goodGay类中的visit成员函数 是Building好朋友，可以访问私有内容</span><br><span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-type">void</span> <span class="hljs-title">goodGay::visit</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Building</span>();<br><br><span class="hljs-keyword">public</span>:<br>string m_SittingRoom; <span class="hljs-comment">//客厅</span><br><span class="hljs-keyword">private</span>:<br>string m_BedRoom;<span class="hljs-comment">//卧室</span><br>&#125;;<br><br>Building::<span class="hljs-built_in">Building</span>()<br>&#123;<br><span class="hljs-keyword">this</span>-&gt;m_SittingRoom = <span class="hljs-string">&quot;客厅&quot;</span>;<br><span class="hljs-keyword">this</span>-&gt;m_BedRoom = <span class="hljs-string">&quot;卧室&quot;</span>;<br>&#125;<br><br>goodGay::<span class="hljs-built_in">goodGay</span>()<br>&#123;<br>building = <span class="hljs-keyword">new</span> Building;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">goodGay::visit</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">goodGay::visit2</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;<br><span class="hljs-comment">//cout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>goodGay  gg;<br>gg.<span class="hljs-built_in">visit</span>();<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-5-运算符重载">4.5 运算符重载</h3><p>运算符重载概念：对已有的运算符重新进行定义，赋予其另一种功能，以适应不同的数据类型</p><h4 id="4-5-1-加号运算符重载">4.5.1 加号运算符重载</h4><p>作用：实现两个自定义数据类型相加的运算</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Person</span>() &#123;&#125;;<br><span class="hljs-built_in">Person</span>(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)<br>&#123;<br><span class="hljs-keyword">this</span>-&gt;m_A = a;<br><span class="hljs-keyword">this</span>-&gt;m_B = b;<br>&#125;<br><span class="hljs-comment">//成员函数实现 + 号运算符重载</span><br>Person <span class="hljs-keyword">operator</span>+(<span class="hljs-type">const</span> Person&amp; p) &#123;<br>Person temp;<br>temp.m_A = <span class="hljs-keyword">this</span>-&gt;m_A + p.m_A;<br>temp.m_B = <span class="hljs-keyword">this</span>-&gt;m_B + p.m_B;<br><span class="hljs-keyword">return</span> temp;<br>&#125;<br><br><br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> m_A;<br><span class="hljs-type">int</span> m_B;<br>&#125;;<br><br><span class="hljs-comment">//全局函数实现 + 号运算符重载</span><br><span class="hljs-comment">//Person operator+(const Person&amp; p1, const Person&amp; p2) &#123;</span><br><span class="hljs-comment">//Person temp(0, 0);</span><br><span class="hljs-comment">//temp.m_A = p1.m_A + p2.m_A;</span><br><span class="hljs-comment">//temp.m_B = p1.m_B + p2.m_B;</span><br><span class="hljs-comment">//return temp;</span><br><span class="hljs-comment">//&#125;</span><br><br><span class="hljs-comment">//运算符重载 可以发生函数重载 </span><br>Person <span class="hljs-keyword">operator</span>+(<span class="hljs-type">const</span> Person&amp; p2, <span class="hljs-type">int</span> val)  <br>&#123;<br>Person temp;<br>temp.m_A = p<span class="hljs-number">2.</span>m_A + val;<br>temp.m_B = p<span class="hljs-number">2.</span>m_B + val;<br><span class="hljs-keyword">return</span> temp;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-number">20</span>, <span class="hljs-number">20</span>)</span></span>;<br><br><span class="hljs-comment">//成员函数方式</span><br>Person p3 = p2 + p1;  <span class="hljs-comment">//相当于 p2.operaor+(p1)</span><br>cout &lt;&lt; <span class="hljs-string">&quot;mA:&quot;</span> &lt;&lt; p<span class="hljs-number">3.</span>m_A &lt;&lt; <span class="hljs-string">&quot; mB:&quot;</span> &lt;&lt; p<span class="hljs-number">3.</span>m_B &lt;&lt; endl;<br><br><br>Person p4 = p3 + <span class="hljs-number">10</span>; <span class="hljs-comment">//相当于 operator+(p3,10)</span><br>cout &lt;&lt; <span class="hljs-string">&quot;mA:&quot;</span> &lt;&lt; p<span class="hljs-number">4.</span>m_A &lt;&lt; <span class="hljs-string">&quot; mB:&quot;</span> &lt;&lt; p<span class="hljs-number">4.</span>m_B &lt;&lt; endl;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结1：对于内置的数据类型的表达式的的运算符是不可能改变的</p></blockquote><blockquote><p>总结2：不要滥用运算符重载</p></blockquote><h4 id="4-5-2-左移运算符重载">4.5.2 左移运算符重载</h4><p>作用：可以输出自定义数据类型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">friend</span> ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(ostream&amp; out, Person&amp; p);<br><br><span class="hljs-keyword">public</span>:<br><br><span class="hljs-built_in">Person</span>(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)<br>&#123;<br><span class="hljs-keyword">this</span>-&gt;m_A = a;<br><span class="hljs-keyword">this</span>-&gt;m_B = b;<br>&#125;<br><br><span class="hljs-comment">//成员函数 实现不了  p &lt;&lt; cout 不是我们想要的效果</span><br><span class="hljs-comment">//void operator&lt;&lt;(Person&amp; p)&#123;</span><br><span class="hljs-comment">//&#125;</span><br><br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> m_A;<br><span class="hljs-type">int</span> m_B;<br>&#125;;<br><br><span class="hljs-comment">//全局函数实现左移重载</span><br><span class="hljs-comment">//ostream对象只能有一个</span><br>ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(ostream&amp; out, Person&amp; p) &#123;<br>out &lt;&lt; <span class="hljs-string">&quot;a:&quot;</span> &lt;&lt; p.m_A &lt;&lt; <span class="hljs-string">&quot; b:&quot;</span> &lt;&lt; p.m_B;<br><span class="hljs-keyword">return</span> out;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>)</span></span>;<br><br>cout &lt;&lt; p1 &lt;&lt; <span class="hljs-string">&quot;hello world&quot;</span> &lt;&lt; endl; <span class="hljs-comment">//链式编程</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结：重载左移运算符配合友元可以实现输出自定义数据类型</p></blockquote><h4 id="4-5-3-递增运算符重载">4.5.3 递增运算符重载</h4><p>作用： 通过重载递增运算符，实现自己的整型数据</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs C++"><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyInteger</span> &#123;<br><br><span class="hljs-keyword">friend</span> ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(ostream&amp; out, MyInteger myint);<br><br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">MyInteger</span>() &#123;<br>m_Num = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//前置++</span><br>MyInteger&amp; <span class="hljs-keyword">operator</span>++() &#123;<br><span class="hljs-comment">//先++</span><br>m_Num++;<br><span class="hljs-comment">//再返回</span><br><span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br><br><span class="hljs-comment">//后置++</span><br>MyInteger <span class="hljs-keyword">operator</span>++(<span class="hljs-type">int</span>) &#123;<br><span class="hljs-comment">//先返回</span><br>MyInteger temp = *<span class="hljs-keyword">this</span>; <span class="hljs-comment">//记录当前本身的值，然后让本身的值加1，但是返回的是以前的值，达到先返回后++；</span><br>m_Num++;<br><span class="hljs-keyword">return</span> temp;<br>&#125;<br><br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> m_Num;<br>&#125;;<br><br><br>ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(ostream&amp; out, MyInteger myint) &#123;<br>out &lt;&lt; myint.m_Num;<br><span class="hljs-keyword">return</span> out;<br>&#125;<br><br><br><span class="hljs-comment">//前置++ 先++ 再返回</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br>MyInteger myInt;<br>cout &lt;&lt; ++myInt &lt;&lt; endl;<br>cout &lt;&lt; myInt &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">//后置++ 先返回 再++</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span> </span>&#123;<br><br>MyInteger myInt;<br>cout &lt;&lt; myInt++ &lt;&lt; endl;<br>cout &lt;&lt; myInt &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><span class="hljs-comment">//test02();</span><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结： 前置递增返回引用，后置递增返回值</p></blockquote><h4 id="4-5-4-赋值运算符重载">4.5.4 赋值运算符重载</h4><p>c++编译器至少给一个类添加4个函数</p><ol><li>默认构造函数(无参，函数体为空)</li><li>默认析构函数(无参，函数体为空)</li><li>默认拷贝构造函数，对属性进行值拷贝</li><li>赋值运算符 operator=, 对属性进行值拷贝</li></ol><p>如果类中有属性指向堆区，做赋值操作时也会出现深浅拷贝问题</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><br><span class="hljs-built_in">Person</span>(<span class="hljs-type">int</span> age)<br>&#123;<br><span class="hljs-comment">//将年龄数据开辟到堆区</span><br>m_Age = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(age);<br>&#125;<br><br><span class="hljs-comment">//重载赋值运算符 </span><br>Person&amp; <span class="hljs-keyword">operator</span>=(Person &amp;p)<br>&#123;<br><span class="hljs-keyword">if</span> (m_Age != <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">delete</span> m_Age;<br>m_Age = <span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-comment">//编译器提供的代码是浅拷贝</span><br><span class="hljs-comment">//m_Age = p.m_Age;</span><br><br><span class="hljs-comment">//提供深拷贝 解决浅拷贝的问题</span><br>m_Age = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(*p.m_Age);<br><br><span class="hljs-comment">//返回自身</span><br><span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br><br><br>~<span class="hljs-built_in">Person</span>()<br>&#123;<br><span class="hljs-keyword">if</span> (m_Age != <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">delete</span> m_Age;<br>m_Age = <span class="hljs-literal">NULL</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//年龄的指针</span><br><span class="hljs-type">int</span> *m_Age;<br><br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-number">18</span>)</span></span>;<br><br><span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-number">20</span>)</span></span>;<br><br><span class="hljs-function">Person <span class="hljs-title">p3</span><span class="hljs-params">(<span class="hljs-number">30</span>)</span></span>;<br><br>p3 = p2 = p1; <span class="hljs-comment">//赋值操作</span><br><br>cout &lt;&lt; <span class="hljs-string">&quot;p1的年龄为：&quot;</span> &lt;&lt; *p<span class="hljs-number">1.</span>m_Age &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;p2的年龄为：&quot;</span> &lt;&lt; *p<span class="hljs-number">2.</span>m_Age &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;p3的年龄为：&quot;</span> &lt;&lt; *p<span class="hljs-number">3.</span>m_Age &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-comment">//int a = 10;</span><br><span class="hljs-comment">//int b = 20;</span><br><span class="hljs-comment">//int c = 30;</span><br><br><span class="hljs-comment">//c = b = a;</span><br><span class="hljs-comment">//cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;</span><br><span class="hljs-comment">//cout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl;</span><br><span class="hljs-comment">//cout &lt;&lt; &quot;c = &quot; &lt;&lt; c &lt;&lt; endl;</span><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-5-5-关系运算符重载">4.5.5 关系运算符重载</h4><p>**作用：**重载关系运算符，可以让两个自定义类型对象进行对比操作</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Person</span>(string name, <span class="hljs-type">int</span> age)<br>&#123;<br><span class="hljs-keyword">this</span>-&gt;m_Name = name;<br><span class="hljs-keyword">this</span>-&gt;m_Age = age;<br>&#125;;<br><br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>==(Person &amp; p)<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;m_Name == p.m_Name &amp;&amp; <span class="hljs-keyword">this</span>-&gt;m_Age == p.m_Age)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>!=(Person &amp; p)<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;m_Name == p.m_Name &amp;&amp; <span class="hljs-keyword">this</span>-&gt;m_Age == p.m_Age)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><br>string m_Name;<br><span class="hljs-type">int</span> m_Age;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//int a = 0;</span><br><span class="hljs-comment">//int b = 0;</span><br><br><span class="hljs-function">Person <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-string">&quot;孙悟空&quot;</span>, <span class="hljs-number">18</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">b</span><span class="hljs-params">(<span class="hljs-string">&quot;孙悟空&quot;</span>, <span class="hljs-number">18</span>)</span></span>;<br><br><span class="hljs-keyword">if</span> (a == b)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;a和b相等&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;a和b不相等&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-keyword">if</span> (a != b)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;a和b不相等&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;a和b相等&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-5-6-函数调用运算符重载">4.5.6 函数调用运算符重载</h4><ul><li>函数调用运算符 ()  也可以重载</li><li>由于重载后使用的方式非常像函数的调用，因此称为仿函数</li><li>仿函数没有固定写法，非常灵活</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyPrint</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(string text)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; text &lt;&lt; endl;<br>&#125;<br><br>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//重载的（）操作符 也称为仿函数</span><br>MyPrint myFunc;<br><span class="hljs-built_in">myFunc</span>(<span class="hljs-string">&quot;hello world&quot;</span>);<br>&#125;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAdd</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> v1, <span class="hljs-type">int</span> v2)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> v1 + v2;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>MyAdd add;<br><span class="hljs-type">int</span> ret = <span class="hljs-built_in">add</span>(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;ret = &quot;</span> &lt;&lt; ret &lt;&lt; endl;<br><br><span class="hljs-comment">//匿名对象调用  </span><br>cout &lt;&lt; <span class="hljs-string">&quot;MyAdd()(100,100) = &quot;</span> &lt;&lt; <span class="hljs-built_in">MyAdd</span>()(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>) &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><span class="hljs-built_in">test02</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-6-继承">4.6  继承</h3><p><strong>继承是面向对象三大特性之一</strong></p><p>有些类与类之间存在特殊的关系，例如下图中：</p><p><img src="/assets/1544861202252.png" alt="1544861202252"></p><p>我们发现，定义这些类时，下级别的成员除了拥有上一级的共性，还有自己的特性。</p><p>这个时候我们就可以考虑利用继承的技术，减少重复代码</p><h4 id="4-6-1-继承的基本语法">4.6.1 继承的基本语法</h4><p>例如我们看到很多网站中，都有公共的头部，公共的底部，甚至公共的左侧列表，只有中心内容不同</p><p>接下来我们分别利用普通写法和继承的写法来实现网页中的内容，看一下继承存在的意义以及好处</p><p><strong>普通实现：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//Java页面</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Java</span> <br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">header</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;首页、公开课、登录、注册...（公共头部）&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">footer</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;帮助中心、交流合作、站内地图...(公共底部)&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">left</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Java,Python,C++...(公共分类列表)&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">content</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;JAVA学科视频&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><span class="hljs-comment">//Python页面</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Python</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">header</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;首页、公开课、登录、注册...（公共头部）&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">footer</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;帮助中心、交流合作、站内地图...(公共底部)&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">left</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Java,Python,C++...(公共分类列表)&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">content</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Python学科视频&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><span class="hljs-comment">//C++页面</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CPP</span> <br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">header</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;首页、公开课、登录、注册...（公共头部）&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">footer</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;帮助中心、交流合作、站内地图...(公共底部)&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">left</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Java,Python,C++...(公共分类列表)&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">content</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;C++学科视频&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Java页面</span><br>cout &lt;&lt; <span class="hljs-string">&quot;Java下载视频页面如下： &quot;</span> &lt;&lt; endl;<br>Java ja;<br>ja.<span class="hljs-built_in">header</span>();<br>ja.<span class="hljs-built_in">footer</span>();<br>ja.<span class="hljs-built_in">left</span>();<br>ja.<span class="hljs-built_in">content</span>();<br>cout &lt;&lt; <span class="hljs-string">&quot;--------------------&quot;</span> &lt;&lt; endl;<br><br><span class="hljs-comment">//Python页面</span><br>cout &lt;&lt; <span class="hljs-string">&quot;Python下载视频页面如下： &quot;</span> &lt;&lt; endl;<br>Python py;<br>py.<span class="hljs-built_in">header</span>();<br>py.<span class="hljs-built_in">footer</span>();<br>py.<span class="hljs-built_in">left</span>();<br>py.<span class="hljs-built_in">content</span>();<br>cout &lt;&lt; <span class="hljs-string">&quot;--------------------&quot;</span> &lt;&lt; endl;<br><br><span class="hljs-comment">//C++页面</span><br>cout &lt;&lt; <span class="hljs-string">&quot;C++下载视频页面如下： &quot;</span> &lt;&lt; endl;<br>CPP cp;<br>cp.<span class="hljs-built_in">header</span>();<br>cp.<span class="hljs-built_in">footer</span>();<br>cp.<span class="hljs-built_in">left</span>();<br>cp.<span class="hljs-built_in">content</span>();<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>继承实现：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//公共页面</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BasePage</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">header</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;首页、公开课、登录、注册...（公共头部）&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">footer</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;帮助中心、交流合作、站内地图...(公共底部)&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">left</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Java,Python,C++...(公共分类列表)&quot;</span> &lt;&lt; endl;<br>&#125;<br><br>&#125;;<br><br><span class="hljs-comment">//Java页面</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Java</span> : <span class="hljs-keyword">public</span> BasePage<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">content</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;JAVA学科视频&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><span class="hljs-comment">//Python页面</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Python</span> : <span class="hljs-keyword">public</span> BasePage<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">content</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Python学科视频&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><span class="hljs-comment">//C++页面</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CPP</span> : <span class="hljs-keyword">public</span> BasePage<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">content</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;C++学科视频&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Java页面</span><br>cout &lt;&lt; <span class="hljs-string">&quot;Java下载视频页面如下： &quot;</span> &lt;&lt; endl;<br>Java ja;<br>ja.<span class="hljs-built_in">header</span>();<br>ja.<span class="hljs-built_in">footer</span>();<br>ja.<span class="hljs-built_in">left</span>();<br>ja.<span class="hljs-built_in">content</span>();<br>cout &lt;&lt; <span class="hljs-string">&quot;--------------------&quot;</span> &lt;&lt; endl;<br><br><span class="hljs-comment">//Python页面</span><br>cout &lt;&lt; <span class="hljs-string">&quot;Python下载视频页面如下： &quot;</span> &lt;&lt; endl;<br>Python py;<br>py.<span class="hljs-built_in">header</span>();<br>py.<span class="hljs-built_in">footer</span>();<br>py.<span class="hljs-built_in">left</span>();<br>py.<span class="hljs-built_in">content</span>();<br>cout &lt;&lt; <span class="hljs-string">&quot;--------------------&quot;</span> &lt;&lt; endl;<br><br><span class="hljs-comment">//C++页面</span><br>cout &lt;&lt; <span class="hljs-string">&quot;C++下载视频页面如下： &quot;</span> &lt;&lt; endl;<br>CPP cp;<br>cp.<span class="hljs-built_in">header</span>();<br>cp.<span class="hljs-built_in">footer</span>();<br>cp.<span class="hljs-built_in">left</span>();<br>cp.<span class="hljs-built_in">content</span>();<br><br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>总结：</strong></p><p>继承的好处：==可以减少重复的代码==</p><p>class A : public B;</p><p>A 类称为子类 或 派生类</p><p>B 类称为父类 或 基类</p><p><strong>派生类中的成员，包含两大部分</strong>：</p><p>一类是从基类继承过来的，一类是自己增加的成员。</p><p>从基类继承过过来的表现其共性，而新增的成员体现了其个性。</p><h4 id="4-6-2-继承方式">4.6.2 继承方式</h4><p>继承的语法：<code>class 子类 : 继承方式  父类</code></p><p><strong>继承方式一共有三种：</strong></p><ul><li>公共继承</li><li>保护继承</li><li>私有继承</li></ul><p><img src="/assets/clip_image0020000000.png" alt="img"></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base1</span><br>&#123;<br><span class="hljs-keyword">public</span>: <br><span class="hljs-type">int</span> m_A;<br><span class="hljs-keyword">protected</span>:<br><span class="hljs-type">int</span> m_B;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> m_C;<br>&#125;;<br><br><span class="hljs-comment">//公共继承</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son1</span> :<span class="hljs-keyword">public</span> Base1<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>m_A; <span class="hljs-comment">//可访问 public权限</span><br>m_B; <span class="hljs-comment">//可访问 protected权限</span><br><span class="hljs-comment">//m_C; //不可访问</span><br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">myClass</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Son1 s1;<br>s<span class="hljs-number">1.</span>m_A; <span class="hljs-comment">//其他类只能访问到公共权限</span><br>&#125;<br><br><span class="hljs-comment">//保护继承</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base2</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> m_A;<br><span class="hljs-keyword">protected</span>:<br><span class="hljs-type">int</span> m_B;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> m_C;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son2</span>:<span class="hljs-keyword">protected</span> Base2<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>m_A; <span class="hljs-comment">//可访问 protected权限</span><br>m_B; <span class="hljs-comment">//可访问 protected权限</span><br><span class="hljs-comment">//m_C; //不可访问</span><br>&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">myClass2</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Son2 s;<br><span class="hljs-comment">//s.m_A; //不可访问</span><br>&#125;<br><br><span class="hljs-comment">//私有继承</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base3</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> m_A;<br><span class="hljs-keyword">protected</span>:<br><span class="hljs-type">int</span> m_B;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> m_C;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son3</span>:<span class="hljs-keyword">private</span> Base3<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>m_A; <span class="hljs-comment">//可访问 private权限</span><br>m_B; <span class="hljs-comment">//可访问 private权限</span><br><span class="hljs-comment">//m_C; //不可访问</span><br>&#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GrandSon3</span> :<span class="hljs-keyword">public</span> Son3<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Son3是私有继承，所以继承Son3的属性在GrandSon3中都无法访问到</span><br><span class="hljs-comment">//m_A;</span><br><span class="hljs-comment">//m_B;</span><br><span class="hljs-comment">//m_C;</span><br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="4-6-3-继承中的对象模型">4.6.3 继承中的对象模型</h4><p>**问题：**从父类继承过来的成员，哪些属于子类对象中？</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> m_A;<br><span class="hljs-keyword">protected</span>:<br><span class="hljs-type">int</span> m_B;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> m_C; <span class="hljs-comment">//私有成员只是被隐藏了，但是还是会继承下去</span><br>&#125;;<br><br><span class="hljs-comment">//公共继承</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> :<span class="hljs-keyword">public</span> Base<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> m_D;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;sizeof Son = &quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(Son) &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>利用工具查看：</p><p><img src="/assets/1545881904150.png" alt="1545881904150"></p><p>打开工具窗口后，定位到当前CPP文件的盘符</p><p>然后输入： cl /d1 reportSingleClassLayout查看的类名   所属文件名</p><p>效果如下图：</p><p><img src="/assets/1545882158050.png" alt="1545882158050"></p><blockquote><p>结论： 父类中私有成员也是被子类继承下去了，只是由编译器给隐藏后访问不到</p></blockquote><h4 id="4-6-4-继承中构造和析构顺序">4.6.4 继承中构造和析构顺序</h4><p>子类继承父类后，当创建子类对象，也会调用父类的构造函数</p><p>问题：父类和子类的构造和析构顺序是谁先谁后？</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span> <br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Base</span>()<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Base构造函数!&quot;</span> &lt;&lt; endl;<br>&#125;<br>~<span class="hljs-built_in">Base</span>()<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Base析构函数!&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> : <span class="hljs-keyword">public</span> Base<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Son</span>()<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Son构造函数!&quot;</span> &lt;&lt; endl;<br>&#125;<br>~<span class="hljs-built_in">Son</span>()<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Son析构函数!&quot;</span> &lt;&lt; endl;<br>&#125;<br><br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反</span><br>Son s;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结：继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反</p></blockquote><h4 id="4-6-5-继承同名成员处理方式">4.6.5 继承同名成员处理方式</h4><p>问题：当子类与父类出现同名的成员，如何通过子类对象，访问到子类或父类中同名的数据呢？</p><ul><li>访问子类同名成员   直接访问即可</li><li>访问父类同名成员   需要加作用域</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Base</span>()<br>&#123;<br>m_A = <span class="hljs-number">100</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Base - func()调用&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Base - func(int a)调用&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> m_A;<br>&#125;;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> : <span class="hljs-keyword">public</span> Base &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Son</span>()<br>&#123;<br>m_A = <span class="hljs-number">200</span>;<br>&#125;<br><br><span class="hljs-comment">//当子类与父类拥有同名的成员函数，子类会隐藏父类中所有版本的同名成员函数</span><br><span class="hljs-comment">//如果想访问父类中被隐藏的同名成员函数，需要加父类的作用域</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Son - func()调用&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> m_A;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Son s;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;Son下的m_A = &quot;</span> &lt;&lt; s.m_A &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;Base下的m_A = &quot;</span> &lt;&lt; s.Base::m_A &lt;&lt; endl;<br><br>s.<span class="hljs-built_in">func</span>();<br>s.Base::<span class="hljs-built_in">func</span>();<br>s.Base::<span class="hljs-built_in">func</span>(<span class="hljs-number">10</span>);<br><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> EXIT_SUCCESS;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ol><li>子类对象可以直接访问到子类中同名成员</li><li>子类对象加作用域可以访问到父类同名成员</li><li>当子类与父类拥有同名的成员函数，子类会隐藏父类中同名成员函数，加作用域可以访问到父类中同名函数</li></ol><h4 id="4-6-6-继承同名静态成员处理方式">4.6.6 继承同名静态成员处理方式</h4><p>问题：继承中同名的静态成员在子类对象上如何进行访问？</p><p>静态成员和非静态成员出现同名，处理方式一致</p><ul><li>访问子类同名成员   直接访问即可</li><li>访问父类同名成员   需要加作用域</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Base - static void func()&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Base - static void func(int a)&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> m_A;<br>&#125;;<br><br><span class="hljs-type">int</span> Base::m_A = <span class="hljs-number">100</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> : <span class="hljs-keyword">public</span> Base &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Son - static void func()&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> m_A;<br>&#125;;<br><br><span class="hljs-type">int</span> Son::m_A = <span class="hljs-number">200</span>;<br><br><span class="hljs-comment">//同名成员属性</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//通过对象访问</span><br>cout &lt;&lt; <span class="hljs-string">&quot;通过对象访问： &quot;</span> &lt;&lt; endl;<br>Son s;<br>cout &lt;&lt; <span class="hljs-string">&quot;Son  下 m_A = &quot;</span> &lt;&lt; s.m_A &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;Base 下 m_A = &quot;</span> &lt;&lt; s.Base::m_A &lt;&lt; endl;<br><br><span class="hljs-comment">//通过类名访问</span><br>cout &lt;&lt; <span class="hljs-string">&quot;通过类名访问： &quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;Son  下 m_A = &quot;</span> &lt;&lt; Son::m_A &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;Base 下 m_A = &quot;</span> &lt;&lt; Son::Base::m_A &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">//同名成员函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//通过对象访问</span><br>cout &lt;&lt; <span class="hljs-string">&quot;通过对象访问： &quot;</span> &lt;&lt; endl;<br>Son s;<br>s.<span class="hljs-built_in">func</span>();<br>s.Base::<span class="hljs-built_in">func</span>();<br><br>cout &lt;&lt; <span class="hljs-string">&quot;通过类名访问： &quot;</span> &lt;&lt; endl;<br>Son::<span class="hljs-built_in">func</span>();<br>Son::Base::<span class="hljs-built_in">func</span>();<br><span class="hljs-comment">//出现同名，子类会隐藏掉父类中所有同名成员函数，需要加作作用域访问</span><br>Son::Base::<span class="hljs-built_in">func</span>(<span class="hljs-number">100</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//test01();</span><br><span class="hljs-built_in">test02</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结：同名静态成员处理方式和非静态处理方式一样，只不过有两种访问的方式（通过对象 和 通过类名）</p></blockquote><h4 id="4-6-7-多继承语法">4.6.7 多继承语法</h4><p>C++允许<strong>一个类继承多个类</strong></p><p>语法：<code> class 子类 ：继承方式 父类1 ， 继承方式 父类2...</code></p><p>多继承可能会引发父类中有同名成员出现，需要加作用域区分</p><p><strong>C++实际开发中不建议用多继承</strong></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base1</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Base1</span>()<br>&#123;<br>m_A = <span class="hljs-number">100</span>;<br>&#125;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> m_A;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base2</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Base2</span>()<br>&#123;<br>m_A = <span class="hljs-number">200</span>;  <span class="hljs-comment">//开始是m_B 不会出问题，但是改为mA就会出现不明确</span><br>&#125;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> m_A;<br>&#125;;<br><br><span class="hljs-comment">//语法：class 子类：继承方式 父类1 ，继承方式 父类2 </span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> : <span class="hljs-keyword">public</span> Base2, <span class="hljs-keyword">public</span> Base1 <br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Son</span>()<br>&#123;<br>m_C = <span class="hljs-number">300</span>;<br>m_D = <span class="hljs-number">400</span>;<br>&#125;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> m_C;<br><span class="hljs-type">int</span> m_D;<br>&#125;;<br><br><br><span class="hljs-comment">//多继承容易产生成员同名的情况</span><br><span class="hljs-comment">//通过使用类名作用域可以区分调用哪一个基类的成员</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Son s;<br>cout &lt;&lt; <span class="hljs-string">&quot;sizeof Son = &quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(s) &lt;&lt; endl;<br>cout &lt;&lt; s.Base1::m_A &lt;&lt; endl;<br>cout &lt;&lt; s.Base2::m_A &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结： 多继承中如果父类中出现了同名情况，子类使用时候要加作用域</p></blockquote><h4 id="4-6-8-菱形继承">4.6.8 菱形继承</h4><p><strong>菱形继承概念：</strong></p><p>​两个派生类继承同一个基类</p><p>​又有某个类同时继承者两个派生类</p><p>​这种继承被称为菱形继承，或者钻石继承</p><p><strong>典型的菱形继承案例：</strong></p><p><img src="/assets/clip_image002.jpg" alt="IMG_256"></p><p><strong>菱形继承问题：</strong></p><ol><li><pre><code class="hljs">羊继承了动物的数据，驼同样继承了动物的数据，当草泥马使用数据时，就会产生二义性。</code></pre></li><li><p>草泥马继承自动物的数据继承了两份，其实我们应该清楚，这份数据我们只需要一份就可以。</p></li></ol><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> m_Age;<br>&#125;;<br><br><span class="hljs-comment">//继承前加virtual关键字后，变为虚继承</span><br><span class="hljs-comment">//此时公共的父类Animal称为虚基类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sheep</span> : <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">public</span> Animal &#123;&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tuo</span>   : <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">public</span> Animal &#123;&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SheepTuo</span> : <span class="hljs-keyword">public</span> Sheep, <span class="hljs-keyword">public</span> Tuo &#123;&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>SheepTuo st;<br>st.Sheep::m_Age = <span class="hljs-number">100</span>;<br>st.Tuo::m_Age = <span class="hljs-number">200</span>;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;st.Sheep::m_Age = &quot;</span> &lt;&lt; st.Sheep::m_Age &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;st.Tuo::m_Age = &quot;</span> &lt;&lt;  st.Tuo::m_Age &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;st.m_Age = &quot;</span> &lt;&lt; st.m_Age &lt;&lt; endl;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>菱形继承带来的主要问题是子类继承两份相同的数据，导致资源浪费以及毫无意义</li><li>利用虚继承可以解决菱形继承问题</li></ul><h3 id="4-7-多态">4.7  多态</h3><h4 id="4-7-1-多态的基本概念">4.7.1 多态的基本概念</h4><p><strong>多态是C++面向对象三大特性之一</strong></p><p>多态分为两类</p><ul><li>静态多态: 函数重载 和 运算符重载属于静态多态，复用函数名</li><li>动态多态: 派生类和虚函数实现运行时多态</li></ul><p>静态多态和动态多态区别：</p><ul><li>静态多态的函数地址早绑定  -  编译阶段确定函数地址</li><li>动态多态的函数地址晚绑定  -  运行阶段确定函数地址</li></ul><p>下面通过案例进行讲解多态</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//Speak函数就是虚函数</span><br><span class="hljs-comment">//函数前面加上virtual关键字，变成虚函数，那么编译器在编译的时候就不能确定函数调用了。</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">speak</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;动物在说话&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> :<span class="hljs-keyword">public</span> Animal<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">speak</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;小猫在说话&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> :<span class="hljs-keyword">public</span> Animal<br>&#123;<br><span class="hljs-keyword">public</span>:<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">speak</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;小狗在说话&quot;</span> &lt;&lt; endl;<br>&#125;<br><br>&#125;;<br><span class="hljs-comment">//我们希望传入什么对象，那么就调用什么对象的函数</span><br><span class="hljs-comment">//如果函数地址在编译阶段就能确定，那么静态联编</span><br><span class="hljs-comment">//如果函数地址在运行阶段才能确定，就是动态联编</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DoSpeak</span><span class="hljs-params">(Animal &amp; animal)</span></span><br><span class="hljs-function"></span>&#123;<br>animal.<span class="hljs-built_in">speak</span>();<br>&#125;<br><span class="hljs-comment">//</span><br><span class="hljs-comment">//多态满足条件： </span><br><span class="hljs-comment">//1、有继承关系</span><br><span class="hljs-comment">//2、子类重写父类中的虚函数</span><br><span class="hljs-comment">//多态使用：</span><br><span class="hljs-comment">//父类指针或引用指向子类对象</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Cat cat;<br><span class="hljs-built_in">DoSpeak</span>(cat);<br><br><br>Dog dog;<br><span class="hljs-built_in">DoSpeak</span>(dog);<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><p>多态满足条件</p><ul><li>有继承关系</li><li>子类重写父类中的虚函数</li></ul><p>多态使用条件</p><ul><li>父类指针或引用指向子类对象</li></ul><p>重写：函数返回值类型  函数名 参数列表 完全一致称为重写</p><h4 id="4-7-2-多态案例一-计算器类">4.7.2 多态案例一-计算器类</h4><p>案例描述：</p><p>分别利用普通写法和多态技术，设计实现两个操作数进行运算的计算器类</p><p>多态的优点：</p><ul><li>代码组织结构清晰</li><li>可读性强</li><li>利于前期和后期的扩展以及维护</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//普通实现</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Calculator</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getResult</span><span class="hljs-params">(string oper)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (oper == <span class="hljs-string">&quot;+&quot;</span>) &#123;<br><span class="hljs-keyword">return</span> m_Num1 + m_Num2;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (oper == <span class="hljs-string">&quot;-&quot;</span>) &#123;<br><span class="hljs-keyword">return</span> m_Num1 - m_Num2;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (oper == <span class="hljs-string">&quot;*&quot;</span>) &#123;<br><span class="hljs-keyword">return</span> m_Num1 * m_Num2;<br>&#125;<br><span class="hljs-comment">//如果要提供新的运算，需要修改源码</span><br>&#125;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> m_Num1;<br><span class="hljs-type">int</span> m_Num2;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//普通实现测试</span><br>Calculator c;<br>c.m_Num1 = <span class="hljs-number">10</span>;<br>c.m_Num2 = <span class="hljs-number">10</span>;<br>cout &lt;&lt; c.m_Num1 &lt;&lt; <span class="hljs-string">&quot; + &quot;</span> &lt;&lt; c.m_Num2 &lt;&lt; <span class="hljs-string">&quot; = &quot;</span> &lt;&lt; c.<span class="hljs-built_in">getResult</span>(<span class="hljs-string">&quot;+&quot;</span>) &lt;&lt; endl;<br><br>cout &lt;&lt; c.m_Num1 &lt;&lt; <span class="hljs-string">&quot; - &quot;</span> &lt;&lt; c.m_Num2 &lt;&lt; <span class="hljs-string">&quot; = &quot;</span> &lt;&lt; c.<span class="hljs-built_in">getResult</span>(<span class="hljs-string">&quot;-&quot;</span>) &lt;&lt; endl;<br><br>cout &lt;&lt; c.m_Num1 &lt;&lt; <span class="hljs-string">&quot; * &quot;</span> &lt;&lt; c.m_Num2 &lt;&lt; <span class="hljs-string">&quot; = &quot;</span> &lt;&lt; c.<span class="hljs-built_in">getResult</span>(<span class="hljs-string">&quot;*&quot;</span>) &lt;&lt; endl;<br>&#125;<br><br><br><br><span class="hljs-comment">//多态实现</span><br><span class="hljs-comment">//抽象计算器类</span><br><span class="hljs-comment">//多态优点：代码组织结构清晰，可读性强，利于前期和后期的扩展以及维护</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractCalculator</span><br>&#123;<br><span class="hljs-keyword">public</span> :<br><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">int</span> <span class="hljs-title">getResult</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">int</span> m_Num1;<br><span class="hljs-type">int</span> m_Num2;<br>&#125;;<br><br><span class="hljs-comment">//加法计算器</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AddCalculator</span> :<span class="hljs-keyword">public</span> AbstractCalculator<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getResult</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> m_Num1 + m_Num2;<br>&#125;<br>&#125;;<br><br><span class="hljs-comment">//减法计算器</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SubCalculator</span> :<span class="hljs-keyword">public</span> AbstractCalculator<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getResult</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> m_Num1 - m_Num2;<br>&#125;<br>&#125;;<br><br><span class="hljs-comment">//乘法计算器</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MulCalculator</span> :<span class="hljs-keyword">public</span> AbstractCalculator<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getResult</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> m_Num1 * m_Num2;<br>&#125;<br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//创建加法计算器</span><br>AbstractCalculator *abc = <span class="hljs-keyword">new</span> AddCalculator;<br>abc-&gt;m_Num1 = <span class="hljs-number">10</span>;<br>abc-&gt;m_Num2 = <span class="hljs-number">10</span>;<br>cout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; <span class="hljs-string">&quot; + &quot;</span> &lt;&lt; abc-&gt;m_Num2 &lt;&lt; <span class="hljs-string">&quot; = &quot;</span> &lt;&lt; abc-&gt;<span class="hljs-built_in">getResult</span>() &lt;&lt; endl;<br><span class="hljs-keyword">delete</span> abc;  <span class="hljs-comment">//用完了记得销毁</span><br><br><span class="hljs-comment">//创建减法计算器</span><br>abc = <span class="hljs-keyword">new</span> SubCalculator;<br>abc-&gt;m_Num1 = <span class="hljs-number">10</span>;<br>abc-&gt;m_Num2 = <span class="hljs-number">10</span>;<br>cout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; <span class="hljs-string">&quot; - &quot;</span> &lt;&lt; abc-&gt;m_Num2 &lt;&lt; <span class="hljs-string">&quot; = &quot;</span> &lt;&lt; abc-&gt;<span class="hljs-built_in">getResult</span>() &lt;&lt; endl;<br><span class="hljs-keyword">delete</span> abc;  <br><br><span class="hljs-comment">//创建乘法计算器</span><br>abc = <span class="hljs-keyword">new</span> MulCalculator;<br>abc-&gt;m_Num1 = <span class="hljs-number">10</span>;<br>abc-&gt;m_Num2 = <span class="hljs-number">10</span>;<br>cout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; <span class="hljs-string">&quot; * &quot;</span> &lt;&lt; abc-&gt;m_Num2 &lt;&lt; <span class="hljs-string">&quot; = &quot;</span> &lt;&lt; abc-&gt;<span class="hljs-built_in">getResult</span>() &lt;&lt; endl;<br><span class="hljs-keyword">delete</span> abc;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//test01();</span><br><br><span class="hljs-built_in">test02</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结：C++开发提倡利用多态设计程序架构，因为多态优点很多</p></blockquote><h4 id="4-7-3-纯虚函数和抽象类">4.7.3 纯虚函数和抽象类</h4><p>在多态中，通常父类中虚函数的实现是毫无意义的，主要都是调用子类重写的内容</p><p>因此可以将虚函数改为<strong>纯虚函数</strong></p><p>纯虚函数语法：<code>virtual 返回值类型 函数名 （参数列表）= 0 ;</code></p><p>当类中有了纯虚函数，这个类也称为==抽象类==</p><p><strong>抽象类特点</strong>：</p><ul><li>无法实例化对象</li><li>子类必须重写抽象类中的纯虚函数，否则也属于抽象类</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//纯虚函数</span><br><span class="hljs-comment">//类中只要有一个纯虚函数就称为抽象类</span><br><span class="hljs-comment">//抽象类无法实例化对象</span><br><span class="hljs-comment">//子类必须重写父类中的纯虚函数，否则也属于抽象类</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> :<span class="hljs-keyword">public</span> Base<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;func调用&quot;</span> &lt;&lt; endl;<br>&#125;;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Base * base = <span class="hljs-literal">NULL</span>;<br><span class="hljs-comment">//base = new Base; // 错误，抽象类无法实例化对象</span><br>base = <span class="hljs-keyword">new</span> Son;<br>base-&gt;<span class="hljs-built_in">func</span>();<br><span class="hljs-keyword">delete</span> base;<span class="hljs-comment">//记得销毁</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-7-4-多态案例二-制作饮品">4.7.4 多态案例二-制作饮品</h4><p><strong>案例描述：</strong></p><p>制作饮品的大致流程为：煮水 -  冲泡 - 倒入杯中 - 加入辅料</p><p>利用多态技术实现本案例，提供抽象制作饮品基类，提供子类制作咖啡和茶叶</p><p><img src="/assets/1545985945198.png" alt="1545985945198"></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//抽象制作饮品</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractDrinking</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//烧水</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">Boil</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br><span class="hljs-comment">//冲泡</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">Brew</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br><span class="hljs-comment">//倒入杯中</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">PourInCup</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br><span class="hljs-comment">//加入辅料</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">PutSomething</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br><span class="hljs-comment">//规定流程</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">MakeDrink</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">Boil</span>();<br><span class="hljs-built_in">Brew</span>();<br><span class="hljs-built_in">PourInCup</span>();<br><span class="hljs-built_in">PutSomething</span>();<br>&#125;<br>&#125;;<br><br><span class="hljs-comment">//制作咖啡</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Coffee</span> : <span class="hljs-keyword">public</span> AbstractDrinking &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//烧水</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">Boil</span><span class="hljs-params">()</span> </span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;煮农夫山泉!&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-comment">//冲泡</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">Brew</span><span class="hljs-params">()</span> </span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;冲泡咖啡!&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-comment">//倒入杯中</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">PourInCup</span><span class="hljs-params">()</span> </span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;将咖啡倒入杯中!&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-comment">//加入辅料</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">PutSomething</span><span class="hljs-params">()</span> </span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;加入牛奶!&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-comment">//制作茶水</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tea</span> : <span class="hljs-keyword">public</span> AbstractDrinking &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//烧水</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">Boil</span><span class="hljs-params">()</span> </span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;煮自来水!&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-comment">//冲泡</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">Brew</span><span class="hljs-params">()</span> </span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;冲泡茶叶!&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-comment">//倒入杯中</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">PourInCup</span><span class="hljs-params">()</span> </span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;将茶水倒入杯中!&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-comment">//加入辅料</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">PutSomething</span><span class="hljs-params">()</span> </span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;加入枸杞!&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-comment">//业务函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DoWork</span><span class="hljs-params">(AbstractDrinking* drink)</span> </span>&#123;<br>drink-&gt;<span class="hljs-built_in">MakeDrink</span>();<br><span class="hljs-keyword">delete</span> drink;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">DoWork</span>(<span class="hljs-keyword">new</span> Coffee);<br>cout &lt;&lt; <span class="hljs-string">&quot;--------------&quot;</span> &lt;&lt; endl;<br><span class="hljs-built_in">DoWork</span>(<span class="hljs-keyword">new</span> Tea);<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-7-5-虚析构和纯虚析构">4.7.5 虚析构和纯虚析构</h4><p>多态使用时，如果子类中有属性开辟到堆区，那么父类指针在释放时无法调用到子类的析构代码</p><p>解决方式：将父类中的析构函数改为<strong>虚析构</strong>或者<strong>纯虚析构</strong></p><p>虚析构和纯虚析构共性：</p><ul><li>可以解决父类指针释放子类对象</li><li>都需要有具体的函数实现</li></ul><p>虚析构和纯虚析构区别：</p><ul><li>如果是纯虚析构，该类属于抽象类，无法实例化对象</li></ul><p>虚析构语法：</p><p><code>virtual ~类名()&#123;&#125;</code></p><p>纯虚析构语法：</p><p><code> virtual ~类名() = 0;</code></p><p><code>类名::~类名()&#123;&#125;</code></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br><span class="hljs-keyword">public</span>:<br><br><span class="hljs-built_in">Animal</span>()<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Animal 构造函数调用！&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">Speak</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">//析构函数加上virtual关键字，变成虚析构函数</span><br><span class="hljs-comment">//virtual ~Animal()</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//cout &lt;&lt; &quot;Animal虚析构函数调用！&quot; &lt;&lt; endl;</span><br><span class="hljs-comment">//&#125;</span><br><br><br><span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">Animal</span>() = <span class="hljs-number">0</span>;<br>&#125;;<br><br>Animal::~<span class="hljs-built_in">Animal</span>()<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Animal 纯虚析构函数调用！&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">//和包含普通纯虚函数的类一样，包含了纯虚析构函数的类也是一个抽象类。不能够被实例化。</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> : <span class="hljs-keyword">public</span> Animal &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Cat</span>(string name)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Cat构造函数调用！&quot;</span> &lt;&lt; endl;<br>m_Name = <span class="hljs-keyword">new</span> <span class="hljs-built_in">string</span>(name);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">Speak</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; *m_Name &lt;&lt;  <span class="hljs-string">&quot;小猫在说话!&quot;</span> &lt;&lt; endl;<br>&#125;<br>~<span class="hljs-built_in">Cat</span>()<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Cat析构函数调用!&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;m_Name != <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-keyword">delete</span> m_Name;<br>m_Name = <span class="hljs-literal">NULL</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span>:<br>string *m_Name;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Animal *animal = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Cat</span>(<span class="hljs-string">&quot;Tom&quot;</span>);<br>animal-&gt;<span class="hljs-built_in">Speak</span>();<br><br><span class="hljs-comment">//通过父类指针去释放，会导致子类对象可能清理不干净，造成内存泄漏</span><br><span class="hljs-comment">//怎么解决？给基类增加一个虚析构函数</span><br><span class="hljs-comment">//虚析构函数就是用来解决通过父类指针释放子类对象</span><br><span class="hljs-keyword">delete</span> animal;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><p>​1. 虚析构或纯虚析构就是用来解决通过父类指针释放子类对象</p><p>​2. 如果子类中没有堆区数据，可以不写为虚析构或纯虚析构</p><p>​3. 拥有纯虚析构函数的类也属于抽象类</p><h4 id="4-7-6-多态案例三-电脑组装">4.7.6 多态案例三-电脑组装</h4><p><strong>案例描述：</strong></p><p>电脑主要组成部件为 CPU（用于计算），显卡（用于显示），内存条（用于存储）</p><p>将每个零件封装出抽象基类，并且提供不同的厂商生产不同的零件，例如Intel厂商和Lenovo厂商</p><p>创建电脑类提供让电脑工作的函数，并且调用每个零件工作的接口</p><p>测试时组装三台不同的电脑进行工作</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//抽象CPU类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CPU</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//抽象的计算函数</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">calculate</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-comment">//抽象显卡类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">VideoCard</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//抽象的显示函数</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-comment">//抽象内存条类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Memory</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//抽象的存储函数</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">storage</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-comment">//电脑类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Computer</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Computer</span>(CPU * cpu, VideoCard * vc, Memory * mem)<br>&#123;<br>m_cpu = cpu;<br>m_vc = vc;<br>m_mem = mem;<br>&#125;<br><br><span class="hljs-comment">//提供工作的函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//让零件工作起来，调用接口</span><br>m_cpu-&gt;<span class="hljs-built_in">calculate</span>();<br><br>m_vc-&gt;<span class="hljs-built_in">display</span>();<br><br>m_mem-&gt;<span class="hljs-built_in">storage</span>();<br>&#125;<br><br><span class="hljs-comment">//提供析构函数 释放3个电脑零件</span><br>~<span class="hljs-built_in">Computer</span>()<br>&#123;<br><br><span class="hljs-comment">//释放CPU零件</span><br><span class="hljs-keyword">if</span> (m_cpu != <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">delete</span> m_cpu;<br>m_cpu = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-comment">//释放显卡零件</span><br><span class="hljs-keyword">if</span> (m_vc != <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">delete</span> m_vc;<br>m_vc = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-comment">//释放内存条零件</span><br><span class="hljs-keyword">if</span> (m_mem != <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">delete</span> m_mem;<br>m_mem = <span class="hljs-literal">NULL</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">private</span>:<br><br>CPU * m_cpu; <span class="hljs-comment">//CPU的零件指针</span><br>VideoCard * m_vc; <span class="hljs-comment">//显卡零件指针</span><br>Memory * m_mem; <span class="hljs-comment">//内存条零件指针</span><br>&#125;;<br><br><span class="hljs-comment">//具体厂商</span><br><span class="hljs-comment">//Intel厂商</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">IntelCPU</span> :<span class="hljs-keyword">public</span> CPU<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">calculate</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Intel的CPU开始计算了！&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">IntelVideoCard</span> :<span class="hljs-keyword">public</span> VideoCard<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Intel的显卡开始显示了！&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">IntelMemory</span> :<span class="hljs-keyword">public</span> Memory<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">storage</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Intel的内存条开始存储了！&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-comment">//Lenovo厂商</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LenovoCPU</span> :<span class="hljs-keyword">public</span> CPU<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">calculate</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Lenovo的CPU开始计算了！&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LenovoVideoCard</span> :<span class="hljs-keyword">public</span> VideoCard<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Lenovo的显卡开始显示了！&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LenovoMemory</span> :<span class="hljs-keyword">public</span> Memory<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">storage</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Lenovo的内存条开始存储了！&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//第一台电脑零件</span><br>CPU * intelCpu = <span class="hljs-keyword">new</span> IntelCPU;<br>VideoCard * intelCard = <span class="hljs-keyword">new</span> IntelVideoCard;<br>Memory * intelMem = <span class="hljs-keyword">new</span> IntelMemory;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;第一台电脑开始工作：&quot;</span> &lt;&lt; endl;<br><span class="hljs-comment">//创建第一台电脑</span><br>Computer * computer1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Computer</span>(intelCpu, intelCard, intelMem);<br>computer1-&gt;<span class="hljs-built_in">work</span>();<br><span class="hljs-keyword">delete</span> computer1;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;-----------------------&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;第二台电脑开始工作：&quot;</span> &lt;&lt; endl;<br><span class="hljs-comment">//第二台电脑组装</span><br>Computer * computer2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Computer</span>(<span class="hljs-keyword">new</span> LenovoCPU, <span class="hljs-keyword">new</span> LenovoVideoCard, <span class="hljs-keyword">new</span> LenovoMemory);;<br>computer2-&gt;<span class="hljs-built_in">work</span>();<br><span class="hljs-keyword">delete</span> computer2;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;-----------------------&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;第三台电脑开始工作：&quot;</span> &lt;&lt; endl;<br><span class="hljs-comment">//第三台电脑组装</span><br>Computer * computer3 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Computer</span>(<span class="hljs-keyword">new</span> LenovoCPU, <span class="hljs-keyword">new</span> IntelVideoCard, <span class="hljs-keyword">new</span> LenovoMemory);;<br>computer3-&gt;<span class="hljs-built_in">work</span>();<br><span class="hljs-keyword">delete</span> computer3;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-文件操作">5 文件操作</h2><p>程序运行时产生的数据都属于临时数据，程序一旦运行结束都会被释放</p><p>通过<strong>文件可以将数据持久化</strong></p><p>C++中对文件操作需要包含头文件 ==&lt; fstream &gt;==</p><p>文件类型分为两种：</p><ol><li><strong>文本文件</strong>     -  文件以文本的<strong>ASCII码</strong>形式存储在计算机中</li><li><strong>二进制文件</strong> -  文件以文本的<strong>二进制</strong>形式存储在计算机中，用户一般不能直接读懂它们</li></ol><p>操作文件的三大类:</p><ol><li>ofstream：写操作</li><li>ifstream： 读操作</li><li>fstream ： 读写操作</li></ol><h3 id="5-1文本文件">5.1文本文件</h3><h4 id="5-1-1写文件">5.1.1写文件</h4><p>写文件步骤如下：</p><ol><li><p>包含头文件</p><p>#include &lt;fstream&gt;</p></li><li><p>创建流对象</p><p>ofstream ofs;</p></li><li><p>打开文件</p><p>ofs.open(“文件路径”,打开方式);</p></li><li><p>写数据</p><p>ofs &lt;&lt; “写入的数据”;</p></li><li><p>关闭文件</p><p>ofs.close();</p></li></ol><p>文件打开方式：</p><table><thead><tr><th>打开方式</th><th>解释</th></tr></thead><tbody><tr><td>ios::in</td><td>为读文件而打开文件</td></tr><tr><td>ios::out</td><td>为写文件而打开文件</td></tr><tr><td>ios::ate</td><td>初始位置：文件尾</td></tr><tr><td>ios::app</td><td>追加方式写文件</td></tr><tr><td>ios::trunc</td><td>如果文件存在先删除，再创建</td></tr><tr><td>ios::binary</td><td>二进制方式</td></tr></tbody></table><p><strong>注意：</strong> 文件打开方式可以配合使用，利用|操作符</p><p>**例如：**用二进制方式写文件 <code>ios::binary |  ios:: out</code></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fstream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>ofstream ofs;<br>ofs.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, ios::out);<br><br>ofs &lt;&lt; <span class="hljs-string">&quot;姓名：张三&quot;</span> &lt;&lt; endl;<br>ofs &lt;&lt; <span class="hljs-string">&quot;性别：男&quot;</span> &lt;&lt; endl;<br>ofs &lt;&lt; <span class="hljs-string">&quot;年龄：18&quot;</span> &lt;&lt; endl;<br><br>ofs.<span class="hljs-built_in">close</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>文件操作必须包含头文件 fstream</li><li>读文件可以利用 ofstream  ，或者fstream类</li><li>打开文件时候需要指定操作文件的路径，以及打开方式</li><li>利用&lt;&lt;可以向文件中写数据</li><li>操作完毕，要关闭文件</li></ul><h4 id="5-1-2读文件">5.1.2读文件</h4><p>读文件与写文件步骤相似，但是读取方式相对于比较多</p><p>读文件步骤如下：</p><ol><li><p>包含头文件</p><p>#include &lt;fstream&gt;</p></li><li><p>创建流对象</p><p>ifstream ifs;</p></li><li><p>打开文件并判断文件是否打开成功</p><p>ifs.open(“文件路径”,打开方式);</p></li><li><p>读数据</p><p>四种方式读取</p></li><li><p>关闭文件</p><p>ifs.close();</p></li></ol><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>ifstream ifs;<br>ifs.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, ios::in);<br><br><span class="hljs-keyword">if</span> (!ifs.<span class="hljs-built_in">is_open</span>())<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;文件打开失败&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">//第一种方式</span><br><span class="hljs-comment">//char buf[1024] = &#123; 0 &#125;;</span><br><span class="hljs-comment">//while (ifs &gt;&gt; buf)</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//cout &lt;&lt; buf &lt;&lt; endl;</span><br><span class="hljs-comment">//&#125;</span><br><br><span class="hljs-comment">//第二种</span><br><span class="hljs-comment">//char buf[1024] = &#123; 0 &#125;;</span><br><span class="hljs-comment">//while (ifs.getline(buf,sizeof(buf)))</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//cout &lt;&lt; buf &lt;&lt; endl;</span><br><span class="hljs-comment">//&#125;</span><br><br><span class="hljs-comment">//第三种</span><br><span class="hljs-comment">//string buf;</span><br><span class="hljs-comment">//while (getline(ifs, buf))</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//cout &lt;&lt; buf &lt;&lt; endl;</span><br><span class="hljs-comment">//&#125;</span><br><br><span class="hljs-type">char</span> c;<br><span class="hljs-keyword">while</span> ((c = ifs.<span class="hljs-built_in">get</span>()) != EOF)<br>&#123;<br>cout &lt;&lt; c;<br>&#125;<br><br>ifs.<span class="hljs-built_in">close</span>();<br><br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>读文件可以利用 ifstream  ，或者fstream类</li><li>利用is_open函数可以判断文件是否打开成功</li><li>close 关闭文件</li></ul><h3 id="5-2-二进制文件">5.2 二进制文件</h3><p>以二进制的方式对文件进行读写操作</p><p>打开方式要指定为 ==ios::binary==</p><h4 id="5-2-1-写文件">5.2.1 写文件</h4><p>二进制方式写文件主要利用流对象调用成员函数write</p><p>函数原型 ：<code>ostream&amp; write(const char * buffer,int len);</code></p><p>参数解释：字符指针buffer指向内存中一段存储空间。len是读写的字节数</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">char</span> m_Name[<span class="hljs-number">64</span>];<br><span class="hljs-type">int</span> m_Age;<br>&#125;;<br><br><span class="hljs-comment">//二进制文件  写文件</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//1、包含头文件</span><br><br><span class="hljs-comment">//2、创建输出流对象</span><br><span class="hljs-function">ofstream <span class="hljs-title">ofs</span><span class="hljs-params">(<span class="hljs-string">&quot;person.txt&quot;</span>, ios::out | ios::binary)</span></span>;<br><br><span class="hljs-comment">//3、打开文件</span><br><span class="hljs-comment">//ofs.open(&quot;person.txt&quot;, ios::out | ios::binary);</span><br><br>Person p = &#123;<span class="hljs-string">&quot;张三&quot;</span>  , <span class="hljs-number">18</span>&#125;;<br><br><span class="hljs-comment">//4、写文件</span><br>ofs.<span class="hljs-built_in">write</span>((<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)&amp;p, <span class="hljs-built_in">sizeof</span>(p));<br><br><span class="hljs-comment">//5、关闭文件</span><br>ofs.<span class="hljs-built_in">close</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>文件输出流对象 可以通过write函数，以二进制方式写数据</li></ul><h4 id="5-2-2-读文件">5.2.2 读文件</h4><p>二进制方式读文件主要利用流对象调用成员函数read</p><p>函数原型：<code>istream&amp; read(char *buffer,int len);</code></p><p>参数解释：字符指针buffer指向内存中一段存储空间。len是读写的字节数</p><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">char</span> m_Name[<span class="hljs-number">64</span>];<br><span class="hljs-type">int</span> m_Age;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function">ifstream <span class="hljs-title">ifs</span><span class="hljs-params">(<span class="hljs-string">&quot;person.txt&quot;</span>, ios::in | ios::binary)</span></span>;<br><span class="hljs-keyword">if</span> (!ifs.<span class="hljs-built_in">is_open</span>())<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;文件打开失败&quot;</span> &lt;&lt; endl;<br>&#125;<br><br>Person p;<br>ifs.<span class="hljs-built_in">read</span>((<span class="hljs-type">char</span> *)&amp;p, <span class="hljs-built_in">sizeof</span>(p));<br><br>cout &lt;&lt; <span class="hljs-string">&quot;姓名： &quot;</span> &lt;&lt; p.m_Name &lt;&lt; <span class="hljs-string">&quot; 年龄： &quot;</span> &lt;&lt; p.m_Age &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>文件输入流对象 可以通过read函数，以二进制方式读数据</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++教程专辑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 核心编程讲解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通讯录管理系统的实现</title>
      <link href="/2022/06/03/%E9%80%9A%E8%AE%AF%E5%BD%95%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2022/06/03/%E9%80%9A%E8%AE%AF%E5%BD%95%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1>通讯录管理系统的实现</h1><h2 id="1、系统需求">1、系统需求</h2><p>通讯录是一个可以记录亲人、好友信息的工具。</p><p>本教程主要利用C++来实现一个通讯录管理系统</p><p>系统中需要实现的功能如下：</p><ul><li>添加联系人：向通讯录中添加新人，信息包括（姓名、性别、年龄、联系电话、家庭住址）最多记录1000人</li><li>显示联系人：显示通讯录中所有联系人信息</li><li>删除联系人：按照姓名进行删除指定联系人</li><li>查找联系人：按照姓名查看指定联系人信息</li><li>修改联系人：按照姓名重新修改指定联系人</li><li>清空联系人：清空通讯录中所有信息</li><li>退出通讯录：退出当前使用的通讯录</li></ul><h2 id="2、创建项目">2、创建项目</h2><p>创建项目步骤如下：</p><ul><li>创建新项目</li><li>添加文件</li></ul><h3 id="2-1-创建项目">2.1 创建项目</h3><p>打开vs2017后，点击创建新项目，创建新的C++项目</p><p><img src="/assets/1544151401138.png" alt="1544151401138"></p><p>填写项目名称，选择项目路径</p><p><img src="/assets/1544151579620.png" alt="1544151579620"></p><h3 id="2-2添加文件">2.2添加文件</h3><p><img src="/assets/1544161551746.png" alt="1544161551746"></p><p><img src="/assets/1544161648175.png" alt="1544161648175"></p><p>添加成功后，效果如图：</p><p><img src="/assets/1544162344057.png" alt="1544162344057"></p><p>至此，项目已创建完毕</p><h2 id="3、菜单功能">3、菜单功能</h2><p><strong>功能描述：</strong> 用户选择功能的界面</p><p>菜单界面效果如下图：</p><p><img src="/assets/1544149559893.png" alt="1544149559893"></p><p><strong>步骤：</strong></p><ul><li>封装函数显示该界面  如 <code>void showMenu()</code></li><li>在main函数中调用封装好的函数</li></ul><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//菜单界面</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showMenu</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;***************************&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;*****  1、添加联系人  *****&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;*****  2、显示联系人  *****&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;*****  3、删除联系人  *****&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;*****  4、查找联系人  *****&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;*****  5、修改联系人  *****&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;*****  6、清空联系人  *****&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;*****  0、退出通讯录  *****&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;***************************&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">showMenu</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4、退出功能">4、退出功能</h2><p>功能描述：退出通讯录系统</p><p>思路：根据用户不同的选择，进入不同的功能，可以选择switch分支结构，将整个架构进行搭建</p><p>当用户选择0时候，执行退出，选择其他先不做操作，也不会退出程序</p><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> select = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>&#123;<br><span class="hljs-built_in">showMenu</span>();<br><br>cin &gt;&gt; select;<br><br><span class="hljs-keyword">switch</span> (select)<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:  <span class="hljs-comment">//添加联系人</span><br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:  <span class="hljs-comment">//显示联系人</span><br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:  <span class="hljs-comment">//删除联系人</span><br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:  <span class="hljs-comment">//查找联系人</span><br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:  <span class="hljs-comment">//修改联系人</span><br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:  <span class="hljs-comment">//清空联系人</span><br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:  <span class="hljs-comment">//退出通讯录</span><br>cout &lt;&lt; <span class="hljs-string">&quot;欢迎下次使用&quot;</span> &lt;&lt; endl;<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>效果图：</p><p><img src="/assets/1544163868043.png" alt="1544163868043"></p><h2 id="5、添加联系人">5、添加联系人</h2><p>功能描述：</p><p>实现添加联系人功能，联系人上限为1000人，联系人信息包括（姓名、性别、年龄、联系电话、家庭住址）</p><p>添加联系人实现步骤：</p><ul><li>设计联系人结构体</li><li>设计通讯录结构体</li><li>main函数中创建通讯录</li><li>封装添加联系人函数</li><li>测试添加联系人功能</li></ul><h3 id="5-1-设计联系人结构体">5.1 设计联系人结构体</h3><p>联系人信息包括：姓名、性别、年龄、联系电话、家庭住址</p><p>设计如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span>  <span class="hljs-comment">//string头文件</span></span><br><span class="hljs-comment">//联系人结构体</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Person</span><br>&#123;<br>string m_Name; <span class="hljs-comment">//姓名</span><br><span class="hljs-type">int</span> m_Sex; <span class="hljs-comment">//性别：1男 2女</span><br><span class="hljs-type">int</span> m_Age; <span class="hljs-comment">//年龄</span><br>string m_Phone; <span class="hljs-comment">//电话</span><br>string m_Addr; <span class="hljs-comment">//住址</span><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="5-2-设计通讯录结构体">5.2 设计通讯录结构体</h3><p>设计时候可以在通讯录结构体中，维护一个容量为1000的存放联系人的数组，并记录当前通讯录中联系人数量</p><p>设计如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX 1000 <span class="hljs-comment">//最大人数</span></span><br><br><span class="hljs-comment">//通讯录结构体</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Addressbooks</span><br>&#123;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Person</span> personArray[MAX]; <span class="hljs-comment">//通讯录中保存的联系人数组</span><br><span class="hljs-type">int</span> m_Size; <span class="hljs-comment">//通讯录中人员个数</span><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="5-3-main函数中创建通讯录">5.3 main函数中创建通讯录</h3><p>添加联系人函数封装好后，在main函数中创建一个通讯录变量，这个就是我们需要一直维护的通讯录</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++">mian函数起始位置添加：<br><br><span class="hljs-comment">//创建通讯录</span><br>Addressbooks abs;<br><span class="hljs-comment">//初始化通讯录中人数</span><br>abs.m_Size = <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><h3 id="5-4-封装添加联系人函数">5.4 封装添加联系人函数</h3><p>思路：添加联系人前先判断通讯录是否已满，如果满了就不再添加，未满情况将新联系人信息逐个加入到通讯录</p><p>添加联系人代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//1、添加联系人信息</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addPerson</span><span class="hljs-params">(Addressbooks *abs)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//判断电话本是否满了</span><br><span class="hljs-keyword">if</span> (abs-&gt;m_Size == MAX)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;通讯录已满，无法添加&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//姓名</span><br>string name;<br>cout &lt;&lt; <span class="hljs-string">&quot;请输入姓名：&quot;</span> &lt;&lt; endl;<br>cin &gt;&gt; name;<br>abs-&gt;personArray[abs-&gt;m_Size].m_Name = name;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;请输入性别：&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;1 -- 男&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;2 -- 女&quot;</span> &lt;&lt; endl;<br><br><span class="hljs-comment">//性别</span><br><span class="hljs-type">int</span> sex = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>&#123;<br>cin &gt;&gt; sex;<br><span class="hljs-keyword">if</span> (sex == <span class="hljs-number">1</span> || sex == <span class="hljs-number">2</span>)<br>&#123;<br>abs-&gt;personArray[abs-&gt;m_Size].m_Sex = sex;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>cout &lt;&lt; <span class="hljs-string">&quot;输入有误，请重新输入&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">//年龄</span><br>cout &lt;&lt; <span class="hljs-string">&quot;请输入年龄：&quot;</span> &lt;&lt; endl;<br><span class="hljs-type">int</span> age = <span class="hljs-number">0</span>;<br>cin &gt;&gt; age;<br>abs-&gt;personArray[abs-&gt;m_Size].m_Age = age;<br><br><span class="hljs-comment">//联系电话</span><br>cout &lt;&lt; <span class="hljs-string">&quot;请输入联系电话：&quot;</span> &lt;&lt; endl;<br>string phone = <span class="hljs-string">&quot;&quot;</span>;<br>cin &gt;&gt; phone;<br>abs-&gt;personArray[abs-&gt;m_Size].m_Phone = phone;<br><br><span class="hljs-comment">//家庭住址</span><br>cout &lt;&lt; <span class="hljs-string">&quot;请输入家庭住址：&quot;</span> &lt;&lt; endl;<br>string address;<br>cin &gt;&gt; address;<br>abs-&gt;personArray[abs-&gt;m_Size].m_Addr = address;<br><br><span class="hljs-comment">//更新通讯录人数</span><br>abs-&gt;m_Size++;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;添加成功&quot;</span> &lt;&lt; endl;<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;cls&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-5-测试添加联系人功能">5.5 测试添加联系人功能</h3><p>选择界面中，如果玩家选择了1，代表添加联系人，我们可以测试下该功能</p><p>在switch case 语句中，case1里添加：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:  <span class="hljs-comment">//添加联系人</span><br><span class="hljs-built_in">addPerson</span>(&amp;abs);<br><span class="hljs-keyword">break</span>;<br></code></pre></td></tr></table></figure><p>测试效果如图：</p><p><img src="/assets/1544165554002.png" alt="1544165554002"></p><h2 id="6、显示联系人">6、显示联系人</h2><p>功能描述：显示通讯录中已有的联系人信息</p><p>显示联系人实现步骤：</p><ul><li>封装显示联系人函数</li><li>测试显示联系人功能</li></ul><h3 id="6-1-封装显示联系人函数">6.1 封装显示联系人函数</h3><p>思路：判断如果当前通讯录中没有人员，就提示记录为空，人数大于0，显示通讯录中信息</p><p>显示联系人代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//2、显示所有联系人信息</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showPerson</span><span class="hljs-params">(Addressbooks * abs)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (abs-&gt;m_Size == <span class="hljs-number">0</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;当前记录为空&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; abs-&gt;m_Size; i++)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;姓名：&quot;</span> &lt;&lt; abs-&gt;personArray[i].m_Name &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;性别：&quot;</span> &lt;&lt; (abs-&gt;personArray[i].m_Sex == <span class="hljs-number">1</span> ? <span class="hljs-string">&quot;男&quot;</span> : <span class="hljs-string">&quot;女&quot;</span>) &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;年龄：&quot;</span> &lt;&lt; abs-&gt;personArray[i].m_Age &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;电话：&quot;</span> &lt;&lt; abs-&gt;personArray[i].m_Phone &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;住址：&quot;</span> &lt;&lt; abs-&gt;personArray[i].m_Addr &lt;&lt; endl;<br>&#125;<br>&#125;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;cls&quot;</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-2-测试显示联系人功能">6.2 测试显示联系人功能</h3><p>在switch case语句中，case 2 里添加</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:  <span class="hljs-comment">//显示联系人</span><br><span class="hljs-built_in">showPerson</span>(&amp;abs);<br><span class="hljs-keyword">break</span>;<br></code></pre></td></tr></table></figure><p>测试效果如图：</p><p><img src="/assets/1544166401582.png" alt="1544166401582"></p><h2 id="7、删除联系人">7、删除联系人</h2><p>功能描述：按照姓名进行删除指定联系人</p><p>删除联系人实现步骤：</p><ul><li>封装检测联系人是否存在</li><li>封装删除联系人函数</li><li>测试删除联系人功能</li></ul><h3 id="7-1-封装检测联系人是否存在">7.1  封装检测联系人是否存在</h3><p>设计思路：</p><p>删除联系人前，我们需要先判断用户输入的联系人是否存在，如果存在删除，不存在提示用户没有要删除的联系人</p><p>因此我们可以把检测联系人是否存在封装成一个函数中，如果存在，返回联系人在通讯录中的位置，不存在返回-1</p><p>检测联系人是否存在代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//判断是否存在查询的人员，存在返回在数组中索引位置，不存在返回-1</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">isExist</span><span class="hljs-params">(Addressbooks * abs, string name)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; abs-&gt;m_Size; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (abs-&gt;personArray[i].m_Name == name)<br>&#123;<br><span class="hljs-keyword">return</span> i;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="7-2-封装删除联系人函数">7.2 封装删除联系人函数</h3><p>根据用户输入的联系人判断该通讯录中是否有此人</p><p>查找到进行删除，并提示删除成功</p><p>查不到提示查无此人。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//3、删除指定联系人信息</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">deletePerson</span><span class="hljs-params">(Addressbooks * abs)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;请输入您要删除的联系人&quot;</span> &lt;&lt; endl;<br>string name;<br>cin &gt;&gt; name;<br><br><span class="hljs-type">int</span> ret = <span class="hljs-built_in">isExist</span>(abs, name);<br><span class="hljs-keyword">if</span> (ret != <span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = ret; i &lt; abs-&gt;m_Size; i++)<br>&#123;<br>abs-&gt;personArray[i] = abs-&gt;personArray[i + <span class="hljs-number">1</span>];<br>&#125;<br>         abs-&gt;m_Size--;<br>cout &lt;&lt; <span class="hljs-string">&quot;删除成功&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;查无此人&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;cls&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-3-测试删除联系人功能">7.3 测试删除联系人功能</h3><p>在switch case 语句中，case3里添加：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:  <span class="hljs-comment">//删除联系人</span><br><span class="hljs-built_in">deletePerson</span>(&amp;abs);<br><span class="hljs-keyword">break</span>;<br></code></pre></td></tr></table></figure><p>测试效果如图：</p><p>存在情况：</p><p><img src="/assets/1544167951559.png" alt="1544167951559"></p><p>不存在情况：</p><p><img src="/assets/1544168010831.png" alt="1544168010831"></p><h2 id="8、查找联系人">8、查找联系人</h2><p>功能描述：按照姓名查看指定联系人信息</p><p>查找联系人实现步骤</p><ul><li>封装查找联系人函数</li><li>测试查找指定联系人</li></ul><h3 id="8-1-封装查找联系人函数">8.1 封装查找联系人函数</h3><p>实现思路：判断用户指定的联系人是否存在，如果存在显示信息，不存在则提示查无此人。</p><p>查找联系人代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//4、查找指定联系人信息</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">findPerson</span><span class="hljs-params">(Addressbooks * abs)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;请输入您要查找的联系人&quot;</span> &lt;&lt; endl;<br>string name;<br>cin &gt;&gt; name;<br><br><span class="hljs-type">int</span> ret = <span class="hljs-built_in">isExist</span>(abs, name);<br><span class="hljs-keyword">if</span> (ret != <span class="hljs-number">-1</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;姓名：&quot;</span> &lt;&lt; abs-&gt;personArray[ret].m_Name &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;性别：&quot;</span> &lt;&lt; abs-&gt;personArray[ret].m_Sex &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;年龄：&quot;</span> &lt;&lt; abs-&gt;personArray[ret].m_Age &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;电话：&quot;</span> &lt;&lt; abs-&gt;personArray[ret].m_Phone &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;住址：&quot;</span> &lt;&lt; abs-&gt;personArray[ret].m_Addr &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;查无此人&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;cls&quot;</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-2-测试查找指定联系人">8.2 测试查找指定联系人</h3><p>在switch case 语句中，case4里添加：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:  <span class="hljs-comment">//查找联系人</span><br><span class="hljs-built_in">findPerson</span>(&amp;abs);<br><span class="hljs-keyword">break</span>;<br></code></pre></td></tr></table></figure><p>测试效果如图</p><p>存在情况：</p><p><img src="/assets/1544170057646.png" alt="1544170057646"></p><p>不存在情况：</p><p><img src="/assets/1544170254021.png" alt="1544170254021"></p><h2 id="9、修改联系人">9、修改联系人</h2><p>功能描述：按照姓名重新修改指定联系人</p><p>修改联系人实现步骤</p><ul><li>封装修改联系人函数</li><li>测试修改联系人功能</li></ul><h3 id="9-1-封装修改联系人函数">9.1 封装修改联系人函数</h3><p>实现思路：查找用户输入的联系人，如果查找成功进行修改操作，查找失败提示查无此人</p><p>修改联系人代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//5、修改指定联系人信息</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modifyPerson</span><span class="hljs-params">(Addressbooks * abs)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;请输入您要修改的联系人&quot;</span> &lt;&lt; endl;<br>string name;<br>cin &gt;&gt; name;<br><br><span class="hljs-type">int</span> ret = <span class="hljs-built_in">isExist</span>(abs, name);<br><span class="hljs-keyword">if</span> (ret != <span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-comment">//姓名</span><br>string name;<br>cout &lt;&lt; <span class="hljs-string">&quot;请输入姓名：&quot;</span> &lt;&lt; endl;<br>cin &gt;&gt; name;<br>abs-&gt;personArray[ret].m_Name = name;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;请输入性别：&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;1 -- 男&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;2 -- 女&quot;</span> &lt;&lt; endl;<br><br><span class="hljs-comment">//性别</span><br><span class="hljs-type">int</span> sex = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>&#123;<br>cin &gt;&gt; sex;<br><span class="hljs-keyword">if</span> (sex == <span class="hljs-number">1</span> || sex == <span class="hljs-number">2</span>)<br>&#123;<br>abs-&gt;personArray[ret].m_Sex = sex;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>cout &lt;&lt; <span class="hljs-string">&quot;输入有误，请重新输入&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">//年龄</span><br>cout &lt;&lt; <span class="hljs-string">&quot;请输入年龄：&quot;</span> &lt;&lt; endl;<br><span class="hljs-type">int</span> age = <span class="hljs-number">0</span>;<br>cin &gt;&gt; age;<br>abs-&gt;personArray[ret].m_Age = age;<br><br><span class="hljs-comment">//联系电话</span><br>cout &lt;&lt; <span class="hljs-string">&quot;请输入联系电话：&quot;</span> &lt;&lt; endl;<br>string phone = <span class="hljs-string">&quot;&quot;</span>;<br>cin &gt;&gt; phone;<br>abs-&gt;personArray[ret].m_Phone = phone;<br><br><span class="hljs-comment">//家庭住址</span><br>cout &lt;&lt; <span class="hljs-string">&quot;请输入家庭住址：&quot;</span> &lt;&lt; endl;<br>string address;<br>cin &gt;&gt; address;<br>abs-&gt;personArray[ret].m_Addr = address;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;修改成功&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;查无此人&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;cls&quot;</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-2-测试修改联系人功能">9.2 测试修改联系人功能</h3><p>在switch case 语句中，case 5里添加：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:  <span class="hljs-comment">//修改联系人</span><br><span class="hljs-built_in">modifyPerson</span>(&amp;abs);<br><span class="hljs-keyword">break</span>;<br></code></pre></td></tr></table></figure><p>测试效果如图：</p><p>查不到指定联系人情况：</p><p><img src="/assets/1544172265676.png" alt="1544172265676"></p><p>查找到联系人，并修改成功：</p><p><img src="/assets/1544172164141.png" alt="1544172164141"></p><p>再次查看通讯录，确认修改完毕</p><p><img src="/assets/1544172228627.png" alt="1544172228627"></p><h2 id="10、清空联系人">10、清空联系人</h2><p>功能描述：清空通讯录中所有信息</p><p>清空联系人实现步骤</p><ul><li>封装清空联系人函数</li><li>测试清空联系人</li></ul><h3 id="10-1-封装清空联系人函数">10.1 封装清空联系人函数</h3><p>实现思路： 将通讯录所有联系人信息清除掉，只要将通讯录记录的联系人数量置为0，做逻辑清空即可。</p><p>清空联系人代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//6、清空所有联系人</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cleanPerson</span><span class="hljs-params">(Addressbooks * abs)</span></span><br><span class="hljs-function"></span>&#123;<br>abs-&gt;m_Size = <span class="hljs-number">0</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;通讯录已清空&quot;</span> &lt;&lt; endl;<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;cls&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="10-2-测试清空联系人">10.2  测试清空联系人</h3><p>在switch case 语句中，case 6 里添加：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:  <span class="hljs-comment">//清空联系人</span><br><span class="hljs-built_in">cleanPerson</span>(&amp;abs);<br><span class="hljs-keyword">break</span>;<br></code></pre></td></tr></table></figure><p>测试效果如图：</p><p>清空通讯录</p><p><img src="/assets/1544172909693.png" alt="1544172909693"></p><p>再次查看信息，显示记录为空</p><p><img src="/assets/1544172943653.png" alt="1544172943653"></p><h2 id="完整代码实现">完整代码实现</h2><p><strong>代码：</strong> mian.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//</span><br><span class="hljs-comment">// Created by user on 5/31/2022.</span><br><span class="hljs-comment">// author: Liansixin</span><br><span class="hljs-comment">//</span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;BusinessImplementation.h&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//创建通讯录</span><br>    Addressbooks abs;<br>    <span class="hljs-comment">//初始化通讯录中人数</span><br>    abs.m_Size = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-type">int</span> select = <span class="hljs-number">0</span>;<br>    BusinessImplementation * pBusinessImplementation;<br>    pBusinessImplementation = BusinessImplementation::<span class="hljs-built_in">GetBusinessImplementation</span>();<br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == pBusinessImplementation)<br>    &#123;<br>        <span class="hljs-built_in">abort</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>    &#123;<br>        pBusinessImplementation-&gt;<span class="hljs-built_in">showMenu</span>();<br><br>        cin &gt;&gt; select;<br><br>        <span class="hljs-keyword">switch</span> (select)<br>        &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:  <span class="hljs-comment">//添加联系人</span><br>            pBusinessImplementation-&gt;<span class="hljs-built_in">addPerson</span>(&amp;abs);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:  <span class="hljs-comment">//显示联系人</span><br>            pBusinessImplementation-&gt;<span class="hljs-built_in">showPerson</span>(&amp;abs);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:  <span class="hljs-comment">//删除联系人</span><br>            pBusinessImplementation-&gt;<span class="hljs-built_in">deletePerson</span>(&amp;abs);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:  <span class="hljs-comment">//查找联系人</span><br>            pBusinessImplementation-&gt;<span class="hljs-built_in">findPerson</span>(&amp;abs);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:  <span class="hljs-comment">//修改联系人</span><br>            pBusinessImplementation-&gt;<span class="hljs-built_in">modifyPerson</span>(&amp;abs);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:  <span class="hljs-comment">//清空联系人</span><br>            pBusinessImplementation-&gt;<span class="hljs-built_in">cleanPerson</span>(&amp;abs);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:  <span class="hljs-comment">//退出通讯录</span><br>                cout &lt;&lt; <span class="hljs-string">&quot;欢迎下次使用&quot;</span> &lt;&lt; endl;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>代码：</strong> BusinessImplementation.h</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//</span><br><span class="hljs-comment">// Created by user on 5/31/2022.</span><br><span class="hljs-comment">// author: Liansixin</span><br><span class="hljs-comment">//</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ADDRESSBOOK_BUSINESSIMPLEMENTATION_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADDRESSBOOK_BUSINESSIMPLEMENTATION_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX 1000 <span class="hljs-comment">//最大人数</span></span><br><br><br><span class="hljs-comment">//联系人结构体</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Person</span><br>&#123;<br>    string m_Name; <span class="hljs-comment">//姓名</span><br>    <span class="hljs-type">int</span> m_Sex; <span class="hljs-comment">//性别：1男 2女</span><br>    <span class="hljs-type">int</span> m_Age; <span class="hljs-comment">//年龄</span><br>    string m_Phone; <span class="hljs-comment">//电话</span><br>    string m_Addr; <span class="hljs-comment">//住址</span><br>&#125;;<br><br><span class="hljs-comment">//通讯录结构体</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Addressbooks</span><br>&#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Person</span> personArray[MAX]; <span class="hljs-comment">//通讯录中保存的联系人数组</span><br>    <span class="hljs-type">int</span> m_Size; <span class="hljs-comment">//通讯录中人员个数</span><br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BusinessImplementation</span> &#123;<br><span class="hljs-keyword">protected</span>:<br>    <span class="hljs-type">static</span> BusinessImplementation *m_pBusinessImplementation;<br><span class="hljs-keyword">protected</span>:<br>    <span class="hljs-built_in">BusinessImplementation</span>();<br>    <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">BusinessImplementation</span>();<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">static</span> BusinessImplementation * <span class="hljs-title">GetBusinessImplementation</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showMenu</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addPerson</span><span class="hljs-params">(Addressbooks *abs)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showPerson</span><span class="hljs-params">(Addressbooks * abs)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">deletePerson</span><span class="hljs-params">(Addressbooks * abs)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">findPerson</span><span class="hljs-params">(Addressbooks * abs)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modifyPerson</span><span class="hljs-params">(Addressbooks * abs)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cleanPerson</span><span class="hljs-params">(Addressbooks * abs)</span></span>;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">isExist</span><span class="hljs-params">(Addressbooks * abs, string name)</span></span>;<br><br>&#125;;<br><br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">//ADDRESSBOOK_BUSINESSIMPLEMENTATION_H</span></span><br><br></code></pre></td></tr></table></figure><p><strong>代码：</strong> BusinessImplementation.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//</span><br><span class="hljs-comment">// Created by user on 5/31/2022.</span><br><span class="hljs-comment">// author: Liansixin</span><br><span class="hljs-comment">//</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;BusinessImplementation.h&quot;</span></span><br><br>BusinessImplementation* BusinessImplementation::m_pBusinessImplementation = <span class="hljs-literal">NULL</span>;<br><br>BusinessImplementation::<span class="hljs-built_in">BusinessImplementation</span>()<br>&#123;<br><br>&#125;<br><br>BusinessImplementation::~<span class="hljs-built_in">BusinessImplementation</span>()<br>&#123;<br><br>&#125;<br><br><br><span class="hljs-comment">//菜单界面</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">BusinessImplementation::showMenu</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;***************************&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;*****  1、添加联系人  *****&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;*****  2、显示联系人  *****&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;*****  3、删除联系人  *****&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;*****  4、查找联系人  *****&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;*****  5、修改联系人  *****&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;*****  6、清空联系人  *****&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;*****  0、退出通讯录  *****&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;***************************&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">//添加联系人</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">BusinessImplementation::addPerson</span><span class="hljs-params">(Addressbooks *abs)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//判断电话本是否满了</span><br>    <span class="hljs-keyword">if</span> (abs-&gt;m_Size == MAX)<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;通讯录已满，无法添加&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-comment">//姓名</span><br>        string name;<br>        cout &lt;&lt; <span class="hljs-string">&quot;请输入姓名：&quot;</span> &lt;&lt; endl;<br>        cin &gt;&gt; name;<br>        abs-&gt;personArray[abs-&gt;m_Size].m_Name = name;<br><br>        cout &lt;&lt; <span class="hljs-string">&quot;请输入性别：&quot;</span> &lt;&lt; endl;<br>        cout &lt;&lt; <span class="hljs-string">&quot;1 -- 男&quot;</span> &lt;&lt; endl;<br>        cout &lt;&lt; <span class="hljs-string">&quot;2 -- 女&quot;</span> &lt;&lt; endl;<br><br>        <span class="hljs-comment">//性别</span><br>        <span class="hljs-type">int</span> sex = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>        &#123;<br>            cin &gt;&gt; sex;<br>            <span class="hljs-keyword">if</span> (sex == <span class="hljs-number">1</span> || sex == <span class="hljs-number">2</span>)<br>            &#123;<br>                abs-&gt;personArray[abs-&gt;m_Size].m_Sex = sex;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            cout &lt;&lt; <span class="hljs-string">&quot;输入有误，请重新输入&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//年龄</span><br>        cout &lt;&lt; <span class="hljs-string">&quot;请输入年龄：&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-type">int</span> age = <span class="hljs-number">0</span>;<br>        cin &gt;&gt; age;<br>        abs-&gt;personArray[abs-&gt;m_Size].m_Age = age;<br><br>        <span class="hljs-comment">//联系电话</span><br>        cout &lt;&lt; <span class="hljs-string">&quot;请输入联系电话：&quot;</span> &lt;&lt; endl;<br>        string phone = <span class="hljs-string">&quot;&quot;</span>;<br>        cin &gt;&gt; phone;<br>        abs-&gt;personArray[abs-&gt;m_Size].m_Phone = phone;<br><br>        <span class="hljs-comment">//家庭住址</span><br>        cout &lt;&lt; <span class="hljs-string">&quot;请输入家庭住址：&quot;</span> &lt;&lt; endl;<br>        string address;<br>        cin &gt;&gt; address;<br>        abs-&gt;personArray[abs-&gt;m_Size].m_Addr = address;<br><br>        <span class="hljs-comment">//更新通讯录人数</span><br>        abs-&gt;m_Size++;<br><br>        cout &lt;&lt; <span class="hljs-string">&quot;添加成功&quot;</span> &lt;&lt; endl;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//显示联系人</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">BusinessImplementation::showPerson</span><span class="hljs-params">(Addressbooks * abs)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (abs-&gt;m_Size == <span class="hljs-number">0</span>)<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;当前记录为空&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; abs-&gt;m_Size; i++)<br>        &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;姓名：&quot;</span> &lt;&lt; abs-&gt;personArray[i].m_Name &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span>;<br>            cout &lt;&lt; <span class="hljs-string">&quot;性别：&quot;</span> &lt;&lt; (abs-&gt;personArray[i].m_Sex == <span class="hljs-number">1</span> ? <span class="hljs-string">&quot;男&quot;</span> : <span class="hljs-string">&quot;女&quot;</span>) &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span>;<br>            cout &lt;&lt; <span class="hljs-string">&quot;年龄：&quot;</span> &lt;&lt; abs-&gt;personArray[i].m_Age &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span>;<br>            cout &lt;&lt; <span class="hljs-string">&quot;电话：&quot;</span> &lt;&lt; abs-&gt;personArray[i].m_Phone &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span>;<br>            cout &lt;&lt; <span class="hljs-string">&quot;住址：&quot;</span> &lt;&lt; abs-&gt;personArray[i].m_Addr &lt;&lt; endl;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">//判断是否存在查询的人员，存在返回在数组中索引位置，不存在返回-1</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">BusinessImplementation::isExist</span><span class="hljs-params">(Addressbooks * abs, string name)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; abs-&gt;m_Size; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (abs-&gt;personArray[i].m_Name == name)<br>        &#123;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-comment">//删除联系人</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">BusinessImplementation::deletePerson</span><span class="hljs-params">(Addressbooks * abs)</span></span><br><span class="hljs-function"></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;请输入您要删除的联系人&quot;</span> &lt;&lt; endl;<br>    string name;<br>    cin &gt;&gt; name;<br><br>    <span class="hljs-type">int</span> ret = <span class="hljs-built_in">isExist</span>(abs, name);<br>    <span class="hljs-keyword">if</span> (ret != <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = ret; i &lt; abs-&gt;m_Size; i++)<br>        &#123;<br>            abs-&gt;personArray[i] = abs-&gt;personArray[i + <span class="hljs-number">1</span>];<br>        &#125;<br>        abs-&gt;m_Size--;<br>        cout &lt;&lt; <span class="hljs-string">&quot;删除成功&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;查无此人&quot;</span> &lt;&lt; endl;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">//查找联系人</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">BusinessImplementation::findPerson</span><span class="hljs-params">(Addressbooks * abs)</span></span><br><span class="hljs-function"></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;请输入您要查找的联系人&quot;</span> &lt;&lt; endl;<br>    string name;<br>    cin &gt;&gt; name;<br><br>    <span class="hljs-type">int</span> ret = <span class="hljs-built_in">isExist</span>(abs, name);<br>    <span class="hljs-keyword">if</span> (ret != <span class="hljs-number">-1</span>)<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;姓名：&quot;</span> &lt;&lt; abs-&gt;personArray[ret].m_Name &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span>;<br>        cout &lt;&lt; <span class="hljs-string">&quot;性别：&quot;</span> &lt;&lt; abs-&gt;personArray[ret].m_Sex &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span>;<br>        cout &lt;&lt; <span class="hljs-string">&quot;年龄：&quot;</span> &lt;&lt; abs-&gt;personArray[ret].m_Age &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span>;<br>        cout &lt;&lt; <span class="hljs-string">&quot;电话：&quot;</span> &lt;&lt; abs-&gt;personArray[ret].m_Phone &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span>;<br>        cout &lt;&lt; <span class="hljs-string">&quot;住址：&quot;</span> &lt;&lt; abs-&gt;personArray[ret].m_Addr &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;查无此人&quot;</span> &lt;&lt; endl;<br>    &#125;<br><br><br>&#125;<br><br><span class="hljs-comment">//修改指定联系人信息</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">BusinessImplementation::modifyPerson</span><span class="hljs-params">(Addressbooks * abs)</span></span><br><span class="hljs-function"></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;请输入您要修改的联系人&quot;</span> &lt;&lt; endl;<br>    string name;<br>    cin &gt;&gt; name;<br><br>    <span class="hljs-type">int</span> ret = <span class="hljs-built_in">isExist</span>(abs, name);<br>    <span class="hljs-keyword">if</span> (ret != <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-comment">//姓名</span><br>        string name;<br>        cout &lt;&lt; <span class="hljs-string">&quot;请输入姓名：&quot;</span> &lt;&lt; endl;<br>        cin &gt;&gt; name;<br>        abs-&gt;personArray[ret].m_Name = name;<br><br>        cout &lt;&lt; <span class="hljs-string">&quot;请输入性别：&quot;</span> &lt;&lt; endl;<br>        cout &lt;&lt; <span class="hljs-string">&quot;1 -- 男&quot;</span> &lt;&lt; endl;<br>        cout &lt;&lt; <span class="hljs-string">&quot;2 -- 女&quot;</span> &lt;&lt; endl;<br><br>        <span class="hljs-comment">//性别</span><br>        <span class="hljs-type">int</span> sex = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>        &#123;<br>            cin &gt;&gt; sex;<br>            <span class="hljs-keyword">if</span> (sex == <span class="hljs-number">1</span> || sex == <span class="hljs-number">2</span>)<br>            &#123;<br>                abs-&gt;personArray[ret].m_Sex = sex;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            cout &lt;&lt; <span class="hljs-string">&quot;输入有误，请重新输入&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//年龄</span><br>        cout &lt;&lt; <span class="hljs-string">&quot;请输入年龄：&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-type">int</span> age = <span class="hljs-number">0</span>;<br>        cin &gt;&gt; age;<br>        abs-&gt;personArray[ret].m_Age = age;<br><br>        <span class="hljs-comment">//联系电话</span><br>        cout &lt;&lt; <span class="hljs-string">&quot;请输入联系电话：&quot;</span> &lt;&lt; endl;<br>        string phone = <span class="hljs-string">&quot;&quot;</span>;<br>        cin &gt;&gt; phone;<br>        abs-&gt;personArray[ret].m_Phone = phone;<br><br>        <span class="hljs-comment">//家庭住址</span><br>        cout &lt;&lt; <span class="hljs-string">&quot;请输入家庭住址：&quot;</span> &lt;&lt; endl;<br>        string address;<br>        cin &gt;&gt; address;<br>        abs-&gt;personArray[ret].m_Addr = address;<br><br>        cout &lt;&lt; <span class="hljs-string">&quot;修改成功&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;查无此人&quot;</span> &lt;&lt; endl;<br>    &#125;<br><br><br>&#125;<br><br><span class="hljs-comment">//清空所有联系人</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">BusinessImplementation::cleanPerson</span><span class="hljs-params">(Addressbooks * abs)</span></span><br><span class="hljs-function"></span>&#123;<br>    abs-&gt;m_Size = <span class="hljs-number">0</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;通讯录已清空&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><br><span class="hljs-comment">//单例类</span><br><span class="hljs-function">BusinessImplementation* <span class="hljs-title">BusinessImplementation::GetBusinessImplementation</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(!m_pBusinessImplementation)<br>    &#123;<br>        m_pBusinessImplementation = <span class="hljs-keyword">new</span> <span class="hljs-built_in">BusinessImplementation</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> m_pBusinessImplementation;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>至此，通讯录管理系统完成！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> C++项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 通讯录 </tag>
            
            <tag> 项目笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小鑫降重工具上线啦</title>
      <link href="/2022/04/24/%E5%B0%8F%E9%91%AB%E9%99%8D%E9%87%8D%E5%B7%A5%E5%85%B7%E4%B8%8A%E7%BA%BF%E5%95%A6/"/>
      <url>/2022/04/24/%E5%B0%8F%E9%91%AB%E9%99%8D%E9%87%8D%E5%B7%A5%E5%85%B7%E4%B8%8A%E7%BA%BF%E5%95%A6/</url>
      
        <content type="html"><![CDATA[<h1>小鑫降重工具1.0</h1><h2 id="效果图">效果图</h2><p><img src="/images/2022-4-24-1.png" alt="upload successful"></p><h2 id="说明">说明</h2><ol><li>该软件需要联网</li><li>该软件目前只能一句一句的降重（后续有时间精力的话我在修复这个bug）</li><li>在bug没修复之前，你可以把句号改成逗号进行大范围降重（ps：大篇幅降重的精度有待提升）</li></ol><h2 id="下载地址">下载地址</h2><p><a href="/download/%E5%B0%8F%E9%91%AB%E9%99%8D%E9%87%8D%E5%B7%A5%E5%85%B7.exe">点我下载</a></p><h2 id="没啥要讲的了，用的不错可以打个赏，说不定我就更有动力开发一些新玩意">没啥要讲的了，用的不错可以打个赏，说不定我就更有动力开发一些新玩意</h2><p><img src="/images/2022-3-12-1.png" alt="微信打赏"></p><p><img src="/images/2022-3-12-2.png" alt="支付宝打赏"></p><h4 id="感谢打赏！！">感谢打赏！！</h4>]]></content>
      
      
      <categories>
          
          <category> 小鑫系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 福利 </tag>
            
            <tag> 小鑫软件 </tag>
            
            <tag> 降重工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++基础入门讲解</title>
      <link href="/2022/03/24/C-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E8%AE%B2%E8%A7%A3/"/>
      <url>/2022/03/24/C-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E8%AE%B2%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1>C++基础入门</h1><h2 id="1-C-初识">1 C++初识</h2><h3 id="1-1-第一个C-程序">1.1  第一个C++程序</h3><p>编写一个C++程序总共分为4个步骤</p><ul><li>创建项目</li><li>创建文件</li><li>编写代码</li><li>运行程序</li></ul><h4 id="1-1-1-创建项目">1.1.1 创建项目</h4><p>​Visual Studio是我们用来编写C++程序的主要工具，我们先将它打开</p><p><img src="/assets/1541383178746.png" alt="1541383178746"></p><p><img src="/assets/1541384366413.png" alt="1541384366413"></p><h4 id="1-1-2-创建文件">1.1.2 创建文件</h4><p>右键源文件，选择添加-&gt;新建项</p><p><img src="/assets/1541383817248.png" alt="1541383817248"></p><p>给C++文件起个名称，然后点击添加即可。</p><p><img src="/assets/1541384140042.png" alt="1541384140042"></p><h4 id="1-1-3-编写代码">1.1.3 编写代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;Hello world&quot;</span> &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-1-4-运行程序">1.1.4 运行程序</h4><p><img src="/assets/1541384818688.png" alt="1541384818688"></p><h3 id="1-2-注释">1.2 注释</h3><p><strong>作用</strong>：在代码中加一些说明和解释，方便自己或其他程序员程序员阅读代码</p><p><strong>两种格式</strong></p><ol><li><strong>单行注释</strong>：<code>// 描述信息</code><ul><li>通常放在一行代码的上方，或者一条语句的末尾，==对该行代码说明==</li></ul></li><li><strong>多行注释</strong>： <code>/* 描述信息 */</code><ul><li>通常放在一段代码的上方，==对该段代码做整体说明==</li></ul></li></ol><blockquote><p>提示：编译器在编译代码时，会忽略注释的内容</p></blockquote><h3 id="1-3-变量">1.3 变量</h3><p><strong>作用</strong>：给一段指定的内存空间起名，方便操作这段内存</p><p><strong>语法</strong>：<code>数据类型 变量名 = 初始值;</code></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//变量的定义</span><br><span class="hljs-comment">//语法：数据类型  变量名 = 初始值</span><br><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意：C++在创建变量时，必须给变量一个初始值，否则会报错</p></blockquote><h3 id="1-4-常量">1.4  常量</h3><p><strong>作用</strong>：用于记录程序中不可更改的数据</p><p>C++定义常量两种方式</p><ol><li><p><strong>#define</strong> 宏常量： <code>#define 常量名 常量值</code></p><ul><li>==通常在文件上方定义==，表示一个常量</li></ul></li><li><p><strong>const</strong>修饰的变量 <code>const 数据类型 常量名 = 常量值</code></p><ul><li>==通常在变量定义前加关键字const==，修饰该变量为常量，不可修改</li></ul></li></ol><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//1、宏常量</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> day 7</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;一周里总共有 &quot;</span> &lt;&lt; day &lt;&lt; <span class="hljs-string">&quot; 天&quot;</span> &lt;&lt; endl;<br><span class="hljs-comment">//day = 8;  //报错，宏常量不可以修改</span><br><br><span class="hljs-comment">//2、const修饰变量</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> month = <span class="hljs-number">12</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;一年里总共有 &quot;</span> &lt;&lt; month &lt;&lt; <span class="hljs-string">&quot; 个月份&quot;</span> &lt;&lt; endl;<br><span class="hljs-comment">//month = 24; //报错，常量是不可以修改的</span><br><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-5-关键字">1.5 关键字</h3><p>**作用：**关键字是C++中预先保留的单词（标识符）</p><ul><li><strong>在定义变量或者常量时候，不要用关键字</strong></li></ul><p>C++关键字如下：</p><table><thead><tr><th>asm</th><th>do</th><th>if</th><th>return</th><th>typedef</th></tr></thead><tbody><tr><td>auto</td><td>double</td><td>inline</td><td>short</td><td>typeid</td></tr><tr><td>bool</td><td>dynamic_cast</td><td>int</td><td>signed</td><td>typename</td></tr><tr><td>break</td><td>else</td><td>long</td><td>sizeof</td><td>union</td></tr><tr><td>case</td><td>enum</td><td>mutable</td><td>static</td><td>unsigned</td></tr><tr><td>catch</td><td>explicit</td><td>namespace</td><td>static_cast</td><td>using</td></tr><tr><td>char</td><td>export</td><td>new</td><td>struct</td><td>virtual</td></tr><tr><td>class</td><td>extern</td><td>operator</td><td>switch</td><td>void</td></tr><tr><td>const</td><td>false</td><td>private</td><td>template</td><td>volatile</td></tr><tr><td>const_cast</td><td>float</td><td>protected</td><td>this</td><td>wchar_t</td></tr><tr><td>continue</td><td>for</td><td>public</td><td>throw</td><td>while</td></tr><tr><td>default</td><td>friend</td><td>register</td><td>true</td><td></td></tr><tr><td>delete</td><td>goto</td><td>reinterpret_cast</td><td>try</td><td></td></tr></tbody></table><p><code>提示：在给变量或者常量起名称时候，不要用C++得关键字，否则会产生歧义。</code></p><h3 id="1-6-标识符命名规则">1.6 标识符命名规则</h3><p><strong>作用</strong>：C++规定给标识符（变量、常量）命名时，有一套自己的规则</p><ul><li>标识符不能是关键字</li><li>标识符只能由字母、数字、下划线组成</li><li>第一个字符必须为字母或下划线</li><li>标识符中字母区分大小写</li></ul><blockquote><p>建议：给标识符命名时，争取做到见名知意的效果，方便自己和他人的阅读</p></blockquote><h2 id="2-数据类型">2 数据类型</h2><p>C++规定在创建一个变量或者常量时，必须要指定出相应的数据类型，否则无法给变量分配内存</p><h3 id="2-1-整型">2.1 整型</h3><p><strong>作用</strong>：整型变量表示的是==整数类型==的数据</p><p>C++中能够表示整型的类型有以下几种方式，<strong>区别在于所占内存空间不同</strong>：</p><table><thead><tr><th><strong>数据类型</strong></th><th><strong>占用空间</strong></th><th>取值范围</th></tr></thead><tbody><tr><td>short(短整型)</td><td>2字节</td><td>(-2^15 ~ 2^15-1)</td></tr><tr><td>int(整型)</td><td>4字节</td><td>(-2^31 ~ 2^31-1)</td></tr><tr><td>long(长整形)</td><td>Windows为4字节，Linux为4字节(32位)，8字节(64位)</td><td>(-2^31 ~ 2^31-1)</td></tr><tr><td>long long(长长整形)</td><td>8字节</td><td>(-2^63 ~ 2^63-1)</td></tr></tbody></table><h3 id="2-2-sizeof关键字">2.2 sizeof关键字</h3><p>**作用：**利用sizeof关键字可以==统计数据类型所占内存大小==</p><p><strong>语法：</strong> <code>sizeof( 数据类型 / 变量)</code></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;short 类型所占内存空间为： &quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">short</span>) &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;int 类型所占内存空间为： &quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>) &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;long 类型所占内存空间为： &quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">long</span>) &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;long long 类型所占内存空间为： &quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">long</span> <span class="hljs-type">long</span>) &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>整型结论</strong>：==short &lt; int &lt;= long &lt;= long long==</p></blockquote><h3 id="2-3-实型（浮点型）">2.3 实型（浮点型）</h3><p><strong>作用</strong>：用于==表示小数==</p><p>浮点型变量分为两种：</p><ol><li>单精度float</li><li>双精度double</li></ol><p>两者的<strong>区别</strong>在于表示的有效数字范围不同。</p><table><thead><tr><th><strong>数据类型</strong></th><th><strong>占用空间</strong></th><th><strong>有效数字范围</strong></th></tr></thead><tbody><tr><td>float</td><td>4字节</td><td>7位有效数字</td></tr><tr><td>double</td><td>8字节</td><td>15～16位有效数字</td></tr></tbody></table><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">float</span> f1 = <span class="hljs-number">3.14f</span>;<br><span class="hljs-type">double</span> d1 = <span class="hljs-number">3.14</span>;<br><br>cout &lt;&lt; f1 &lt;&lt; endl;<br>cout &lt;&lt; d1&lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;float  sizeof = &quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(f1) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;double sizeof = &quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(d1) &lt;&lt; endl;<br><br><span class="hljs-comment">//科学计数法</span><br><span class="hljs-type">float</span> f2 = <span class="hljs-number">3e2</span>; <span class="hljs-comment">// 3 * 10 ^ 2 </span><br>cout &lt;&lt; <span class="hljs-string">&quot;f2 = &quot;</span> &lt;&lt; f2 &lt;&lt; endl;<br><br><span class="hljs-type">float</span> f3 = <span class="hljs-number">3e-2</span>;  <span class="hljs-comment">// 3 * 0.1 ^ 2</span><br>cout &lt;&lt; <span class="hljs-string">&quot;f3 = &quot;</span> &lt;&lt; f3 &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-4-字符型">2.4 字符型</h3><p>**作用：**字符型变量用于显示单个字符</p><p><strong>语法：</strong><code>char ch = 'a';</code></p><blockquote><p>注意1：在显示字符型变量时，用单引号将字符括起来，不要用双引号</p></blockquote><blockquote><p>注意2：单引号内只能有一个字符，不可以是字符串</p></blockquote><ul><li>C和C++中字符型变量只占用==1个字节==。</li><li>字符型变量并不是把字符本身放到内存中存储，而是将对应的ASCII编码放入到存储单元</li></ul><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">char</span> ch = <span class="hljs-string">&#x27;a&#x27;</span>;<br>cout &lt;&lt; ch &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">char</span>) &lt;&lt; endl;<br><br><span class="hljs-comment">//ch = &quot;abcde&quot;; //错误，不可以用双引号</span><br><span class="hljs-comment">//ch = &#x27;abcde&#x27;; //错误，单引号内只能引用一个字符</span><br><br>cout &lt;&lt; (<span class="hljs-type">int</span>)ch &lt;&lt; endl;  <span class="hljs-comment">//查看字符a对应的ASCII码</span><br>ch = <span class="hljs-number">97</span>; <span class="hljs-comment">//可以直接用ASCII给字符型变量赋值</span><br>cout &lt;&lt; ch &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>ASCII码表格：</p><table><thead><tr><th><strong>ASCII</strong>值</th><th><strong>控制字符</strong></th><th><strong>ASCII</strong>值</th><th><strong>字符</strong></th><th><strong>ASCII</strong>值</th><th><strong>字符</strong></th><th><strong>ASCII</strong>值</th><th><strong>字符</strong></th></tr></thead><tbody><tr><td>0</td><td>NUT</td><td>32</td><td>(space)</td><td>64</td><td>@</td><td>96</td><td>、</td></tr><tr><td>1</td><td>SOH</td><td>33</td><td>!</td><td>65</td><td>A</td><td>97</td><td>a</td></tr><tr><td>2</td><td>STX</td><td>34</td><td>&quot;</td><td>66</td><td>B</td><td>98</td><td>b</td></tr><tr><td>3</td><td>ETX</td><td>35</td><td>#</td><td>67</td><td>C</td><td>99</td><td>c</td></tr><tr><td>4</td><td>EOT</td><td>36</td><td>$</td><td>68</td><td>D</td><td>100</td><td>d</td></tr><tr><td>5</td><td>ENQ</td><td>37</td><td>%</td><td>69</td><td>E</td><td>101</td><td>e</td></tr><tr><td>6</td><td>ACK</td><td>38</td><td>&amp;</td><td>70</td><td>F</td><td>102</td><td>f</td></tr><tr><td>7</td><td>BEL</td><td>39</td><td>,</td><td>71</td><td>G</td><td>103</td><td>g</td></tr><tr><td>8</td><td>BS</td><td>40</td><td>(</td><td>72</td><td>H</td><td>104</td><td>h</td></tr><tr><td>9</td><td>HT</td><td>41</td><td>)</td><td>73</td><td>I</td><td>105</td><td>i</td></tr><tr><td>10</td><td>LF</td><td>42</td><td>*</td><td>74</td><td>J</td><td>106</td><td>j</td></tr><tr><td>11</td><td>VT</td><td>43</td><td>+</td><td>75</td><td>K</td><td>107</td><td>k</td></tr><tr><td>12</td><td>FF</td><td>44</td><td>,</td><td>76</td><td>L</td><td>108</td><td>l</td></tr><tr><td>13</td><td>CR</td><td>45</td><td>-</td><td>77</td><td>M</td><td>109</td><td>m</td></tr><tr><td>14</td><td>SO</td><td>46</td><td>.</td><td>78</td><td>N</td><td>110</td><td>n</td></tr><tr><td>15</td><td>SI</td><td>47</td><td>/</td><td>79</td><td>O</td><td>111</td><td>o</td></tr><tr><td>16</td><td>DLE</td><td>48</td><td>0</td><td>80</td><td>P</td><td>112</td><td>p</td></tr><tr><td>17</td><td>DCI</td><td>49</td><td>1</td><td>81</td><td>Q</td><td>113</td><td>q</td></tr><tr><td>18</td><td>DC2</td><td>50</td><td>2</td><td>82</td><td>R</td><td>114</td><td>r</td></tr><tr><td>19</td><td>DC3</td><td>51</td><td>3</td><td>83</td><td>S</td><td>115</td><td>s</td></tr><tr><td>20</td><td>DC4</td><td>52</td><td>4</td><td>84</td><td>T</td><td>116</td><td>t</td></tr><tr><td>21</td><td>NAK</td><td>53</td><td>5</td><td>85</td><td>U</td><td>117</td><td>u</td></tr><tr><td>22</td><td>SYN</td><td>54</td><td>6</td><td>86</td><td>V</td><td>118</td><td>v</td></tr><tr><td>23</td><td>TB</td><td>55</td><td>7</td><td>87</td><td>W</td><td>119</td><td>w</td></tr><tr><td>24</td><td>CAN</td><td>56</td><td>8</td><td>88</td><td>X</td><td>120</td><td>x</td></tr><tr><td>25</td><td>EM</td><td>57</td><td>9</td><td>89</td><td>Y</td><td>121</td><td>y</td></tr><tr><td>26</td><td>SUB</td><td>58</td><td>:</td><td>90</td><td>Z</td><td>122</td><td>z</td></tr><tr><td>27</td><td>ESC</td><td>59</td><td>;</td><td>91</td><td>[</td><td>123</td><td>{</td></tr><tr><td>28</td><td>FS</td><td>60</td><td>&lt;</td><td>92</td><td>/</td><td>124</td><td>|</td></tr><tr><td>29</td><td>GS</td><td>61</td><td>=</td><td>93</td><td>]</td><td>125</td><td>}</td></tr><tr><td>30</td><td>RS</td><td>62</td><td>&gt;</td><td>94</td><td>^</td><td>126</td><td>`</td></tr><tr><td>31</td><td>US</td><td>63</td><td>?</td><td>95</td><td>_</td><td>127</td><td>DEL</td></tr></tbody></table><p>ASCII 码大致由以下<strong>两部分组</strong>成：</p><ul><li>ASCII 非打印控制字符： ASCII 表上的数字 <strong>0-31</strong> 分配给了控制字符，用于控制像打印机等一些外围设备。</li><li>ASCII 打印字符：数字 <strong>32-126</strong> 分配给了能在键盘上找到的字符，当查看或打印文档时就会出现。</li></ul><h3 id="2-5-转义字符">2.5 转义字符</h3><p>**作用：**用于表示一些==不能显示出来的ASCII字符==</p><p>现阶段我们常用的转义字符有：<code> \n  \\  \t</code></p><table><thead><tr><th><strong>转义字符</strong></th><th><strong>含义</strong></th><th><strong>ASCII</strong>码值（十进制）</th></tr></thead><tbody><tr><td>\a</td><td>警报</td><td>007</td></tr><tr><td>\b</td><td>退格(BS) ，将当前位置移到前一列</td><td>008</td></tr><tr><td>\f</td><td>换页(FF)，将当前位置移到下页开头</td><td>012</td></tr><tr><td><strong>\n</strong></td><td><strong>换行(LF) ，将当前位置移到下一行开头</strong></td><td><strong>010</strong></td></tr><tr><td>\r</td><td>回车(CR) ，将当前位置移到本行开头</td><td>013</td></tr><tr><td><strong>\t</strong></td><td><strong>水平制表(HT)  （跳到下一个TAB位置）</strong></td><td><strong>009</strong></td></tr><tr><td>\v</td><td>垂直制表(VT)</td><td>011</td></tr><tr><td><strong>\\</strong></td><td><strong>代表一个反斜线字符&quot;&quot;</strong></td><td><strong>092</strong></td></tr><tr><td>'</td><td>代表一个单引号（撇号）字符</td><td>039</td></tr><tr><td>&quot;</td><td>代表一个双引号字符</td><td>034</td></tr><tr><td>?</td><td>代表一个问号</td><td>063</td></tr><tr><td>\0</td><td>数字0</td><td>000</td></tr><tr><td>\ddd</td><td>8进制转义字符，d范围0~7</td><td>3位8进制</td></tr><tr><td>\xhh</td><td>16进制转义字符，h范围0~9，a~f，A~F</td><td>3位16进制</td></tr></tbody></table><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><br>cout &lt;&lt; <span class="hljs-string">&quot;\\&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;\tHello&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span> &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-6-字符串型">2.6 字符串型</h3><p><strong>作用</strong>：用于表示一串字符</p><p><strong>两种风格</strong></p><ol><li><p><strong>C风格字符串</strong>： <code>char 变量名[] = &quot;字符串值&quot;</code></p><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">char</span> str1[] = <span class="hljs-string">&quot;hello world&quot;</span>;<br>cout &lt;&lt; str1 &lt;&lt; endl;<br>    <br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><blockquote><p>注意：C风格的字符串要用双引号括起来</p></blockquote><ol><li><p><strong>C++风格字符串</strong>：  <code>string  变量名 = &quot;字符串值&quot;</code></p><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>string str = <span class="hljs-string">&quot;hello world&quot;</span>;<br>cout &lt;&lt; str &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><blockquote><p>注意：C++风格字符串，需要加入头文件==#include&lt;string&gt;==</p></blockquote><h3 id="2-7-布尔类型-bool">2.7 布尔类型 bool</h3><p>**作用：**布尔数据类型代表真或假的值</p><p>bool类型只有两个值：</p><ul><li>true  — 真（本质是1）</li><li>false — 假（本质是0）</li></ul><p><strong>bool类型占==1个字节==大小</strong></p><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">bool</span> flag = <span class="hljs-literal">true</span>;<br>cout &lt;&lt; flag &lt;&lt; endl; <span class="hljs-comment">// 1</span><br><br>flag = <span class="hljs-literal">false</span>;<br>cout &lt;&lt; flag &lt;&lt; endl; <span class="hljs-comment">// 0</span><br><br>cout &lt;&lt; <span class="hljs-string">&quot;size of bool = &quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">bool</span>) &lt;&lt; endl; <span class="hljs-comment">//1</span><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-8-数据的输入">2.8 数据的输入</h3><p><strong>作用：用于从键盘获取数据</strong></p><p>**关键字：**cin</p><p><strong>语法：</strong> <code>cin &gt;&gt; 变量 </code></p><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><br><span class="hljs-comment">//整型输入</span><br><span class="hljs-type">int</span> a = <span class="hljs-number">0</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;请输入整型变量：&quot;</span> &lt;&lt; endl;<br>cin &gt;&gt; a;<br>cout &lt;&lt; a &lt;&lt; endl;<br><br><span class="hljs-comment">//浮点型输入</span><br><span class="hljs-type">double</span> d = <span class="hljs-number">0</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;请输入浮点型变量：&quot;</span> &lt;&lt; endl;<br>cin &gt;&gt; d;<br>cout &lt;&lt; d &lt;&lt; endl;<br><br><span class="hljs-comment">//字符型输入</span><br><span class="hljs-type">char</span> ch = <span class="hljs-number">0</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;请输入字符型变量：&quot;</span> &lt;&lt; endl;<br>cin &gt;&gt; ch;<br>cout &lt;&lt; ch &lt;&lt; endl;<br><br><span class="hljs-comment">//字符串型输入</span><br>string str;<br>cout &lt;&lt; <span class="hljs-string">&quot;请输入字符串型变量：&quot;</span> &lt;&lt; endl;<br>cin &gt;&gt; str;<br>cout &lt;&lt; str &lt;&lt; endl;<br><br><span class="hljs-comment">//布尔类型输入</span><br><span class="hljs-type">bool</span> flag = <span class="hljs-literal">true</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;请输入布尔型变量：&quot;</span> &lt;&lt; endl;<br>cin &gt;&gt; flag;<br>cout &lt;&lt; flag &lt;&lt; endl;<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> EXIT_SUCCESS;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-运算符">3 运算符</h2><p>**作用：**用于执行代码的运算</p><p>本章我们主要讲解以下几类运算符：</p><table><thead><tr><th><strong>运算符类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>算术运算符</td><td>用于处理四则运算</td></tr><tr><td>赋值运算符</td><td>用于将表达式的值赋给变量</td></tr><tr><td>比较运算符</td><td>用于表达式的比较，并返回一个真值或假值</td></tr><tr><td>逻辑运算符</td><td>用于根据表达式的值返回真值或假值</td></tr></tbody></table><h3 id="3-1-算术运算符">3.1 算术运算符</h3><p><strong>作用</strong>：用于处理四则运算</p><p>算术运算符包括以下符号：</p><table><thead><tr><th><strong>运算符</strong></th><th><strong>术语</strong></th><th><strong>示例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>+</td><td>正号</td><td>+3</td><td>3</td></tr><tr><td>-</td><td>负号</td><td>-3</td><td>-3</td></tr><tr><td>+</td><td>加</td><td>10 + 5</td><td>15</td></tr><tr><td>-</td><td>减</td><td>10 - 5</td><td>5</td></tr><tr><td>*</td><td>乘</td><td>10 * 5</td><td>50</td></tr><tr><td>/</td><td>除</td><td>10 / 5</td><td>2</td></tr><tr><td>%</td><td>取模(取余)</td><td>10 % 3</td><td>1</td></tr><tr><td>++</td><td>前置递增</td><td>a=2; b=++a;</td><td>a=3; b=3;</td></tr><tr><td>++</td><td>后置递增</td><td>a=2; b=a++;</td><td>a=3; b=2;</td></tr><tr><td>–</td><td>前置递减</td><td>a=2; b=–a;</td><td>a=1; b=1;</td></tr><tr><td>–</td><td>后置递减</td><td>a=2; b=a–;</td><td>a=1; b=2;</td></tr></tbody></table><p><strong>示例1：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//加减乘除</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> a1 = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b1 = <span class="hljs-number">3</span>;<br><br>cout &lt;&lt; a1 + b1 &lt;&lt; endl;<br>cout &lt;&lt; a1 - b1 &lt;&lt; endl;<br>cout &lt;&lt; a1 * b1 &lt;&lt; endl;<br>cout &lt;&lt; a1 / b1 &lt;&lt; endl;  <span class="hljs-comment">//两个整数相除结果依然是整数</span><br><br><span class="hljs-type">int</span> a2 = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b2 = <span class="hljs-number">20</span>;<br>cout &lt;&lt; a2 / b2 &lt;&lt; endl; <br><br><span class="hljs-type">int</span> a3 = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b3 = <span class="hljs-number">0</span>;<br><span class="hljs-comment">//cout &lt;&lt; a3 / b3 &lt;&lt; endl; //报错，除数不可以为0</span><br><br><br><span class="hljs-comment">//两个小数可以相除</span><br><span class="hljs-type">double</span> d1 = <span class="hljs-number">0.5</span>;<br><span class="hljs-type">double</span> d2 = <span class="hljs-number">0.25</span>;<br>cout &lt;&lt; d1 / d2 &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结：在除法运算中，除数不能为0</p></blockquote><p><strong>示例2：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//取模</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> a1 = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b1 = <span class="hljs-number">3</span>;<br><br>cout &lt;&lt; <span class="hljs-number">10</span> % <span class="hljs-number">3</span> &lt;&lt; endl;<br><br><span class="hljs-type">int</span> a2 = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b2 = <span class="hljs-number">20</span>;<br><br>cout &lt;&lt; a2 % b2 &lt;&lt; endl;<br><br><span class="hljs-type">int</span> a3 = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b3 = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">//cout &lt;&lt; a3 % b3 &lt;&lt; endl; //取模运算时，除数也不能为0</span><br><br><span class="hljs-comment">//两个小数不可以取模</span><br><span class="hljs-type">double</span> d1 = <span class="hljs-number">3.14</span>;<br><span class="hljs-type">double</span> d2 = <span class="hljs-number">1.1</span>;<br><br><span class="hljs-comment">//cout &lt;&lt; d1 % d2 &lt;&lt; endl;</span><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>总结：只有整型变量可以进行取模运算</p></blockquote><p><strong>示例3：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//递增</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//后置递增</span><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br>a++; <span class="hljs-comment">//等价于a = a + 1</span><br>cout &lt;&lt; a &lt;&lt; endl; <span class="hljs-comment">// 11</span><br><br><span class="hljs-comment">//前置递增</span><br><span class="hljs-type">int</span> b = <span class="hljs-number">10</span>;<br>++b;<br>cout &lt;&lt; b &lt;&lt; endl; <span class="hljs-comment">// 11</span><br><br><span class="hljs-comment">//区别</span><br><span class="hljs-comment">//前置递增先对变量进行++，再计算表达式</span><br><span class="hljs-type">int</span> a2 = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b2 = ++a2 * <span class="hljs-number">10</span>;<br>cout &lt;&lt; b2 &lt;&lt; endl;<br><br><span class="hljs-comment">//后置递增先计算表达式，后对变量进行++</span><br><span class="hljs-type">int</span> a3 = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b3 = a3++ * <span class="hljs-number">10</span>;<br>cout &lt;&lt; b3 &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>总结：前置递增先对变量进行++，再计算表达式，后置递增相反</p></blockquote><h3 id="3-2-赋值运算符">3.2 赋值运算符</h3><p>**作用：**用于将表达式的值赋给变量</p><p>赋值运算符包括以下几个符号：</p><table><thead><tr><th><strong>运算符</strong></th><th><strong>术语</strong></th><th><strong>示例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>=</td><td>赋值</td><td>a=2; b=3;</td><td>a=2; b=3;</td></tr><tr><td>+=</td><td>加等于</td><td>a=0; a+=2;</td><td>a=2;</td></tr><tr><td>-=</td><td>减等于</td><td>a=5; a-=3;</td><td>a=2;</td></tr><tr><td>*=</td><td>乘等于</td><td>a=2; a*=2;</td><td>a=4;</td></tr><tr><td>/=</td><td>除等于</td><td>a=4; a/=2;</td><td>a=2;</td></tr><tr><td>%=</td><td>模等于</td><td>a=3; a%2;</td><td>a=1;</td></tr></tbody></table><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//赋值运算符</span><br><br><span class="hljs-comment">// =</span><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br>a = <span class="hljs-number">100</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br><br><span class="hljs-comment">// +=</span><br>a = <span class="hljs-number">10</span>;<br>a += <span class="hljs-number">2</span>; <span class="hljs-comment">// a = a + 2;</span><br>cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br><br><span class="hljs-comment">// -=</span><br>a = <span class="hljs-number">10</span>;<br>a -= <span class="hljs-number">2</span>; <span class="hljs-comment">// a = a - 2</span><br>cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br><br><span class="hljs-comment">// *=</span><br>a = <span class="hljs-number">10</span>;<br>a *= <span class="hljs-number">2</span>; <span class="hljs-comment">// a = a * 2</span><br>cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br><br><span class="hljs-comment">// /=</span><br>a = <span class="hljs-number">10</span>;<br>a /= <span class="hljs-number">2</span>;  <span class="hljs-comment">// a = a / 2;</span><br>cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br><br><span class="hljs-comment">// %=</span><br>a = <span class="hljs-number">10</span>;<br>a %= <span class="hljs-number">2</span>;  <span class="hljs-comment">// a = a % 2;</span><br>cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-3-比较运算符">3.3 比较运算符</h3><p>**作用：**用于表达式的比较，并返回一个真值或假值</p><p>比较运算符有以下符号：</p><table><thead><tr><th><strong>运算符</strong></th><th><strong>术语</strong></th><th><strong>示例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>==</td><td>相等于</td><td>4 == 3</td><td>0</td></tr><tr><td>!=</td><td>不等于</td><td>4 != 3</td><td>1</td></tr><tr><td>&lt;</td><td>小于</td><td>4 &lt; 3</td><td>0</td></tr><tr><td>&gt;</td><td>大于</td><td>4 &gt; 3</td><td>1</td></tr><tr><td>&lt;=</td><td>小于等于</td><td>4 &lt;= 3</td><td>0</td></tr><tr><td>&gt;=</td><td>大于等于</td><td>4 &gt;= 1</td><td>1</td></tr></tbody></table><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">20</span>;<br><br>cout &lt;&lt; (a == b) &lt;&lt; endl; <span class="hljs-comment">// 0 </span><br><br>cout &lt;&lt; (a != b) &lt;&lt; endl; <span class="hljs-comment">// 1</span><br><br>cout &lt;&lt; (a &gt; b) &lt;&lt; endl; <span class="hljs-comment">// 0</span><br><br>cout &lt;&lt; (a &lt; b) &lt;&lt; endl; <span class="hljs-comment">// 1</span><br><br>cout &lt;&lt; (a &gt;= b) &lt;&lt; endl; <span class="hljs-comment">// 0</span><br><br>cout &lt;&lt; (a &lt;= b) &lt;&lt; endl; <span class="hljs-comment">// 1</span><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意：C和C++ 语言的比较运算中， ==“真”用数字“1”来表示， “假”用数字“0”来表示。==</p></blockquote><h3 id="3-4-逻辑运算符">3.4 逻辑运算符</h3><p>**作用：**用于根据表达式的值返回真值或假值</p><p>逻辑运算符有以下符号：</p><table><thead><tr><th><strong>运算符</strong></th><th><strong>术语</strong></th><th><strong>示例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>!</td><td>非</td><td>!a</td><td>如果a为假，则!a为真；  如果a为真，则!a为假。</td></tr><tr><td>&amp;&amp;</td><td>与</td><td>a &amp;&amp; b</td><td>如果a和b都为真，则结果为真，否则为假。</td></tr><tr><td>||</td><td>或</td><td>a || b</td><td>如果a和b有一个为真，则结果为真，二者都为假时，结果为假。</td></tr></tbody></table><p>**示例1：**逻辑非</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//逻辑运算符  --- 非</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><br>cout &lt;&lt; !a &lt;&lt; endl; <span class="hljs-comment">// 0</span><br><br>cout &lt;&lt; !!a &lt;&lt; endl; <span class="hljs-comment">// 1</span><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结： 真变假，假变真</p></blockquote><p>**示例2：**逻辑与</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//逻辑运算符  --- 与</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">10</span>;<br><br>cout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;<span class="hljs-comment">// 1</span><br><br>a = <span class="hljs-number">10</span>;<br>b = <span class="hljs-number">0</span>;<br><br>cout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;<span class="hljs-comment">// 0 </span><br><br>a = <span class="hljs-number">0</span>;<br>b = <span class="hljs-number">0</span>;<br><br>cout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;<span class="hljs-comment">// 0</span><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>总结：逻辑==与==运算符总结： ==同真为真，其余为假==</p></blockquote><p>**示例3：**逻辑或</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//逻辑运算符  --- 或</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">10</span>;<br><br>cout &lt;&lt; (a || b) &lt;&lt; endl;<span class="hljs-comment">// 1</span><br><br>a = <span class="hljs-number">10</span>;<br>b = <span class="hljs-number">0</span>;<br><br>cout &lt;&lt; (a || b) &lt;&lt; endl;<span class="hljs-comment">// 1 </span><br><br>a = <span class="hljs-number">0</span>;<br>b = <span class="hljs-number">0</span>;<br><br>cout &lt;&lt; (a || b) &lt;&lt; endl;<span class="hljs-comment">// 0</span><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>逻辑==或==运算符总结： ==同假为假，其余为真==</p></blockquote><h2 id="4-程序流程结构">4 程序流程结构</h2><p>C/C++支持最基本的三种程序运行结构：==顺序结构、选择结构、循环结构==</p><ul><li>顺序结构：程序按顺序执行，不发生跳转</li><li>选择结构：依据条件是否满足，有选择的执行相应功能</li><li>循环结构：依据条件是否满足，循环多次执行某段代码</li></ul><h3 id="4-1-选择结构">4.1 选择结构</h3><h4 id="4-1-1-if语句">4.1.1 if语句</h4><p>**作用：**执行满足条件的语句</p><p>if语句的三种形式</p><ul><li><p>单行格式if语句</p></li><li><p>多行格式if语句</p></li><li><p>多条件的if语句</p></li></ul><ol><li><p>单行格式if语句：<code>if(条件)&#123; 条件满足执行的语句 &#125;</code></p><p><img src="/assets/clip_image002.png" alt="img"></p><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//选择结构-单行if语句</span><br><span class="hljs-comment">//输入一个分数，如果分数大于600分，视为考上一本大学，并在屏幕上打印</span><br><br><span class="hljs-type">int</span> score = <span class="hljs-number">0</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;请输入一个分数：&quot;</span> &lt;&lt; endl;<br>cin &gt;&gt; score;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;您输入的分数为： &quot;</span> &lt;&lt; score &lt;&lt; endl;<br><br><span class="hljs-comment">//if语句</span><br><span class="hljs-comment">//注意事项，在if判断语句后面，不要加分号</span><br><span class="hljs-keyword">if</span> (score &gt; <span class="hljs-number">600</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;我考上了一本大学！！！&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><blockquote><p>注意：if条件表达式后不要加分号</p></blockquote><ol start="2"><li>多行格式if语句：<code>if(条件)&#123; 条件满足执行的语句 &#125;else&#123; 条件不满足执行的语句 &#125;;</code></li></ol><p><img src="/assets/clip_image002-1541662519170.png" alt="img"></p><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> score = <span class="hljs-number">0</span>;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;请输入考试分数：&quot;</span> &lt;&lt; endl;<br><br>cin &gt;&gt; score;<br><br><span class="hljs-keyword">if</span> (score &gt; <span class="hljs-number">600</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;我考上了一本大学&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;我未考上一本大学&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>多条件的if语句：<code>if(条件1)&#123; 条件1满足执行的语句 &#125;else if(条件2)&#123;条件2满足执行的语句&#125;... else&#123; 都不满足执行的语句&#125;</code></li></ol><p><img src="/assets/clip_image002-1541662566808.png" alt="img"></p><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> score = <span class="hljs-number">0</span>;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;请输入考试分数：&quot;</span> &lt;&lt; endl;<br><br>cin &gt;&gt; score;<br><br><span class="hljs-keyword">if</span> (score &gt; <span class="hljs-number">600</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;我考上了一本大学&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt; <span class="hljs-number">500</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;我考上了二本大学&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt; <span class="hljs-number">400</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;我考上了三本大学&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;我未考上本科&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>嵌套if语句</strong>：在if语句中，可以嵌套使用if语句，达到更精确的条件判断</p><p>案例需求：</p><ul><li>提示用户输入一个高考考试分数，根据分数做如下判断</li><li>分数如果大于600分视为考上一本，大于500分考上二本，大于400考上三本，其余视为未考上本科；</li><li>在一本分数中，如果大于700分，考入北大，大于650分，考入清华，大于600考入人大。</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> score = <span class="hljs-number">0</span>;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;请输入考试分数：&quot;</span> &lt;&lt; endl;<br><br>cin &gt;&gt; score;<br><br><span class="hljs-keyword">if</span> (score &gt; <span class="hljs-number">600</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;我考上了一本大学&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">if</span> (score &gt; <span class="hljs-number">700</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;我考上了北大&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt; <span class="hljs-number">650</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;我考上了清华&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;我考上了人大&quot;</span> &lt;&lt; endl;<br>&#125;<br><br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt; <span class="hljs-number">500</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;我考上了二本大学&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt; <span class="hljs-number">400</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;我考上了三本大学&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;我未考上本科&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习案例：</strong> 三只小猪称体重</p><p>有三只小猪ABC，请分别输入三只小猪的体重，并且判断哪只小猪最重？<img src="/assets/%E4%B8%89%E5%8F%AA%E5%B0%8F%E7%8C%AA.jpg" alt="三只小猪"></p><h4 id="4-1-2-三目运算符">4.1.2 三目运算符</h4><p><strong>作用：</strong> 通过三目运算符实现简单的判断</p><p><strong>语法：</strong><code>表达式1 ? 表达式2 ：表达式3</code></p><p><strong>解释：</strong></p><p>如果表达式1的值为真，执行表达式2，并返回表达式2的结果；</p><p>如果表达式1的值为假，执行表达式3，并返回表达式3的结果。</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">20</span>;<br><span class="hljs-type">int</span> c = <span class="hljs-number">0</span>;<br><br>c = a &gt; b ? a : b;<br>cout &lt;&lt; <span class="hljs-string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; endl;<br><br><span class="hljs-comment">//C++中三目运算符返回的是变量,可以继续赋值</span><br><br>(a &gt; b ? a : b) = <span class="hljs-number">100</span>;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结：和if语句比较，三目运算符优点是短小整洁，缺点是如果用嵌套，结构不清晰</p></blockquote><h4 id="4-1-3-switch语句">4.1.3 switch语句</h4><p>**作用：**执行多条件分支语句</p><p><strong>语法：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">switch</span>(表达式)<br><br>&#123;<br><br><span class="hljs-keyword">case</span> 结果<span class="hljs-number">1</span>：执行语句;<span class="hljs-keyword">break</span>;<br><br><span class="hljs-keyword">case</span> 结果<span class="hljs-number">2</span>：执行语句;<span class="hljs-keyword">break</span>;<br><br>...<br><br><span class="hljs-keyword">default</span>:执行语句;<span class="hljs-keyword">break</span>;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//请给电影评分 </span><br><span class="hljs-comment">//10 ~ 9   经典   </span><br><span class="hljs-comment">// 8 ~ 7   非常好</span><br><span class="hljs-comment">// 6 ~ 5   一般</span><br><span class="hljs-comment">// 5分以下 烂片</span><br><br><span class="hljs-type">int</span> score = <span class="hljs-number">0</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;请给电影打分&quot;</span> &lt;&lt; endl;<br>cin &gt;&gt; score;<br><br><span class="hljs-keyword">switch</span> (score)<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:<br>cout &lt;&lt; <span class="hljs-string">&quot;经典&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>cout &lt;&lt; <span class="hljs-string">&quot;非常好&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>cout &lt;&lt; <span class="hljs-string">&quot;一般&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>cout &lt;&lt; <span class="hljs-string">&quot;烂片&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意1：switch语句中表达式类型只能是整型或者字符型</p></blockquote><blockquote><p>注意2：case里如果没有break，那么程序会一直向下执行</p></blockquote><blockquote><p>总结：与if语句比，对于多条件判断时，switch的结构清晰，执行效率高，缺点是switch不可以判断区间</p></blockquote><h3 id="4-2-循环结构">4.2 循环结构</h3><h4 id="4-2-1-while循环语句">4.2.1 while循环语句</h4><p>**作用：**满足循环条件，执行循环语句</p><p><strong>语法：</strong><code> while(循环条件)&#123; 循环语句 &#125;</code></p><p><strong>解释：</strong>==只要循环条件的结果为真，就执行循环语句==</p><p><img src="/assets/clip_image002-1541668640382.png" alt="img"></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> num = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (num &lt; <span class="hljs-number">10</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;num = &quot;</span> &lt;&lt; num &lt;&lt; endl;<br>num++;<br>&#125;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意：在执行循环语句时候，程序必须提供跳出循环的出口，否则出现死循环</p></blockquote><p><strong>while循环练习案例：</strong>==猜数字==</p><p>**案例描述：**系统随机生成一个1到100之间的数字，玩家进行猜测，如果猜错，提示玩家数字过大或过小，如果猜对恭喜玩家胜利，并且退出游戏。</p><p><img src="/assets/%E7%8C%9C%E6%95%B0%E5%AD%97.jpg" alt="猜数字"></p><h4 id="4-2-2-do…while循环语句">4.2.2 do…while循环语句</h4><p><strong>作用：</strong> 满足循环条件，执行循环语句</p><p><strong>语法：</strong> <code>do&#123; 循环语句 &#125; while(循环条件);</code></p><p>**注意：**与while的区别在于==do…while会先执行一次循环语句==，再判断循环条件</p><p><img src="/assets/clip_image002-1541671163478.png" alt="img"></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> num = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">do</span><br>&#123;<br>cout &lt;&lt; num &lt;&lt; endl;<br>num++;<br><br>&#125; <span class="hljs-keyword">while</span> (num &lt; <span class="hljs-number">10</span>);<br><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结：与while循环区别在于，do…while先执行一次循环语句，再判断循环条件</p></blockquote><p><strong>练习案例：水仙花数</strong></p><p>**案例描述：**水仙花数是指一个 3 位数，它的每个位上的数字的 3次幂之和等于它本身</p><p>例如：1^3 + 5^3+ 3^3 = 153</p><p>请利用do…while语句，求出所有3位数中的水仙花数</p><h4 id="4-2-3-for循环语句">4.2.3 for循环语句</h4><p><strong>作用：</strong> 满足循环条件，执行循环语句</p><p><strong>语法：</strong><code> for(起始表达式;条件表达式;末尾循环体) &#123; 循环语句; &#125;</code></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br>cout &lt;&lt; i &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>详解：</strong></p><p><img src="/assets/1541673704101.png" alt="1541673704101"></p><blockquote><p>注意：for循环中的表达式，要用分号进行分隔</p></blockquote><blockquote><p>总结：while , do…while, for都是开发中常用的循环语句，for循环结构比较清晰，比较常用</p></blockquote><p><strong>练习案例：敲桌子</strong></p><p>案例描述：从1开始数到数字100， 如果数字个位含有7，或者数字十位含有7，或者该数字是7的倍数，我们打印敲桌子，其余数字直接打印输出。</p><p><img src="/assets/timg.gif" alt="timg"></p><h4 id="4-2-4-嵌套循环">4.2.4 嵌套循环</h4><p><strong>作用：</strong> 在循环体中再嵌套一层循环，解决一些实际问题</p><p>例如我们想在屏幕中打印如下图片，就需要利用嵌套循环</p><p><img src="/assets/1541676003486.png" alt="1541676003486"></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//外层循环执行1次，内层循环执行1轮</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">10</span>; j++)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;*&quot;</span> &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>**练习案例：**乘法口诀表</p><p>案例描述：利用嵌套循环，实现九九乘法表</p><p><img src="/assets/0006018857256120_b.jpg" alt="0006018857256120_b"></p><h3 id="4-3-跳转语句">4.3 跳转语句</h3><h4 id="4-3-1-break语句">4.3.1 break语句</h4><p><strong>作用:</strong> 用于跳出==选择结构==或者==循环结构==</p><p>break使用的时机：</p><ul><li>出现在switch条件语句中，作用是终止case并跳出switch</li><li>出现在循环语句中，作用是跳出当前的循环语句</li><li>出现在嵌套循环中，跳出最近的内层循环语句</li></ul><p><strong>示例1：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//1、在switch 语句中使用break</span><br>cout &lt;&lt; <span class="hljs-string">&quot;请选择您挑战副本的难度：&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;1、普通&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;2、中等&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;3、困难&quot;</span> &lt;&lt; endl;<br><br><span class="hljs-type">int</span> num = <span class="hljs-number">0</span>;<br><br>cin &gt;&gt; num;<br><br><span class="hljs-keyword">switch</span> (num)<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>cout &lt;&lt; <span class="hljs-string">&quot;您选择的是普通难度&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>cout &lt;&lt; <span class="hljs-string">&quot;您选择的是中等难度&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>cout &lt;&lt; <span class="hljs-string">&quot;您选择的是困难难度&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>示例2：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//2、在循环语句中用break</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (i == <span class="hljs-number">5</span>)<br>&#123;<br><span class="hljs-keyword">break</span>; <span class="hljs-comment">//跳出循环语句</span><br>&#125;<br>cout &lt;&lt; i &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>示例3：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//在嵌套循环语句中使用break，退出内层循环</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">10</span>; j++)<br>&#123;<br><span class="hljs-keyword">if</span> (j == <span class="hljs-number">5</span>)<br>&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>cout &lt;&lt; <span class="hljs-string">&quot;*&quot;</span> &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-3-2-continue语句">4.3.2 continue语句</h4><p>**作用：**在==循环语句==中，跳过本次循环中余下尚未执行的语句，继续执行下一次循环</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br>cout &lt;&lt; i &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意：continue并没有使整个循环终止，而break会跳出循环</p></blockquote><h4 id="4-3-3-goto语句">4.3.3 goto语句</h4><p>**作用：**可以无条件跳转语句</p><p><strong>语法：</strong> <code>goto 标记;</code></p><p>**解释：**如果标记的名称存在，执行到goto语句时，会跳转到标记的位置</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;1&quot;</span> &lt;&lt; endl;<br><br><span class="hljs-keyword">goto</span> FLAG;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;2&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;3&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;4&quot;</span> &lt;&lt; endl;<br><br>FLAG:<br><br>cout &lt;&lt; <span class="hljs-string">&quot;5&quot;</span> &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意：在程序中不建议使用goto语句，以免造成程序流程混乱</p></blockquote><h2 id="5-数组">5 数组</h2><h3 id="5-1-概述">5.1 概述</h3><p>所谓数组，就是一个集合，里面存放了相同类型的数据元素</p><p>**特点1：**数组中的每个==数据元素都是相同的数据类型==</p><p>**特点2：**数组是由==连续的内存==位置组成的</p><p><img src="/assets/1541748375356.png" alt="1541748375356"></p><h3 id="5-2-一维数组">5.2 一维数组</h3><h4 id="5-2-1-一维数组定义方式">5.2.1 一维数组定义方式</h4><p>一维数组定义的三种方式：</p><ol><li><code>数据类型  数组名[ 数组长度 ];</code></li><li><code>数据类型  数组名[ 数组长度 ] = &#123; 值1，值2 ...&#125;;</code></li><li><code>数据类型  数组名[ ] = &#123; 值1，值2 ...&#125;;</code></li></ol><p>示例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//定义方式1</span><br><span class="hljs-comment">//数据类型 数组名[元素个数];</span><br><span class="hljs-type">int</span> score[<span class="hljs-number">10</span>];<br><br><span class="hljs-comment">//利用下标赋值</span><br>score[<span class="hljs-number">0</span>] = <span class="hljs-number">100</span>;<br>score[<span class="hljs-number">1</span>] = <span class="hljs-number">99</span>;<br>score[<span class="hljs-number">2</span>] = <span class="hljs-number">85</span>;<br><br><span class="hljs-comment">//利用下标输出</span><br>cout &lt;&lt; score[<span class="hljs-number">0</span>] &lt;&lt; endl;<br>cout &lt;&lt; score[<span class="hljs-number">1</span>] &lt;&lt; endl;<br>cout &lt;&lt; score[<span class="hljs-number">2</span>] &lt;&lt; endl;<br><br><br><span class="hljs-comment">//第二种定义方式</span><br><span class="hljs-comment">//数据类型 数组名[元素个数] =  &#123;值1，值2 ，值3 ...&#125;;</span><br><span class="hljs-comment">//如果&#123;&#125;内不足10个数据，剩余数据用0补全</span><br><span class="hljs-type">int</span> score2[<span class="hljs-number">10</span>] = &#123; <span class="hljs-number">100</span>, <span class="hljs-number">90</span>,<span class="hljs-number">80</span>,<span class="hljs-number">70</span>,<span class="hljs-number">60</span>,<span class="hljs-number">50</span>,<span class="hljs-number">40</span>,<span class="hljs-number">30</span>,<span class="hljs-number">20</span>,<span class="hljs-number">10</span> &#125;;<br><br><span class="hljs-comment">//逐个输出</span><br><span class="hljs-comment">//cout &lt;&lt; score2[0] &lt;&lt; endl;</span><br><span class="hljs-comment">//cout &lt;&lt; score2[1] &lt;&lt; endl;</span><br><br><span class="hljs-comment">//一个一个输出太麻烦，因此可以利用循环进行输出</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br>cout &lt;&lt; score2[i] &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">//定义方式3</span><br><span class="hljs-comment">//数据类型 数组名[] =  &#123;值1，值2 ，值3 ...&#125;;</span><br><span class="hljs-type">int</span> score3[] = &#123; <span class="hljs-number">100</span>,<span class="hljs-number">90</span>,<span class="hljs-number">80</span>,<span class="hljs-number">70</span>,<span class="hljs-number">60</span>,<span class="hljs-number">50</span>,<span class="hljs-number">40</span>,<span class="hljs-number">30</span>,<span class="hljs-number">20</span>,<span class="hljs-number">10</span> &#125;;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br>cout &lt;&lt; score3[i] &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结1：数组名的命名规范与变量名命名规范一致，不要和变量重名</p></blockquote><blockquote><p>总结2：数组中下标是从0开始索引</p></blockquote><h4 id="5-2-2-一维数组数组名">5.2.2 一维数组数组名</h4><p>一维数组名称的<strong>用途</strong>：</p><ol><li>可以统计整个数组在内存中的长度</li><li>可以获取数组在内存中的首地址</li></ol><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//数组名用途</span><br><span class="hljs-comment">//1、可以获取整个数组占用内存空间大小</span><br><span class="hljs-type">int</span> arr[<span class="hljs-number">10</span>] = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span> &#125;;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;整个数组所占内存空间为： &quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(arr) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;每个元素所占内存空间为： &quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(arr[<span class="hljs-number">0</span>]) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;数组的元素个数为： &quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(arr) / <span class="hljs-built_in">sizeof</span>(arr[<span class="hljs-number">0</span>]) &lt;&lt; endl;<br><br><span class="hljs-comment">//2、可以通过数组名获取到数组首地址</span><br>cout &lt;&lt; <span class="hljs-string">&quot;数组首地址为： &quot;</span> &lt;&lt; (<span class="hljs-type">int</span>)arr &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;数组中第一个元素地址为： &quot;</span> &lt;&lt; (<span class="hljs-type">int</span>)&amp;arr[<span class="hljs-number">0</span>] &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;数组中第二个元素地址为： &quot;</span> &lt;&lt; (<span class="hljs-type">int</span>)&amp;arr[<span class="hljs-number">1</span>] &lt;&lt; endl;<br><br><span class="hljs-comment">//arr = 100; 错误，数组名是常量，因此不可以赋值</span><br><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意：数组名是常量，不可以赋值</p></blockquote><blockquote><p>总结1：直接打印数组名，可以查看数组所占内存的首地址</p></blockquote><blockquote><p>总结2：对数组名进行sizeof，可以获取整个数组占内存空间的大小</p></blockquote><p><strong>练习案例1</strong>：五只小猪称体重</p><p><strong>案例描述：</strong></p><p>在一个数组中记录了五只小猪的体重，如：int arr[5] = {300,350,200,400,250};</p><p>找出并打印最重的小猪体重。</p><p>**练习案例2：**数组元素逆置</p><p>**案例描述：**请声明一个5个元素的数组，并且将元素逆置.</p><p>(如原数组元素为：1,3,2,5,4;逆置后输出结果为:4,5,2,3,1);</p><h4 id="5-2-3-冒泡排序">5.2.3 冒泡排序</h4><p><strong>作用：</strong> 最常用的排序算法，对数组内元素进行排序</p><ol><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li><li>对每一对相邻元素做同样的工作，执行完毕后，找到第一个最大值。</li><li>重复以上的步骤，每次比较次数-1，直到不需要比较</li></ol><p><img src="/assets/1541905327273.png" alt="1541905327273"></p><p><strong>示例：</strong> 将数组 { 4,2,8,0,5,7,1,3,9 } 进行升序排序</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> arr[<span class="hljs-number">9</span>] = &#123; <span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">8</span>,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">9</span> &#125;;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span> - <span class="hljs-number">1</span>; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">9</span> - <span class="hljs-number">1</span> - i; j++)<br>&#123;<br><span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>])<br>&#123;<br><span class="hljs-type">int</span> temp = arr[j];<br>arr[j] = arr[j + <span class="hljs-number">1</span>];<br>arr[j + <span class="hljs-number">1</span>] = temp;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)<br>&#123;<br>cout &lt;&lt; arr[i] &lt;&lt; endl;<br>&#125;<br>    <br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-3-二维数组">5.3 二维数组</h3><p>二维数组就是在一维数组上，多加一个维度。</p><p><img src="/assets/1541905559138.png" alt="1541905559138"></p><h4 id="5-3-1-二维数组定义方式">5.3.1 二维数组定义方式</h4><p>二维数组定义的四种方式：</p><ol><li><code>数据类型  数组名[ 行数 ][ 列数 ];</code></li><li><code>数据类型  数组名[ 行数 ][ 列数 ] = &#123; &#123;数据1，数据2 &#125; ，&#123;数据3，数据4 &#125; &#125;;</code></li><li><code>数据类型  数组名[ 行数 ][ 列数 ] = &#123; 数据1，数据2，数据3，数据4&#125;;</code></li><li><code> 数据类型  数组名[  ][ 列数 ] = &#123; 数据1，数据2，数据3，数据4&#125;;</code></li></ol><blockquote><p>建议：以上4种定义方式，利用==第二种更加直观，提高代码的可读性==</p></blockquote><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//方式1  </span><br><span class="hljs-comment">//数组类型 数组名 [行数][列数]</span><br><span class="hljs-type">int</span> arr[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>];<br>arr[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>arr[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">2</span>;<br>arr[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">3</span>;<br>arr[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">4</span>;<br>arr[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">5</span>;<br>arr[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">6</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; j++)<br>&#123;<br>cout &lt;&lt; arr[i][j] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">//方式2 </span><br><span class="hljs-comment">//数据类型 数组名[行数][列数] = &#123; &#123;数据1，数据2 &#125; ，&#123;数据3，数据4 &#125; &#125;;</span><br><span class="hljs-type">int</span> arr2[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>] =<br>&#123;<br>&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,<br>&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;<br>&#125;;<br><br><span class="hljs-comment">//方式3</span><br><span class="hljs-comment">//数据类型 数组名[行数][列数] = &#123; 数据1，数据2 ,数据3，数据4  &#125;;</span><br><span class="hljs-type">int</span> arr3[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>] = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span> &#125;; <br><br><span class="hljs-comment">//方式4 </span><br><span class="hljs-comment">//数据类型 数组名[][列数] = &#123; 数据1，数据2 ,数据3，数据4  &#125;;</span><br><span class="hljs-type">int</span> arr4[][<span class="hljs-number">3</span>] = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span> &#125;;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结：在定义二维数组时，如果初始化了数据，可以省略行数</p></blockquote><h4 id="5-3-2-二维数组数组名">5.3.2 二维数组数组名</h4><ul><li>查看二维数组所占内存空间</li><li>获取二维数组首地址</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//二维数组数组名</span><br><span class="hljs-type">int</span> arr[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>] =<br>&#123;<br>&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,<br>&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;<br>&#125;;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;二维数组大小： &quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(arr) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;二维数组一行大小： &quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(arr[<span class="hljs-number">0</span>]) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;二维数组元素大小： &quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(arr[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]) &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;二维数组行数： &quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(arr) / <span class="hljs-built_in">sizeof</span>(arr[<span class="hljs-number">0</span>]) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;二维数组列数： &quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(arr[<span class="hljs-number">0</span>]) / <span class="hljs-built_in">sizeof</span>(arr[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]) &lt;&lt; endl;<br><br><span class="hljs-comment">//地址</span><br>cout &lt;&lt; <span class="hljs-string">&quot;二维数组首地址：&quot;</span> &lt;&lt; arr &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;二维数组第一行地址：&quot;</span> &lt;&lt; arr[<span class="hljs-number">0</span>] &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;二维数组第二行地址：&quot;</span> &lt;&lt; arr[<span class="hljs-number">1</span>] &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;二维数组第一个元素地址：&quot;</span> &lt;&lt; &amp;arr[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;二维数组第二个元素地址：&quot;</span> &lt;&lt; &amp;arr[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结1：二维数组名就是这个数组的首地址</p></blockquote><blockquote><p>总结2：对二维数组名进行sizeof时，可以获取整个二维数组占用的内存空间大小</p></blockquote><h4 id="5-3-3-二维数组应用案例"><strong>5.3.3 二维数组应用案例</strong></h4><p><strong>考试成绩统计：</strong></p><p>案例描述：有三名同学（张三，李四，王五），在一次考试中的成绩分别如下表，<strong>请分别输出三名同学的总成绩</strong></p><table><thead><tr><th></th><th>语文</th><th>数学</th><th>英语</th></tr></thead><tbody><tr><td>张三</td><td>100</td><td>100</td><td>100</td></tr><tr><td>李四</td><td>90</td><td>50</td><td>100</td></tr><tr><td>王五</td><td>60</td><td>70</td><td>80</td></tr></tbody></table><p><strong>参考答案：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> scores[<span class="hljs-number">3</span>][<span class="hljs-number">3</span>] =<br>&#123;<br>&#123;<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,<span class="hljs-number">100</span>&#125;,<br>&#123;<span class="hljs-number">90</span>,<span class="hljs-number">50</span>,<span class="hljs-number">100</span>&#125;,<br>&#123;<span class="hljs-number">60</span>,<span class="hljs-number">70</span>,<span class="hljs-number">80</span>&#125;,<br>&#125;;<br><br>string names[<span class="hljs-number">3</span>] = &#123; <span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-string">&quot;王五&quot;</span> &#125;;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)<br>&#123;<br><span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; j++)<br>&#123;<br>sum += scores[i][j];<br>&#125;<br>cout &lt;&lt; names[i] &lt;&lt; <span class="hljs-string">&quot;同学总成绩为： &quot;</span> &lt;&lt; sum &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-函数">6 函数</h2><h3 id="6-1-概述">6.1 概述</h3><p>**作用：**将一段经常使用的代码封装起来，减少重复代码</p><p>一个较大的程序，一般分为若干个程序块，每个模块实现特定的功能。</p><h3 id="6-2-函数的定义">6.2 函数的定义</h3><p>函数的定义一般主要有5个步骤：</p><p>1、返回值类型</p><p>2、函数名</p><p>3、参数表列</p><p>4、函数体语句</p><p>5、return 表达式</p><p><strong>语法：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++">返回值类型 函数名 （参数列表）<br>&#123;<br><br>       函数体语句<br><br>       <span class="hljs-keyword">return</span>表达式<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>返回值类型 ：一个函数可以返回一个值。在函数定义中</li><li>函数名：给函数起个名称</li><li>参数列表：使用该函数时，传入的数据</li><li>函数体语句：花括号内的代码，函数内需要执行的语句</li><li>return表达式： 和返回值类型挂钩，函数执行完后，返回相应的数据</li></ul><p>**示例：**定义一个加法函数，实现两个数相加</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//函数定义</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> num1, <span class="hljs-type">int</span> num2)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> sum = num1 + num2;<br><span class="hljs-keyword">return</span> sum;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-3-函数的调用">6.3 函数的调用</h3><p>**功能：**使用定义好的函数</p><p><strong>语法：</strong><code> 函数名（参数）</code></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//函数定义</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> num1, <span class="hljs-type">int</span> num2)</span> <span class="hljs-comment">//定义中的num1,num2称为形式参数，简称形参</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> sum = num1 + num2;<br><span class="hljs-keyword">return</span> sum;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">10</span>;<br><span class="hljs-comment">//调用add函数</span><br><span class="hljs-type">int</span> sum = <span class="hljs-built_in">add</span>(a, b);<span class="hljs-comment">//调用时的a，b称为实际参数，简称实参</span><br>cout &lt;&lt; <span class="hljs-string">&quot;sum = &quot;</span> &lt;&lt; sum &lt;&lt; endl;<br><br>a = <span class="hljs-number">100</span>;<br>b = <span class="hljs-number">100</span>;<br><br>sum = <span class="hljs-built_in">add</span>(a, b);<br>cout &lt;&lt; <span class="hljs-string">&quot;sum = &quot;</span> &lt;&lt; sum &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结：函数定义里小括号内称为形参，函数调用时传入的参数称为实参</p></blockquote><h3 id="6-4-值传递">6.4 值传递</h3><ul><li>所谓值传递，就是函数调用时实参将数值传入给形参</li><li>值传递时，==如果形参发生，并不会影响实参==</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> num1, <span class="hljs-type">int</span> num2)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;交换前：&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;num1 = &quot;</span> &lt;&lt; num1 &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;num2 = &quot;</span> &lt;&lt; num2 &lt;&lt; endl;<br><br><span class="hljs-type">int</span> temp = num1;<br>num1 = num2;<br>num2 = temp;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;交换后：&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;num1 = &quot;</span> &lt;&lt; num1 &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;num2 = &quot;</span> &lt;&lt; num2 &lt;&lt; endl;<br><br><span class="hljs-comment">//return ; 当函数声明时候，不需要返回值，可以不写return</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">20</span>;<br><br><span class="hljs-built_in">swap</span>(a, b);<br><br>cout &lt;&lt; <span class="hljs-string">&quot;mian中的 a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;mian中的 b = &quot;</span> &lt;&lt; b &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结： 值传递时，形参是修饰不了实参的</p></blockquote><h3 id="6-5-函数的常见样式"><strong>6.5 函数的常见样式</strong></h3><p>常见的函数样式有4种</p><ol><li>无参无返</li><li>有参无返</li><li>无参有返</li><li>有参有返</li></ol><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//函数常见样式</span><br><span class="hljs-comment">//1、 无参无返</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//void a = 10; //无类型不可以创建变量,原因无法分配内存</span><br>cout &lt;&lt; <span class="hljs-string">&quot;this is test01&quot;</span> &lt;&lt; endl;<br><span class="hljs-comment">//test01(); 函数调用</span><br>&#125;<br><br><span class="hljs-comment">//2、 有参无返</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;this is test02&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">//3、无参有返</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">test03</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;this is test03 &quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">10</span>;<br>&#125;<br><br><span class="hljs-comment">//4、有参有返</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">test04</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;this is test04 &quot;</span> &lt;&lt; endl;<br><span class="hljs-type">int</span> sum = a + b;<br><span class="hljs-keyword">return</span> sum;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-6-函数的声明">6.6 函数的声明</h3><p><strong>作用：</strong> 告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义。</p><ul><li>函数的<strong>声明可以多次</strong>，但是函数的<strong>定义只能有一次</strong></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//声明可以多次，定义只能一次</span><br><span class="hljs-comment">//声明</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span>;<br><span class="hljs-comment">//定义</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> a &gt; b ? a : b;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> a = <span class="hljs-number">100</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">200</span>;<br><br>cout &lt;&lt; <span class="hljs-built_in">max</span>(a, b) &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-7-函数的分文件编写">6.7 函数的分文件编写</h3><p>**作用：**让代码结构更加清晰</p><p>函数分文件编写一般有4个步骤</p><ol><li>创建后缀名为.h的头文件</li><li>创建后缀名为.cpp的源文件</li><li>在头文件中写函数的声明</li><li>在源文件中写函数的定义</li></ol><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//swap.h文件</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//实现两个数字交换的函数声明</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span>;<br><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//swap.cpp文件</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;swap.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> temp = a;<br>a = b;<br>b = temp;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//main函数文件</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;swap.h&quot;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> a = <span class="hljs-number">100</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">200</span>;<br><span class="hljs-built_in">swap</span>(a, b);<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="7-指针">7 指针</h2><h3 id="7-1-指针的基本概念">7.1 指针的基本概念</h3><p><strong>指针的作用：</strong> 可以通过指针间接访问内存</p><ul><li>内存编号是从0开始记录的，一般用十六进制数字表示</li><li>可以利用指针变量保存地址</li></ul><h3 id="7-2-指针变量的定义和使用">7.2 指针变量的定义和使用</h3><p>指针变量定义语法： <code>数据类型 * 变量名；</code></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//1、指针的定义</span><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>; <span class="hljs-comment">//定义整型变量a</span><br><br><span class="hljs-comment">//指针定义语法： 数据类型 * 变量名 ;</span><br><span class="hljs-type">int</span> * p;<br><br><span class="hljs-comment">//指针变量赋值</span><br>p = &amp;a; <span class="hljs-comment">//指针指向变量a的地址</span><br>cout &lt;&lt; &amp;a &lt;&lt; endl; <span class="hljs-comment">//打印数据a的地址</span><br>cout &lt;&lt; p &lt;&lt; endl;  <span class="hljs-comment">//打印指针变量p</span><br><br><span class="hljs-comment">//2、指针的使用</span><br><span class="hljs-comment">//通过*操作指针变量指向的内存</span><br>cout &lt;&lt; <span class="hljs-string">&quot;*p = &quot;</span> &lt;&lt; *p &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>指针变量和普通变量的区别</p><ul><li>普通变量存放的是数据,指针变量存放的是地址</li><li>指针变量可以通过&quot; * &quot;操作符，操作指针变量指向的内存空间，这个过程称为解引用</li></ul><blockquote><p>总结1： 我们可以通过 &amp; 符号 获取变量的地址</p></blockquote><blockquote><p>总结2：利用指针可以记录地址</p></blockquote><blockquote><p>总结3：对指针变量解引用，可以操作指针指向的内存</p></blockquote><h3 id="7-3-指针所占内存空间">7.3 指针所占内存空间</h3><p>提问：指针也是种数据类型，那么这种数据类型占用多少内存空间？</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> * p;<br>p = &amp;a; <span class="hljs-comment">//指针指向数据a的地址</span><br><br>cout &lt;&lt; *p &lt;&lt; endl; <span class="hljs-comment">//* 解引用</span><br>cout &lt;&lt; <span class="hljs-built_in">sizeof</span>(p) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">char</span> *) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">float</span> *) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">double</span> *) &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结：所有指针类型在32位操作系统下是4个字节</p></blockquote><h3 id="7-4-空指针和野指针">7.4 空指针和野指针</h3><p><strong>空指针</strong>：指针变量指向内存中编号为0的空间</p><p>**用途：**初始化指针变量</p><p>**注意：**空指针指向的内存是不可以访问的</p><p><strong>示例1：空指针</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//指针变量p指向内存地址编号为0的空间</span><br><span class="hljs-type">int</span> * p = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//访问空指针报错 </span><br><span class="hljs-comment">//内存编号0 ~255为系统占用内存，不允许用户访问</span><br>cout &lt;&lt; *p &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>野指针</strong>：指针变量指向非法的内存空间</p><p><strong>示例2：野指针</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//指针变量p指向内存地址编号为0x1100的空间</span><br><span class="hljs-type">int</span> * p = (<span class="hljs-type">int</span> *)<span class="hljs-number">0x1100</span>;<br><br><span class="hljs-comment">//访问野指针报错 </span><br>cout &lt;&lt; *p &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结：空指针和野指针都不是我们申请的空间，因此不要访问。</p></blockquote><h3 id="7-5-const修饰指针">7.5 const修饰指针</h3><p>const修饰指针有三种情况</p><ol><li>const修饰指针   — 常量指针</li><li>const修饰常量   — 指针常量</li><li>const即修饰指针，又修饰常量</li></ol><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">10</span>;<br><br><span class="hljs-comment">//const修饰的是指针，指针指向可以改，指针指向的值不可以更改</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> * p1 = &amp;a; <br>p1 = &amp;b; <span class="hljs-comment">//正确</span><br><span class="hljs-comment">//*p1 = 100;  报错</span><br><br><br><span class="hljs-comment">//const修饰的是常量，指针指向不可以改，指针指向的值可以更改</span><br><span class="hljs-type">int</span> * <span class="hljs-type">const</span> p2 = &amp;a;<br><span class="hljs-comment">//p2 = &amp;b; //错误</span><br>*p2 = <span class="hljs-number">100</span>; <span class="hljs-comment">//正确</span><br><br>    <span class="hljs-comment">//const既修饰指针又修饰常量</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> * <span class="hljs-type">const</span> p3 = &amp;a;<br><span class="hljs-comment">//p3 = &amp;b; //错误</span><br><span class="hljs-comment">//*p3 = 100; //错误</span><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>技巧：看const右侧紧跟着的是指针还是常量, 是指针就是常量指针，是常量就是指针常量</p></blockquote><h3 id="7-6-指针和数组">7.6 指针和数组</h3><p>**作用：**利用指针访问数组中元素</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> arr[] = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span> &#125;;<br><br><span class="hljs-type">int</span> * p = arr;  <span class="hljs-comment">//指向数组的指针</span><br><br>cout &lt;&lt; <span class="hljs-string">&quot;第一个元素： &quot;</span> &lt;&lt; arr[<span class="hljs-number">0</span>] &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;指针访问第一个元素： &quot;</span> &lt;&lt; *p &lt;&lt; endl;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br><span class="hljs-comment">//利用指针遍历数组</span><br>cout &lt;&lt; *p &lt;&lt; endl;<br>p++;<br>&#125;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-7-指针和函数">7.7 指针和函数</h3><p>**作用：**利用指针作函数参数，可以修改实参的值</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//值传递</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap1</span><span class="hljs-params">(<span class="hljs-type">int</span> a ,<span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> temp = a;<br>a = b; <br>b = temp;<br>&#125;<br><span class="hljs-comment">//地址传递</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap2</span><span class="hljs-params">(<span class="hljs-type">int</span> * p1, <span class="hljs-type">int</span> *p2)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> temp = *p1;<br>*p1 = *p2;<br>*p2 = temp;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">20</span>;<br><span class="hljs-built_in">swap1</span>(a, b); <span class="hljs-comment">// 值传递不会改变实参</span><br><br><span class="hljs-built_in">swap2</span>(&amp;a, &amp;b); <span class="hljs-comment">//地址传递会改变实参</span><br><br>cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结：如果不想修改实参，就用值传递，如果想修改实参，就用地址传递</p></blockquote><h3 id="7-8-指针、数组、函数">7.8 指针、数组、函数</h3><p>**案例描述：**封装一个函数，利用冒泡排序，实现对整型数组的升序排序</p><p>例如数组：int arr[10] = { 4,3,6,9,1,2,10,8,7,5 };</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//冒泡排序函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bubbleSort</span><span class="hljs-params">(<span class="hljs-type">int</span> * arr, <span class="hljs-type">int</span> len)</span>  <span class="hljs-comment">//int * arr 也可以写为int arr[]</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len - <span class="hljs-number">1</span>; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; len - <span class="hljs-number">1</span> - i; j++)<br>&#123;<br><span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>])<br>&#123;<br><span class="hljs-type">int</span> temp = arr[j];<br>arr[j] = arr[j + <span class="hljs-number">1</span>];<br>arr[j + <span class="hljs-number">1</span>] = temp;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//打印数组函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printArray</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>&#123;<br>cout &lt;&lt; arr[i] &lt;&lt; endl;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> arr[<span class="hljs-number">10</span>] = &#123; <span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>,<span class="hljs-number">9</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">10</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">5</span> &#125;;<br><span class="hljs-type">int</span> len = <span class="hljs-built_in">sizeof</span>(arr) / <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>);<br><br><span class="hljs-built_in">bubbleSort</span>(arr, len);<br><br><span class="hljs-built_in">printArray</span>(arr, len);<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结：当数组名传入到函数作为参数时，被退化为指向首元素的指针</p></blockquote><h2 id="8-结构体">8 结构体</h2><h3 id="8-1-结构体基本概念">8.1 结构体基本概念</h3><p>结构体属于用户==自定义的数据类型==，允许用户存储不同的数据类型</p><h3 id="8-2-结构体定义和使用">8.2 结构体定义和使用</h3><p><strong>语法：</strong><code>struct 结构体名 &#123; 结构体成员列表 &#125;；</code></p><p>通过结构体创建变量的方式有三种：</p><ul><li>struct 结构体名 变量名</li><li>struct 结构体名 变量名 = { 成员1值 ， 成员2值…}</li><li>定义结构体时顺便创建变量</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//结构体定义</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span><br>&#123;<br><span class="hljs-comment">//成员列表</span><br>string name;  <span class="hljs-comment">//姓名</span><br><span class="hljs-type">int</span> age;      <span class="hljs-comment">//年龄</span><br><span class="hljs-type">int</span> score;    <span class="hljs-comment">//分数</span><br>&#125;stu3; <span class="hljs-comment">//结构体变量创建方式3 </span><br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//结构体变量创建方式1</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span> stu1; <span class="hljs-comment">//struct 关键字可以省略</span><br><br>stu<span class="hljs-number">1.</span>name = <span class="hljs-string">&quot;张三&quot;</span>;<br>stu<span class="hljs-number">1.</span>age = <span class="hljs-number">18</span>;<br>stu<span class="hljs-number">1.</span>score = <span class="hljs-number">100</span>;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;姓名：&quot;</span> &lt;&lt; stu<span class="hljs-number">1.</span>name &lt;&lt; <span class="hljs-string">&quot; 年龄：&quot;</span> &lt;&lt; stu<span class="hljs-number">1.</span>age  &lt;&lt; <span class="hljs-string">&quot; 分数：&quot;</span> &lt;&lt; stu<span class="hljs-number">1.</span>score &lt;&lt; endl;<br><br><span class="hljs-comment">//结构体变量创建方式2</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span> stu2 = &#123; <span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-number">19</span>,<span class="hljs-number">60</span> &#125;;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;姓名：&quot;</span> &lt;&lt; stu<span class="hljs-number">2.</span>name &lt;&lt; <span class="hljs-string">&quot; 年龄：&quot;</span> &lt;&lt; stu<span class="hljs-number">2.</span>age  &lt;&lt; <span class="hljs-string">&quot; 分数：&quot;</span> &lt;&lt; stu<span class="hljs-number">2.</span>score &lt;&lt; endl;<br><br><br>stu<span class="hljs-number">3.</span>name = <span class="hljs-string">&quot;王五&quot;</span>;<br>stu<span class="hljs-number">3.</span>age = <span class="hljs-number">18</span>;<br>stu<span class="hljs-number">3.</span>score = <span class="hljs-number">80</span>;<br><br><br>cout &lt;&lt; <span class="hljs-string">&quot;姓名：&quot;</span> &lt;&lt; stu<span class="hljs-number">3.</span>name &lt;&lt; <span class="hljs-string">&quot; 年龄：&quot;</span> &lt;&lt; stu<span class="hljs-number">3.</span>age  &lt;&lt; <span class="hljs-string">&quot; 分数：&quot;</span> &lt;&lt; stu<span class="hljs-number">3.</span>score &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结1：定义结构体时的关键字是struct，不可省略</p></blockquote><blockquote><p>总结2：创建结构体变量时，关键字struct可以省略</p></blockquote><blockquote><p>总结3：结构体变量利用操作符 ‘’.‘’  访问成员</p></blockquote><h3 id="8-3-结构体数组">8.3 结构体数组</h3><p>**作用：**将自定义的结构体放入到数组中方便维护</p><p><strong>语法：</strong><code> struct  结构体名 数组名[元素个数] = &#123;  &#123;&#125; , &#123;&#125; , ... &#123;&#125; &#125;</code></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//结构体定义</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span><br>&#123;<br><span class="hljs-comment">//成员列表</span><br>string name;  <span class="hljs-comment">//姓名</span><br><span class="hljs-type">int</span> age;      <span class="hljs-comment">//年龄</span><br><span class="hljs-type">int</span> score;    <span class="hljs-comment">//分数</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//结构体数组</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span> arr[<span class="hljs-number">3</span>]=<br>&#123;<br>&#123;<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-number">80</span> &#125;,<br>&#123;<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-number">19</span>,<span class="hljs-number">60</span> &#125;,<br>&#123;<span class="hljs-string">&quot;王五&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-number">70</span> &#125;<br>&#125;;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;姓名：&quot;</span> &lt;&lt; arr[i].name &lt;&lt; <span class="hljs-string">&quot; 年龄：&quot;</span> &lt;&lt; arr[i].age &lt;&lt; <span class="hljs-string">&quot; 分数：&quot;</span> &lt;&lt; arr[i].score &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-4-结构体指针">8.4 结构体指针</h3><p>**作用：**通过指针访问结构体中的成员</p><ul><li>利用操作符 <code>-&gt; </code>可以通过结构体指针访问结构体属性</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//结构体定义</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span><br>&#123;<br><span class="hljs-comment">//成员列表</span><br>string name;  <span class="hljs-comment">//姓名</span><br><span class="hljs-type">int</span> age;      <span class="hljs-comment">//年龄</span><br><span class="hljs-type">int</span> score;    <span class="hljs-comment">//分数</span><br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span> stu = &#123; <span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-number">100</span>, &#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span> * p = &amp;stu;<br><br>p-&gt;score = <span class="hljs-number">80</span>; <span class="hljs-comment">//指针通过 -&gt; 操作符可以访问成员</span><br><br>cout &lt;&lt; <span class="hljs-string">&quot;姓名：&quot;</span> &lt;&lt; p-&gt;name &lt;&lt; <span class="hljs-string">&quot; 年龄：&quot;</span> &lt;&lt; p-&gt;age &lt;&lt; <span class="hljs-string">&quot; 分数：&quot;</span> &lt;&lt; p-&gt;score &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结：结构体指针可以通过 -&gt; 操作符 来访问结构体中的成员</p></blockquote><h3 id="8-5-结构体嵌套结构体">8.5 结构体嵌套结构体</h3><p><strong>作用：</strong> 结构体中的成员可以是另一个结构体</p><p>**例如：**每个老师辅导一个学员，一个老师的结构体中，记录一个学生的结构体</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//学生结构体定义</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span><br>&#123;<br><span class="hljs-comment">//成员列表</span><br>string name;  <span class="hljs-comment">//姓名</span><br><span class="hljs-type">int</span> age;      <span class="hljs-comment">//年龄</span><br><span class="hljs-type">int</span> score;    <span class="hljs-comment">//分数</span><br>&#125;;<br><br><span class="hljs-comment">//教师结构体定义</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">teacher</span><br>&#123;<br>    <span class="hljs-comment">//成员列表</span><br><span class="hljs-type">int</span> id; <span class="hljs-comment">//职工编号</span><br>string name;  <span class="hljs-comment">//教师姓名</span><br><span class="hljs-type">int</span> age;   <span class="hljs-comment">//教师年龄</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span> stu; <span class="hljs-comment">//子结构体 学生</span><br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">teacher</span> t1;<br>t<span class="hljs-number">1.</span>id = <span class="hljs-number">10000</span>;<br>t<span class="hljs-number">1.</span>name = <span class="hljs-string">&quot;老王&quot;</span>;<br>t<span class="hljs-number">1.</span>age = <span class="hljs-number">40</span>;<br><br>t<span class="hljs-number">1.</span>stu.name = <span class="hljs-string">&quot;张三&quot;</span>;<br>t<span class="hljs-number">1.</span>stu.age = <span class="hljs-number">18</span>;<br>t<span class="hljs-number">1.</span>stu.score = <span class="hljs-number">100</span>;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;教师 职工编号： &quot;</span> &lt;&lt; t<span class="hljs-number">1.</span>id &lt;&lt; <span class="hljs-string">&quot; 姓名： &quot;</span> &lt;&lt; t<span class="hljs-number">1.</span>name &lt;&lt; <span class="hljs-string">&quot; 年龄： &quot;</span> &lt;&lt; t<span class="hljs-number">1.</span>age &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;辅导学员 姓名： &quot;</span> &lt;&lt; t<span class="hljs-number">1.</span>stu.name &lt;&lt; <span class="hljs-string">&quot; 年龄：&quot;</span> &lt;&lt; t<span class="hljs-number">1.</span>stu.age &lt;&lt; <span class="hljs-string">&quot; 考试分数： &quot;</span> &lt;&lt; t<span class="hljs-number">1.</span>stu.score &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>**总结：**在结构体中可以定义另一个结构体作为成员，用来解决实际问题</p><h3 id="8-6-结构体做函数参数">8.6 结构体做函数参数</h3><p>**作用：**将结构体作为参数向函数中传递</p><p>传递方式有两种：</p><ul><li>值传递</li><li>地址传递</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//学生结构体定义</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span><br>&#123;<br><span class="hljs-comment">//成员列表</span><br>string name;  <span class="hljs-comment">//姓名</span><br><span class="hljs-type">int</span> age;      <span class="hljs-comment">//年龄</span><br><span class="hljs-type">int</span> score;    <span class="hljs-comment">//分数</span><br>&#125;;<br><br><span class="hljs-comment">//值传递</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printStudent</span><span class="hljs-params">(student stu )</span></span><br><span class="hljs-function"></span>&#123;<br>stu.age = <span class="hljs-number">28</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;子函数中 姓名：&quot;</span> &lt;&lt; stu.name &lt;&lt; <span class="hljs-string">&quot; 年龄： &quot;</span> &lt;&lt; stu.age  &lt;&lt; <span class="hljs-string">&quot; 分数：&quot;</span> &lt;&lt; stu.score &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">//地址传递</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printStudent2</span><span class="hljs-params">(student *stu)</span></span><br><span class="hljs-function"></span>&#123;<br>stu-&gt;age = <span class="hljs-number">28</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;子函数中 姓名：&quot;</span> &lt;&lt; stu-&gt;name &lt;&lt; <span class="hljs-string">&quot; 年龄： &quot;</span> &lt;&lt; stu-&gt;age  &lt;&lt; <span class="hljs-string">&quot; 分数：&quot;</span> &lt;&lt; stu-&gt;score &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>student stu = &#123; <span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-number">100</span>&#125;;<br><span class="hljs-comment">//值传递</span><br><span class="hljs-built_in">printStudent</span>(stu);<br>cout &lt;&lt; <span class="hljs-string">&quot;主函数中 姓名：&quot;</span> &lt;&lt; stu.name &lt;&lt; <span class="hljs-string">&quot; 年龄： &quot;</span> &lt;&lt; stu.age &lt;&lt; <span class="hljs-string">&quot; 分数：&quot;</span> &lt;&lt; stu.score &lt;&lt; endl;<br><br>cout &lt;&lt; endl;<br><br><span class="hljs-comment">//地址传递</span><br><span class="hljs-built_in">printStudent2</span>(&amp;stu);<br>cout &lt;&lt; <span class="hljs-string">&quot;主函数中 姓名：&quot;</span> &lt;&lt; stu.name &lt;&lt; <span class="hljs-string">&quot; 年龄： &quot;</span> &lt;&lt; stu.age  &lt;&lt; <span class="hljs-string">&quot; 分数：&quot;</span> &lt;&lt; stu.score &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结：如果不想修改主函数中的数据，用值传递，反之用地址传递</p></blockquote><h3 id="8-7-结构体中-const使用场景">8.7 结构体中 const使用场景</h3><p>**作用：**用const来防止误操作</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//学生结构体定义</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span><br>&#123;<br><span class="hljs-comment">//成员列表</span><br>string name;  <span class="hljs-comment">//姓名</span><br><span class="hljs-type">int</span> age;      <span class="hljs-comment">//年龄</span><br><span class="hljs-type">int</span> score;    <span class="hljs-comment">//分数</span><br>&#125;;<br><br><span class="hljs-comment">//const使用场景</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printStudent</span><span class="hljs-params">(<span class="hljs-type">const</span> student *stu)</span> <span class="hljs-comment">//加const防止函数体中的误操作</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//stu-&gt;age = 100; //操作失败，因为加了const修饰</span><br>cout &lt;&lt; <span class="hljs-string">&quot;姓名：&quot;</span> &lt;&lt; stu-&gt;name &lt;&lt; <span class="hljs-string">&quot; 年龄：&quot;</span> &lt;&lt; stu-&gt;age &lt;&lt; <span class="hljs-string">&quot; 分数：&quot;</span> &lt;&lt; stu-&gt;score &lt;&lt; endl;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>student stu = &#123; <span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-number">100</span> &#125;;<br><br><span class="hljs-built_in">printStudent</span>(&amp;stu);<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-8-结构体案例">8.8 结构体案例</h3><h4 id="8-8-1-案例1">8.8.1 案例1</h4><p><strong>案例描述：</strong></p><p>学校正在做毕设项目，每名老师带领5个学生，总共有3名老师，需求如下</p><p>设计学生和老师的结构体，其中在老师的结构体中，有老师姓名和一个存放5名学生的数组作为成员</p><p>学生的成员有姓名、考试分数，创建数组存放3名老师，通过函数给每个老师及所带的学生赋值</p><p>最终打印出老师数据以及老师所带的学生数据。</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Student</span><br>&#123;<br>string name;<br><span class="hljs-type">int</span> score;<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Teacher</span><br>&#123;<br>string name;<br>Student sArray[<span class="hljs-number">5</span>];<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">allocateSpace</span><span class="hljs-params">(Teacher tArray[] , <span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>string tName = <span class="hljs-string">&quot;教师&quot;</span>;<br>string sName = <span class="hljs-string">&quot;学生&quot;</span>;<br>string nameSeed = <span class="hljs-string">&quot;ABCDE&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>&#123;<br>tArray[i].name = tName + nameSeed[i];<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">5</span>; j++)<br>&#123;<br>tArray[i].sArray[j].name = sName + nameSeed[j];<br>tArray[i].sArray[j].score = <span class="hljs-built_in">rand</span>() % <span class="hljs-number">61</span> + <span class="hljs-number">40</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printTeachers</span><span class="hljs-params">(Teacher tArray[], <span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>&#123;<br>cout &lt;&lt; tArray[i].name &lt;&lt; endl;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">5</span>; j++)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;\t姓名：&quot;</span> &lt;&lt; tArray[i].sArray[j].name &lt;&lt; <span class="hljs-string">&quot; 分数：&quot;</span> &lt;&lt; tArray[i].sArray[j].score &lt;&lt; endl;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">srand</span>((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)<span class="hljs-built_in">time</span>(<span class="hljs-literal">NULL</span>)); <span class="hljs-comment">//随机数种子 头文件 #include &lt;ctime&gt;</span><br><br>Teacher tArray[<span class="hljs-number">3</span>]; <span class="hljs-comment">//老师数组</span><br><br><span class="hljs-type">int</span> len = <span class="hljs-built_in">sizeof</span>(tArray) / <span class="hljs-built_in">sizeof</span>(Teacher);<br><br><span class="hljs-built_in">allocateSpace</span>(tArray, len); <span class="hljs-comment">//创建数据</span><br><br><span class="hljs-built_in">printTeachers</span>(tArray, len); <span class="hljs-comment">//打印数据</span><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="8-8-2-案例2">8.8.2 案例2</h4><p><strong>案例描述：</strong></p><p>设计一个英雄的结构体，包括成员姓名，年龄，性别;创建结构体数组，数组中存放5名英雄。</p><p>通过冒泡排序的算法，将数组中的英雄按照年龄进行升序排序，最终打印排序后的结果。</p><p>五名英雄信息如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++">&#123;<span class="hljs-string">&quot;刘备&quot;</span>,<span class="hljs-number">23</span>,<span class="hljs-string">&quot;男&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;关羽&quot;</span>,<span class="hljs-number">22</span>,<span class="hljs-string">&quot;男&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;张飞&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&quot;男&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;赵云&quot;</span>,<span class="hljs-number">21</span>,<span class="hljs-string">&quot;男&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;貂蝉&quot;</span>,<span class="hljs-number">19</span>,<span class="hljs-string">&quot;女&quot;</span>&#125;,<br></code></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//英雄结构体</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">hero</span><br>&#123;<br>string name;<br><span class="hljs-type">int</span> age;<br>string sex;<br>&#125;;<br><span class="hljs-comment">//冒泡排序</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bubbleSort</span><span class="hljs-params">(hero arr[] , <span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len - <span class="hljs-number">1</span>; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; len - <span class="hljs-number">1</span> - i; j++)<br>&#123;<br><span class="hljs-keyword">if</span> (arr[j].age &gt; arr[j + <span class="hljs-number">1</span>].age)<br>&#123;<br>hero temp = arr[j];<br>arr[j] = arr[j + <span class="hljs-number">1</span>];<br>arr[j + <span class="hljs-number">1</span>] = temp;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">//打印数组</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printHeros</span><span class="hljs-params">(hero arr[], <span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;姓名： &quot;</span> &lt;&lt; arr[i].name &lt;&lt; <span class="hljs-string">&quot; 性别： &quot;</span> &lt;&lt; arr[i].sex &lt;&lt; <span class="hljs-string">&quot; 年龄： &quot;</span> &lt;&lt; arr[i].age &lt;&lt; endl;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">hero</span> arr[<span class="hljs-number">5</span>] =<br>&#123;<br>&#123;<span class="hljs-string">&quot;刘备&quot;</span>,<span class="hljs-number">23</span>,<span class="hljs-string">&quot;男&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;关羽&quot;</span>,<span class="hljs-number">22</span>,<span class="hljs-string">&quot;男&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;张飞&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&quot;男&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;赵云&quot;</span>,<span class="hljs-number">21</span>,<span class="hljs-string">&quot;男&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;貂蝉&quot;</span>,<span class="hljs-number">19</span>,<span class="hljs-string">&quot;女&quot;</span>&#125;,<br>&#125;;<br><br><span class="hljs-type">int</span> len = <span class="hljs-built_in">sizeof</span>(arr) / <span class="hljs-built_in">sizeof</span>(hero); <span class="hljs-comment">//获取数组元素个数</span><br><br><span class="hljs-built_in">bubbleSort</span>(arr, len); <span class="hljs-comment">//排序</span><br><br><span class="hljs-built_in">printHeros</span>(arr, len); <span class="hljs-comment">//打印</span><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1>结束over</h1>]]></content>
      
      
      <categories>
          
          <category> C++教程专辑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 基础讲解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++实现进程之间的通信（二）Socket篇</title>
      <link href="/2022/03/24/C-%E5%AE%9E%E7%8E%B0%E8%BF%9B%E7%A8%8B%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1%EF%BC%88%E4%BA%8C%EF%BC%89Socket%E7%AF%87/"/>
      <url>/2022/03/24/C-%E5%AE%9E%E7%8E%B0%E8%BF%9B%E7%A8%8B%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1%EF%BC%88%E4%BA%8C%EF%BC%89Socket%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1>C++实现进程之间的通信（二）Socket篇</h1><h2 id="Socket简介">Socket简介</h2><p>80年代初，人们在UNIX操作系统下实现TCP/IP协议。</p><p>研究人员为TCP/IP网络通信开发了一个API（应用程序接口）。</p><p>这个API称为Socket接口（套接字）。</p><p>SOCKET接口是TCP/IP网络最为通用的API，也是在INTERNET上进行应用开发最为通用的API。</p><p>90年代初，Microsoft联合了其他几家公司共同制定了一套WINDOWS下的网络编程接口，即WindowsSockets规范。</p><h2 id="Socket的机制是什么">Socket的机制是什么</h2><p>简单的把Socket理解为一个可以连通网络上不同计算机程序之间的管道，把一堆数据从管道的A端扔进去，则会从管道的B端（也许同时还可以从C、D、E、F……端冒出来）。</p><p>管道的端口由两个因素来唯一确认，即机器的IP地址和程序所使用的端口号。</p><p>端口号就是程序员指定的一个数字，如：http的80端口和ftp的21端口。</p><p>建议大家自己写程序不要使用太小的端口号，它们一般被系统占用了，也不要使用一些著名的端口，一般来说使用1000~5000之内的端口比较好。</p><p>Socket可以支持数据的发送和接收</p><p>它定义一种称为套接字的变量，发送数据时首先创建套接字，然后使用该套接字的sendto等方法对准某个IP/端口进行数据发送</p><p>接收端也首先创建套接字，然后将该套接字绑定到一个IP/端口上，所有发向此端口的数据会被该套接字的recv等函数读出。如同读出文件中的数据一样。</p><p>所需的头文件、库文件和DLL</p><p>最广泛的Windows Socket2.0版本，所需的一些文件如下（以安装了VC6为例说明其物理位置）：</p><p>（1）头文件winsock2.h，通常处于C:“Program Files”Microsoft Visual Studio“VC98”INCLUDE；查看该头文件可知其中又包含了windows.h和pshpack4.h头文件，因此在windows中的一些常用API都可以使用</p><p>（2）库文件Ws2_32.lib，通常处于C:&quot;Program Files&quot;Microsoft Visual Studio&quot;VC98&quot;Lib；</p><p>（3）DLL文件Ws2_32.dll，通常处于C:&quot;WINDOWS&quot;system32。</p><p>编写Socket程序需要的编程基础</p><p>（1）C++语法；</p><p>（2）一点windows SDK的基础，了解一些SDK的数据类型与API的调用方式；</p><p>（3）一点编译、链接和执行的技术。</p><p>增加了一些异步函数，并增加了符合Windows消息驱动特性的网络事件异步选择机制。</p><p>WINDOWSSOCKETS规范是一套开放的、支持多种协议的Windows下的网络编程接口。</p><p>从1991年的1.0版到1995年的2.0.8版，经过不断完善并在Intel、Microsoft、Sun、SGI、Informix、Novell等公司的全力支持下，已成为Windows网络编程的事实上的标准。</p><p>在实际应用中的WINDOWSSOKCETS规范主要有1.1版和2.0版。</p><p>两者的最重要区别是1.1版只支持TCP/IP协议，而2.0版可以支持多协议。</p><p>2.0版有良好的向后兼容性，任何使用1.1版的源代码，二进制文件，应用程序都可以不加修改地在2.0规范下使用。</p><p>SOCKET实际在计算机中提供了一个通信端口，可以通过这个端口与任何一个具有SOCKET接口的计算机通信。</p><p>应用程序在网络上传输，接收的信息都通过这个SOCKET接口来实现。</p><p>在应用开发中就像使用文件句柄一样，可以对SOCKET句柄进行读，写操作。</p><h2 id="UDP">UDP</h2><p>所谓UDP，就是发送出去就不管的一种网络协议。</p><p>UDP编程的发送端只管发送就可以了，不用检查网络连接状态。</p><p>下面用例1来说明怎样编写UDP，并会详细解释每个API和数据类型。</p><p>SOCKET类型</p><p>SOCKET是socket套接字类型，在WINSOCK2.H中有如下定义：</p><pre><code class="hljs">  typedef unsigned int    u_int;  typedef u_int           SOCKET;</code></pre><p>可知套接字实际上就是一个无符号整型，它将被Socket环境管理和使用。</p><p>套接字将被创建、设置、用来发送和接收数据，最后会被关闭。</p><p>WORD类型、MAKEWORD、LOBYTE和HIBYTE宏</p><p>WORD类型是一个16位的无符号整型，在WTYPES.H中被定义为：</p><pre><code class="hljs">typedef unsigned short WORD;</code></pre><p>目的是提供两个字节的存储，在Socket中这两个字节可以表示主版本号和副版本号。</p><p>使用MAKEWORD宏可以给一个WORD类型赋值。例如要表示主版本号2，副版本号0，可以使用以下代码：</p><pre><code class="hljs">WORD wVersionRequested;wVersionRequested = MAKEWORD( 2, 0 ); </code></pre><p>注意低位内存存储主版本号2，高位内存存储副版本号0，其值为0x0002。使用宏LOBYTE可以读取WORD的低位字节，HIBYTE可以读取高位字节。</p><p>话不多说，上项目吧~</p><h1>套字节实现通信</h1><p>本实现的环境是建立在linux上，如需Windows下实现，请给予其库文件以及DLL文件。</p><p>套字节（socket）服务端实例 socket.h</p><pre><code class="hljs">#pragma once#include &lt;iostream&gt;#include &lt;string&gt;#include &lt;sys/socket.h&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;unistd.h&gt;#include &lt;sys/types.h&gt;#include &lt;arpa/inet.h&gt;#include &lt;cerrno&gt;#include &lt;netinet/in.h&gt;#include &lt;string.h&gt;//监听8000端口#define PORT 8000 #define MAXLINE 4096class socket_s&#123;&#125;;</code></pre><p>套字节（socket）服务端实例 socket.cpp</p><pre><code class="hljs">/*    2022-3-18    测试套字节（socket）服务端实例    作者：连思鑫*/#include &quot;socket_s.h&quot;using namespace std;int main()&#123;    //这是服务器    cout &lt;&lt; &quot;this is server&quot; &lt;&lt; endl;    //socket    //初始化socket，并检测是都成功    int listenfd = socket(AF_INET, SOCK_STREAM, 0);    if (listenfd == -1)    &#123;        perror(&quot;socket fail&quot;);        exit(1);    &#125;    //bind    //绑定socket    struct sockaddr_in addr;    addr.sin_family = AF_INET;    addr.sin_port = htons(PORT);    addr.sin_addr.s_addr = INADDR_ANY;    //判断绑定是否失败    if (bind(listenfd,(struct sockaddr*)&amp;addr, sizeof(addr)) == -1)    &#123;        perror(&quot;bind fail&quot;);        exit(2);    &#125;    //listen    //监听    if (listen(listenfd, 5) == -1)    &#123;        perror(&quot;linsten fail&quot;);        exit(3);    &#125;    //accept    //接收客户端数据    int conn;    char clientIP[INET_ADDRSTRLEN] = &quot;&quot;;    struct sockaddr_in clientAddr;    socklen_t clientAddrLen = sizeof(clientAddr);    while (1)    &#123;        cout &lt;&lt; &quot;.....listening&quot; &lt;&lt; endl;        conn = accept(listenfd, (struct sockaddr*)&amp;clientAddr, &amp;clientAddrLen);        if (conn &lt; 0)        &#123;            perror(&quot;accept fail&quot;);            exit(4);        &#125;        inet_ntop(AF_INET, &amp;clientAddr.sin_addr, clientIP, INET_ADDRSTRLEN);        cout &lt;&lt; &quot;.......connect&quot; &lt;&lt; clientIP &lt;&lt; &quot;:&quot; &lt;&lt; ntohs(clientAddr.sin_port) &lt;&lt; endl;        char buf[1024];        while (true)        &#123;            memset(buf, 0, sizeof(buf));            //接受数据            int len = recv(conn, buf, sizeof(buf), 0);            buf[len] = '\0';            if (strcmp(buf, &quot;exit&quot;) == 0)            &#123;                cout &lt;&lt; &quot;.......disconnect&quot; &lt;&lt; clientIP &lt;&lt; &quot;:&quot; &lt;&lt; ntohs(clientAddr.sin_port) &lt;&lt; endl;                break;            &#125;            cout &lt;&lt; buf &lt;&lt; endl;            //发送数据            send(conn, buf, len, 0);        &#125;        close(conn);    &#125;    close(listenfd);    return 0;&#125;</code></pre><p>套字节（socket）用户端实例 socket_u.h</p><pre><code class="hljs">#pragma once#include &lt;iostream&gt;#include &lt;sys/socket.h&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;unistd.h&gt;#include &lt;sys/types.h&gt;#include &lt;arpa/inet.h&gt;#include &lt;cerrno&gt;#include &lt;netinet/in.h&gt;#include &lt;string.h&gt;//监听8000端口#define PORT 8000 #define MAXLINE 4096class socket_u&#123;&#125;;</code></pre><p>套字节（socket）用户端实例 socket_u.cpp</p><pre><code class="hljs">/*    2022-3-18    测试套字节（socket）用户端实例    作者：连思鑫*/#include &quot;socket_u.h&quot;#include &lt;iostream&gt;using namespace std;int main()&#123;    //这是客户端    cout &lt;&lt; &quot;this is user&quot; &lt;&lt; endl;    //socket    //初始化socket，并检测是都成功    int ulient = socket(AF_INET, SOCK_STREAM, 0);    if (ulient == -1)    &#123;        perror(&quot;socket fail&quot;);        exit(1);    &#125;    //connect    struct sockaddr_in serverAddr;    serverAddr.sin_family = AF_INET;    serverAddr.sin_port = htons(PORT);    serverAddr.sin_addr.s_addr = inet_addr(&quot;127.0.0.1&quot;);    if (connect(ulient, (struct sockaddr*)&amp;serverAddr, sizeof(serverAddr)) &lt; 0)    &#123;        cout &lt;&lt; &quot;connect fail&quot; &lt;&lt; endl;        exit(2);    &#125;    cout &lt;&lt; &quot;.....connect&quot; &lt;&lt; endl;    char data[1024];    char buf[1024];    while (true)    &#123;        cin &gt;&gt; data;        send(ulient, data, strlen(data), 0);        if (strcmp(data, &quot;exit&quot;) == 0)        &#123;            cout &lt;&lt; &quot;......disconnect&quot; &lt;&lt; endl;            break;        &#125;        memset(buf, 0, sizeof(buf));        int len = recv(ulient, buf, sizeof(buf), 0);        buf[len] = '\0';        cout &lt;&lt; buf &lt;&lt; endl;    &#125;    close(ulient);    return 0;&#125;</code></pre><p>结束over~</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 进程间通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++实现进程之间的通信（一）FIFO篇</title>
      <link href="/2022/03/23/%E7%94%A8C-%E5%AE%9E%E7%8E%B0FIFO%E7%9A%84%E5%8A%9F%E8%83%BD/"/>
      <url>/2022/03/23/%E7%94%A8C-%E5%AE%9E%E7%8E%B0FIFO%E7%9A%84%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h1>C++实现进程之间的通信（一）FIFO篇</h1><h2 id="一，C-常用进程间通信">一，C++ 常用进程间通信</h2><blockquote><p>管道(Pipe)：管道可用于具有亲缘关系进程间的通信，允许一个进程和另一个与它有共同祖先的进程之间进行通信。</p></blockquote><blockquote><p>命名管道(named pipe)：命名管道克服了管道没有名字的限制，因此，除具有管道所具有的功能外，它还允许无亲缘关系进程间的通信。命名管道在文件系统中有对应的文件名。命名管道通过命令mkfifo或系统调用mkfifo来创建。</p></blockquote><blockquote><p>信号(Signal)：信号是比较复杂的通信方式，用于通知接受进程有某种事件发生，除了用于进程间通信外，进程还可以发送信号给进程本身;Linux除了支持Unix早期信号语义函数sigal外，还支持语义符合Posix.1标准的信号函数sigaction(实际上，该函数是基于BSD的，BSD为了实现可靠信号机制，又能够统一对外接口，用sigaction函数重新实现了signal函数)。</p></blockquote><blockquote><p>消息(Message)队列：消息队列是消息的链接表，包括Posix消息队列system V消息队列。有足够权限的进程可以向队列中添加消息，被赋予读权限的进程则可以读走队列中的消息。消息队列克服了信号承载信息量少，管道只能承载无格式字节流以及缓冲区大小受限等缺点。</p></blockquote><blockquote><p>共享内存：使得多个进程可以访问同一块内存空间，是最快的可用IPC形式。是针对其他通信机制运行效率较低而设计的。往往与其它通信机制，如信号量结合使用，来达到进程间的同步及互斥。</p></blockquote><blockquote><p>信号量(semaphore)：主要作为进程间以及同一进程不同线程之间的同步手段。</p></blockquote><blockquote><p>套接字(Socket)：更为一般的进程间通信机制，可用于不同机器之间的进程间通信。起初是由Unix系统的BSD分支开发出来的，但现在一般可以移植到其它类Unix系统上：Linux和System V的变种都支持套接字。</p></blockquote><p>今天我们要研究的就是其中的FIFO实现进程之间的通信。</p><h2 id="二、无名FIFO的实现">二、无名FIFO的实现</h2><p>请看代码：</p><pre><code class="hljs">/*    2022-3-17    测试无名管道实例    作者：连思鑫*/#pragma once#include &lt;stdio.h&gt;#include &lt;iostream&gt;#include &lt;fcntl.h&gt;#include &lt;stdlib.h&gt;#include &lt;sys/stat.h&gt;#include &lt;sys/types.h&gt;#include &lt;unistd.h&gt;#include &lt;string.h&gt;#include &quot;main.h&quot;using namespace std;int main()&#123;    int _pipe[2] = &#123; 0, 0 &#125;;    int ret = pipe(_pipe); //创建无名管道，参数返回写和读文件操作符    if (ret == -1)    &#123;        cout &lt;&lt; &quot;cerate pipe fail&quot; &lt;&lt; endl;        return 1;    &#125;    cout &lt;&lt; &quot;create pipe:&quot; &lt;&lt; _pipe[0] &lt;&lt; _pipe[1] &lt;&lt; endl;    //fork一个子进程出来    pid_t cid = fork();    if (cid &lt; 0)    &#123;        cout &lt;&lt; &quot;fork fail!&quot; &lt;&lt; endl;        return 2;    &#125;    //测试子进程写——&gt;父进程读消息    if (cid == 0)    &#123;        cout &lt;&lt; &quot;Child Writing....&quot; &lt;&lt; endl;        close(_pipe[0]);        //发送数据到pipe        int count = 5;        const char* msg = &quot;I love you !!!&quot;;        while (count--)        &#123;            write(_pipe[1], msg, strlen(msg));            sleep(1);        &#125;        close(_pipe[1]);        exit(1); //退出子进程    &#125;    else    &#123;        cout &lt;&lt; &quot;father reading......&quot; &lt;&lt; endl;        close(_pipe[1]);        // 读取pipe数据        char msg[1024];        int count = 5;        while (true)        &#123;            ssize_t n = read(_pipe[0], msg, sizeof(msg) - 1);            if (n &gt; 0)            &#123;                msg[n] = '\0';                cout &lt;&lt; &quot;recive from chil: &quot; &lt;&lt; msg &lt;&lt; endl;            &#125;            else            &#123;                cout &lt;&lt; &quot;read emoty!&quot; &lt;&lt; endl;                break;            &#125;        &#125;        //*等子进程结束后在退出父进程        //if (waitpid(cid, 0, 0) != -1)        //&#123;        //cout &lt;&lt; &quot;child closed!&quot; &lt;&lt; endl;        //&#125;    &#125;    return 0;&#125;</code></pre><p></p><h2 id="三、管道的建立与通信的实现">三、管道的建立与通信的实现</h2><p>直接看代码吧，我都写了注释…</p><p>发送端头文件 fifo_s.h</p><pre><code class="hljs">#pragma once#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;fcntl.h&gt;#include &lt;sys/stat.h&gt;#include &lt;sys/types.h&gt;#include &lt;unistd.h&gt;#include &lt;iostream&gt;</code></pre><p>发送端实现fifo_s.cpp</p><pre><code class="hljs">/*    2022-3-18    测试有名管道fifo发送端实例    作者：连思鑫*/#include &quot;fifo_s.h&quot;using namespace std;int main()&#123;    string name = &quot;.myfifo&quot;;    //创建一个存取权限为0666的命名管道    unlink(name.c_str());  //name.c_str()是将string类型转换成char类型，因有的函数只能打开char类型命名的文件。unlink是删除文件，删除之前会检查链接，如果有链接则不删    int namepipo = mkfifo(name.c_str(),S_IFIFO | 0666); // mkfifo是创建管道对象    if (namepipo == -1)    &#123;        perror(&quot;mkfifo fail!\n&quot;); //创建失败        exit(1);    &#125;    //只写的方式打开命名的管道    int fd = open(name.c_str(), O_WRONLY); //O_WRONLY是以只写的方式打开    // int fd = open(name.c_str(), O_RDONLY); //只读    // int fd = open(name.c_str(), O_RDWR); //可读可写等。。。    if (fd == -1)    &#123;        perror(&quot;open fifo fail!\n&quot;);  //打开失败        exit(2);    &#125;    // 向管道发送数据    char buf[1024]; //缓存，用于存放发送数据的    while (1)    &#123;        printf(&quot;sendto fifo:&quot;);        //该语句整体作用：一般在printf后加，强制马上输出缓冲区的内容，防止输出错误。        fflush(stdout); //fflush作用，清空文件缓冲区，如果文件是打开的则把缓冲区内容写入文件 ||stdout:与标准输出流关联，用于写入约定的输出。程序启动时，该流为完全缓冲当且仅当能确定流不引用交互式设备        ssize_t n = read(0, buf, sizeof(buf) - 1); //从标准输入获得消息，读取文件，字节数大小-1,循环读取字节        if (n &gt; 0)        &#123;            buf[n - 1] = '\0';  //过滤掉换行符            if (write(fd, buf, n) == -1)            &#123;                perror(&quot;write fifo fail!&quot;);                exit(3);            &#125;        &#125;    &#125;    close(fd);    return 0;&#125;</code></pre><p>接受端头文件fifo_u.h</p><pre><code class="hljs">#pragma once#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;fcntl.h&gt;#include &lt;sys/stat.h&gt;#include &lt;sys/types.h&gt;#include &lt;unistd.h&gt;#include &lt;iostream&gt;</code></pre><p>接收端实现fifo_u.cpp</p><pre><code class="hljs">  /*      2022-3-18      测试有名管道fifo接受端实例      作者：连思鑫  */  #include &quot;fifo_u.h&quot;  using namespace std;  int main()  &#123;      string name = &quot;.myfifo&quot;;      int fd = open(name.c_str(), O_RDONLY);      if (fd == -1)      &#123;          perror(&quot;open fifo fail!&quot;);          exit(1);      &#125;      //接受管道数据      char buf[1024];      while (1)      &#123;          ssize_t s = read(fd, buf, sizeof(buf) - 1);          if (s &gt;0 )          &#123;              printf(&quot;receive from fifo: %s\n&quot;, buf);          &#125;          else          &#123;              perror(&quot;read fifo fail&quot;);              exit(2);          &#125;      &#125;      close(fd);      return 0;  &#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 进程间通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用Linux命令总结</title>
      <link href="/2022/03/12/%E5%B8%B8%E7%94%A8Linux%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/03/12/%E5%B8%B8%E7%94%A8Linux%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1>常用Linux命令总结</h1><p>因为在做嵌入式C/C++开发，离不开Linux。所以，在此总结一下常用的Linux命令，以免忘记且有利于查询。</p><h2 id="网络-（以太网和WIFI无线）！！重要！！">网络 - （以太网和WIFI无线）！！重要！！</h2><blockquote><p><strong>ps:最近一两周都在使用这玩意啊喂</strong>~</p></blockquote><h3 id="1-hostname">1.hostname</h3><p>hostname 没有选项，显示主机名字</p><p>hostname –d 显示机器所属域名</p><p>hostname –f 显示完整的主机名和域名</p><p>hostname –i 显示当前机器的 ip 地址</p><blockquote><p>补充：其实使用 “hostname+新的主机名” 命令还可以临时设置主机名,比如hostname newname这样用的好处是，可以临时修改主机名称而不用重启。而通过/etc/sysconfig/network 文件来修改主机名则需要重启才能生效。当然，我们在在执行这个命令后，必须记得手动修改/etc/sysconfig/network 文件里面的 HOSTNAME 的值，以便后续重启生效，这算是一个小技巧哦！</p></blockquote><h3 id="2-ping">2. ping</h3><p>ping 将数据包发向用户指定地址。当包被接收，目标机器发送返回数据包。ping 主要有两个作用：</p><ol><li>用来确认网络连接是畅通的。</li><li>用来查看连接的速度信息。</li></ol><p>如果你 ping <a href="http://zhangge.net">zhangge.net</a>  它将返回它的 ip 地址 。你可以通过 ctrl+C 来停止命令。</p><blockquote><p>ps:上一周一直在ping各种ip，回到公司搭建内部局域网估计又要ping来ping去…补充：-c 参数可以定义 ping 的次数，脚本中的网络判断用得比较多。而在 windows 下，则使用-n 参数来定义 ping 次数，如 ping -n 4 <a href="http://zhangge.net">zhangge.net</a></p></blockquote><h3 id="3-ifconfig">3. ifconfig</h3><p>这个类是Windows的ipconfig，都是查看用户的网络配置的。</p><p>ifconfig是Linux系统中最常用的一个用来显示和设置网络设备的工具。其中“if”是“interface”的缩写。它可以用来设备网卡的状态，或是显示当前的设置。</p><p>下面我们简单地说明常用的命令组合：</p><p>1） 将第一块网卡的IP地址设置为192.168.0.1：</p><pre><code class="hljs"> ifconfig eth0 192.168.0.1 （格式：ifconfig 网络设备名 IP地址） </code></pre><p>2） 暂时关闭或启用网卡：</p><pre><code class="hljs"> 关闭第一块网卡：ifconfig eth0 down  启用第一块网卡：ifconfig eth0 up </code></pre><p>3） 将第一块网卡的子网掩码设置为255.255.255.0：</p><pre><code class="hljs"> ifconfig eth0 netmask 255.255.255.0（格式：ifconfig 网络设备名 netmask 子网掩码） </code></pre><p>我们也可以同时设置IP地址和子网掩码：</p><pre><code class="hljs"> ifconfig eth0 192.168.0.1 netmask 255.255.255.0 </code></pre><p>4） 将第一块网卡的广播地址设置为192.168.0.255：</p><pre><code class="hljs"> ifconfig eth0 –broadcast 192.168.0.255 </code></pre><p>5） 将第一块网卡设置为不接收多播数据包：</p><pre><code class="hljs"> ifconifg eth0 allmulti </code></pre><p>如果要让其接收，则使用命令：</p><pre><code class="hljs"> ifconfig eth0 -allmulti </code></pre><p>6） 查看第一块网卡的状态：</p><pre><code class="hljs"> ifconfig eth0 </code></pre><p>如果要查看所有的网卡状态，则直接使用不带参数的ifconfig命令即可。</p><p>ifconfig输出的状态信息是十分有用的，下面，我们就简单说明一下：</p><p>有几个状态比较重要：</p><pre><code class="hljs"> ? UP/DOWN：网卡是否启动了，如果是DOWN的话，那肯定无法用的；  ? RX packets中的errors包的数量如果过大说明网卡在接收时有问题；  ? TX packets中的errors包的数量如果过大说明网卡在发送时有问题； </code></pre><h3 id="4-iwconfig">4. iwconfig</h3><p>iwconfig 工具与 ifconfig 和 ethtool 类似。是用于无线网卡的。</p><p>你可以用他查看设置基本的 Wi-Fi 网络信息,</p><p>例如 SSID, channel 和 encryption.还有其他很多配置你也可以查看和修改，, 包括 接收灵敏度, RTS/CTS, 发送数据包的分片大小,以及无线网卡的重传机制。</p><h3 id="5-nslookup">5. nslookup</h3><p>nslookup 这个命令在有ip地址时，可以用这个命令来显示主机名，可以找到给定域名的所有 ip 地址。而你必须连接到互联网才能使用这个命令。</p><p>例如： nslookup <a href="http://marsge.cn">marsge.cn</a></p><p>你也可以使用 nslookup 从 ip 获得主机名或从主机名获得 ip。</p><h3 id="6-traceroute">6. traceroute</h3><p>一个方便的工具。可用来查看数据包在提交到远程系统或者网站时候所经过的路由器的 IP 地址、跳数和响应时间。同样你必须链接到互联网才能使用这个命令。</p><h3 id="7-finger">7. finger</h3><p>查看用户信息。显示用户的登录名字、真实名字以及登录终端的名字和登录权限。这是 unix 一个很老的命令，现在已很少使用了。</p><h3 id="8-telnet">8. telnet</h3><p>通过 telnet 协议连接目标主机，如果 telnet 连接可以在任一端口上完成即代表着两台主机间的连接良好。</p><p>telnet hostname port - 使用指定的端口 telnet 主机名。这通常用来测试主机是否在线或者网络是否正常。</p><h3 id="9-ethtool">9. ethtool</h3><p>ethtool 允许你查看和更改网卡的许多设置（不包括 Wi-Fi 网卡）。你可以管理许多高级设置，包括 tx/rx、校验及网络唤醒功能。下面是一些你可能感兴趣的基本命令：</p><pre><code class="hljs">ethtool -i //显示一个特定网卡的驱动信息，检查软件兼容性时尤其有用ethtool -p //启动一个适配器的指定行为，比如让适配器的 LED 灯闪烁，以帮助你在多个适配器或接口中标识接口名称ethtool -s //显示网络统计信息ethtool speed &lt;10|100|1000&gt; //设置适配器的连接速度，单位是 Mbps</code></pre><h3 id="10-netstat">10. netstat</h3><p>发现主机连接最有用最通用的 Linux 命令。你可以使用”netstat -g”查询该主机订阅的所有多播组（网络）</p><pre><code class="hljs">netstat -nap | grep port //将会显示使用该端口的应用程序的进程 idnetstat -a or netstat –all //将会显示包括 TCP 和 UDP 的所有连接netstat –tcp or netstat –t //将会显示 TCP 连接netstat –udp or netstat –u //将会显示 UDP 连接netstat -g //将会显示该主机订阅的所有多播网络。</code></pre><h3 id="11-ifup">11. ifup</h3><p>ifup命令用于重新启动指定的网络设备。ifup命令的格式为：ifup 网络设备文件名。</p><p>ifup命令使用举例如下：</p><pre><code class="hljs">ifup eth0  //重新启动网卡eth0。ifup lo  //重新启动本地回绕网卡lo。</code></pre><h3 id="12-ifdown">12.ifdown</h3><p>ifdown命令用于关闭指定的网络设备。ifdown命令的格式为：ifdown 网络设备文件名。</p><p>ifdown命令使用举例如下：</p><pre><code class="hljs">ifdown eth0  //关闭网卡eth0。ifdown lo  //关闭本地回绕网卡lo。 </code></pre><h3 id="13．ethtool">13．ethtool</h3><p>ethtool命令用来查看或者修改指定网卡的工作方式。</p><p>ethtool命令的使用举例如下：</p><pre><code class="hljs">     ethtool eth0 // 查看网卡eth0的工作方式，内容包括网卡的传输速度、全双工或半双工传输、网卡连接检测是否激活、网卡是否工作在自动协商状态等。     ethtool –s eth0 speed 10 duplex half   // 设置网卡eth0的传输速度为10M、半双工传输模式。     ethtool –s eth1 speed 100 duplex full autoneg off  // 设置网卡eth1的传输速度为100M、全双工、非自动协商模式。        </code></pre><h3 id="14．mii-tool">14．mii-tool</h3><p>mii-tool命令用于查看或修改指定网卡的通信协商方式。</p><p>mii-tool命令的使用举例如下:</p><pre><code class="hljs">   mii-tool // 以简明的形式显示本机物理网卡的工作方式。   mii-tool –v // 以详细的形式显示本机物理网卡的工作方式。   mii-tool -F 10baseT-FD eth0 // 设置网卡eth0工作在10M、全双工模式下。   mii-tool –r eth0 // 设置网卡eth0工作在自动协商工作模式。   mii-tool –w eth0 // 实时监控网卡eth0工作模式的改变。</code></pre><h3 id="15-route">15.route</h3><p>route命令是用来查看和设置Linux系统的路由信息，以实现与其它网络的通讯。要实现两个不同的子网之间的网络通讯，需要一台连接两个网络路由器或者同时位于两个网络的网关来实现。</p><p>在Linux系统中，我们通常设置路由是为了解决以下问题：该Linux机器在一个局域网中，局域网中有一个网关，能够让你的机器访问Internet，那么我们就需要将这台机器的IP地址设置为Linux机器的默认路由。</p><p>1） 增加一个默认路由：</p><pre><code class="hljs">route add 0.0.0.0 gw 网关地址 </code></pre><p>2） 删除一个默认路由：</p><pre><code class="hljs"> route del 0.0.0.0 gw 网关地址 </code></pre><p>3） 显示出当前路由表</p><pre><code class="hljs">route</code></pre><p>route命令的使用举例如下：</p><pre><code class="hljs"> route // 显示路由信息。 route add –host 192.168.1.110 dev eth0  // 给网卡eth0的路由表中加入新地址192.168.1.110。 route add –net 192.168.1.0 netmask 255.255.255.0 gw 192.168.1.1  // 给子网192.168.1.0添加路由和网关，新增加的路由和网关地址为192.168.1.1。 route add default gw 192.168.0.1  // 给路由表中添加默认网关地址192.168.0.1 route del –host 192.168.1.110 dev eth0    // 删除网卡eth0路由表中的地址192.168.1.110。 route del –net 192.168.1.0 netmask 255.255.255.0 // 在路由表中删除子网192.168.1.0的路由信息。 route change 192.168.1.0 mask 255.255.255.0 192.168.10.100   // 将子网 192.168.1.0 的下一跃点地址设置为 192.168.10.100。</code></pre><h3 id="16．netstat">16．netstat</h3><p>netstat命令用于显示本机上与IP、TCP、UDP和ICMP协议相关的统计数据，该命令经常被用于检验本机各端口的网络连接情况。</p><p>netstat命令使用举例如下：</p><pre><code class="hljs">netstat // 显示本机网络连接情况。netstat –a // 显示所有的有效连接信息，包括已建立的连接（ESTABLISHED）和监听的连接请求（LISTENING）。netstat –ac  // 以连续的形式显示所有的有效连接信息，每隔1秒刷新1次显示，直到用户中断显示。netstat -i  // 显示系统中所有网络接口信息，包括物理网卡、网卡别名和本地回环网卡。netstat –n // 显示系统中所有已建立的连接。netstat –r // 显示路由表。netstat –ta // 显示有效的TCP连接。netstat –ua // 显示有效的UDP连接。netstat –s // 显示各个协议的统计信息。netstat -an | grep 2811 // 显示端口号为2811的网络连接信息。</code></pre><h3 id="17-service">17. service</h3><p>service命令能够将目录“/etc/init.d/”中有关网络服务或系统服务脚本程序以一种统一的格式执行，格式为：“service 脚本程序 选项”，常用选项有：status、stop、start、restart。service命令使用举例如下：</p><pre><code class="hljs">   service network status   // 查看网络的工作状况，将显示当前主机中的所有物理网卡和激活的网卡。操作结果如下：   service network stop // 关闭当前主机中的网卡，该操作将停止当前主机的对外网络连接。   service network start // 打开当前主机中的网卡，该操作使当前主机获取IP地址，进行对外网络连接。   service network restart // 先执行service network stop的功能，再执行service network start的功能。   service named status // 查看当前主机域名服务状态。 </code></pre><h2 id="系统信息">系统信息</h2><p>arch 显示机器的处理器架构</p><p>uname -m 显示机器的处理器架构</p><p>uname -r 显示正在使用的内核版本</p><p>dmidecode -q 显示硬件系统部件 - (SMBIOS / DMI)</p><p>hdparm -i /dev/hda 罗列一个磁盘的架构特性</p><p>hdparm -tT /dev/sda 在磁盘上执行测试性读取操作</p><p>cat /proc/cpuinfo 显示CPU info的信息</p><p>cat /proc/interrupts 显示中断</p><p>cat /proc/meminfo 校验内存使用</p><p>cat /proc/swaps 显示哪些swap被使用</p><p>cat /proc/version 显示内核的版本</p><p>cat /proc/net/dev 显示网络适配器及统计</p><p>cat /proc/mounts 显示已加载的文件系统</p><p>lspci -tv 罗列 PCI 设备</p><p>lsusb -tv 显示 USB 设备</p><p>date 显示系统日期</p><p>cal 2007 显示2007年的日历表</p><p>date 041217002007.00 设置日期和时间 - 月日时分年.秒</p><p>clock -w 将时间修改保存到 BIOS</p><h2 id="关机-系统的关机、重启以及登出">关机 (系统的关机、重启以及登出 )</h2><p>shutdown -h now 关闭系统</p><p>init 0 关闭系统</p><p>telinit 0 关闭系统</p><p>shutdown -h hours:minutes &amp; 按预定时间关闭系统</p><p>shutdown -c 取消按预定时间关闭系统</p><p>shutdown -r now 重启</p><p>reboot 重启</p><p>logout 注销</p><h2 id="文件和目录">文件和目录</h2><p>cd /home 进入 ‘/ home’ 目录’</p><p>cd … 返回上一级目录</p><p>cd …/… 返回上两级目录</p><p>cd 进入个人的主目录</p><p>cd ~user1 进入个人的主目录</p><p>cd - 返回上次所在的目录</p><p>pwd 显示工作路径</p><p>ls 查看目录中的文件</p><p>ls -F 查看目录中的文件</p><p>ls -l 显示文件和目录的详细资料(权限)</p><p>ls -a 显示隐藏文件</p><p>ls <em>[0-9]</em> 显示包含数字的文件名和目录名</p><p>tree 显示文件和目录由根目录开始的树形结构</p><p>lstree 显示文件和目录由根目录开始的树形结构</p><p>mkdir dir1 创建一个叫做 ‘dir1’ 的目录’</p><p>mkdir dir1 dir2 同时创建两个目录</p><p>mkdir -p /tmp/dir1/dir2 创建一个目录树</p><p>rm -f file1 删除一个叫做 ‘file1’ 的文件’</p><p>rmdir dir1 删除一个叫做 ‘dir1’ 的目录’</p><p>rm -rf dir1 删除一个叫做 ‘dir1’ 的目录并同时删除其内容</p><p>rm -rf dir1 dir2 同时删除两个目录及它们的内容</p><p>mv dir1 new_dir 重命名/移动 一个目录</p><p>cp file1 file2 复制一个文件</p><p>cp dir/* . 复制一个目录下的所有文件到当前工作目录</p><p>cp -a /tmp/dir1 . 复制一个目录到当前工作目录</p><p>cp -a dir1 dir2 复制一个目录</p><p>cp -r dir1 dir2 复制一个目录及子目录</p><p>ln -s file1 lnk1 创建一个指向文件或目录的软链接</p><p>ln file1 lnk1 创建一个指向文件或目录的物理链接</p><p>touch -t 0712250000 file1 修改一个文件或目录的时间戳 - (YYMMDDhhmm)</p><p>file file1 outputs the mime type of the file as texticonv -l 列出已知的编码</p><h2 id="文件搜索">文件搜索</h2><p>find / -name file1 从 ‘/’ 开始进入根文件系统搜索文件和目录</p><p>find / -user user1 搜索属于用户 ‘user1’ 的文件和目录</p><p>find /home/user1 -name *.bin 在目录 ‘/ home/user1’ 中搜索带有’.bin’ 结尾的文件</p><p>find /usr/bin -type f -atime +100 搜索在过去100天内未被使用过的执行文件</p><p>find /usr/bin -type f -mtime -10 搜索在10天内被创建或者修改过的文件</p><p>find / -name *.rpm -exec chmod 755 ‘{}’ ; 搜索以 ‘.rpm’ 结尾的文件并定义其权限</p><p>find / -xdev -name *.rpm 搜索以 ‘.rpm’ 结尾的文件，忽略光驱、捷盘等可移动设备</p><p>locate *.ps 寻找以 ‘.ps’ 结尾的文件 - 先运行 ‘updatedb’ 命令</p><p>whereis halt 显示一个二进制文件、源码或man的位置</p><p>which halt 显示一个二进制文件或可执行文件的完整路径</p><h2 id="挂载一个文件系统">挂载一个文件系统</h2><p>mount /dev/hda2 /mnt/hda2 挂载一个叫做hda2的盘 - 确定目录 ‘/ mnt/hda2’ 已经存在</p><p>umount /dev/hda2 卸载一个叫做hda2的盘 - 先从挂载点 ‘/ mnt/hda2’ 退出</p><p>fuser -km /mnt/hda2 当设备繁忙时强制卸载</p><p>umount -n /mnt/hda2 运行卸载操作而不写入 /etc/mtab 文件- 当文件为只读或当磁盘写满时非常有用</p><p>mount /dev/fd0 /mnt/floppy 挂载一个软盘</p><p>mount /dev/cdrom /mnt/cdrom 挂载一个cdrom或dvdrom</p><p>mount /dev/hdc /mnt/cdrecorder 挂载一个cdrw或dvdrom</p><p>mount /dev/hdb /mnt/cdrecorder 挂载一个cdrw或dvdrom</p><p>mount -o loop file.iso /mnt/cdrom 挂载一个文件或ISO镜像文件</p><p>mount -t vfat /dev/hda5 /mnt/hda5 挂载一个Windows FAT32文件系统</p><p>mount /dev/sda1 /mnt/usbdisk 挂载一个usb 捷盘或闪存设备</p><p>mount -t smbfs -o username=user,password=pass//WinClient/share /mnt/share 挂载一个windows网络共享</p><h2 id="磁盘空间">磁盘空间</h2><p>df -h 显示已经挂载的分区列表</p><p>ls -lSr |more 以尺寸大小排列文件和目录</p><p>du -sh dir1 估算目录 ‘dir1’ 已经使用的磁盘空间’</p><p>du -sk * | sort -rn 以容量大小为依据依次显示文件和目录的大小</p><p>rpm -q -a --qf ‘%10{SIZE}t%{NAME}n’ | sort -k1,1n 以大小为依据依次显示已安装的rpm包所使用的空间 (fedora, redhat类系统)</p><p>dpkg-query -W -f=‘<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mi>I</mi><mi>n</mi><mi>s</mi><mi>t</mi><mi>a</mi><mi>l</mi><mi>l</mi><mi>e</mi><mi>d</mi><mo>−</mo><mi>S</mi><mi>i</mi><mi>z</mi><mi>e</mi><mo separator="true">;</mo><mn>10</mn></mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">{Installed-Size;10}t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal">n</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.01968em;">ll</span><span class="mord mathnormal">e</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">i</span><span class="mord mathnormal">ze</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">10</span></span><span class="mord mathnormal">t</span></span></span></span>{Package}n’ | sort -k1,1n 以大小为依据显示已安装的deb包所使用的空间 (ubuntu, debian类系统)</p><h2 id="用户和群组">用户和群组</h2><p>groupadd group_name 创建一个新用户组</p><p>groupdel group_name 删除一个用户组</p><p>groupmod -n new_group_name old_group_name 重命名一个用户组</p><p>useradd -c &quot;Name Surname &quot; -g admin -d /home/user1 -s /bin/bash user1 创建一个属于 “admin” 用户组的用户</p><p>useradd user1 创建一个新用户</p><p>userdel -r user1 删除一个用户 ( ‘-r’ 排除主目录)</p><p>usermod -c “User FTP” -g system -d /ftp/user1 -s /bin/nologin user1 修改用户属性</p><p>passwd 修改口令</p><p>passwd user1 修改一个用户的口令 (只允许root执行)</p><p>chage -E 2005-12-31 user1 设置用户口令的失效期限</p><p>pwck 检查 ‘/etc/passwd’ 的文件格式和语法修正以及存在的用户</p><p>grpck 检查 ‘/etc/passwd’ 的文件格式和语法修正以及存在的群组</p><p>newgrp group_name 登陆进一个新的群组以改变新创建文件的预设群组</p><h2 id="文件的权限-使用-“-”-设置权限，使用-“-”-用于取消">文件的权限 - 使用 “+” 设置权限，使用 “-” 用于取消</h2><p>ls -lh 显示权限</p><p>ls /tmp | pr -T5 -W$COLUMNS 将终端划分成5栏显示</p><p>chmod ugo+rwx directory1 设置目录的所有人(u)、群组(g)以及其他人(o)以读（r ）、写(w)和执行(x)的权限</p><p>chmod go-rwx directory1 删除群组(g)与其他人(o)对目录的读写执行权限</p><p>chown user1 file1 改变一个文件的所有人属性</p><p>chown -R user1 directory1 改变一个目录的所有人属性并同时改变改目录下所有文件的属性</p><p>chgrp group1 file1 改变文件的群组</p><p>chown user1:group1 file1 改变一个文件的所有人和群组属性</p><p>find / -perm -u+s 罗列一个系统中所有使用了SUID控制的文件</p><p>chmod u+s /bin/file1 设置一个二进制文件的 SUID 位 - 运行该文件的用户也被赋予和所有者同样的权限</p><p>chmod u-s /bin/file1 禁用一个二进制文件的 SUID位</p><p>chmod g+s /home/public 设置一个目录的SGID 位 - 类似SUID ，不过这是针对目录的</p><p>chmod g-s /home/public 禁用一个目录的 SGID 位</p><p>chmod o+t /home/public 设置一个文件的 STIKY 位 - 只允许合法所有人删除文件</p><p>chmod o-t /home/public 禁用一个目录的 STIKY 位</p><h2 id="文件的特殊属性-使用-“-”-设置权限，使用-“-”-用于取消">文件的特殊属性 - 使用 “+” 设置权限，使用 “-” 用于取消</h2><p>chattr +a file1 只允许以追加方式读写文件</p><p>chattr +c file1 允许这个文件能被内核自动压缩/解压</p><p>chattr +d file1 在进行文件系统备份时，dump程序将忽略这个文件</p><p>chattr +i file1 设置成不可变的文件，不能被删除、修改、重命名或者链接</p><p>chattr +s file1 允许一个文件被安全地删除</p><p>chattr +S file1 一旦应用程序对这个文件执行了写操作，使系统立刻把修改的结果写到磁盘</p><p>chattr +u file1 若文件被删除，系统会允许你在以后恢复这个被删除的文件</p><p>lsattr 显示特殊的属性</p><h2 id="打包和压缩文件">打包和压缩文件</h2><p>bunzip2 file1.bz2 解压一个叫做 'file1.bz2’的文件</p><p>bzip2 file1 压缩一个叫做 ‘file1’ 的文件</p><p>gunzip file1.gz 解压一个叫做 'file1.gz’的文件</p><p>gzip file1 压缩一个叫做 'file1’的文件</p><p>gzip -9 file1 最大程度压缩</p><p>rar a file1.rar test_file 创建一个叫做 ‘file1.rar’ 的包</p><p>rar a file1.rar file1 file2 dir1 同时压缩 ‘file1’, ‘file2’ 以及目录 ‘dir1’</p><p>rar x file1.rar 解压rar包</p><p>unrar x file1.rar 解压rar包</p><p>tar -cvf archive.tar file1 创建一个非压缩的 tarball</p><p>tar -cvf archive.tar file1 file2 dir1 创建一个包含了 ‘file1’, ‘file2’ 以及 'dir1’的档案文件</p><p>tar -tf archive.tar 显示一个包中的内容</p><p>tar -xvf archive.tar 释放一个包</p><p>tar -xvf archive.tar -C /tmp 将压缩包释放到 /tmp目录下</p><p>tar -cvfj archive.tar.bz2 dir1 创建一个bzip2格式的压缩包</p><p>tar -jxvf archive.tar.bz2 解压一个bzip2格式的压缩包</p><p>tar -cvfz archive.tar.gz dir1 创建一个gzip格式的压缩包</p><p>tar -zxvf archive.tar.gz 解压一个gzip格式的压缩包</p><p>zip file1.zip file1 创建一个zip格式的压缩包</p><p>zip -r file1.zip file1 file2 dir1 将几个文件和目录同时压缩成一个zip格式的压缩包</p><p>unzip file1.zip 解压一个zip格式压缩包</p><h2 id="RPM-包-（Fedora-Redhat及类似系统）">RPM 包 - （Fedora, Redhat及类似系统）</h2><p>rpm -ivh package.rpm 安装一个rpm包</p><p>rpm -ivh --nodeeps package.rpm 安装一个rpm包而忽略依赖关系警告</p><p>rpm -U package.rpm 更新一个rpm包但不改变其配置文件</p><p>rpm -F package.rpm 更新一个确定已经安装的rpm包</p><p>rpm -e package_name.rpm 删除一个rpm包</p><p>rpm -qa 显示系统中所有已经安装的rpm包</p><p>rpm -qa | grep httpd 显示所有名称中包含 “httpd” 字样的rpm包</p><p>rpm -qi package_name 获取一个已安装包的特殊信息</p><p>rpm -qg “System Environment/Daemons” 显示一个组件的rpm包</p><p>rpm -ql package_name 显示一个已经安装的rpm包提供的文件列表</p><p>rpm -qc package_name 显示一个已经安装的rpm包提供的配置文件列表</p><p>rpm -q package_name --whatrequires 显示与一个rpm包存在依赖关系的列表</p><p>rpm -q package_name --whatprovides 显示一个rpm包所占的体积</p><p>rpm -q package_name --scripts 显示在安装/删除期间所执行的脚本l</p><p>rpm -q package_name --changelog 显示一个rpm包的修改历史</p><p>rpm -qf /etc/httpd/conf/httpd.conf 确认所给的文件由哪个rpm包所提供</p><p>rpm -qp package.rpm -l 显示由一个尚未安装的rpm包提供的文件列表</p><p>rpm --import /media/cdrom/RPM-GPG-KEY 导入公钥数字证书</p><p>rpm --checksig package.rpm 确认一个rpm包的完整性</p><p>rpm -qa gpg-pubkey 确认已安装的所有rpm包的完整性</p><p>rpm -V package_name 检查文件尺寸、 许可、类型、所有者、群组、MD5检查以及最后修改时间</p><p>rpm -Va 检查系统中所有已安装的rpm包- 小心使用</p><p>rpm -Vp package.rpm 确认一个rpm包还未安装</p><p>rpm2cpio package.rpm | cpio --extract --make-directories <em>bin</em> 从一个rpm包运行可执行文件</p><p>rpm -ivh /usr/src/redhat/RPMS/<code>arch</code>/package.rpm 从一个rpm源码安装一个构建好的包</p><p>rpmbuild --rebuild package_name.src.rpm 从一个rpm源码构建一个 rpm 包</p><h2 id="YUM-软件包升级器-（Fedora-RedHat及类似系统）">YUM 软件包升级器 - （Fedora, RedHat及类似系统）</h2><p>yum install package_name 下载并安装一个rpm包</p><p>yum localinstall package_name.rpm 将安装一个rpm包，使用你自己的软件仓库为你解决所有依赖关系</p><p>yum update package_name.rpm 更新当前系统中所有安装的rpm包</p><p>yum update package_name 更新一个rpm包</p><p>yum remove package_name 删除一个rpm包</p><p>yum list 列出当前系统中安装的所有包</p><p>yum search package_name 在rpm仓库中搜寻软件包</p><p>yum clean packages 清理rpm缓存删除下载的包</p><p>yum clean headers 删除所有头文件</p><p>yum clean all 删除所有缓存的包和头文件</p><h2 id="DEB-包-Debian-Ubuntu-以及类似系统">DEB 包 (Debian, Ubuntu 以及类似系统)</h2><p>dpkg -i package.deb 安装/更新一个 deb 包</p><p>dpkg -r package_name 从系统删除一个 deb 包</p><p>dpkg -l 显示系统中所有已经安装的 deb 包</p><p>dpkg -l | grep httpd 显示所有名称中包含 “httpd” 字样的deb包</p><p>dpkg -s package_name 获得已经安装在系统中一个特殊包的信息</p><p>dpkg -L package_name 显示系统中已经安装的一个deb包所提供的文件列表</p><p>dpkg --contents package.deb 显示尚未安装的一个包所提供的文件列表</p><p>dpkg -S /bin/ping 确认所给的文件由哪个deb包提供</p><h2 id="APT-软件工具-Debian-Ubuntu-以及类似系统">APT 软件工具 (Debian, Ubuntu 以及类似系统)</h2><p>apt-get install package_name 安装/更新一个 deb 包</p><p>apt-cdrom install package_name 从光盘安装/更新一个 deb 包</p><p>apt-get update 升级列表中的软件包</p><p>apt-get upgrade 升级所有已安装的软件</p><p>apt-get remove package_name 从系统删除一个deb包</p><p>apt-get check 确认依赖的软件仓库正确</p><p>apt-get clean 从下载的软件包中清理缓存</p><p>apt-cache search searched-package 返回包含所要搜索字符串的软件包名称</p><h2 id="查看文件内容">查看文件内容</h2><p>cat file1 从第一个字节开始正向查看文件的内容</p><p>tac file1 从最后一行开始反向查看一个文件的内容</p><p>more file1 查看一个长文件的内容</p><p>less file1 类似于 ‘more’ 命令，但是它允许在文件中和正向操作一样的反向操作</p><p>head -2 file1 查看一个文件的前两行</p><p>tail -2 file1 查看一个文件的最后两行</p><p>tail -f /var/log/messages 实时查看被添加到一个文件中的内容</p><h2 id="文本处理">文本处理</h2><p>cat file1 | command( sed, grep, awk, grep, etc…) &gt; result.txt 合并一个文件的详细说明文本，并将简介写入一个新文件中</p><p>cat file1 | command( sed, grep, awk, grep, etc…) &gt;&gt; result.txt 合并一个文件的详细说明文本，并将简介写入一个已有的文件中</p><p>grep Aug /var/log/messages 在文件 '/var/log/messages’中查找关键词&quot;Aug&quot;</p><p>grep ^Aug /var/log/messages 在文件 '/var/log/messages’中查找以&quot;Aug&quot;开始的词汇</p><p>grep [0-9] /var/log/messages 选择 ‘/var/log/messages’ 文件中所有包含数字的行</p><p>grep Aug -R /var/log/* 在目录 ‘/var/log’ 及随后的目录中搜索字符串&quot;Aug&quot;</p><p>sed ‘s/stringa1/stringa2/g’ example.txt 将example.txt文件中的 “string1” 替换成 “string2”</p><p>sed ‘/^$/d’ example.txt 从example.txt文件中删除所有空白行</p><p>sed ‘/ *#/d; /^$/d’ example.txt 从example.txt文件中删除所有注释和空白行</p><p>echo ‘esempio’ | tr ‘[:lower:]’ ‘[:upper:]’ 合并上下单元格内容</p><p>sed -e ‘1d’ result.txt 从文件example.txt 中排除第一行</p><p>sed -n ‘/stringa1/p’ 查看只包含词汇 &quot;string1&quot;的行</p><p>sed -e ‘s/ *$//’ example.txt 删除每一行最后的空白字符</p><p>sed -e ‘s/stringa1//g’ example.txt 从文档中只删除词汇 “string1” 并保留剩余全部</p><p>sed -n ‘1,5p;5q’ example.txt 查看从第一行到第5行内容</p><p>sed -n ‘5p;5q’ example.txt 查看第5行</p><p>sed -e ‘s/00*/0/g’ example.txt 用单个零替换多个零</p><p>cat -n file1 标示文件的行数</p><p>cat example.txt | awk ‘NR%2==1’ 删除example.txt文件中的所有偶数行</p><p>echo a b c | awk ‘{print $1}’ 查看一行第一栏</p><p>echo a b c | awk ‘{print $1,$3}’ 查看一行的第一和第三栏</p><p>paste file1 file2 合并两个文件或两栏的内容</p><p>paste -d ‘+’ file1 file2 合并两个文件或两栏的内容，中间用&quot;+&quot;区分</p><p>sort file1 file2 排序两个文件的内容</p><p>sort file1 file2 | uniq 取出两个文件的并集(重复的行只保留一份)</p><p>sort file1 file2 | uniq -u 删除交集，留下其他的行</p><p>sort file1 file2 | uniq -d 取出两个文件的交集(只留下同时存在于两个文件中的文件)</p><p>comm -1 file1 file2 比较两个文件的内容只删除 ‘file1’ 所包含的内容</p><p>comm -2 file1 file2 比较两个文件的内容只删除 ‘file2’ 所包含的内容</p><p>comm -3 file1 file2 比较两个文件的内容只删除两个文件共有的部分</p><h2 id="字符设置和文件格式转换">字符设置和文件格式转换</h2><p>dos2unix filedos.txt fileunix.txt 将一个文本文件的格式从MSDOS转换成UNIX</p><p>unix2dos fileunix.txt filedos.txt 将一个文本文件的格式从UNIX转换成MSDOS</p><p>recode …HTML &lt; page.txt &gt; page.html 将一个文本文件转换成html</p><p>recode -l | more 显示所有允许的转换格式</p><h2 id="文件系统分析">文件系统分析</h2><p>badblocks -v /dev/hda1 检查磁盘hda1上的坏磁块</p><p>fsck /dev/hda1 修复/检查hda1磁盘上linux文件系统的完整性</p><p>fsck.ext2 /dev/hda1 修复/检查hda1磁盘上ext2文件系统的完整性</p><p>e2fsck /dev/hda1 修复/检查hda1磁盘上ext2文件系统的完整性</p><p>e2fsck -j /dev/hda1 修复/检查hda1磁盘上ext3文件系统的完整性</p><p>fsck.ext3 /dev/hda1 修复/检查hda1磁盘上ext3文件系统的完整性</p><p>fsck.vfat /dev/hda1 修复/检查hda1磁盘上fat文件系统的完整性</p><p>fsck.msdos /dev/hda1 修复/检查hda1磁盘上dos文件系统的完整性</p><p>dosfsck /dev/hda1 修复/检查hda1磁盘上dos文件系统的完整性</p><h2 id="初始化一个文件系统">初始化一个文件系统</h2><p>mkfs /dev/hda1 在hda1分区创建一个文件系统</p><p>mke2fs /dev/hda1 在hda1分区创建一个linux ext2的文件系统</p><p>mke2fs -j /dev/hda1 在hda1分区创建一个linux ext3(日志型)的文件系统</p><p>mkfs -t vfat 32 -F /dev/hda1 创建一个 FAT32 文件系统</p><p>fdformat -n /dev/fd0 格式化一个软盘</p><p>mkswap /dev/hda3 创建一个swap文件系统</p><h2 id="SWAP文件系统">SWAP文件系统</h2><p>mkswap /dev/hda3 创建一个swap文件系统</p><p>swapon /dev/hda3 启用一个新的swap文件系统</p><p>swapon /dev/hda2 /dev/hdb3 启用两个swap分区</p><h2 id="备份">备份</h2><p>dump -0aj -f /tmp/home0.bak /home 制作一个 ‘/home’ 目录的完整备份</p><p>dump -1aj -f /tmp/home0.bak /home 制作一个 ‘/home’ 目录的交互式备份</p><p>restore -if /tmp/home0.bak 还原一个交互式备份</p><p>rsync -rogpav --delete /home /tmp 同步两边的目录</p><p>rsync -rogpav -e ssh --delete /home ip_address:/tmp 通过SSH通道rsync</p><p>rsync -az -e ssh --delete ip_addr:/home/public /home/local 通过ssh和压缩将一个远程目录同步到本地目录</p><p>rsync -az -e ssh --delete /home/local ip_addr:/home/public 通过ssh和压缩将本地目录同步到远程目录</p><p>dd bs=1M if=/dev/hda | gzip | ssh user@ip_addr ‘dd of=hda.gz’ 通过ssh在远程主机上执行一次备份本地磁盘的操作</p><p>dd if=/dev/sda of=/tmp/file1 备份磁盘内容到一个文件</p><p>tar -Puf backup.tar /home/user 执行一次对 ‘/home/user’ 目录的交互式备份操作</p><p>( cd /tmp/local/ &amp;&amp; tar c . ) | ssh -C user@ip_addr ‘cd /home/share/ &amp;&amp; tar x -p’ 通过ssh在远程目录中复制一个目录内容</p><p>( tar c /home ) | ssh -C user@ip_addr ‘cd /home/backup-home &amp;&amp; tar x -p’ 通过ssh在远程目录中复制一个本地目录</p><p>tar cf - . | (cd /tmp/backup ; tar xf - ) 本地将一个目录复制到另一个地方，保留原有权限及链接</p><p>find /home/user1 -name ‘*.txt’ | xargs cp -av --target-directory=/home/backup/ --parents 从一个目录查找并复制所有以 ‘.txt’ 结尾的文件到另一个目录</p><p>find /var/log -name ‘*.log’ | tar cv --files-from=- | bzip2 &gt; log.tar.bz2 查找所有以 ‘.log’ 结尾的文件并做成一个bzip包</p><p>dd if=/dev/hda of=/dev/fd0 bs=512 count=1 做一个将 MBR (Master Boot Record)内容复制到软盘的动作</p><p>dd if=/dev/fd0 of=/dev/hda bs=512 count=1 从已经保存到软盘的备份中恢复MBR内容</p><h2 id="光盘">光盘</h2><p>cdrecord -v gracetime=2 dev=/dev/cdrom -eject blank=fast -force 清空一个可复写的光盘内容</p><p>mkisofs /dev/cdrom &gt; cd.iso 在磁盘上创建一个光盘的iso镜像文件</p><p>mkisofs /dev/cdrom | gzip &gt; cd_iso.gz 在磁盘上创建一个压缩了的光盘iso镜像文件</p><p>mkisofs -J -allow-leading-dots -R -V “Label CD” -iso-level 4 -o ./cd.iso data_cd 创建一个目录的iso镜像文件</p><p>cdrecord -v dev=/dev/cdrom cd.iso 刻录一个ISO镜像文件</p><p>gzip -dc cd_iso.gz | cdrecord dev=/dev/cdrom - 刻录一个压缩了的ISO镜像文件</p><p>mount -o loop cd.iso /mnt/iso 挂载一个ISO镜像文件</p><p>cd-paranoia -B 从一个CD光盘转录音轨到 wav 文件中</p><p>cd-paranoia – “-3” 从一个CD光盘转录音轨到 wav 文件中（参数-3）</p><p>cdrecord --scanbus 扫描总线以识别scsi通道</p><p>dd if=/dev/hdc | md5sum 校验一个设备的md5sum编码，例如一张 CD</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Linux </tag>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【福利】超星全自动刷网课刷题脚本开源【22.4.23更新】</title>
      <link href="/2022/03/12/%E3%80%90%E7%A6%8F%E5%88%A9%E3%80%91%E8%B6%85%E6%98%9F%E5%85%A8%E8%87%AA%E5%8A%A8%E5%88%B7%E7%BD%91%E8%AF%BE%E5%88%B7%E9%A2%98%E8%84%9A%E6%9C%AC%E5%BC%80%E6%BA%90/"/>
      <url>/2022/03/12/%E3%80%90%E7%A6%8F%E5%88%A9%E3%80%91%E8%B6%85%E6%98%9F%E5%85%A8%E8%87%AA%E5%8A%A8%E5%88%B7%E7%BD%91%E8%AF%BE%E5%88%B7%E9%A2%98%E8%84%9A%E6%9C%AC%E5%BC%80%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<h1>超星全自动刷网课刷题脚本开源</h1><h2 id="1-教程">1.教程</h2><ol><li><p>使用电脑自带的Edge浏览器</p></li><li><p>下载tampermonkey浏览器脚本管理工具。<a href="https://www.tampermonkey.net/?ext=dhdg&amp;browser=edge">下载地址点我</a></p></li><li><p>安装tampermonkey。这是直接安装在你Edge浏览器上的，傻瓜式操作。</p></li><li><p>安装完成后浏览器的右上角会出现一个图标，如下图<img src="/images/2022-3-12-3.png" alt="upload successful"></p></li><li><p>用鼠标左键点它，选择添加新脚本，然后把我下面写的代码复制粘贴进去（记得保存哦！），打开超星登录，你就会发现它变成全自动了。<img src="/images/2022-3-12-4.png" alt="upload successful"></p></li><li><p>如果你懒得复制代码，就点我封装好的js库去安装，下面我会放入网址。【更新内容】</p></li><li><p>脚本安装网址<a href="https://greasyfork.org/scripts/443325-%E8%B6%85%E6%98%9F%E5%B0%94%E9%9B%85mooc%E5%AD%A6%E4%B9%A0%E9%80%9A%E7%AB%A0%E8%8A%82%E6%8C%82%E6%9C%BA%E5%8A%A9%E6%89%8B-2022-3-19-%E4%B8%80%E4%BA%BF%E9%A2%98%E5%BA%93/code/%E8%B6%85%E6%98%9F%E5%B0%94%E9%9B%85MOOC%E5%AD%A6%E4%B9%A0%E9%80%9A%E7%AB%A0%E8%8A%82%E6%8C%82%E6%9C%BA%E5%8A%A9%E6%89%8B%E3%80%902022319%E3%80%91%E3%80%90%E4%B8%80%E4%BA%BF%E9%A2%98%E5%BA%93%E3%80%91.user.js">点我安装</a>  【更新内容】</p></li></ol><h2 id="2-脚本代码">2.脚本代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// ==UserScript==</span><br><span class="hljs-comment">// @name         超星尔雅MOOC学习通章节挂机助手【2022/3/19】【一亿题库】</span><br><span class="hljs-comment">// @version      8.0.13</span><br><span class="hljs-comment">// @namespace    Bruce_hai</span><br><span class="hljs-comment">// @description  发现很多脚本并不能搜索选项，空闲时间开发同时搜索【标题】【选项】和【超星id】能够更加精准并迅速的找到答案[高准确率带选项查询,急速响应,任何问题及时联系群主更新]自动挂机看尔雅MOOC，支持视频、音频、文档、图书自动完成，章节测验自动答题提交，支持自动切换任务点、挂机阅读时长、自动登录等，解除各类功能限制，开放自定义参数</span><br><span class="hljs-comment">// @author       Bruce_hai</span><br><span class="hljs-comment">// @match        *://*.chaoxing.com/*</span><br><span class="hljs-comment">// @match        *://*.edu.cn/*</span><br><span class="hljs-comment">// @match        *://*.nbdlib.cn/*</span><br><span class="hljs-comment">// @match        *://*.hnsyu.net/*</span><br><span class="hljs-comment">// @match        *://*.dayi100.com/*</span><br><span class="hljs-comment">// @connect      134.175.72.16</span><br><span class="hljs-comment">// @connect      119.6.233.156</span><br><span class="hljs-comment">// @run-at       document-end</span><br><span class="hljs-comment">// @grant        unsafeWindow</span><br><span class="hljs-comment">// @grant        GM_xmlhttpRequest</span><br><span class="hljs-comment">// @grant        GM_setValue</span><br><span class="hljs-comment">// @grant        GM_getValue</span><br><span class="hljs-comment">// @grant        GM_setClipboard</span><br><span class="hljs-comment">// @license      MIT</span><br><span class="hljs-comment">// @require      https://libs.baidu.com/jquery/2.0.0/jquery.min.js</span><br><span class="hljs-comment">// @original-script https://greasyfork.org/scripts/369625</span><br><span class="hljs-comment">// @original-author wyn665817</span><br><span class="hljs-comment">// @original-script https://scriptcat.org/script-show-page/10/code</span><br><span class="hljs-comment">// @original-author coder_tq</span><br><span class="hljs-comment">// @original-license MIT</span><br><span class="hljs-comment">// ==/UserScript==</span><br><span class="hljs-title function_">GM_setValue</span>(<span class="hljs-string">&quot;video_url&quot;</span>,<span class="hljs-number">0</span>)<br><span class="hljs-comment">// 设置修改后，需要刷新或重新打开网课页面才会生效 设置了响应时间，更新再等等吧</span><br><span class="hljs-keyword">var</span> setting = &#123;<br>    <span class="hljs-comment">// 5E3 == 5000，科学记数法，表示毫秒数</span><br>    <span class="hljs-attr">time</span>: <span class="hljs-number">5E3</span> <span class="hljs-comment">// 默认响应速度为5秒，不建议小于5秒</span><br>    , <span class="hljs-attr">review</span>: <span class="hljs-number">0</span> <span class="hljs-comment">// 复习模式，完整挂机视频(音频)时长，支持挂机任务点已完成的视频和音频，默认关闭</span><br>    , <span class="hljs-attr">queue</span>: <span class="hljs-number">1</span> <span class="hljs-comment">// 队列模式，开启后任务点逐一完成，关闭则单页面所有任务点同时进行，默认开启</span><br> <br>    <span class="hljs-comment">// 1代表开启，0代表关闭</span><br>    , <span class="hljs-attr">video</span>: <span class="hljs-number">1</span> <span class="hljs-comment">// 视频支持后台、切换窗口不暂停，支持多视频，默认开启</span><br>    , <span class="hljs-attr">work</span>: <span class="hljs-number">1</span> <span class="hljs-comment">// 自动答题功能(章节测验)，作业需要手动开启查询，高准确率，默认开启</span><br>    , <span class="hljs-attr">audio</span>: <span class="hljs-number">1</span> <span class="hljs-comment">// 音频自动播放，与视频功能共享vol和rate参数，默认开启</span><br>    , <span class="hljs-attr">book</span>: <span class="hljs-number">1</span> <span class="hljs-comment">// 图书阅读任务点，非课程阅读任务点，默认开启</span><br>    , <span class="hljs-attr">docs</span>: <span class="hljs-number">1</span> <span class="hljs-comment">// 文档阅读任务点，PPT类任务点自动完成阅读任务，默认开启</span><br>    <span class="hljs-comment">// 本区域参数，上方为任务点功能，下方为独立功能</span><br>    , <span class="hljs-attr">jump</span>: <span class="hljs-number">1</span> <span class="hljs-comment">// 自动切换任务点、章节、课程(需要配置course参数)，默认开启</span><br>    , <span class="hljs-attr">read</span>: <span class="hljs-string">&#x27;65&#x27;</span> <span class="hljs-comment">// 挂机课程阅读时间，单位是分钟，&#x27;65&#x27;代表挂机65分钟，请手动打开阅读页面，默认&#x27;65&#x27;分钟</span><br>    , <span class="hljs-attr">face</span>: <span class="hljs-number">1</span> <span class="hljs-comment">// 解除面部识别(不支持二维码类面部采集)，此功能仅为临时解除，默认开启</span><br>    , <span class="hljs-attr">total</span>: <span class="hljs-number">1</span> <span class="hljs-comment">// 显示课程进度的统计数据，在学习进度页面的上方展示，默认开启</span><br> <br>    <span class="hljs-comment">// 仅开启video(audio)时，修改此处才会生效</span><br>    , <span class="hljs-attr">line</span>: <span class="hljs-string">&#x27;公网1&#x27;</span> <span class="hljs-comment">// 视频播放的默认资源线路，此功能适用于系统默认线路无资源，默认&#x27;公网1&#x27;</span><br>    , <span class="hljs-attr">http</span>: <span class="hljs-string">&#x27;标清&#x27;</span> <span class="hljs-comment">// 视频播放的默认清晰度，无效参数则使用系统默认清晰度，默认&#x27;标清&#x27;</span><br>    <span class="hljs-comment">// 本区域参数，上方为video功能独享，下方为audio功能共享</span><br>    , <span class="hljs-attr">vol</span>: <span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-comment">// 默认音量的百分数，设定范围：[0,100]，&#x27;0&#x27;为静音，默认&#x27;0&#x27;</span><br>    , <span class="hljs-attr">rate</span>: <span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-comment">// 视频播放默认倍率，参数范围0∪[0.0625,16]，&#x27;0&#x27;为秒过，倍速功能已失效，先一倍速看着</span><br> <br>    <span class="hljs-comment">// 仅开启work时，修改此处才会生效</span><br>    <span class="hljs-comment">// auto: 1 已放置面板,请在面板配置,默认为自动提交 // 答题完成后自动提交，默认开启</span><br>    , <span class="hljs-attr">none</span>: <span class="hljs-number">0</span> <span class="hljs-comment">// 无匹配答案时执行默认操作，关闭后若题目无匹配答案则会暂时保存已作答的题目，默认开启</span><br>    , <span class="hljs-attr">scale</span>: <span class="hljs-number">0</span> <span class="hljs-comment">// 富文本编辑器高度自动拉伸，用于文本类题目，答题框根据内容自动调整大小，默认关闭</span><br> <br>    <span class="hljs-comment">// 仅开启jump时，修改此处才会生效</span><br>    , <span class="hljs-attr">course</span>: <span class="hljs-number">1</span> <span class="hljs-comment">// 当前课程完成后自动切换课程，仅支持按照根目录课程顺序切换，默认开启</span><br>    , <span class="hljs-attr">lock</span>: <span class="hljs-number">1</span> <span class="hljs-comment">// 跳过未开放(图标是锁)的章节，即闯关模式或定时发放的任务点，默认开启</span><br>    ,version :<span class="hljs-string">&#x27;8.0.13&#x27;</span><br>    <span class="hljs-comment">// 自动登录功能配置区</span><br>    , <span class="hljs-attr">school</span>: <span class="hljs-string">&#x27;账号为手机号可以不修改此参数&#x27;</span> <span class="hljs-comment">// 学校/单位/机构码，要求完整有效可查询，例如&#x27;清华大学&#x27;</span><br>    , <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment">// 学号/工号/借书证号(邮箱/手机号/账号)，例如&#x27;2018010101&#x27;，默认&#x27;&#x27;</span><br>    , <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment">// 密码，例如&#x27;123456&#x27;，默认&#x27;&#x27;</span><br> <br>&#125;,<br>    _self = unsafeWindow,<br>    url = location.<span class="hljs-property">pathname</span>,<br>    top = _self,<br>    <span class="hljs-comment">//apihost = &quot;http://134.175.72.16/xuexitong&quot;;//   下面的不能用用这个</span><br>    apihost = <span class="hljs-string">&quot;http://119.6.233.156:309/xuexitong&quot;</span>;<span class="hljs-comment">//   高防御服务器，打死我买20台。两个只能存在一个，如果用这个就取消最前面的//</span><br> <br> <br><span class="hljs-keyword">var</span> tmpSubmit = <span class="hljs-number">1</span>;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(setting, <span class="hljs-string">&quot;auto&quot;</span>, &#123;<br>    <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">if</span> (tmpSubmit &gt;= <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">return</span> tmpSubmit === <span class="hljs-number">3</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">GM_getValue</span>(<span class="hljs-string">&quot;autosubmit&quot;</span>);<br>    &#125;, <span class="hljs-attr">set</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) &#123;<br>        tmpSubmit = value + <span class="hljs-number">2</span>;<br>    &#125;<br>&#125;);<br> <br>setting.<span class="hljs-property">notice</span> = <span class="hljs-string">&#x27;公告栏&#x27;</span>;<br> <br><span class="hljs-keyword">if</span> (url != <span class="hljs-string">&#x27;/studyApp/studying&#x27;</span> &amp;&amp; top != _self.<span class="hljs-property">top</span>) <span class="hljs-variable language_">document</span>.<span class="hljs-property">domain</span> = location.<span class="hljs-property">host</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/.+?\./</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br> <br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">while</span> (top != _self.<span class="hljs-property">top</span>) &#123;<br>        top = top.<span class="hljs-property">parent</span>.<span class="hljs-property">document</span> ? top.<span class="hljs-property">parent</span> : _self.<span class="hljs-property">top</span>;<br>        <span class="hljs-keyword">if</span> (top.<span class="hljs-property">location</span>.<span class="hljs-property">pathname</span> == <span class="hljs-string">&#x27;/mycourse/studentstudy&#x27;</span>) <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    <span class="hljs-comment">// console.log(err);</span><br>    top = _self;<br>&#125;<br> <br><span class="hljs-keyword">var</span> $ = _self.<span class="hljs-property">jQuery</span> || top.<span class="hljs-property">jQuery</span>,<br>    parent = _self == top ? self : _self.<span class="hljs-property">parent</span>,<br>    <span class="hljs-title class_">Ext</span> = _self.<span class="hljs-property">Ext</span> || parent.<span class="hljs-property">Ext</span> || &#123;&#125;,<br>    <span class="hljs-variable constant_">UE</span> = _self.<span class="hljs-property">UE</span>,<br>    vjs = _self.<span class="hljs-property">videojs</span>;<br> <br>$(<span class="hljs-string">&#x27;.Header&#x27;</span>).<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;a:contains(回到旧版)&#x27;</span>)[<span class="hljs-number">0</span>] ? $(<span class="hljs-string">&#x27;.Header&#x27;</span>).<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;a:contains(回到旧版)&#x27;</span>)[<span class="hljs-number">0</span>].<span class="hljs-title function_">click</span>() : <span class="hljs-string">&#x27;&#x27;</span>;<br> <br><span class="hljs-title class_">String</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toCDB</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\s/g</span>, <span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/[\uff01-\uff5e]/g</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">str</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>(str.<span class="hljs-title function_">charCodeAt</span>(<span class="hljs-number">0</span>) - <span class="hljs-number">65248</span>);<br>    &#125;).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/[“”]/g</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/[‘’]/g</span>, <span class="hljs-string">&quot;&#x27;&quot;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/。/g</span>, <span class="hljs-string">&#x27;.&#x27;</span>);<br>&#125;;<br> <br>setting.<span class="hljs-property">normal</span> = <span class="hljs-string">&#x27;&#x27;</span>; <span class="hljs-comment">// &#x27;:visible&#x27;</span><br><span class="hljs-comment">// setting.time += Math.ceil(setting.time * Math.random()) - setting.time / 2;</span><br>setting.<span class="hljs-property">job</span> = [<span class="hljs-string">&#x27;:not(*)&#x27;</span>];<br> <br>setting.<span class="hljs-property">video</span> &amp;&amp; setting.<span class="hljs-property">job</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;iframe[src*=&quot;/video/index.html&quot;]&#x27;</span>);<br>setting.<span class="hljs-property">work</span> &amp;&amp; setting.<span class="hljs-property">job</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;iframe[src*=&quot;/work/index.html&quot;]&#x27;</span>);<br>setting.<span class="hljs-property">audio</span> &amp;&amp; setting.<span class="hljs-property">job</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;iframe[src*=&quot;/audio/index.html&quot;]&#x27;</span>);<br>setting.<span class="hljs-property">book</span> &amp;&amp; setting.<span class="hljs-property">job</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;iframe[src*=&quot;/innerbook/index.html&quot;]&#x27;</span>);<br>setting.<span class="hljs-property">docs</span> &amp;&amp; setting.<span class="hljs-property">job</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;iframe[src*=&quot;/ppt/index.html&quot;]&#x27;</span>, <span class="hljs-string">&#x27;iframe[src*=&quot;/pdf/index.html&quot;]&#x27;</span>);<br> <br>setting.<span class="hljs-property">tip</span> = !setting.<span class="hljs-property">queue</span> || top != _self &amp;&amp; <span class="hljs-title function_">jobSort</span>($ || <span class="hljs-title class_">Ext</span>.<span class="hljs-property">query</span>);<br> <br><span class="hljs-keyword">if</span> (url == <span class="hljs-string">&#x27;/mycourse/studentstudy&#x27;</span>) &#123;<br>    _self.<span class="hljs-property">checkMobileBrowerLearn</span> = $.noop;<br>    <span class="hljs-keyword">var</span> classId = location.<span class="hljs-property">search</span>.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/cla[zs]&#123;2&#125;id=(\d+)/i</span>)[<span class="hljs-number">1</span>] || <span class="hljs-number">0</span>,<br>        courseId = _self.<span class="hljs-property">courseId</span> || location.<span class="hljs-property">search</span>.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/courseId=(\d+)/i</span>)[<span class="hljs-number">1</span>] || <span class="hljs-number">0</span>;<br>    setting.<span class="hljs-property">lock</span> || $(<span class="hljs-string">&#x27;#coursetree&#x27;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-string">&#x27;[onclick*=void], [href*=void]&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        _self.<span class="hljs-title function_">getTeacherAjax</span>(courseId, classId, $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">parent</span>().<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;id&#x27;</span>).<span class="hljs-title function_">slice</span>(<span class="hljs-number">3</span>));<br>    &#125;);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (url == <span class="hljs-string">&#x27;/ananas/modules/video/index.html&#x27;</span> &amp;&amp; setting.<span class="hljs-property">video</span>) &#123;<br>    <span class="hljs-keyword">if</span> (setting.<span class="hljs-property">review</span>) _self.<span class="hljs-property">greenligth</span> = <span class="hljs-title class_">Ext</span>.<span class="hljs-property">emptyFn</span>;<br>    <span class="hljs-title function_">checkPlayer</span>(_self.<span class="hljs-title function_">supportH5Video</span>());<br>    <span class="hljs-title function_">click_bo</span>();<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (url == <span class="hljs-string">&#x27;/work/doHomeWorkNew&#x27;</span> || url == <span class="hljs-string">&#x27;/api/work&#x27;</span> || url == <span class="hljs-string">&#x27;/work/addStudentWorkNewWeb&#x27;</span> || url == <span class="hljs-string">&#x27;/mooc2/work/dowork&#x27;</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;进入答题界面！&quot;</span>);<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-variable constant_">UE</span>) &#123;<br>        <span class="hljs-keyword">var</span> len = ($ || <span class="hljs-title class_">Ext</span>.<span class="hljs-property">query</span> || <span class="hljs-title class_">Array</span>)(<span class="hljs-string">&#x27;font:contains(未登录)&#x27;</span>, <span class="hljs-variable language_">document</span>).<span class="hljs-property">length</span>;<br>        <span class="hljs-built_in">setTimeout</span>(len == <span class="hljs-number">1</span> ? top.<span class="hljs-property">location</span>.<span class="hljs-property">reload</span> : parent.<span class="hljs-property">greenligth</span>, setting.<span class="hljs-property">time</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (setting.<span class="hljs-property">work</span>) &#123;<br>        <span class="hljs-built_in">setTimeout</span>(relieveLimit, <span class="hljs-number">0</span>);<br>        <span class="hljs-title function_">beforeFind</span>();<br>    &#125;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (url == <span class="hljs-string">&#x27;/ananas/modules/audio/index.html&#x27;</span> &amp;&amp; setting.<span class="hljs-property">audio</span>) &#123;<br>    <span class="hljs-keyword">if</span> (setting.<span class="hljs-property">review</span>) _self.<span class="hljs-property">greenligth</span> = <span class="hljs-title class_">Ext</span>.<span class="hljs-property">emptyFn</span>;<br>    <span class="hljs-comment">// _self.videojs = hookAudio;</span><br>    _self.<span class="hljs-property">alert</span> = <span class="hljs-variable language_">console</span>.<span class="hljs-property">log</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-title class_">OriginPlayer</span> = _self.<span class="hljs-property">videojs</span>.<span class="hljs-title function_">getComponent</span>(<span class="hljs-string">&#x27;Player&#x27;</span>)<br>    <span class="hljs-keyword">let</span> woailiyinhe = <span class="hljs-keyword">function</span> (<span class="hljs-params">tag, options, ready</span>) &#123;<br>        <span class="hljs-keyword">var</span> config = options;<br>        config.<span class="hljs-property">plugins</span>.<span class="hljs-property">studyControl</span>.<span class="hljs-property">enableSwitchWindow</span> = <span class="hljs-number">1</span>;<br>        config.<span class="hljs-property">plugins</span>.<span class="hljs-property">seekBarControl</span>.<span class="hljs-property">enableFastForward</span> = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (!setting.<span class="hljs-property">queue</span>) <span class="hljs-keyword">delete</span> config.<span class="hljs-property">plugins</span>.<span class="hljs-property">studyControl</span>;<br>        <span class="hljs-keyword">let</span> player = <span class="hljs-title class_">OriginPlayer</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, tag, options, ready)<br>        <span class="hljs-keyword">var</span><br>        a = <span class="hljs-string">&#x27;&lt;a href=&quot;https://d0.ananas.chaoxing.com/download/&#x27;</span> + _self.<span class="hljs-title function_">config</span>(<span class="hljs-string">&#x27;objectid&#x27;</span>) + <span class="hljs-string">&#x27;&quot; target=&quot;_blank&quot;&gt;&#x27;</span>,<br>            img = <span class="hljs-string">&#x27;&lt;img src=&quot;https://d0.ananas.chaoxing.com/download/e363b256c0e9bc5bd8266bf99dd6d6bb&quot; style=&quot;margin: 6px 0 0 6px;&quot;&gt;&#x27;</span>;<br>        player.<span class="hljs-title function_">volume</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(setting.<span class="hljs-property">vol</span>) / <span class="hljs-number">100</span> || <span class="hljs-number">0</span>);<br>        player.<span class="hljs-title function_">playbackRate</span>(setting.<span class="hljs-property">rate</span> &gt; <span class="hljs-number">16</span> || setting.<span class="hljs-property">rate</span> &lt; <span class="hljs-number">0.0625</span> ? <span class="hljs-number">1</span> : setting.<span class="hljs-property">rate</span>);<br>        <span class="hljs-title class_">Ext</span>.<span class="hljs-title function_">get</span>(player.<span class="hljs-property">controlBar</span>.<span class="hljs-title function_">addChild</span>(<span class="hljs-string">&#x27;Button&#x27;</span>).<span class="hljs-property">el_</span>).<span class="hljs-title function_">setHTML</span>(a + img + <span class="hljs-string">&#x27;&lt;/a&gt;&#x27;</span>).<span class="hljs-property">dom</span>.<span class="hljs-property">title</span> = <span class="hljs-string">&#x27;下载音频&#x27;</span>;<br>        player.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;loadeddata&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            setting.<span class="hljs-property">tip</span> &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">play</span>().<span class="hljs-title function_">catch</span>(<span class="hljs-title class_">Ext</span>.<span class="hljs-property">emptyFn</span>);<br>        &#125;);<br>        player.<span class="hljs-title function_">one</span>(<span class="hljs-string">&#x27;firstplay&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            setting.<span class="hljs-property">rate</span> === <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; config.<span class="hljs-property">plugins</span>.<span class="hljs-property">seekBarControl</span>.<span class="hljs-title function_">sendLog</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">children_</span>[<span class="hljs-number">0</span>], <span class="hljs-string">&#x27;ended&#x27;</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">cache_</span>.<span class="hljs-property">duration</span>));<br>        &#125;);<br>        player.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;ended&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-title class_">Ext</span>.<span class="hljs-title function_">fly</span>(frameElement).<span class="hljs-title function_">parent</span>().<span class="hljs-title function_">addCls</span>(<span class="hljs-string">&#x27;ans-job-finished&#x27;</span>);<br>        &#125;);<br>        <span class="hljs-keyword">return</span> player;<br>    &#125;<br>    woailiyinhe.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-title class_">OriginPlayer</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>)<br>    _self.<span class="hljs-property">videojs</span>.<span class="hljs-title function_">getComponent</span>(<span class="hljs-string">&#x27;Component&#x27;</span>).<span class="hljs-property">components_</span>[<span class="hljs-string">&#x27;Player&#x27;</span>] = woailiyinhe<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (url == <span class="hljs-string">&#x27;/ananas/modules/innerbook/index.html&#x27;</span> &amp;&amp; setting.<span class="hljs-property">book</span> &amp;&amp; setting.<span class="hljs-property">tip</span>) &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        _self.<span class="hljs-property">setting</span> ? _self.<span class="hljs-property">top</span>.<span class="hljs-title function_">onchangepage</span>(_self.<span class="hljs-title function_">getFrameAttr</span>(<span class="hljs-string">&#x27;end&#x27;</span>)) : _self.<span class="hljs-title function_">greenligth</span>();<br>    &#125;, setting.<span class="hljs-property">time</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (url.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/^\/ananas\/modules\/(ppt|pdf)\/index\.html$/</span>) &amp;&amp; setting.<span class="hljs-property">docs</span> &amp;&amp; setting.<span class="hljs-property">tip</span>) &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        _self.<span class="hljs-property">setting</span> ? _self.<span class="hljs-title function_">finishJob</span>() : _self.<span class="hljs-title function_">greenligth</span>();<br>    &#125;, setting.<span class="hljs-property">time</span>);<br>    frameElement.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;download&#x27;</span>, <span class="hljs-number">1</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (url == <span class="hljs-string">&#x27;/knowledge/cards&#x27;</span>) &#123;<br>    $ &amp;&amp; <span class="hljs-title function_">checkToNext</span>();<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (url.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/^\/(course|zt)\/\d+\.html$/</span>)) &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        +setting.<span class="hljs-property">read</span> &amp;&amp; _self.<span class="hljs-property">sendLogs</span> &amp;&amp; $(<span class="hljs-string">&#x27;.course_section:eq(0) .chapterText&#x27;</span>).<span class="hljs-title function_">click</span>();<br>    &#125;, setting.<span class="hljs-property">time</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (url == <span class="hljs-string">&#x27;/ztnodedetailcontroller/visitnodedetail&#x27;</span>) &#123;<br>    setting.<span class="hljs-property">read</span> *= <span class="hljs-number">60</span> / $(<span class="hljs-string">&#x27;.course_section&#x27;</span>).<span class="hljs-property">length</span>;<br>    setting.<span class="hljs-property">read</span> &amp;&amp; _self.<span class="hljs-property">sendLogs</span> &amp;&amp; <span class="hljs-title function_">autoRead</span>();<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (url == <span class="hljs-string">&#x27;/mycourse/studentcourse&#x27;</span>) &#123;<br>    <span class="hljs-keyword">var</span> gv = location.<span class="hljs-property">search</span>.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/d=\d+&amp;/g</span>);<br>    setting.<span class="hljs-property">total</span> &amp;&amp; $(<span class="hljs-string">&#x27;&lt;a&gt;&#x27;</span>, &#123;<br>        <span class="hljs-attr">href</span>: <span class="hljs-string">&#x27;/moocAnalysis/chapterStatisticByUser?classI&#x27;</span> + gv[<span class="hljs-number">1</span>] + <span class="hljs-string">&#x27;courseI&#x27;</span> + gv[<span class="hljs-number">0</span>] + <span class="hljs-string">&#x27;userId=&#x27;</span> + _self.<span class="hljs-title function_">getCookie</span>(<span class="hljs-string">&#x27;_uid&#x27;</span>) + <span class="hljs-string">&#x27;&amp;ut=s&#x27;</span>,<br>        <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;_blank&#x27;</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;点击查看章节统计&#x27;</span>,<br>        <span class="hljs-attr">style</span>: <span class="hljs-string">&#x27;margin: 0 25px;color: #87CEFA;&#x27;</span>,<br>        <span class="hljs-attr">html</span>: <span class="hljs-string">&#x27;本课程共&#x27;</span> + $(<span class="hljs-string">&#x27;.icon&#x27;</span>).<span class="hljs-property">length</span> + <span class="hljs-string">&#x27;节，剩余&#x27;</span> + $(<span class="hljs-string">&#x27;em:not(.openlock)&#x27;</span>).<span class="hljs-property">length</span> + <span class="hljs-string">&#x27;节未完成&#x27;</span><br>    &#125;).<span class="hljs-title function_">appendTo</span>(<span class="hljs-string">&#x27;.charter&#x27;</span>).<span class="hljs-title function_">parent</span>().<span class="hljs-title function_">width</span>(<span class="hljs-string">&#x27;auto&#x27;</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (url.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/^\/visit\/(courses|interaction)$/</span>)) &#123;<br>    setting.<span class="hljs-property">face</span> &amp;&amp; $(<span class="hljs-string">&#x27;.zmodel&#x27;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-string">&#x27;[onclick^=openFaceTip]&#x27;</span>, <span class="hljs-title class_">DisplayURL</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (location.<span class="hljs-property">host</span>.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/^passport2/</span>)) &#123;<br>    setting.<span class="hljs-property">username</span> &amp;&amp; <span class="hljs-title function_">getSchoolId</span>();<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (location.<span class="hljs-property">hostname</span> == <span class="hljs-string">&#x27;i.mooc.chaoxing.com&#x27;</span> || location.<span class="hljs-property">hostname</span> == <span class="hljs-string">&#x27;i.chaoxing.com&#x27;</span>) &#123;<br>    _self.<span class="hljs-property">layui</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;layer&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">layer</span>.<span class="hljs-title function_">open</span>(&#123; <span class="hljs-attr">content</span>: <span class="hljs-string">&#x27;拖动进度条、倍速播放、秒过会导致不良记录！题库在慢慢补充，搜不到的题目系统会尽快进行自动补充&#x27;</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;超星网课助手提示&#x27;</span>, <span class="hljs-attr">btn</span>: <span class="hljs-string">&#x27;我已知悉&#x27;</span>, <span class="hljs-attr">offset</span>: <span class="hljs-string">&#x27;t&#x27;</span>, <span class="hljs-attr">closeBtn</span>: <span class="hljs-number">0</span> &#125;);<br>    &#125;);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (url == <span class="hljs-string">&#x27;/widget/pcvote/goStudentVotePage&#x27;</span>) &#123;<br>    $(<span class="hljs-string">&#x27;:checked&#x27;</span>).<span class="hljs-title function_">click</span>();<br>    $(<span class="hljs-string">&#x27;.StudentTimu&#x27;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">index</span>) &#123;<br>        <span class="hljs-keyword">var</span> ans = _self.<span class="hljs-property">questionlist</span>[index].<span class="hljs-property">answer</span>;<br>        $(<span class="hljs-string">&#x27;:radio, :checkbox&#x27;</span>, <span class="hljs-variable language_">this</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">num</span>) &#123;<br>            ans[num].<span class="hljs-property">isanswer</span> &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">click</span>();<br>        &#125;);<br>        $(<span class="hljs-string">&#x27;:text&#x27;</span>, <span class="hljs-variable language_">this</span>).<span class="hljs-title function_">val</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">num</span>) &#123;<br>            <span class="hljs-keyword">return</span> $(ans[num].<span class="hljs-property">content</span>).<span class="hljs-title function_">text</span>().<span class="hljs-title function_">trim</span>();<br>        &#125;);<br>    &#125;);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (url == <span class="hljs-string">&#x27;/work/selectWorkQuestionYiPiYue&#x27;</span>) &#123;<br>    <span class="hljs-title function_">submitAnswer</span>(<span class="hljs-title function_">getIframe</span>().<span class="hljs-title function_">parent</span>(), $.<span class="hljs-title function_">extend</span>(<span class="hljs-literal">true</span>, [], parent.<span class="hljs-property">_data</span>));<br>&#125;<br> <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getIframe</span>(<span class="hljs-params">tip, win, job</span>) &#123;<br>    <span class="hljs-keyword">if</span> (!$) <span class="hljs-keyword">return</span> <span class="hljs-title class_">Ext</span>.<span class="hljs-title function_">get</span>(frameElement || []).<span class="hljs-title function_">parent</span>().<span class="hljs-title function_">child</span>(<span class="hljs-string">&#x27;.ans-job-icon&#x27;</span>) || <span class="hljs-title class_">Ext</span>.<span class="hljs-title function_">get</span>([]);<br>    <span class="hljs-keyword">do</span> &#123;<br>        win = win ? win.<span class="hljs-property">parent</span> : _self;<br>        job = $(win.<span class="hljs-property">frameElement</span>).<span class="hljs-title function_">prevAll</span>(<span class="hljs-string">&#x27;.ans-job-icon&#x27;</span>);<br>    &#125; <span class="hljs-keyword">while</span> (!job.<span class="hljs-property">length</span> &amp;&amp; win.<span class="hljs-property">parent</span>.<span class="hljs-property">frameElement</span>);<br>    <span class="hljs-keyword">return</span> tip ? win : job;<br>&#125;<br> <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">jobSort</span>(<span class="hljs-params">$</span>) &#123;<br>    <span class="hljs-keyword">var</span> fn = $.fn ? [<span class="hljs-title function_">getIframe</span>(<span class="hljs-number">1</span>), <span class="hljs-string">&#x27;length&#x27;</span>] : [self, <span class="hljs-string">&#x27;dom&#x27;</span>],<br>        sel = setting.<span class="hljs-property">job</span>.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;, :not(.ans-job-finished) &gt; .ans-job-icon&#x27;</span> + setting.<span class="hljs-property">normal</span> + <span class="hljs-string">&#x27; ~ &#x27;</span>);<br>    <span class="hljs-keyword">if</span> ($(sel, fn[<span class="hljs-number">0</span>].<span class="hljs-property">parent</span>.<span class="hljs-property">document</span>)[<span class="hljs-number">0</span>] == fn[<span class="hljs-number">0</span>].<span class="hljs-property">frameElement</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">getIframe</span>()[fn[<span class="hljs-number">1</span>]] || <span class="hljs-title function_">getIframe</span>().<span class="hljs-title function_">parent</span>().<span class="hljs-title function_">is</span>(<span class="hljs-string">&#x27;.ans-job-finished&#x27;</span>)) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        $(sel, fn[<span class="hljs-number">0</span>].<span class="hljs-property">parent</span>.<span class="hljs-property">document</span>)[<span class="hljs-number">0</span>] == fn[<span class="hljs-number">0</span>].<span class="hljs-property">frameElement</span> &amp;&amp; fn[<span class="hljs-number">0</span>].<span class="hljs-property">location</span>.<span class="hljs-title function_">reload</span>();<br>    &#125;, setting.<span class="hljs-property">time</span>);<br>&#125;<br> <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">click_bo</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;没有写过这么垃圾的玩意......................................&quot;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;疫情期间当志愿者没时间修复倍速,一倍速慢慢看&quot;</span>);<br>    <span class="hljs-keyword">var</span> interval=<span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#video &gt; button&quot;</span>))&#123;<br>            <span class="hljs-keyword">var</span> video=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;video_html5_api&quot;</span>);<br>            <span class="hljs-keyword">var</span> video_url=video.<span class="hljs-property">src</span>;<br>            <span class="hljs-keyword">var</span> suspend=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#video &gt; div.vjs-control-bar &gt; button.vjs-play-control.vjs-control.vjs-button.vjs-paused&quot;</span>);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_">getIframe</span>().<span class="hljs-title function_">parent</span>().<span class="hljs-title function_">is</span>(<span class="hljs-string">&#x27;.ans-job-finished&#x27;</span>))&#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;播放完毕&quot;</span>);<br>                <span class="hljs-title function_">GM_setValue</span>(<span class="hljs-string">&quot;video_url&quot;</span>,<span class="hljs-number">0</span>);<br>                <span class="hljs-built_in">clearInterval</span>(interval);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (suspend &amp;&amp;suspend.<span class="hljs-property">textContent</span>==<span class="hljs-string">&quot;播放&quot;</span>&amp;&amp;video_url==<span class="hljs-title function_">GM_getValue</span>(<span class="hljs-string">&quot;video_url&quot;</span>))&#123;<br>                video.<span class="hljs-title function_">play</span>();<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#video &gt; button&quot;</span>)&amp;&amp;<span class="hljs-title function_">GM_getValue</span>(<span class="hljs-string">&quot;video_url&quot;</span>)==<span class="hljs-number">0</span>)&#123;<br>                video.<span class="hljs-title function_">play</span>();<br>                <span class="hljs-title function_">GM_setValue</span>(<span class="hljs-string">&quot;video_url&quot;</span>,video_url);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#video &gt; div &gt; div &gt; button[title=&quot;静音&quot;]&#x27;</span>)&amp;&amp;setting.<span class="hljs-property">vol</span>==<span class="hljs-string">&quot;0&quot;</span>) &#123;<br>                video.<span class="hljs-property">muted</span>=<span class="hljs-string">&quot;0&quot;</span>;<span class="hljs-comment">//不能点击，点击会有bug.......</span><br>            &#125;<br> <br>        &#125;<br>    &#125;, <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">3000</span>) + <span class="hljs-number">500</span>);<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">checkPlayer</span>(<span class="hljs-params">tip</span>) &#123;<br>    <span class="hljs-comment">//代码抄的李恒道的，正在学习.....地址https://scriptcat.org/script-show-page/10/code</span><br>    _self.<span class="hljs-property">alert</span> = <span class="hljs-variable language_">console</span>.<span class="hljs-property">log</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-title class_">OriginPlayer</span> = _self.<span class="hljs-property">videojs</span>.<span class="hljs-title function_">getComponent</span>(<span class="hljs-string">&#x27;Player&#x27;</span>)<br>    <span class="hljs-keyword">let</span> woailiyinhe = <span class="hljs-keyword">function</span> (<span class="hljs-params">tag, options, ready</span>) &#123;<br>        <span class="hljs-keyword">let</span> config = options<br>        <span class="hljs-keyword">if</span> (!config) &#123;<br>            <span class="hljs-keyword">return</span> options;<br>        &#125;<br>        <span class="hljs-keyword">var</span> line = <span class="hljs-title class_">Ext</span>.<span class="hljs-property">Array</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-title class_">Ext</span>.<span class="hljs-property">Array</span>.<span class="hljs-title function_">map</span>(config.<span class="hljs-property">playlines</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">value, index</span>) &#123;<br>            <span class="hljs-keyword">return</span> value.<span class="hljs-property">label</span> == setting.<span class="hljs-property">line</span> &amp;&amp; index;<br>        &#125;), <span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-title class_">Ext</span>.<span class="hljs-title function_">isNumber</span>(value);<br>        &#125;)[<span class="hljs-number">0</span>] || <span class="hljs-number">0</span>,<br>            http = <span class="hljs-title class_">Ext</span>.<span class="hljs-property">Array</span>.<span class="hljs-title function_">filter</span>(config.<span class="hljs-property">sources</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) &#123;<br>                <span class="hljs-keyword">return</span> value.<span class="hljs-property">label</span> == setting.<span class="hljs-property">http</span>;<br>            &#125;)[<span class="hljs-number">0</span>];<br>        config.<span class="hljs-property">playlines</span>.<span class="hljs-title function_">unshift</span>(config.<span class="hljs-property">playlines</span>[line]);<br>        config.<span class="hljs-property">playlines</span>.<span class="hljs-title function_">splice</span>(line + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>        config.<span class="hljs-property">plugins</span>.<span class="hljs-property">videoJsResolutionSwitcher</span>.<span class="hljs-property">default</span> = http ? http.<span class="hljs-property">res</span> : <span class="hljs-number">360</span>;<br>        config.<span class="hljs-property">plugins</span>.<span class="hljs-property">studyControl</span>.<span class="hljs-property">enableSwitchWindow</span> = <span class="hljs-number">1</span>;<br>        config.<span class="hljs-property">plugins</span>.<span class="hljs-property">timelineObjects</span>.<span class="hljs-property">url</span> = <span class="hljs-string">&#x27;/richvideo/initdatawithviewer?&#x27;</span>;<br>        config.<span class="hljs-property">plugins</span>.<span class="hljs-property">seekBarControl</span>.<span class="hljs-property">enableFastForward</span> = <span class="hljs-number">1</span>;<br>        config.<span class="hljs-property">playbackRates</span> = [<span class="hljs-number">0.5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1.5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">16</span>];<br>        <span class="hljs-keyword">if</span> (!setting.<span class="hljs-property">queue</span>) <span class="hljs-keyword">delete</span> config.<span class="hljs-property">plugins</span>.<span class="hljs-property">studyControl</span>;<br>        <span class="hljs-keyword">let</span> player = <span class="hljs-title class_">OriginPlayer</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, tag, options, ready)<br>        <span class="hljs-keyword">var</span><br>        a = <span class="hljs-string">&#x27;&lt;a href=&quot;https://d0.ananas.chaoxing.com/download/&#x27;</span> + _self.<span class="hljs-title function_">config</span>(<span class="hljs-string">&#x27;objectid&#x27;</span>) + <span class="hljs-string">&#x27;&quot; target=&quot;_blank&quot;&gt;&#x27;</span>,<br>            img = <span class="hljs-string">&#x27;&lt;img src=&quot;https://d0.ananas.chaoxing.com/download/e363b256c0e9bc5bd8266bf99dd6d6bb&quot; style=&quot;margin: 6px 0 0 6px;&quot;&gt;&#x27;</span>;<br>        player.<span class="hljs-property">playbackRate</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">t</span>) &#123; <span class="hljs-keyword">if</span> (<span class="hljs-keyword">void</span> <span class="hljs-number">0</span> === t) <span class="hljs-keyword">return</span>; <span class="hljs-variable language_">this</span>.<span class="hljs-property">tech_</span> &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">tech_</span>.<span class="hljs-property">featuresPlaybackRate</span> ? <span class="hljs-variable language_">this</span>.<span class="hljs-property">cache_</span>.<span class="hljs-property">lastPlaybackRate</span> || <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">techGet_</span>(<span class="hljs-string">&quot;playbackRate&quot;</span>) : setting.<span class="hljs-property">rate</span>; <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">techCall_</span>(<span class="hljs-string">&quot;setPlaybackRate&quot;</span>, t) &#125;;<br>        player.<span class="hljs-title function_">volume</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(setting.<span class="hljs-property">vol</span>) / <span class="hljs-number">100</span> || <span class="hljs-number">0</span>);<br>        <span class="hljs-title class_">Ext</span>.<span class="hljs-title function_">get</span>(player.<span class="hljs-property">controlBar</span>.<span class="hljs-title function_">addChild</span>(<span class="hljs-string">&#x27;Button&#x27;</span>).<span class="hljs-property">el_</span>).<span class="hljs-title function_">setHTML</span>(a + img + <span class="hljs-string">&#x27;&lt;/a&gt;&#x27;</span>).<span class="hljs-property">dom</span>.<span class="hljs-property">title</span> = <span class="hljs-string">&#x27;下载视频&#x27;</span>;<br>        player.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;loadstart&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            setting.<span class="hljs-property">tip</span> &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">play</span>().<span class="hljs-title function_">catch</span>(<span class="hljs-title class_">Ext</span>.<span class="hljs-property">emptyFn</span>);<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">playbackRate</span>(setting.<span class="hljs-property">rate</span> &gt; <span class="hljs-number">16</span> || setting.<span class="hljs-property">rate</span> &lt; <span class="hljs-number">0.0625</span> ? <span class="hljs-number">1</span> : setting.<span class="hljs-property">rate</span>);<br>        &#125;);<br>        player.<span class="hljs-title function_">one</span>([<span class="hljs-string">&#x27;loadedmetadata&#x27;</span>, <span class="hljs-string">&#x27;firstplay&#x27;</span>], <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            setting.<span class="hljs-property">two</span> = setting.<span class="hljs-property">rate</span> === <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; setting.<span class="hljs-property">two</span> &lt; <span class="hljs-number">1</span>;<br>            setting.<span class="hljs-property">two</span> &amp;&amp; config.<span class="hljs-property">plugins</span>.<span class="hljs-property">seekBarControl</span>.<span class="hljs-title function_">sendLog</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">children_</span>[<span class="hljs-number">0</span>], <span class="hljs-string">&#x27;ended&#x27;</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">cache_</span>.<span class="hljs-property">duration</span>));<br>        &#125;);<br>        player.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;ended&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-title class_">Ext</span>.<span class="hljs-title function_">fly</span>(frameElement).<span class="hljs-title function_">parent</span>().<span class="hljs-title function_">addCls</span>(<span class="hljs-string">&#x27;ans-job-finished&#x27;</span>);<br>        &#125;);<br>        <span class="hljs-keyword">return</span> player;<br>    &#125;<br>    woailiyinhe.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-title class_">OriginPlayer</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>)<br>    _self.<span class="hljs-property">videojs</span>.<span class="hljs-title function_">getComponent</span>(<span class="hljs-string">&#x27;Component&#x27;</span>).<span class="hljs-property">components_</span>[<span class="hljs-string">&#x27;Player&#x27;</span>] = woailiyinhe<br>    <span class="hljs-title class_">Ext</span>.<span class="hljs-property">isSogou</span> = <span class="hljs-title class_">Ext</span>.<span class="hljs-property">isIos</span> = <span class="hljs-title class_">Ext</span>.<span class="hljs-property">isAndroid</span> = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">var</span> data = <span class="hljs-title class_">Ext</span>.<span class="hljs-title function_">decode</span>(_self.<span class="hljs-title function_">config</span>(<span class="hljs-string">&#x27;data&#x27;</span>)) || &#123;&#125;;<br>    <span class="hljs-keyword">delete</span> data.<span class="hljs-property">danmaku</span>;<br>    data.<span class="hljs-property">doublespeed</span> = <span class="hljs-number">1</span>;<br>    frameElement.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-title class_">Ext</span>.<span class="hljs-title function_">encode</span>(data));<br> <br> <br>    <span class="hljs-comment">//_self.videojs = hookVideo;</span><br>    <span class="hljs-keyword">if</span> (tip) <span class="hljs-keyword">return</span>;<br>    _self.<span class="hljs-property">supportH5Video</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; &#125;;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;此浏览器不支持html5播放器，请更换浏览器&#x27;</span>);<br>&#125;<br> <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">hookVideo</span>(<span class="hljs-params"></span>) &#123;<br>&#125;<br> <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">relieveLimit</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1221</span>);<br>    <span class="hljs-keyword">if</span> (setting.<span class="hljs-property">scale</span>) _self.<span class="hljs-property">UEDITOR_CONFIG</span>.<span class="hljs-property">scaleEnabled</span> = <span class="hljs-literal">false</span>;<br>    $.<span class="hljs-title function_">each</span>(<span class="hljs-variable constant_">UE</span>.<span class="hljs-property">instants</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> key = <span class="hljs-variable language_">this</span>.<span class="hljs-property">key</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">destroy</span>();<br>            <span class="hljs-variable constant_">UE</span>.<span class="hljs-title function_">getEditor</span>(key);<br>        &#125;);<br>    &#125;);<br>&#125;<br> <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">beforeFind</span>(<span class="hljs-params"></span>) &#123;<br>    setting.<span class="hljs-property">regl</span> = parent.<span class="hljs-property">greenligth</span> || $.noop;<br>    <span class="hljs-keyword">if</span> ($.<span class="hljs-title function_">type</span>(parent.<span class="hljs-property">_data</span>) == <span class="hljs-string">&#x27;array&#x27;</span>) <span class="hljs-keyword">return</span> setting.<span class="hljs-title function_">regl</span>();<br>    <span class="hljs-keyword">var</span> maximize = $(<br>        <span class="hljs-string">&#x27;&lt;div style=&quot;border: 2px dashed rgb(0, 85, 68); position: fixed; top: 0; right: 0; z-index: 99999; background-color: rgba(184, 247, 255, 0.3); overflow-x: auto;display:none;&quot;&gt;◻&lt;/div&gt;&#x27;</span><br>    ).<span class="hljs-title function_">appendTo</span>(<span class="hljs-string">&#x27;body&#x27;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        $(setting.<span class="hljs-property">div</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;display&quot;</span>, <span class="hljs-string">&quot;block&quot;</span>);<br>        <span class="hljs-title function_">GM_setValue</span>(<span class="hljs-string">&quot;minimize&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>);<br>        $(maximize).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;display&quot;</span>, <span class="hljs-string">&quot;none&quot;</span>);<br>    &#125;);<br> <br>    setting.<span class="hljs-property">div</span> = $(<br>        <span class="hljs-string">&#x27;&lt;div style=&quot;border: 2px dashed rgb(0, 85, 68); width: 330px; position: fixed; top: 0; right: 0; z-index: 99999; background-color: rgba(184, 247, 255, 0.3); overflow-x: auto;&quot;&gt;&#x27;</span> +<br>        <span class="hljs-string">&#x27;&lt;span style=&quot;font-size: medium;&quot;&gt;&lt;/span&gt;&#x27;</span> +<br>        <span class="hljs-string">&#x27;&lt;div style=&quot;font-size: medium;width:70%;display: inline-block;&quot;&gt;正在搜索答案...&lt;/div&gt;&#x27;</span> +<br>        <span class="hljs-string">&#x27;&lt;div style=&quot;width:30%;display: inline-block;padding-right: 10px;box-sizing: border-box;text-align: right;&quot;&gt;&lt;minimize style=&quot;width:20px;font-size:16px;line-height: 12px;font-weight: bold;cursor: context-menu;user-select:none;&quot;&gt;一&lt;/minimize&gt;&lt;/div&gt;&#x27;</span> +<br>        <span class="hljs-string">&#x27;&lt;div id=&quot;cx-notice&quot; style=&quot;border-top: 1px solid #000;border-bottom: 1px solid #000;margin: 4px 0px;overflow: hidden;&quot;&gt;&#x27;</span> + setting.<span class="hljs-property">notice</span> + <span class="hljs-string">&#x27;&lt;/div&gt;&#x27;</span> +<br>        <span class="hljs-string">&#x27;&lt;button style=&quot;margin-right: 10px;&quot;&gt;暂停答题&lt;/button&gt;&#x27;</span> +<br>        <span class="hljs-string">&#x27;&lt;button style=&quot;margin-right: 10px;&quot;&gt;&#x27;</span> + (setting.<span class="hljs-property">auto</span> ? <span class="hljs-string">&#x27;取消本次自动提交&#x27;</span> : <span class="hljs-string">&#x27;开启本次自动提交&#x27;</span>) + <span class="hljs-string">&#x27;&lt;/button&gt;&#x27;</span> +<br>        <span class="hljs-string">&#x27;&lt;button style=&quot;margin-right: 10px;&quot;&gt;重新查询&lt;/button&gt;&#x27;</span> +<br>        <span class="hljs-string">&#x27;&lt;button&gt;折叠面板&lt;/button&gt;&lt;br&gt;&#x27;</span> +<br>        <span class="hljs-string">&#x27;&lt;input id=&quot;autosubmit&quot; type=&quot;checkbox&quot;&#x27;</span> + (setting.<span class="hljs-property">auto</span> ? <span class="hljs-string">&#x27; checked&#x27;</span> : <span class="hljs-string">&#x27;&#x27;</span>) + <span class="hljs-string">&#x27;&gt;自动提交&lt;/input&gt;&#x27;</span> +<br>        <span class="hljs-string">&#x27;&lt;div style=&quot;max-height: 300px; overflow-y: auto;&quot;&gt;&#x27;</span> +<br>        <span class="hljs-string">&#x27;&lt;table border=&quot;1&quot; style=&quot;font-size: 12px;&quot;&gt;&#x27;</span> +<br>        <span class="hljs-string">&#x27;&lt;thead&gt;&#x27;</span> +<br>        <span class="hljs-string">&#x27;&lt;tr&gt;&#x27;</span> +<br>        <span class="hljs-string">&#x27;&lt;th style=&quot;width: 25px; min-width: 25px;&quot;&gt;题号&lt;/th&gt;&#x27;</span> +<br>        <span class="hljs-string">&#x27;&lt;th style=&quot;width: 60%; min-width: 130px;&quot;&gt;题目（点击可复制）&lt;/th&gt;&#x27;</span> +<br>        <span class="hljs-string">&#x27;&lt;th style=&quot;min-width: 130px;&quot;&gt;答案（点击可复制）&lt;/th&gt;&#x27;</span> +<br>        <span class="hljs-string">&#x27;&lt;/tr&gt;&#x27;</span> +<br>        <span class="hljs-string">&#x27;&lt;/thead&gt;&#x27;</span> +<br>        <span class="hljs-string">&#x27;&lt;tfoot style=&quot;display: none;&quot;&gt;&#x27;</span> +<br>        <span class="hljs-string">&#x27;&lt;tr&gt;&#x27;</span> +<br>        <span class="hljs-string">&#x27;&lt;th colspan=&quot;3&quot;&gt;答案提示框 已折叠&lt;/th&gt;&#x27;</span> +<br>        <span class="hljs-string">&#x27;&lt;/tr&gt;&#x27;</span> +<br>        <span class="hljs-string">&#x27;&lt;/tfoot&gt;&#x27;</span> +<br>        <span class="hljs-string">&#x27;&lt;tbody&gt;&#x27;</span> +<br>        <span class="hljs-string">&#x27;&lt;tr&gt;&#x27;</span> +<br>        <span class="hljs-string">&#x27;&lt;td colspan=&quot;3&quot; style=&quot;display: none;&quot;&gt;&lt;/td&gt;&#x27;</span> +<br>        <span class="hljs-string">&#x27;&lt;/tr&gt;&#x27;</span> +<br>        <span class="hljs-string">&#x27;&lt;/tbody&gt;&#x27;</span> +<br>        <span class="hljs-string">&#x27;&lt;/table&gt;&#x27;</span> +<br>        <span class="hljs-string">&#x27;&lt;/div&gt;&#x27;</span> +<br>        <span class="hljs-string">&#x27;&lt;/div&gt;&#x27;</span><br>    ).<span class="hljs-title function_">appendTo</span>(<span class="hljs-string">&#x27;body&#x27;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-string">&#x27;button, td, input&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> len = $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">prevAll</span>(<span class="hljs-string">&#x27;button&#x27;</span>).<span class="hljs-property">length</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">nodeName</span> == <span class="hljs-string">&#x27;TD&#x27;</span>) &#123;<br>            $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">prev</span>().<span class="hljs-property">length</span> &amp;&amp; <span class="hljs-title function_">GM_setClipboard</span>($(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">text</span>());<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!$(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">siblings</span>().<span class="hljs-property">length</span>) &#123;<br>            $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">parent</span>().<span class="hljs-title function_">text</span>(<span class="hljs-string">&#x27;正在搜索答案...&#x27;</span>);<br>            setting.<span class="hljs-property">num</span>++;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (len === <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (setting.<span class="hljs-property">loop</span>) &#123;<br>                <span class="hljs-built_in">clearInterval</span>(setting.<span class="hljs-property">loop</span>);<br>                <span class="hljs-keyword">delete</span> setting.<span class="hljs-property">loop</span>;<br>                len = [<span class="hljs-string">&#x27;已暂停搜索&#x27;</span>, <span class="hljs-string">&#x27;继续答题&#x27;</span>];<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                setting.<span class="hljs-property">loop</span> = <span class="hljs-built_in">setInterval</span>(findAnswer, setting.<span class="hljs-property">time</span>);<br>                len = [<span class="hljs-string">&#x27;正在搜索答案...&#x27;</span>, <span class="hljs-string">&#x27;暂停答题&#x27;</span>];<br>            &#125;<br>            setting.<span class="hljs-property">div</span>.<span class="hljs-title function_">children</span>(<span class="hljs-string">&#x27;div:eq(0)&#x27;</span>).<span class="hljs-title function_">html</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-keyword">return</span> $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">data</span>(<span class="hljs-string">&#x27;html&#x27;</span>) || len[<span class="hljs-number">0</span>];<br>            &#125;).<span class="hljs-title function_">removeData</span>(<span class="hljs-string">&#x27;html&#x27;</span>);<br>            $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">html</span>(len[<span class="hljs-number">1</span>]);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (len == <span class="hljs-number">1</span>) &#123;<br>            setting.<span class="hljs-property">auto</span> = !setting.<span class="hljs-property">auto</span>;<br>            $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">html</span>(setting.<span class="hljs-property">auto</span> ? <span class="hljs-string">&#x27;取消本次自动提交&#x27;</span> : <span class="hljs-string">&#x27;开启本次自动提交&#x27;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (len == <span class="hljs-number">2</span>) &#123;<br>            parent.<span class="hljs-property">location</span>.<span class="hljs-title function_">reload</span>();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (len == <span class="hljs-number">3</span>) &#123;<br>            setting.<span class="hljs-property">div</span>.<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;tbody, tfoot&#x27;</span>).<span class="hljs-title function_">toggle</span>();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">id</span> == <span class="hljs-string">&quot;autosubmit&quot;</span>) &#123;<br>            <span class="hljs-comment">// 题目自动提交配置</span><br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">checked</span>);<br>            <span class="hljs-title function_">GM_setValue</span>(<span class="hljs-string">&quot;autosubmit&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">checked</span>);<br>        &#125;<br>    &#125;).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-string">&#x27;minimize&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">parent</span>().<span class="hljs-title function_">parent</span>().<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;display&quot;</span>, <span class="hljs-string">&quot;none&quot;</span>);<br>        <span class="hljs-title function_">GM_setValue</span>(<span class="hljs-string">&quot;minimize&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>);<br>        $(maximize).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;display&quot;</span>, <span class="hljs-string">&quot;block&quot;</span>);<br>    &#125;).<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;table, td, th&#x27;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;border&#x27;</span>, <span class="hljs-string">&#x27;1px solid&#x27;</span>).<span class="hljs-title function_">end</span>();<br> <br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">GM_getValue</span>(<span class="hljs-string">&quot;minimize&quot;</span>) == <span class="hljs-string">&quot;1&quot;</span>) &#123;<br>        $(setting.<span class="hljs-property">div</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;display&quot;</span>, <span class="hljs-string">&quot;none&quot;</span>);<br>        $(maximize).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;display&quot;</span>, <span class="hljs-string">&quot;block&quot;</span>);<br>    &#125;<br> <br>    setting.<span class="hljs-property">lose</span> = setting.<span class="hljs-property">num</span> = <span class="hljs-number">0</span>;<br>    setting.<span class="hljs-property">data</span> = parent.<span class="hljs-property">_data</span> = [];<br>    setting.<span class="hljs-property">over</span> = <span class="hljs-string">&#x27;&lt;button style=&quot;margin-right: 10px;&quot;&gt;跳过此题&lt;/button&gt;&#x27;</span>;<br>    setting.<span class="hljs-property">curs</span> = $(<span class="hljs-string">&#x27;script:contains(courseName)&#x27;</span>, top.<span class="hljs-property">document</span>).<span class="hljs-title function_">text</span>().<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/courseName:\&#x27;(.+?)\&#x27;|$/</span>)[<span class="hljs-number">1</span>] || $(<span class="hljs-string">&#x27;h1&#x27;</span>).<span class="hljs-title function_">text</span>().<span class="hljs-title function_">trim</span>() || <span class="hljs-string">&#x27;无&#x27;</span>;<br>    setting.<span class="hljs-property">loop</span> = <span class="hljs-built_in">setInterval</span>(findAnswer, setting.<span class="hljs-property">time</span>);<br>    <span class="hljs-keyword">var</span> tip = (&#123; <span class="hljs-attr">undefined</span>: <span class="hljs-string">&#x27;任务点排队中&#x27;</span>, <span class="hljs-attr">null</span>: <span class="hljs-string">&#x27;等待切换中&#x27;</span> &#125;)[setting.<span class="hljs-property">tip</span>];<br>    <span class="hljs-keyword">if</span> ($(<span class="hljs-string">&#x27;.ZyTop&#x27;</span>).<span class="hljs-title function_">text</span>().<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/待做/</span>))&#123;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        tip &amp;&amp; setting.<span class="hljs-property">div</span>.<span class="hljs-title function_">children</span>(<span class="hljs-string">&#x27;div:eq(0)&#x27;</span>).<span class="hljs-title function_">data</span>(<span class="hljs-string">&#x27;html&#x27;</span>, tip).<span class="hljs-title function_">siblings</span>(<span class="hljs-string">&#x27;button:eq(0)&#x27;</span>).<span class="hljs-title function_">click</span>();<br>    &#125;<br>    <span class="hljs-title function_">GM_xmlhttpRequest</span>(&#123;<br>        <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>        <span class="hljs-attr">url</span>: apihost + <span class="hljs-string">&#x27;/cxtimu/notice&#x27;</span>,<br>        <span class="hljs-attr">timeout</span>: setting.<span class="hljs-property">time</span>,<br>        <span class="hljs-attr">onload</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">xhr</span>) &#123;<br>            <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">status</span> == <span class="hljs-number">200</span>) &#123;<br>                <span class="hljs-keyword">var</span> obj = $.<span class="hljs-title function_">parseJSON</span>(xhr.<span class="hljs-property">responseText</span>) || &#123;&#125;;<br>                setting.<span class="hljs-property">notice</span> = obj.<span class="hljs-property">injection</span>;<br>                <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#cx-notice&#x27;</span>).<span class="hljs-property">innerHTML</span> = setting.<span class="hljs-property">notice</span>;<br>            &#125;<br>        &#125;,<br>        <span class="hljs-attr">ontimeout</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            setting.<span class="hljs-property">loop</span> &amp;&amp; setting.<span class="hljs-property">div</span>.<span class="hljs-title function_">children</span>(<span class="hljs-string">&#x27;div:eq(0)&#x27;</span>).<span class="hljs-title function_">html</span>(setting.<span class="hljs-property">over</span> + <span class="hljs-string">&#x27;服务器超时，正在重试.....可以自行替换服务器，在代码的72行左右&#x27;</span>);<br>        &#125;<br>    &#125;);<br>&#125;<br> <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">findAnswer</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> html=<span class="hljs-string">&quot;&quot;</span>;<br>    html = $(<span class="hljs-string">&quot;.CeYan&quot;</span>).<span class="hljs-title function_">html</span>()||$(<span class="hljs-string">&quot;body&quot;</span>).<span class="hljs-title function_">html</span>();<br>    <span class="hljs-keyword">if</span> (setting.<span class="hljs-property">num</span> &gt;= $(<span class="hljs-string">&#x27;.TiMu&#x27;</span>).<span class="hljs-property">length</span>) &#123;<br>        <span class="hljs-keyword">var</span> arr = setting.<span class="hljs-property">lose</span> ? [<span class="hljs-string">&#x27;共有 &lt;font color=&quot;red&quot;&gt;&#x27;</span> + setting.<span class="hljs-property">lose</span> + <span class="hljs-string">&#x27;&lt;/font&gt; 道题目待完善（已深色标注）&#x27;</span>, saveThis] : [<span class="hljs-string">&#x27;答题已完成&#x27;</span>, submitThis];<br>        setting.<span class="hljs-property">div</span>.<span class="hljs-title function_">children</span>(<span class="hljs-string">&#x27;div:eq(0)&#x27;</span>).<span class="hljs-title function_">data</span>(<span class="hljs-string">&#x27;html&#x27;</span>, arr[<span class="hljs-number">0</span>]).<span class="hljs-title function_">siblings</span>(<span class="hljs-string">&#x27;button:eq(0)&#x27;</span>).<span class="hljs-title function_">hide</span>().<span class="hljs-title function_">click</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">setTimeout</span>(arr[<span class="hljs-number">1</span>], setting.<span class="hljs-property">time</span>);<br>    &#125;<br>    <span class="hljs-keyword">var</span> $TiMu = $(<span class="hljs-string">&#x27;.TiMu&#x27;</span>).<span class="hljs-title function_">eq</span>(setting.<span class="hljs-property">num</span>),<br>        question = <span class="hljs-title function_">filterImg</span>($TiMu.<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;.Zy_TItle:eq(0) .clearfix&#x27;</span>)).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^【.*?】\s*/</span>, <span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\s*（\d+\.\d+分）$/</span>, <span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^\d+[\.、]/</span>, <span class="hljs-string">&#x27;&#x27;</span>),<br>        type = $TiMu.<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;input[name^=answertype]:eq(0)&#x27;</span>).<span class="hljs-title function_">val</span>() || <span class="hljs-string">&#x27;-1&#x27;</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($TiMu);<br> <br>    <span class="hljs-keyword">if</span> (question == <span class="hljs-string">&quot;&quot;</span>) &#123;<br>        question = <span class="hljs-title function_">filterImg</span>($TiMu.<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;.mark_name:eq(0) .colorDeep&#x27;</span>));<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($TiMu.<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;.mark_name:eq(0) .colorDeep&#x27;</span>));<br>    <span class="hljs-comment">// 问题后追加取出的选项 20220211</span><br>    <span class="hljs-keyword">var</span> selectlis = $TiMu.<span class="hljs-title function_">find</span>(<span class="hljs-string">&quot;.Zy_ulTop&gt;li&quot;</span>);<br>    <span class="hljs-keyword">var</span> selectstr = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">if</span>(selectlis.<span class="hljs-property">length</span>&gt;<span class="hljs-number">2</span>)&#123;<br>        selectlis.<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">i,item</span>)&#123;<br>            <span class="hljs-comment">//selectstr += &quot; &quot; + $(item).text().replace(/\s+/g,&#x27;&#x27;);</span><br>            <span class="hljs-keyword">var</span> _self = $(item);<br>            <span class="hljs-comment">//filterImg( _self.find(&quot;a.after&quot;)).trim()</span><br>            selectstr += _self.<span class="hljs-title function_">find</span>(<span class="hljs-string">&quot;label.before&quot;</span>).<span class="hljs-title function_">text</span>().<span class="hljs-title function_">trim</span>() + <span class="hljs-string">&quot;、&quot;</span> + <span class="hljs-title function_">filterImg</span>( _self.<span class="hljs-title function_">find</span>(<span class="hljs-string">&quot;a.after&quot;</span>)).<span class="hljs-title function_">trim</span>()+<span class="hljs-string">&quot;\n&quot;</span>;<br>        &#125;)<br>        <span class="hljs-comment">//console.log(selectstr);</span><br>    &#125;<br>    <span class="hljs-comment">//question += selectstr;</span><br>    <span class="hljs-keyword">var</span> options=selectstr.<span class="hljs-title function_">trim</span>();<br>    <span class="hljs-comment">// end 问题后追加取出的选项</span><br>    <span class="hljs-comment">// 该问题的ansertype</span><br>    <span class="hljs-keyword">var</span> ansertype = $TiMu.<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;input[name^=answertype]:eq(0)&#x27;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;id&#x27;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;answertype&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)||<span class="hljs-number">0</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ansertype);<br>    <span class="hljs-comment">// end 该问题的ansertype</span><br>    <span class="hljs-keyword">var</span> course = $(<span class="hljs-string">&#x27;script:contains(courseName)&#x27;</span>, top.<span class="hljs-property">document</span>).<span class="hljs-title function_">text</span>().<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/courseName:\&#x27;(.+?)\&#x27;|$/</span>)[<span class="hljs-number">1</span>] || $(<span class="hljs-string">&#x27;h1&#x27;</span>).<span class="hljs-title function_">text</span>().<span class="hljs-title function_">trim</span>().<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/(.*)课程评价/</span>,<span class="hljs-string">&#x27;$1&#x27;</span>).<span class="hljs-title function_">trim</span>() || <span class="hljs-string">&#x27;无&#x27;</span>;<br>    <span class="hljs-title function_">GM_xmlhttpRequest</span>(&#123;<br>        <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>        <span class="hljs-attr">url</span>: apihost + <span class="hljs-string">&#x27;/temporary_sea&#x27;</span>,<br>        <span class="hljs-attr">headers</span>: &#123;<br>            <span class="hljs-string">&#x27;Content-type&#x27;</span>: <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span>,<br>        &#125;,<br>        <span class="hljs-attr">data</span>: <span class="hljs-string">&#x27;question=&#x27;</span> + <span class="hljs-built_in">encodeURIComponent</span>(question)+<span class="hljs-string">&#x27;&amp;options=&#x27;</span>+<span class="hljs-built_in">encodeURIComponent</span>(options) + <span class="hljs-string">&#x27;&amp;cx_id=&#x27;</span> + ansertype+ <span class="hljs-string">&#x27;&amp;html=&#x27;</span> + <span class="hljs-built_in">encodeURIComponent</span>($TiMu.<span class="hljs-title function_">html</span>())+ <span class="hljs-string">&#x27;&amp;url=&#x27;</span> + <span class="hljs-built_in">encodeURIComponent</span>(top.<span class="hljs-property">document</span>.<span class="hljs-property">URL</span>)+<span class="hljs-string">&#x27;&amp;course=&#x27;</span>+<span class="hljs-built_in">encodeURIComponent</span>(course)+<span class="hljs-string">&#x27;&amp;version=8.0.13&#x27;</span>,<br>        <span class="hljs-attr">timeout</span>: setting.<span class="hljs-property">time</span>,<br>        <span class="hljs-attr">onload</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">xhr</span>) &#123;<br>            <span class="hljs-keyword">if</span> (!setting.<span class="hljs-property">loop</span>) &#123;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">status</span> == <span class="hljs-number">200</span>) &#123;<br>                <span class="hljs-keyword">var</span> obj = $.<span class="hljs-title function_">parseJSON</span>(xhr.<span class="hljs-property">responseText</span>) || &#123;&#125;;<br>                obj.<span class="hljs-property">answer</span> = obj.<span class="hljs-property">data</span>;<br>                <span class="hljs-keyword">if</span> (obj.<span class="hljs-property">code</span>) &#123;<br>                    setting.<span class="hljs-property">div</span>.<span class="hljs-title function_">children</span>(<span class="hljs-string">&#x27;div:eq(0)&#x27;</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">&#x27;正在搜索答案...&#x27;</span>);<br>                    <span class="hljs-keyword">var</span> td = <span class="hljs-string">&#x27;&lt;td style=&quot;border: 1px solid;&#x27;</span>,<br>                        answer = <span class="hljs-title class_">String</span>(obj.<span class="hljs-property">answer</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&amp;/g</span>, <span class="hljs-string">&#x27;&amp;&#x27;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&lt;(?!img)/g</span>, <span class="hljs-string">&#x27;&lt;&#x27;</span>);<br>                    obj.<span class="hljs-property">answer</span> = <span class="hljs-regexp">/^http/</span>.<span class="hljs-title function_">test</span>(answer) ? <span class="hljs-string">&#x27;&lt;img src=&quot;&#x27;</span> + obj.<span class="hljs-property">answer</span> + <span class="hljs-string">&#x27;&quot;&gt;&#x27;</span> : obj.<span class="hljs-property">answer</span>;<br>                    $(<br>                        <span class="hljs-string">&#x27;&lt;tr&gt;&#x27;</span> +<br>                        td + <span class="hljs-string">&#x27; text-align: center;&quot;&gt;&#x27;</span> + $TiMu.<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;.Zy_TItle:eq(0) i&#x27;</span>).<span class="hljs-title function_">text</span>().<span class="hljs-title function_">trim</span>() + <span class="hljs-string">&#x27;&lt;/td&gt;&#x27;</span> +<br>                        td + <span class="hljs-string">&#x27;&quot; title=&quot;点击可复制&quot;&gt;&#x27;</span> + (question.<span class="hljs-title function_">match</span>(<span class="hljs-string">&#x27;&lt;img&#x27;</span>) ? question : question.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&amp;/g</span>, <span class="hljs-string">&#x27;&amp;&#x27;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&lt;/g</span>, <span class="hljs-string">&#x27;&lt;&#x27;</span>))+<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>+options+<span class="hljs-string">&#x27;&lt;br&gt;&lt;/td&gt;&#x27;</span> +<br>                        td + <span class="hljs-string">&#x27;&quot; title=&quot;点击可复制&quot;&gt;&#x27;</span> + (<span class="hljs-regexp">/^http/</span>.<span class="hljs-title function_">test</span>(answer) ? obj.<span class="hljs-property">answer</span> : <span class="hljs-string">&#x27;&#x27;</span>) + answer + <span class="hljs-string">&#x27;&lt;/td&gt;&#x27;</span> +<br>                        <span class="hljs-string">&#x27;&lt;/tr&gt;&#x27;</span><br>                    ).<span class="hljs-title function_">appendTo</span>(setting.<span class="hljs-property">div</span>.<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;tbody&#x27;</span>)).<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;background-color&#x27;</span>, <span class="hljs-title function_">fillAnswer</span>($TiMu.<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;ul:eq(0)&#x27;</span>).<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;li&#x27;</span>), obj, type) ? <span class="hljs-string">&#x27;&#x27;</span> : <span class="hljs-string">&#x27;rgba(0, 150, 136, 0.6)&#x27;</span>);<br>                    setting.<span class="hljs-property">data</span>[setting.<span class="hljs-property">num</span>++] = &#123;<br>                        <span class="hljs-attr">code</span>: obj.<span class="hljs-property">code</span> &gt; <span class="hljs-number">0</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>,<br>                        <span class="hljs-attr">question</span>: question,<br>                        <span class="hljs-attr">option</span>: obj.<span class="hljs-property">answer</span>,<br>                        <span class="hljs-attr">type</span>: <span class="hljs-title class_">Number</span>(type)<br>                    &#125;;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    setting.<span class="hljs-property">div</span>.<span class="hljs-title function_">children</span>(<span class="hljs-string">&#x27;div:eq(0)&#x27;</span>).<span class="hljs-title function_">html</span>(obj.<span class="hljs-property">answer</span> || setting.<span class="hljs-property">over</span> + <span class="hljs-string">&#x27;服务器繁忙，正在重试...&#x27;</span>);<br>                &#125;<br>                setting.<span class="hljs-property">div</span>.<span class="hljs-title function_">children</span>(<span class="hljs-string">&#x27;span&#x27;</span>).<span class="hljs-title function_">html</span>(obj.<span class="hljs-property">msg</span> || <span class="hljs-string">&#x27;&#x27;</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">status</span> == <span class="hljs-number">403</span>) &#123;<br>                <span class="hljs-keyword">var</span> html = xhr.<span class="hljs-property">responseText</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;&#123;&#x27;</span>) ? <span class="hljs-string">&#x27;请求过于频繁，请稍后再试&#x27;</span> : $.<span class="hljs-title function_">parseJSON</span>(xhr.<span class="hljs-property">responseText</span>).<span class="hljs-property">data</span>;<br>                setting.<span class="hljs-property">div</span>.<span class="hljs-title function_">children</span>(<span class="hljs-string">&#x27;div:eq(0)&#x27;</span>).<span class="hljs-title function_">data</span>(<span class="hljs-string">&#x27;html&#x27;</span>, html).<span class="hljs-title function_">siblings</span>(<span class="hljs-string">&#x27;button:eq(0)&#x27;</span>).<span class="hljs-title function_">click</span>();<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">status</span> == <span class="hljs-number">500</span>) &#123;<br>                setting.<span class="hljs-property">div</span>.<span class="hljs-title function_">children</span>(<span class="hljs-string">&#x27;div:eq(0)&#x27;</span>).<span class="hljs-title function_">html</span>(<span class="hljs-string">&#x27;题库程序异常,请过一会再试&#x27;</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">status</span> == <span class="hljs-number">444</span>) &#123;<br>                setting.<span class="hljs-property">div</span>.<span class="hljs-title function_">children</span>(<span class="hljs-string">&#x27;div:eq(0)&#x27;</span>).<span class="hljs-title function_">html</span>(<span class="hljs-string">&#x27;IP异常，已被拉入服务器黑名单，请过几个小时再试&#x27;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                setting.<span class="hljs-property">div</span>.<span class="hljs-title function_">children</span>(<span class="hljs-string">&#x27;div:eq(0)&#x27;</span>).<span class="hljs-title function_">html</span>(<span class="hljs-string">&#x27;题库异常,可能被恶意攻击了...请等待恢复&#x27;</span>);<br>            &#125;<br>        &#125;,<br>        <span class="hljs-attr">ontimeout</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            setting.<span class="hljs-property">loop</span> &amp;&amp; setting.<span class="hljs-property">div</span>.<span class="hljs-title function_">children</span>(<span class="hljs-string">&#x27;div:eq(0)&#x27;</span>).<span class="hljs-title function_">html</span>(setting.<span class="hljs-property">over</span> + <span class="hljs-string">&#x27;服务器超时，正在重试...&#x27;</span>);<br>        &#125;<br>    &#125;);<br>&#125;<br> <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fillAnswer</span>(<span class="hljs-params">$li, obj, type</span>) &#123;<br>    <span class="hljs-keyword">var</span> $input = $li.<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;:radio, :checkbox&#x27;</span>),<br>        str = <span class="hljs-title class_">String</span>(obj.<span class="hljs-property">answer</span>).<span class="hljs-title function_">toCDB</span>() || <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">toString</span>(),<br>        data = str.<span class="hljs-title function_">split</span>(<span class="hljs-regexp">/#|\x01|\|/</span>),<br>        opt = obj.<span class="hljs-property">opt</span> || str,<br>        state = setting.<span class="hljs-property">lose</span>;<br>    <span class="hljs-comment">// $li.find(&#x27;:radio:checked&#x27;).prop(&#x27;checked&#x27;, false);</span><br>    obj.<span class="hljs-property">code</span> &gt; <span class="hljs-number">0</span> &amp;&amp; $input.<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">index</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> == <span class="hljs-string">&#x27;true&#x27;</span>) &#123;<br>            data.<span class="hljs-title function_">join</span>().<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/(^|,)(正确|是|对|√|T|true|ri)(,|$)/</span>) &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">click</span>();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> == <span class="hljs-string">&#x27;false&#x27;</span>) &#123;<br>            data.<span class="hljs-title function_">join</span>().<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/(^|,)(错误|否|错|×|F|false|X|wr)(,|$)/</span>) &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">click</span>();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">var</span> tip = <span class="hljs-title function_">filterImg</span>($li.<span class="hljs-title function_">eq</span>(index).<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;.after&#x27;</span>)).<span class="hljs-title function_">toCDB</span>() || <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">toString</span>();<br>            <span class="hljs-title class_">Boolean</span>($.<span class="hljs-title function_">inArray</span>(tip, data) + <span class="hljs-number">1</span> || (type == <span class="hljs-string">&#x27;1&#x27;</span> &amp;&amp; str.<span class="hljs-title function_">indexOf</span>(tip) + <span class="hljs-number">1</span>)) == <span class="hljs-variable language_">this</span>.<span class="hljs-property">checked</span> || <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">click</span>();<br>        &#125;<br>    &#125;).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-regexp">/^A?B?C?D?E?F?G?$/</span>.<span class="hljs-title function_">test</span>(opt)) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-title class_">Boolean</span>(opt.<span class="hljs-title function_">match</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>)) == <span class="hljs-variable language_">this</span>.<span class="hljs-property">checked</span> || <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">click</span>();<br>    &#125;);<br>    <span class="hljs-keyword">if</span> (type.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/^[013]$/</span>)) &#123;<br>        $input.<span class="hljs-title function_">is</span>(<span class="hljs-string">&#x27;:checked&#x27;</span>) || (setting.<span class="hljs-property">none</span> ? ($input[<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * $input.<span class="hljs-property">length</span>)] || $()).<span class="hljs-title function_">click</span>() : setting.<span class="hljs-property">lose</span>++);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/^(2|[4-9]|1[08])$/</span>)) &#123;<br>        data = <span class="hljs-title class_">String</span>(obj.<span class="hljs-property">answer</span>).<span class="hljs-title function_">split</span>(<span class="hljs-regexp">/#|\x01|\|/</span>);<br>        str = $li.<span class="hljs-title function_">end</span>().<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;textarea&#x27;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">index</span>) &#123;<br>            index = (obj.<span class="hljs-property">code</span> &gt; <span class="hljs-number">0</span> &amp;&amp; data[index]) || <span class="hljs-string">&#x27;&#x27;</span>;<br>            <span class="hljs-keyword">if</span> (obj.<span class="hljs-property">code</span> &gt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-variable constant_">UE</span>.<span class="hljs-title function_">getEditor</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>).<span class="hljs-title function_">setContent</span>(index.<span class="hljs-title function_">trim</span>());<br>            &#125;<br>        &#125;).<span class="hljs-property">length</span>;<br>        (obj.<span class="hljs-property">code</span> &gt; <span class="hljs-number">0</span> &amp;&amp; data.<span class="hljs-property">length</span> == str) || setting.<span class="hljs-property">none</span> || setting.<span class="hljs-property">lose</span>++;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        setting.<span class="hljs-property">none</span> || setting.<span class="hljs-property">lose</span>++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> state == setting.<span class="hljs-property">lose</span>;<br>&#125;<br> <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">saveThis</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (!setting.<span class="hljs-property">auto</span>) <span class="hljs-keyword">return</span> <span class="hljs-built_in">setTimeout</span>(saveThis, setting.<span class="hljs-property">time</span>);<br>    setting.<span class="hljs-property">div</span>.<span class="hljs-title function_">children</span>(<span class="hljs-string">&#x27;button:lt(3)&#x27;</span>).<span class="hljs-title function_">hide</span>().<span class="hljs-title function_">eq</span>(<span class="hljs-number">1</span>).<span class="hljs-title function_">click</span>();<br>    _self.<span class="hljs-property">alert</span> = <span class="hljs-variable language_">console</span>.<span class="hljs-property">log</span>;<br>    $(<span class="hljs-string">&#x27;#tempsave&#x27;</span>).<span class="hljs-title function_">click</span>();<br>    setting.<span class="hljs-title function_">regl</span>();<br>&#125;<br> <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">submitThis</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (!setting.<span class="hljs-property">auto</span>) &#123;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!$(<span class="hljs-string">&#x27;.Btn_blue_1:visible&#x27;</span>).<span class="hljs-property">length</span>) &#123;<br>        setting.<span class="hljs-property">div</span>.<span class="hljs-title function_">children</span>(<span class="hljs-string">&#x27;button:lt(3)&#x27;</span>).<span class="hljs-title function_">hide</span>().<span class="hljs-title function_">eq</span>(<span class="hljs-number">1</span>).<span class="hljs-title function_">click</span>();<br>        <span class="hljs-keyword">return</span> setting.<span class="hljs-title function_">regl</span>();<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ($(<span class="hljs-string">&#x27;#confirmSubWin:visible&#x27;</span>).<span class="hljs-property">length</span>) &#123;<br>        <span class="hljs-keyword">var</span> btn = $(<span class="hljs-string">&#x27;#tipContent + * &gt; a&#x27;</span>).<span class="hljs-title function_">offset</span>() || &#123; <span class="hljs-attr">top</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">left</span>: <span class="hljs-number">0</span> &#125;,<br>            mouse = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createEvent</span>(<span class="hljs-string">&#x27;MouseEvents&#x27;</span>);<br>        btn = [btn.<span class="hljs-property">left</span> + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">46</span>), btn.<span class="hljs-property">top</span> + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">26</span>)];<br>        mouse.<span class="hljs-title function_">initMouseEvent</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, <span class="hljs-variable language_">document</span>.<span class="hljs-property">defaultView</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, btn[<span class="hljs-number">0</span>], btn[<span class="hljs-number">1</span>], <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">null</span>);<br>        _self.<span class="hljs-property">event</span> = $.<span class="hljs-title function_">extend</span>(<span class="hljs-literal">true</span>, &#123;&#125;, mouse);<br>        <span class="hljs-keyword">delete</span> _self.<span class="hljs-property">event</span>.<span class="hljs-property">isTrusted</span>;<br>        _self.<span class="hljs-title function_">form1submit</span>();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        $(<span class="hljs-string">&#x27;.Btn_blue_1&#x27;</span>)[<span class="hljs-number">0</span>].<span class="hljs-title function_">click</span>();<br>    &#125;<br>    <span class="hljs-built_in">setTimeout</span>(submitThis, <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(setting.<span class="hljs-property">time</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()) * <span class="hljs-number">2</span>);<br>&#125;<br> <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">checkToNext</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> $tip = $(setting.<span class="hljs-property">job</span>.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;, &#x27;</span>), <span class="hljs-variable language_">document</span>).<span class="hljs-title function_">prevAll</span>(<span class="hljs-string">&#x27;.ans-job-icon&#x27;</span> + setting.<span class="hljs-property">normal</span>);<br>    <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        $tip.<span class="hljs-title function_">parent</span>(<span class="hljs-string">&#x27;:not(.ans-job-finished)&#x27;</span>).<span class="hljs-property">length</span> || setting.<span class="hljs-property">jump</span> &amp;&amp; <span class="hljs-title function_">toNext</span>();<br>    &#125;, setting.<span class="hljs-property">time</span>);<br>&#125;<br> <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">toNext</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> $cur = $(<span class="hljs-string">&#x27;#cur&#x27;</span> + $(<span class="hljs-string">&#x27;#chapterIdid&#x27;</span>).<span class="hljs-title function_">val</span>()),<br>        $tip = $(<span class="hljs-string">&#x27;span.currents ~ span&#x27;</span>),<br>        sel = setting.<span class="hljs-property">review</span> ? <span class="hljs-string">&#x27;html&#x27;</span> : <span class="hljs-string">&#x27;.blue&#x27;</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;tonext&quot;</span>);<br>    <span class="hljs-keyword">if</span> (!$cur.<span class="hljs-title function_">has</span>(sel).<span class="hljs-property">length</span> &amp;&amp; $tip.<span class="hljs-property">length</span>) <span class="hljs-keyword">return</span> $tip.<span class="hljs-title function_">eq</span>(<span class="hljs-number">0</span>).<span class="hljs-title function_">click</span>();<br>    $tip = $(<span class="hljs-string">&#x27;.roundpointStudent, .roundpoint&#x27;</span>).<span class="hljs-title function_">parent</span>();<br>    $tip = $tip.<span class="hljs-title function_">slice</span>($tip.<span class="hljs-title function_">index</span>($cur) + <span class="hljs-number">1</span>).<span class="hljs-title function_">not</span>(<span class="hljs-string">&#x27;:has(&#x27;</span> + sel + <span class="hljs-string">&#x27;)&#x27;</span>);<br>    $tip.<span class="hljs-title function_">not</span>(setting.<span class="hljs-property">lock</span> ? <span class="hljs-string">&#x27;:has(.lock)&#x27;</span> : <span class="hljs-string">&#x27;html&#x27;</span>).<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;span&#x27;</span>).<span class="hljs-title function_">eq</span>(<span class="hljs-number">0</span>).<span class="hljs-title function_">click</span>();<br>    $tip.<span class="hljs-property">length</span> || setting.<span class="hljs-property">course</span> &amp;&amp; <span class="hljs-title function_">switchCourse</span>();<br>&#125;<br> <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">switchCourse</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">//$(&#x27;#right&#x27;).click()</span><br>    <span class="hljs-comment">//$(&#x27;#right2&#x27;).click()</span><br>    <span class="hljs-keyword">var</span> move_switch=<span class="hljs-literal">false</span>;<br>    $(<span class="hljs-string">&#x27;.orientationright&#x27;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">if</span> ($(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;display&#x27;</span>)==<span class="hljs-string">&#x27;block&#x27;</span>)&#123;<br>            move_switch=<span class="hljs-literal">true</span>;<br>            $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">click</span>();<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;点击按钮下一章&quot;</span>);<br>        &#125;<br>    &#125;)<br>    <span class="hljs-keyword">if</span> (move_switch==<span class="hljs-literal">false</span>)&#123;<br>        <span class="hljs-title function_">GM_xmlhttpRequest</span>(&#123;<br>            <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>            <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/visit/courses/study?isAjax=true&amp;fileId=0&amp;debug=&#x27;</span>,<br>            <span class="hljs-attr">headers</span>: &#123;<br>                <span class="hljs-string">&#x27;Referer&#x27;</span>: location.<span class="hljs-property">origin</span> + <span class="hljs-string">&#x27;/visit/courses&#x27;</span>,<br>                <span class="hljs-string">&#x27;X-Requested-With&#x27;</span>: <span class="hljs-string">&#x27;XMLHttpRequest&#x27;</span><br>            &#125;,<br>            <span class="hljs-attr">onload</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">xhr</span>) &#123;<br>                <span class="hljs-keyword">var</span> list = $(<span class="hljs-string">&#x27;h3 a[target]&#x27;</span>, xhr.<span class="hljs-property">responseText</span>).<span class="hljs-title function_">map</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                    <span class="hljs-keyword">return</span> $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;href&#x27;</span>);<br>                &#125;),<br>                    index = list.<span class="hljs-title function_">map</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">index</span>) &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">match</span>(top.<span class="hljs-property">courseId</span>) &amp;&amp; index;<br>                    &#125;).<span class="hljs-title function_">filter</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                        <span class="hljs-keyword">return</span> $.<span class="hljs-title function_">isNumeric</span>(<span class="hljs-variable language_">this</span>);<br>                    &#125;)[<span class="hljs-number">0</span>] + <span class="hljs-number">1</span> || <span class="hljs-number">0</span>;<br>                setting.<span class="hljs-property">course</span> = list[index] ? <span class="hljs-title function_">goCourse</span>(list[index]) : <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br> <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">goCourse</span>(<span class="hljs-params">url</span>) &#123;<br>    <span class="hljs-title function_">GM_xmlhttpRequest</span>(&#123;<br>        <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>        <span class="hljs-attr">url</span>: url,<br>        <span class="hljs-attr">onload</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">xhr</span>) &#123;<br>            $.<span class="hljs-title function_">globalEval</span>(<span class="hljs-string">&#x27;location.href = &quot;&#x27;</span> + $(<span class="hljs-string">&#x27;.articlename a[href]&#x27;</span>, xhr.<span class="hljs-property">responseText</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;href&#x27;</span>) + <span class="hljs-string">&#x27;&quot;;&#x27;</span>);<br>        &#125;<br>    &#125;);<br>&#125;<br> <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">autoRead</span>(<span class="hljs-params"></span>) &#123;<br>    $(<span class="hljs-string">&#x27;html, body&#x27;</span>).<span class="hljs-title function_">animate</span>(&#123;<br>        <span class="hljs-attr">scrollTop</span>: $(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">height</span>() - $(<span class="hljs-variable language_">window</span>).<span class="hljs-title function_">height</span>()<br>    &#125;, <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(setting.<span class="hljs-property">read</span>) * <span class="hljs-number">1E3</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        $(<span class="hljs-string">&#x27;.nodeItem.r i&#x27;</span>).<span class="hljs-title function_">click</span>();<br>    &#125;).<span class="hljs-title function_">one</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-string">&#x27;#top&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;<br>        $(event.<span class="hljs-property">delegateTarget</span>).<span class="hljs-title function_">stop</span>();<br>    &#125;);<br>&#125;<br> <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">DisplayURL</span>(<span class="hljs-params"></span>) &#123;<br>    _self.<span class="hljs-property">WAY</span>.<span class="hljs-property">box</span>.<span class="hljs-title function_">hide</span>();<br>    <span class="hljs-keyword">var</span> $li = $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">closest</span>(<span class="hljs-string">&#x27;li&#x27;</span>);<br>    $.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/visit/goToCourseByFace&#x27;</span>, &#123;<br>        <span class="hljs-attr">courseId</span>: $li.<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;input[name=courseId]&#x27;</span>).<span class="hljs-title function_">val</span>(),<br>        <span class="hljs-attr">clazzId</span>: $li.<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;input[name=classId]&#x27;</span>).<span class="hljs-title function_">val</span>()<br>    &#125;, <span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;<br>        $li.<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;[onclick^=openFaceTip]&#x27;</span>).<span class="hljs-title function_">removeAttr</span>(<span class="hljs-string">&#x27;onclick&#x27;</span>).<span class="hljs-title function_">attr</span>(&#123;<br>            <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;_blank&#x27;</span>,<br>            <span class="hljs-attr">href</span>: $(data).<span class="hljs-title function_">filter</span>(<span class="hljs-string">&#x27;script:last&#x27;</span>).<span class="hljs-title function_">text</span>().<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/n\(&quot;(.+?)&quot;/</span>)[<span class="hljs-number">1</span>]<br>        &#125;);<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;本课程已临时解除面部识别&#x27;</span>);<br>    &#125;, <span class="hljs-string">&#x27;html&#x27;</span>);<br>&#125;<br> <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getSchoolId</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> school = <span class="hljs-regexp">/^1\d&#123;10&#125;$/</span>.<span class="hljs-title function_">test</span>(setting.<span class="hljs-property">username</span>) ? <span class="hljs-string">&#x27;&#x27;</span> : setting.<span class="hljs-property">school</span>;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">isNaN</span>(school)) <span class="hljs-keyword">return</span> <span class="hljs-built_in">setTimeout</span>(toLogin, setting.<span class="hljs-property">time</span>, school);<br>    <span class="hljs-keyword">if</span> (school == <span class="hljs-string">&#x27;账号为手机号可以不修改此参数&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;请修改school参数&#x27;</span>);<br>    $.<span class="hljs-title function_">getJSON</span>(<span class="hljs-string">&#x27;/org/searchUnis?filter=&#x27;</span> + <span class="hljs-built_in">encodeURI</span>(school) + <span class="hljs-string">&#x27;&amp;product=44&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;<br>        <span class="hljs-keyword">if</span> (!data.<span class="hljs-property">result</span>) <span class="hljs-keyword">return</span> <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;学校查询错误&#x27;</span>);<br>        <span class="hljs-keyword">var</span> msg = $.<span class="hljs-title function_">grep</span>(data.<span class="hljs-property">froms</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) &#123;<br>            <span class="hljs-keyword">return</span> value.<span class="hljs-property">name</span> == school;<br>        &#125;)[<span class="hljs-number">0</span>];<br>        msg ? <span class="hljs-built_in">setTimeout</span>(toLogin, setting.<span class="hljs-property">time</span>, msg.<span class="hljs-property">schoolid</span>) : <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;学校名称不完整&#x27;</span>);<br>    &#125;);<br>&#125;<br> <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">toLogin</span>(<span class="hljs-params">fid</span>) &#123;<br>    <span class="hljs-title function_">GM_xmlhttpRequest</span>(&#123;<br>        <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/api/login?name=&#x27;</span> + setting.<span class="hljs-property">username</span> + <span class="hljs-string">&#x27;&amp;pwd=&#x27;</span> + setting.<span class="hljs-property">password</span> + <span class="hljs-string">&#x27;&amp;schoolid=&#x27;</span> + fid + <span class="hljs-string">&#x27;&amp;verify=0&#x27;</span>,<br>        <span class="hljs-attr">onload</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">xhr</span>) &#123;<br>            <span class="hljs-keyword">var</span> obj = $.<span class="hljs-title function_">parseJSON</span>(xhr.<span class="hljs-property">responseText</span>) || &#123;&#125;;<br>            obj.<span class="hljs-property">result</span> ? location.<span class="hljs-property">href</span> = <span class="hljs-built_in">decodeURIComponent</span>($(<span class="hljs-string">&#x27;#ref, #refer_0x001&#x27;</span>).<span class="hljs-title function_">val</span>()) : <span class="hljs-title function_">alert</span>(obj.<span class="hljs-property">errorMsg</span> || <span class="hljs-string">&#x27;Error&#x27;</span>);<br>        &#125;<br>    &#125;);<br>&#125;<br> <br><span class="hljs-comment">// 测验试题Dom</span><br><span class="hljs-keyword">var</span> html = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">submitAnswer</span>(<span class="hljs-params">$job, data</span>) &#123;<br>    $job.<span class="hljs-title function_">removeClass</span>(<span class="hljs-string">&#x27;ans-job-finished&#x27;</span>);<br>    html = $(<span class="hljs-string">&quot;.CeYan&quot;</span>).<span class="hljs-title function_">html</span>()||$(<span class="hljs-string">&quot;body&quot;</span>).<span class="hljs-title function_">html</span>();<br>    data = data.<span class="hljs-property">length</span> ? $(data) : $(<span class="hljs-string">&#x27;.TiMu&#x27;</span>).<span class="hljs-title function_">map</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> question = <span class="hljs-title function_">filterImg</span>($(<span class="hljs-string">&#x27;.Zy_TItle .clearfix&#x27;</span>, <span class="hljs-variable language_">this</span>));<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">title</span>: question.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^【.*?】\s*/</span>, <span class="hljs-string">&#x27;&#x27;</span>),<br>            <span class="hljs-attr">type</span>: (&#123; 单选题: <span class="hljs-number">0</span>, 多选题: <span class="hljs-number">1</span>, 填空题: <span class="hljs-number">2</span>, 判断题: <span class="hljs-number">3</span> &#125;)[question.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/^【(.*?)】|$/</span>)[<span class="hljs-number">1</span>]]||<span class="hljs-number">100</span><br>        &#125;;<br>    &#125;);<br>    data = $.<span class="hljs-title function_">grep</span>(data.<span class="hljs-title function_">map</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">index</span>) &#123;<br>        <span class="hljs-keyword">var</span> $TiMu = $(<span class="hljs-string">&#x27;.TiMu&#x27;</span>).<span class="hljs-title function_">eq</span>(index);<br>        <span class="hljs-keyword">if</span> (!($.<span class="hljs-title function_">isPlainObject</span>(<span class="hljs-variable language_">this</span>) &amp;&amp; $TiMu.<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;.fr&#x27;</span>).<span class="hljs-property">length</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">type</span> == <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">var</span> $ans = $TiMu.<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;.Py_tk, .Py_answer&#x27;</span>).<span class="hljs-title function_">eq</span>(<span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">if</span> (!$TiMu.<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;.cuo&#x27;</span>).<span class="hljs-property">length</span> &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">code</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!$ans.<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;.cuo&#x27;</span>).<span class="hljs-property">length</span>) &#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">answer</span> = $ans.<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;.clearfix&#x27;</span>).<span class="hljs-title function_">map</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                    <span class="hljs-keyword">return</span> $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">text</span>().<span class="hljs-title function_">trim</span>();<br>                &#125;).<span class="hljs-title function_">get</span>().<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;#&#x27;</span>) || <span class="hljs-string">&#x27;无&#x27;</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">code</span>) &#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">code</span> = -<span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">type</span> == <span class="hljs-number">3</span>) &#123;<br>            <span class="hljs-keyword">var</span> ans = $TiMu.<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;.font20:last&#x27;</span>).<span class="hljs-title function_">text</span>();<br>            <span class="hljs-keyword">if</span> ($TiMu.<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;.cuo&#x27;</span>).<span class="hljs-property">length</span>) &#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">answer</span> = (&#123; <span class="hljs-string">&#x27;√&#x27;</span>: <span class="hljs-string">&#x27;错误&#x27;</span>, <span class="hljs-string">&#x27;×&#x27;</span>: <span class="hljs-string">&#x27;正确&#x27;</span> &#125;)[ans] || <span class="hljs-string">&#x27;无&#x27;</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">code</span>) &#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">answer</span> = (&#123; <span class="hljs-string">&#x27;√&#x27;</span>: <span class="hljs-string">&#x27;正确&#x27;</span>, <span class="hljs-string">&#x27;×&#x27;</span>: <span class="hljs-string">&#x27;错误&#x27;</span> &#125;)[ans] || <span class="hljs-string">&#x27;无&#x27;</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">var</span> options=<span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">var</span> text = $TiMu.<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;.Py_answer &gt; span:eq(0)&#x27;</span>).<span class="hljs-title function_">text</span>();<br>            <span class="hljs-keyword">if</span> ($TiMu.<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;.dui&#x27;</span>).<span class="hljs-property">length</span> &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">code</span> &amp;&amp; !<span class="hljs-regexp">/^A?B?C?D?E?F?G?$/</span>.<span class="hljs-title function_">test</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">answer</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ($TiMu.<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;.dui&#x27;</span>).<span class="hljs-property">length</span> || text.<span class="hljs-title function_">match</span>(<span class="hljs-string">&#x27;正确答案&#x27;</span>)) &#123;<br>                text = text.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/[A-G]/gi</span>) || [];<br>                $TiMu.<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;.Zy_ulTop&gt;li&#x27;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>                    options+=<span class="hljs-title function_">filterImg</span>(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">trim</span>()+<span class="hljs-string">&quot;\n&quot;</span>;<br>                &#125;)<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span> = options.<span class="hljs-title function_">trim</span>();<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">answer</span> = $.<span class="hljs-title function_">map</span>(text, <span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-title function_">filterImg</span>($TiMu.<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;.fl:contains(&#x27;</span> + value + <span class="hljs-string">&#x27;) + a&#x27;</span>));<br>                &#125;).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;#&#x27;</span>) || <span class="hljs-string">&#x27;无&#x27;</span>;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">key</span> = text.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">code</span>) &#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">code</span> = -<span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                $TiMu.<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;.Zy_ulTop&gt;li&#x27;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>                    options+=<span class="hljs-title function_">filterImg</span>(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">trim</span>()+<span class="hljs-string">&quot;\n&quot;</span>;<br>                &#125;)<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span> = options.<span class="hljs-title function_">trim</span>();<br>                <span class="hljs-keyword">if</span> ($TiMu.<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;.Py_answer &gt; span&#x27;</span>).<span class="hljs-title function_">text</span>().<span class="hljs-title function_">match</span>(<span class="hljs-string">&#x27;正确答案&#x27;</span>))&#123;<br>                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">answer</span> =$TiMu.<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;.Py_answer &gt; span&#x27;</span>).<span class="hljs-title function_">text</span>().<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/正确答案：(.*?)$|正确答案：(.*?) $/</span>)[<span class="hljs-number">1</span>];<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">answer</span> = <span class="hljs-string">&quot;&quot;</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">answer</span> ===<span class="hljs-string">&quot;无&quot;</span>)&#123;<br>                $TiMu.<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;.Zy_ulTop&gt;li&#x27;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>                    options+=<span class="hljs-title function_">filterImg</span>(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">trim</span>()+<span class="hljs-string">&quot;\n&quot;</span>;<br>                &#125;)<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span> = options.<span class="hljs-title function_">trim</span>();<br>                <span class="hljs-keyword">if</span> ($TiMu.<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;.Py_answer &gt; span&#x27;</span>).<span class="hljs-title function_">text</span>().<span class="hljs-title function_">match</span>(<span class="hljs-string">&#x27;正确答案&#x27;</span>))&#123;<br>                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">answer</span>=$TiMu.<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;.Py_answer &gt; span&#x27;</span>).<span class="hljs-title function_">text</span>().<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/正确答案：(.*?)$|正确答案：(.*?) $/</span>)[<span class="hljs-number">1</span>];<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;没有找到正确答案&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">title</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">title</span> || <span class="hljs-variable language_">this</span>.<span class="hljs-property">question</span>;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>;<br>    &#125;), <span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) &#123;<br>        <span class="hljs-keyword">return</span> value &amp;&amp; value.<span class="hljs-property">answer</span> != <span class="hljs-string">&#x27;无&#x27;</span>;<br>    &#125;);<br>    <span class="hljs-keyword">var</span> jobid=<span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">if</span> ($(<span class="hljs-string">&#x27;#jobid&#x27;</span>).<span class="hljs-property">length</span>&gt;<span class="hljs-number">0</span>)&#123;<br>        jobid=$(<span class="hljs-string">&#x27;#jobid&#x27;</span>).<span class="hljs-title function_">val</span>().<span class="hljs-title function_">slice</span>(<span class="hljs-number">5</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        jobid=<span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>    setting.<span class="hljs-property">curs</span> = $(<span class="hljs-string">&#x27;script:contains(courseName)&#x27;</span>, top.<span class="hljs-property">document</span>).<span class="hljs-title function_">text</span>().<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/courseName:\&#x27;(.+?)\&#x27;|$/</span>)[<span class="hljs-number">1</span>] || $(<span class="hljs-string">&#x27;h1&#x27;</span>).<span class="hljs-title function_">text</span>().<span class="hljs-title function_">trim</span>().<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/(.*)课程评价/</span>,<span class="hljs-string">&#x27;$1&#x27;</span>).<span class="hljs-title function_">trim</span>() || <span class="hljs-string">&#x27;无&#x27;</span>;<br>    <span class="hljs-keyword">var</span> chapter_list = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(<span class="hljs-title function_">getDirList</span>());<br>    <span class="hljs-keyword">var</span> cpi = $(<span class="hljs-string">&quot;#cpi&quot;</span>).<span class="hljs-title function_">val</span>();<br>    <span class="hljs-keyword">var</span> fid = $(<span class="hljs-string">&#x27;script:contains(fid)&#x27;</span>, top.<span class="hljs-property">document</span>).<span class="hljs-title function_">text</span>().<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/fid:\&#x27;(.+?)\&#x27;|$/</span>)[<span class="hljs-number">1</span>] || $(<span class="hljs-string">&#x27;script:contains(fid)&#x27;</span>, top.<span class="hljs-property">document</span>).<span class="hljs-title function_">text</span>().<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/fid=(.+?)&amp;|$/</span>)[<span class="hljs-number">1</span>] || $(<span class="hljs-string">&#x27;script:contains(fid):eq(1)&#x27;</span>,self.<span class="hljs-property">window</span>.<span class="hljs-property">parent</span>.<span class="hljs-property">parent</span>.<span class="hljs-property">document</span>).<span class="hljs-title function_">text</span>().<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/&quot;fid&quot;:&quot;(.+?)&quot;|$/</span>)[<span class="hljs-number">1</span>] || <span class="hljs-string">&#x27;无&#x27;</span>;<br>    data.<span class="hljs-property">length</span> &amp;&amp; <span class="hljs-title function_">GM_xmlhttpRequest</span>(&#123;<br>        <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>        <span class="hljs-attr">url</span>: apihost + <span class="hljs-string">&#x27;/upload&#x27;</span>,<br>        <span class="hljs-attr">headers</span>: &#123;<br>            <span class="hljs-string">&#x27;Content-type&#x27;</span>: <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span>,<br>        &#125;,<br>        <span class="hljs-attr">data</span>: <span class="hljs-string">&#x27;course=&#x27;</span> + <span class="hljs-built_in">encodeURIComponent</span>(setting.<span class="hljs-property">curs</span>) + <span class="hljs-string">&#x27;&amp;data=&#x27;</span> + <span class="hljs-built_in">encodeURIComponent</span>((<span class="hljs-title class_">Ext</span>.<span class="hljs-property">encode</span> || <span class="hljs-title class_">JSON</span>.<span class="hljs-property">stringify</span>)(data)) + <span class="hljs-string">&#x27;&amp;id=&#x27;</span> + jobid<br>        + <span class="hljs-string">&#x27;&amp;cpi=&#x27;</span>+ cpi<br>        + <span class="hljs-string">&#x27;&amp;chapter_list=&#x27;</span> + chapter_list<br>        + <span class="hljs-string">&#x27;&amp;html=&#x27;</span> + <span class="hljs-built_in">encodeURIComponent</span>(html)<br>        + <span class="hljs-string">&#x27;&amp;fid=&#x27;</span> + fid<br>        + <span class="hljs-string">&#x27;&amp;url=&#x27;</span> + <span class="hljs-built_in">encodeURIComponent</span>(top.<span class="hljs-property">document</span>.<span class="hljs-property">URL</span>)+<span class="hljs-string">&#x27;&amp;version=8.0.13&#x27;</span><br>    &#125;);<br>    <span class="hljs-comment">//$(&#x27;#right&#x27;).click()</span><br>    <span class="hljs-comment">//$(&#x27;#right2&#x27;).click()</span><br>    $job.<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&#x27;ans-job-finished&#x27;</span>);<br>&#125;<br> <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">filterImg</span>(<span class="hljs-params">dom</span>) &#123;<br>    <span class="hljs-keyword">return</span> $(dom).<span class="hljs-title function_">clone</span>().<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;img[src]&#x27;</span>).<span class="hljs-title function_">replaceWith</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> $(<span class="hljs-string">&#x27;&lt;p&gt;&lt;/p&gt;&#x27;</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">&#x27;&lt;img src=&quot;&#x27;</span> + $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;src&#x27;</span>) + <span class="hljs-string">&#x27;&quot;&gt;&#x27;</span>);<br>    &#125;).<span class="hljs-title function_">end</span>().<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;iframe[src]&#x27;</span>).<span class="hljs-title function_">replaceWith</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> $(<span class="hljs-string">&#x27;&lt;p&gt;&lt;/p&gt;&#x27;</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">&#x27;&lt;iframe src=&quot;&#x27;</span> + $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;src&#x27;</span>) + <span class="hljs-string">&#x27;&quot;&gt;&lt;/irame&gt;&#x27;</span>);<br>    &#125;).<span class="hljs-title function_">end</span>().<span class="hljs-title function_">text</span>().<span class="hljs-title function_">trim</span>();<br>&#125;<br> <br><span class="hljs-comment">// 获取文章侧栏列表</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getDirList</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> $ = top.<span class="hljs-property">jQuery</span>;<br>    <span class="hljs-keyword">var</span> json_dir = &#123;<span class="hljs-string">&quot;current&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;list&quot;</span>:[]&#125;;<br>    <span class="hljs-comment">// 有侧栏列表</span><br>    json_dir.<span class="hljs-property">current</span> = $(<span class="hljs-string">&quot;.cells&quot;</span>).<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;.currents&gt;a&gt;span&#x27;</span>).<span class="hljs-title function_">text</span>().<span class="hljs-title function_">trim</span>();<br>    $(<span class="hljs-string">&quot;.cells&quot;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">var</span> temp_json = &#123;<span class="hljs-string">&quot;titlewords&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;titles&quot;</span>:[]&#125;;<br>        <span class="hljs-keyword">var</span> _this = $(<span class="hljs-variable language_">this</span>);<br>        temp_json.<span class="hljs-property">titlewords</span> = _this.<span class="hljs-title function_">find</span>(<span class="hljs-string">&quot;span.titlewords&quot;</span>).<span class="hljs-title function_">text</span>().<span class="hljs-title function_">trim</span>();<br>        _this.<span class="hljs-title function_">find</span>(<span class="hljs-string">&quot;h4&gt;a&gt;span&quot;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">i,item</span>)&#123;<br>            temp_json.<span class="hljs-property">titles</span>.<span class="hljs-title function_">push</span>($(item).<span class="hljs-title function_">text</span>().<span class="hljs-title function_">trim</span>());<br>        &#125;);<br>        json_dir.<span class="hljs-property">list</span>.<span class="hljs-title function_">push</span>(temp_json);<br>    &#125;)<br>    <span class="hljs-comment">// 无侧栏列表</span><br>    <span class="hljs-keyword">if</span>(json_dir.<span class="hljs-property">current</span> == <span class="hljs-string">&quot;&quot;</span>)&#123;<br>        json_dir.<span class="hljs-property">current</span> = $(<span class="hljs-string">&quot;.CeYan li.cur&quot;</span>).<span class="hljs-title function_">text</span>().<span class="hljs-title function_">trim</span>();<br>    &#125;<br> <br>    <span class="hljs-keyword">return</span> json_dir;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="如果觉得该教程对你有帮助，可以通过下方的支付宝-微信收款码进行打赏。">如果觉得该教程对你有帮助，可以通过下方的支付宝/微信收款码进行打赏。</h3><p><img src="/images/2022-3-12-1.png" alt="微信打赏"></p><p><img src="/images/2022-3-12-2.png" alt="支付宝打赏"></p><h4 id="感谢打赏！！">感谢打赏！！</h4>]]></content>
      
      
      <categories>
          
          <category> 福利 </category>
          
          <category> 超星 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 福利 </tag>
            
            <tag> 超星 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【福利】全国计算机等级考试模拟软件</title>
      <link href="/2022/03/12/%E3%80%90%E7%A6%8F%E5%88%A9%E3%80%91%E5%85%A8%E5%9B%BD%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%AD%89%E7%BA%A7%E8%80%83%E8%AF%95%E6%A8%A1%E6%8B%9F%E8%BD%AF%E4%BB%B6/"/>
      <url>/2022/03/12/%E3%80%90%E7%A6%8F%E5%88%A9%E3%80%91%E5%85%A8%E5%9B%BD%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%AD%89%E7%BA%A7%E8%80%83%E8%AF%95%E6%A8%A1%E6%8B%9F%E8%BD%AF%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1>全国计算机等级考试模拟软件安装破解教程</h1><h2 id="1-下载全国计算机考试模拟软件">1.下载全国计算机考试模拟软件</h2><p>计算机一级office下载地址：<a href="https://quqi.avyeld.com/s/2960549/3WzQ0c06CEBngG0U">点我下载</a></p><p>计算机二级office下载地址：<a href="https://quqi.avyeld.com/s/2960549/yKRQk3wOCd990UbE">点我下载</a></p><p>计算机二级C语言下载地址：<a href="https://quqi.avyeld.com/s/2960549/tKuuHKinWyjqQsGr">点我下载</a></p><p>计算机二级Java下载地址：<a href="https://quqi.avyeld.com/s/2960549/UkQmJ8wvSsHP5k5t">点我下载</a></p><h2 id="2-下载小鑫破解补丁">2.下载小鑫破解补丁</h2><p>！！！<strong>注意一定要对应版本，否则破解补丁不生效</strong>！！！</p><p>计算机一级office破解补丁下载地址：<a href="/download/%E4%B8%80%E7%BA%A7office%E5%B0%8F%E9%91%AB%E7%A0%B4%E8%A7%A3%E8%A1%A5%E4%B8%81.rar">点我下载</a></p><p>计算机二级office破解补丁下载地址：<a href="/download/%E4%BA%8C%E7%BA%A7office%E5%B0%8F%E9%91%AB%E7%A0%B4%E8%A7%A3%E8%A1%A5%E4%B8%81.rar">点我下载</a></p><p>计算机二级C语言破解补丁下载地址：<a href="/download/%E4%BA%8C%E7%BA%A7C%E5%B0%8F%E9%91%AB%E7%A0%B4%E8%A7%A3%E8%A1%A5%E4%B8%81.rar">点我下载</a></p><p>计算机二级Java破解补丁下载地址：<a href="/download/%E4%BA%8C%E7%BA%A7Java%E5%B0%8F%E9%91%AB%E7%A0%B4%E8%A7%A3%E8%A1%A5%E4%B8%81.rar">点我下载</a></p><h2 id="3-教程">3.教程</h2><ol><li>将上述文件对应下载，执行.exe文件即可安装。如果安装一级office遇到问题，请点击忽略继续安装，其他的同理！！</li><li>下载对应的小鑫破解补丁，下载后是一个压缩包。解压后将文件复制粘贴到你软件的安装目录，直接替换掉原文件即可。</li><li>打开软件即可享受免费的计算机题库了。</li></ol><h3 id="最后，祝你们考试顺利！">最后，祝你们考试顺利！</h3><h3 id="如果觉得该软件对你有帮助，可以通过下方的支付宝-微信收款码进行打赏。">如果觉得该软件对你有帮助，可以通过下方的支付宝/微信收款码进行打赏。</h3><p><img src="/images/2022-3-12-1.png" alt="微信打赏"></p><p><img src="/images/2022-3-12-2.png" alt="支付宝打赏"></p><h4 id="感谢打赏！！">感谢打赏！！</h4>]]></content>
      
      
      <categories>
          
          <category> 福利 </category>
          
          <category> 计算机考试系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 福利 </tag>
            
            <tag> 计算机考试系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言排序算法的讲解</title>
      <link href="/2021/12/10/%E8%AF%AD%E8%A8%80%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84%E8%AE%B2%E8%A7%A3/"/>
      <url>/2021/12/10/%E8%AF%AD%E8%A8%80%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84%E8%AE%B2%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1>C语言排序算法的讲解</h1><h2 id="一、常用排序算法">一、常用排序算法</h2><h3 id="选择排序">选择排序</h3><p>选择排序是一种简单直观的排序算法。</p><p>它的工作原理如下：</p><p>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。 以此类推，直到所有元素均排序完毕。</p><h3 id="插入排序">插入排序</h3><p>插入排序也是一种简单直观的排序算法。</p><p>它的工作原理如下：</p><p>是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</p><h3 id="快速排序">快速排序</h3><p>快速排序使用分治法策略来把一个序列分为两个子序列。（其实就是找个元素把整体一分为二）</p><p>除了用我下面的代码实现之外，也可以用C语言提供的qsort函数进行快排。</p><p>步骤为：</p><ol><li>从数列中挑出一个元素，书上称为“基准”。</li><li>重新排序数列，所有比基准值小的元素摆放在基准前面，所有比基准值大的元素摆在基准后面（相同的数可以到任何一边）。在这个分割结束之后，该基准就处于数列的中间位置。这个称为分割操作。</li><li>递归地把小于基准值元素的子数列和大于基准值元素的子数列排序。</li><li>递归到最底部时，数列的大小是零或一，也就是已经排序好了。这个算法一定会结束，因为在每次的迭代中，它至少会把一个元素摆到它最后的位置去。</li></ol><h2 id="代码演示">代码演示</h2><pre><code class="hljs">    #include&lt;stdio.h&gt;    #define N 8 //方便修改数组长度    /*        项目介绍：演示排序算法的实现过程        作者：连思鑫        时间：2021-12-10    */    //自定义的输出函数    void print(int a[], int n, int i) &#123;        printf(&quot;%d:&quot;, i);        for (int j = 0; j &lt; n; j++) &#123;            printf(&quot;%d &quot;, a[j]);        &#125;        printf(&quot;\n&quot;);    &#125;    //直接插入排序函数    void InsertSort(int a[], int n)    &#123;        for (int i = 1; i &lt; n; i++) &#123;            if (a[i] &lt; a[i - 1]) &#123;//若第 i 个元素大于 i-1 元素则直接插入；反之，需要找到适当的插入位置后在插入。                int j = i - 1;                int x = a[i];                while (j &gt; -1 &amp;&amp; x &lt; a[j]) &#123;  //采用顺序查找方式找到插入的位置，在查找的同时，将数组中的元素进行后移操作，给插入元素腾出空间                    a[j + 1] = a[j];                    j--;                &#125;                a[j + 1] = x;      //插入到正确位置            &#125;            print(a, n, i);//打印每次排序后的结果        &#125;    &#125;    //选择排序    void selection_sort(int a[], int n)    &#123;        int i, j, temp;        for (i = 1; i &lt; n - 1; i++)        &#123;            int min = i;                  // 记录最小值，第一个元素默认最小            for (j = i + 1; j &lt; n; j++)     // 访问未排序的元素            &#123;                if (a[j] &lt; a[min])    // 找到目前最小值                &#123;                    min = j;    // 记录最小值                &#125;            &#125;            if (min != i)            &#123;                temp = a[min];  // 交换两个变量                a[min] = a[i];                a[i] = temp;            &#125;            print(a, n, i);        &#125;    &#125;    //快速排序    //迭代法    typedef struct _Range &#123;        int start, end;    &#125; Range;    Range new_Range(int s, int e) &#123;        Range r;        r.start = s;        r.end = e;        return r;    &#125;    void swap(int* x, int* y) &#123;        int t = *x;        *x = *y;        *y = t;    &#125;    void quick_sort(int arr[], const int len) &#123;        if (len &lt;= 0)            return; // 避免len等於負值時引發段錯誤（Segment Fault）        // r[]模擬列表,p為數量,r[p++]為push,r[--p]為pop且取得元素        Range r[N];        int p = 0;        r[p++] = new_Range(0, len - 1);        while (p) &#123;            Range range = r[--p];            if (range.start &gt;= range.end)                continue;            int mid = arr[(range.start + range.end) / 2]; // 選取中間點為基準點            int left = range.start, right = range.end;            do            &#123;                while (arr[left] &lt; mid) ++left;   // 檢測基準點左側是否符合要求                while (arr[right] &gt; mid) --right; //檢測基準點右側是否符合要求                if (left &lt;= right)                &#123;                    swap(&amp;arr[left], &amp;arr[right]);                    left++; right--;               // 移動指針以繼續                &#125;            &#125; while (left &lt;= right);            if (range.start &lt; right) r[p++] = new_Range(range.start, right);            if (range.end &gt; left) r[p++] = new_Range(left, range.end);            print(arr, len, r);        &#125;    &#125;    //递归法    void quick_sort_recursive(int arr[], int start, int end) &#123;        if (start &gt;= end)            return;        int mid = arr[end];        int left = start, right = end - 1;        while (left &lt; right) &#123;            while (arr[left] &lt; mid &amp;&amp; left &lt; right)                left++;            while (arr[right] &gt;= mid &amp;&amp; left &lt; right)                right--;            swap(&amp;arr[left], &amp;arr[right]);        &#125;        if (arr[left] &gt;= arr[end])            swap(&amp;arr[left], &amp;arr[end]);        else            left++;        if (left)            quick_sort_recursive(arr, start, left - 1);        quick_sort_recursive(arr, left + 1, end);    &#125;    void quick_sort2(int arr[], int len) &#123;        quick_sort_recursive(arr, 0, len - 1);    &#125;    int main() &#123;        int a[N] = &#123; 14,33,27,10,35,19,42,44 &#125;;        InsertSort(a, N);        //selection_sort(a, N);        //quick_sort(a, N);        //quick_sort2(a, N);        return 0;    &#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 排序算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>某公司的C语言面试题详解</title>
      <link href="/2021/12/08/%E5%85%AC%E5%8F%B8%E7%9A%84C%E8%AF%AD%E8%A8%80%E9%9D%A2%E8%AF%95%E9%A2%98%E8%AF%A6%E8%A7%A3-1/"/>
      <url>/2021/12/08/%E5%85%AC%E5%8F%B8%E7%9A%84C%E8%AF%AD%E8%A8%80%E9%9D%A2%E8%AF%95%E9%A2%98%E8%AF%A6%E8%A7%A3-1/</url>
      
        <content type="html"><![CDATA[<h1>某公司C语言面试题详解</h1><h2 id="一、单项选择题">一、单项选择题</h2><p>1.对于一个正常运行和正常退出的 C 程序，以下叙述正确的是()。</p><p>A. 程序从 main 函数第一条可执行语句开始执行，在 main 函数结束</p><p>B. 程序的执行总是从程序的第一个函数开始，在 main 函数结束</p><p>C. 程序的执行总是从 main 函数开始，在最后一个函数中结束</p><p>D. 从程序的第一个函数开始，在程序的最后一个函数中结束</p><p><strong>题解：</strong> C语言程序的执行过程是先从main函数开始，main函数是C语言程序的入口。一段C语言代码的编译过程是由上至下逐行编译，但编译不是执行，大家不要弄混了哦！如何判断一个函数有没有在该程序里执行，可以看main函数中是否调用了它。例如：</p><pre><code class="hljs">      int a()&#123;          printf(&quot;我是一个a函数！我被执行了\n&quot;);      &#125;      int b()&#123;          printf(&quot;我是一个b函数，我被执行了\n&quot;);      &#125;      main()&#123;      a();      &#125;</code></pre><p>运行结果如下：</p><pre><code class="hljs">      我是一个a函数！我被执行了      D:\IT技术\C&amp;C++\面试\Debug\面试.exe (进程 16520)已退出</code></pre><p>由上可以看出虽然b函数被编译，但它没有被执行。故A选项正确！</p><p>2.有如下程序片段：</p><pre><code class="hljs">      #include&lt;stdio.h&gt;       main( )      &#123;      inta = 5, b = 4, x, y;      x = 2 * a++;      printf(&quot;a=%d, x=%d\n&quot;, a, x);      y = --b * 2;      printf(&quot;b=%d, y=%d\n&quot;, b, y);      &#125;</code></pre><p>则正确的执行结果是(  )。</p><p>A. a=6, x=10, b=3, y=8</p><p>B. a=6, x=10, b=3, y=6</p><p>C. a=6, x=12, b=3, y=6</p><p>D. 以上均不对</p><p><strong>题解：</strong> 对上述代码进行分析，定义了整数型a，b，x，y。其中a的值是5，b的值是4。给出算术表达式 x = 2 * a++。看样子考查的是自增自减的运用和优先级。自增自减的优先级高于乘法运算符，故此先进行自增自减运算。a=5, ++在a的后面，也就是先运算后自增。于是x=2*5=10,a=5+1=6。第二个的自减符在前面，先自减在运算，也就是y=(4-1)*2=6,b=4-1=3。故选B！</p><p>3.有以下程序片断：</p><pre><code class="hljs">typedef struct&#123;int b; int p;&#125;TYPEA;void f(TYPEA c)&#123;c.b += 1;c.p += 2;&#125;main()&#123;TYPEA a =&#123;1, 2&#125;;f(a);printf(&quot;%d,%d\n&quot;, a.b, a.p);&#125;</code></pre><p>则程序运行后的输出结果是（  ）。</p><p>A. 2,3</p><p>B. 2,4</p><p>C. 1,4</p><p>D. 1,2</p><p><strong>题解：</strong> typedef struct{int b; int p;}TYPEA;这段定义了一个结构体，结构体里放了两个整数型b，p。然后又定义了一个无返回值含参的函数f，调用了结构体做了算术运算。然后是主函数main。梳理一下执行过程，先声明变量a,类型为TYPEA并赋值1，2。这个时候结构体的b=1,p=2。紧接着将a变量传递给f函数。但在f函数里又声明了一个变量c，在这个c里发生了c.b=1+1=2,c.p=2+2=4。**但是！这个题里有两个坑。1.f函数并无返回值。2.最后输出引用的是a变量里的值，这个a变量并没有发生变化。**故这个题a.b=1,a.p=2。选D！</p><p>4.对于以下程序片段，描述正确的是(  )。</p><pre><code class="hljs">int x = -1; do&#123;x = x * x;&#125;while(!x);</code></pre><p>A. 是死循环</p><p>B. 循环执行两次</p><p>C. 循环执行一次</p><p>D. 有语法错误</p><p><strong>题解：</strong> 考查do while循环，这个语法在C里面用的不多啊，为啥会考到呢？先分析，定义了x=-1,x*x是负负得正变成1。后面判断加了个！（逻辑非）。如果不加是死循环，加了就从假变成真，就执行一次。选C！</p><p>5.一个指针数组的定义为（  ）。</p><p>A. int (*ptr)[5]；</p><p>B. int *ptr[5]；</p><p>C. int *(ptr[5])；</p><p>D. int ptr[5]；</p><p><strong>题解：</strong> 这个考查指针数组，就一个写法 *name[数]。要注意的是这个[]里只能是数，不能是变量。如果你不想把它写死，那就在最开头用上#define或者const int。答案选B！</p><h2 id="二、写出下列程序的运行结果。">二、写出下列程序的运行结果。</h2><ol><li></li></ol><pre><code class="hljs">#include &lt;stdio.h&gt; main()&#123;int n = 0; char c;while((c=getchar( )) != '\n')&#123;  if (c&gt;='0' &amp;&amp; c&lt;='9')  n = n * 10 + c - '0';&#125;printf(&quot;value=%d\n&quot;, n);&#125;</code></pre><p>程序运行时输入：2008，则程序运行结果是：</p><p><strong>题解：</strong> 先看核心部分，while((c=getchar( )) != ‘\n’)将输入的字符串逐一提取，碰到\n换行符结束循环。if (c&gt;=‘0’ &amp;&amp; c&lt;=‘9’)判断这个字符串是不是0到9的字符，也就是判断它是不是个数。n = n * 10 + c - '0’这句话还要进一步拆分，n * 10是为了给后面的字符腾个空，是十进制的进位功能。c - '0’是为了进制转换，要不然直接输出整型，输出的是ASCII码的值。所以，这个就把字符串变成个整数型在输出呗。结果还是2008，只不过是整数型的2008。</p><ol start="2"><li></li></ol><pre><code class="hljs">#include &lt;stdio.h&gt; main()&#123;    int a = 1, b = 0;    switch (a)    &#123;    case 1:        switch (b)        &#123;        case 0: a++;            b++;            printf(&quot;a=%d, b=%d\n&quot;, a, b); break;        case 1: a++;            b++;            printf(&quot;a=%d, b=%d\n&quot;, a, b); break;        &#125;    case 2: a++;        b++;        printf(&quot;a=%d, b=%d\n&quot;, a, b); break;    &#125;&#125;</code></pre><p>运行结果是：</p><p><strong>题解：</strong> 嵌套选择？一步一步来，首先a = 1，走第一条线，遇到判断b，b = 0，继续第一条线，a++,a = 2, b++ , b = 1, 输出后跳出循环 <strong>（注：这里跳出的是里面的结构体，不是全部哦~ 至于为啥不是整个跳出？因为一号线它就没写跳出！）</strong> 然后跑到2号线，又经历了一次a++,b++。a = 2+1=3,b=1+1=2。所以打印了两次，分别是a=2, b=1，a=3, b=2。</p><ol start="3"><li></li></ol><pre><code class="hljs">  #include&lt;stdio.h&gt;  #include&lt;string.h&gt;   main()  &#123;  printf(&quot;%d\n&quot;, strlen(&quot;IBM\n012\1\\&quot;));  &#125;</code></pre><p>程序运行结果是：</p><p><strong>题解：</strong> strlen函数是用来计算字符串长度的，其中前面带反斜杠的加后面的一位总共占一个字符。所以是9。至于为啥？转义字符在ASCII码里就占一个字符。</p><ol start="4"><li></li></ol><pre><code class="hljs">  #include&lt;stdio.h&gt;   main()  &#123;  int i, a[10]; // 定义i和数组为10的a  int *p; // 声明一个指针变量  p = a; // 把数组a的地址放到了指针p中  for (i = 0; i &lt; 10; i++) // 循环10次  &#123;      scanf(&quot;%d&quot;, p + i); //输入函数，并把输入的值放进连续地址的数组a中。  &#125;  for (p = a; p &lt; a + 10; p++) // 把a数组的地址在放进去p指针里，让p指针历遍a数组（10个）  &#123;      printf(&quot;%d\t&quot;, *p); // 逐一根据地址拿值  &#125;  printf(&quot;\n&quot;); // 换个行  for (p = a; p &lt; a + 10; p++) // 1234再来一次，同上  &#123;      if (*p % 2) printf(&quot;%d\t&quot;, *p); // 对2其余，求奇数  &#125;  &#125;</code></pre><p>程序运行时输入： 1 2 3 4 5 6 7 8 9 10 则程序运行结果为：</p><p><strong>题解：</strong> 直接在代码上写注释吧。题解再补充一些知识。<strong>补充知识：关于数组a赋值给指针p时，p里面放的是数组a的起始地址，数组一旦申请地址空间都是连续的，所以知道起始地址就可以根据元素个数往下找了。数组虽好，可不要越界哦！</strong></p><ol start="5"><li></li></ol><pre><code class="hljs">  #include &lt;stdio.h&gt;   int mod(int x, int y) // 声明一个叫mod的函数，含参且返回值是int型  &#123;      return (x % y); // 返回 x 与 y 的取余  &#125;  main()  &#123;      intm, n, r;       scanf(&quot;%d %d&quot;, &amp;m, &amp;n);       r = mod(m, n); // 将m，n的值传参给mod函数，返回值赋给r      while (r != 0) //判断r是不是0      &#123;          m = n;           n = r;          r = mod(m, n);      &#125;      printf(&quot;The Result is ：%d\n&quot;, n);  &#125;</code></pre><p>程序运行时输入： 81 18  则运行结果是：</p><p><strong>题解：</strong> 输入的值传递到m和n，m = 81， n = 18，然后传参到mod，对81%18=9。所以r=9。r!=0,故m=n=18,n=r=9,r=9。所以结果是9。</p><h2 id="三、阅读程序，在标有下划线的空白处填入适当的表达式或语句，使程序完整并符合题目要求。（-8-分，每空-1-分）">三、阅读程序，在标有下划线的空白处填入适当的表达式或语句，使程序完整并符合题目要求。（ 8 分，每空 1 分）</h2><p>1.以下程序将输入的十进制数以十六进制的形式输出。</p><pre><code class="hljs">  #include &lt;stdio.h&gt;   main()  &#123;  char b[17] = &#123; &quot;0123456789ABCDEF&quot; &#125;; //给定16进制表示符  int c[64], d, i = 0, base = 16;   long number;  printf(&quot;请输入一个十进制数\n&quot;);   scanf_s(&quot;%ld&quot;, &amp;number); //输入长整形十进制  do &#123;      c[i] = number%base; //对16取余获得余数，这个余数可以对应下标，变成16进制每一位的表示值。      number = number / base; //在这里除去16进制的低位，循环从而进一步表示高位      i++;  &#125; while (number != 0);  printf(&quot;对应的十六进制数为: \n&quot;);   for (--i; i&gt;=0 ; --i)  //由高位到低位逐一输出  &#123;      d = c[i]; //取出后放入d      printf(&quot;%c&quot;, b[d]); //查字典，对应16进制表示符输入下标  &#125;  printf(&quot;\n&quot;);  &#125;</code></pre><p>2．用户从键盘任意输入一个数字表示月份值 n，程序显示该月份对应的英文表示，若 n 不在 1～12 之间，则输出“Illegal month”。</p><pre><code class="hljs">#include &lt;stdio.h&gt; main()&#123;int n;static char monthName[][20] = &#123;&quot;Illegal month&quot;, &quot;January&quot;,&quot;February&quot;,&quot;March&quot;,    &quot;April&quot;, &quot;May&quot;, &quot;June&quot;, &quot;July&quot;, &quot;August&quot;,    &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot;&#125;;printf(&quot;Input month number:&quot;); scanf(&quot;%d&quot;, &amp;n);if ((n&lt;=12)&amp;&amp;(n&gt;=1))  //判断输入的月数是否正确&#123;    printf(&quot;month %d is %s\n&quot;, n, monthName[n]); //输出数组&#125;else&#123;    printf(&quot;%s\n&quot;, monthName[0]); &#125;&#125;</code></pre><p></p><h2 id="四、在下面给出的-4-个程序中，共有-16-处错误（包括语法错误和逻辑错误），请找出其中的错误，并改正之。（-30-分，-每找对-1-个错误，-加-1-分，-每修改正确-1-个错误，-再加-1-分。只要找对-15-个即可，多找不加分。）">四、在下面给出的 4 个程序中，共有 16 处错误（包括语法错误和逻辑错误），请找出其中的错误，并改正之。（ 30 分， 每找对 1 个错误， 加 1 分， 每修改正确 1 个错误， 再加 1 分。只要找对 15 个即可，多找不加分。）</h2><p><strong>这让我咋写？我给bug全改完吧，最烦找bug和改bug了，代码书写规范不仅方便自己更方便他人</strong></p><p>1．下面程序实现的是折半查找算法。</p><pre><code class="hljs">#include &lt;stdio.h&gt; main()&#123;intup = 9, low = 0, mid, found=0, find; //up是表示最后的下标，low是最初的数组下标，从0开始。mid用来放查找结果下标，find是放输入数据，found我愣是没看懂它存在的意义inta[10] = &#123; 1, 5, 6, 9, 11, 17, 25, 34, 38, 41 &#125;;//数据集scanf_s(&quot;%d&quot; , &amp;find); //输入printf(&quot;\n&quot;);while (up &gt;= low &amp;&amp; !found)&#123;    mid = (up + low) / 2;    if (a[mid] == find)    &#123;        found = 1;  //看到这看懂了...用来跳出的,但你都写break了，它有啥意义？        break;    &#125;    else if (a[mid] &lt; find)         low = mid + 1;    else up = mid - 1;&#125;if (found)    printf(&quot;foundnumberis%d th&quot;, mid); else    printf(&quot;nofound&quot;);&#125;</code></pre><p>2．下面程序模拟了骰子的 6000 次投掷，用 rand 函数产生 1～6 之间的随机数 face，然后统计 1～6 每一面出现的次数存放到数组 frequency 中。</p><pre><code class="hljs">#include &lt;stdlib.h&gt;#include &lt;time.h&gt;#include &lt;stdio.h&gt;main()&#123;    intface, roll, frequency[7] = &#123; 0 &#125;;    srand(time(NULL));    for (roll = 1; roll &lt;= 6000; roll++)    &#123;        face = rand() % 6 + 1;        ++frequency[face];    &#125;    printf(&quot;%4s%17s\n&quot;, &quot;Face&quot;, &quot;Frequency&quot;);     for (face = 1; face &lt;= 6; face++)    &#123;        printf(&quot;%4d%17d\n&quot;, face, frequency[face]);    &#125;&#125;</code></pre><p>3．计算十个数据的平均值。</p><pre><code class="hljs">  #include &lt;stdio.h&gt;   void main(void)  &#123;  int i, sum=0; // sum初始化  floatavg;  intsc[10], * p = sc;   for (i = 0; i &lt; 10; i++)  &#123;      scanf(&quot;%d&quot;, p);       sum += *p;  //累加用户输入值放sum里      p++;   //移步下一个内存地址  &#125;  avg = sum / 10;  printf(&quot;avg=%f\n&quot;, avg);  &#125;</code></pre><p>4．编程实现从键盘输入一个字符串，将其字符顺序颠倒后重新存放，并输出这个字符串。（用字符数组实现）</p><pre><code class="hljs">  #include &lt;stdio.h&gt;  #include &lt;string.h&gt;  void Inverse(char rstr[]); //声明  main()  &#123;      char str[80];      printf(&quot;Input a string:\n&quot;);       gets(str);      Inverse(str);      printf(&quot;The inversed string is:\n&quot;);       puts(str);  &#125;  void Inverse(char rstr[])  &#123;      int i, n; char temp;      for (i = 0, n = (strlen(rstr)); i &lt; n; i++, n--)      &#123;          temp = rstr[i];           rstr[i] = rstr[n];           rstr[n] = temp;      &#125;  &#125;</code></pre><h2 id="五、编程">五、编程</h2><p>1.从键盘任意输入一个 4 位数 x，编程计算 x 的每一位数字相加之和（忽略整数前的正负号）。例如，输入 x 为 1234，则由 1234 分离出其千位 1、百位 2、十位 3、个位 4，然后计算 1+2+3+4=10，并输出 10。(14 分)</p><pre><code class="hljs">    #include&lt;stdio.h&gt;    #include&lt;math.h&gt;    /**        题目：1.从键盘任意输入一个 4 位数 x，编程计算 x 的每一位数字相加之和（忽略整数前的正负号）。        例如，输入 x 为 1234，则由 1234 分离出其千位 1、百位 2、十位 3、个位 4，然后计算 1+2+3+4=10，并输出 10。        时间：2021/12/8        作者：连思鑫        分析：这个题的重点在于如何拆分进制数，例如1234/1000=1.234（整数型取证）分离出千位，1234-分离出的千位/100就得出了百位数值，往下同理    */    main() &#123;        int x1, x2, x3, x4, x, y; //x1~4用来存放各个进制位数的数值，x是用户输入，y放输出结果        printf(&quot;请输入一个四位数: \n&quot;);        scanf_s(&quot;%d&quot;, &amp;x);        y = fabs(x); //取个绝对值，防止负数        x1 = y / 1000; //千位数分离        x2 = (y - (x1 * 1000)) / 100; //百位数分离        x3 = (y - (x1 * 1000)-(x2 * 100)) / 10; //十位数分离        x4 = y % 10; //个位分离        y = x1 + x2 + x3 + x4;        printf(&quot;位值相加结果为：%d&quot;, y);    &#125;</code></pre><p>2.输入 20 个学生的成绩，求出其中大于平均成绩学生的人数，并对 20 名学生成绩按从高到低进行排序。(14 分)</p><pre><code class="hljs">    #include&lt;stdio.h&gt;    #include&lt;math.h&gt;    /**        题目：2.输入 20 个学生的成绩，求出其中大于平均成绩学生的人数，并对 20 名学生成绩按从高到低进行排序。        时间：2021/12/8        作者：连思鑫    */    int pingjunshu(int chengji[]);    int paixu(int paixu[]);    int main() &#123;        int  i, j, arr[20];        int num = 0;        for (i = 0; i &lt; 20; i++)        &#123;            scanf_s(&quot;%d&quot;, &amp;arr[i]);        &#125;        j = pingjunshu(arr);        // 筛选大于平均数的人数        for (i = 0; i &lt; 20; i++)        &#123;            if (arr[i] &gt; j) &#123;                num++;            &#125;        &#125;        printf(&quot;大于平均数的人数为%d\n&quot;, num);        paixu(arr);        return 0;    &#125;    // 平均数    int pingjunshu(int chengji[]) &#123;        int s = 0;        for (int i = 0; i &lt; 20; i++)        &#123;            s = s + chengji[i];        &#125;        s = s / 20;        return s;    &#125;    //排序（冒泡）    int paixu(int paixu[]) &#123;        int i, j, temp;        for (i = 0; i &lt; 20 - 1; i++)            for (j = 0; j &lt; 20 - 1 - i; j++)                if (paixu[j] &gt; paixu[j + 1]) &#123;                    temp = paixu[j];                    paixu[j] = paixu[j + 1];                    paixu[j + 1] = temp;                &#125;        for (i = 0; i &lt; 20; i++) &#123;            printf(&quot;%d\n&quot;, paixu[i]);        &#125;    &#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> C语言面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 面试题 </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C盘清理脚本使用工具及教程</title>
      <link href="/2021/12/01/C%E7%9B%98%E6%B8%85%E7%90%86%E8%84%9A%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7%E5%8F%8A%E6%95%99%E7%A8%8B/"/>
      <url>/2021/12/01/C%E7%9B%98%E6%B8%85%E7%90%86%E8%84%9A%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7%E5%8F%8A%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1>C盘清理工具及使用教程</h1><h2 id="起因">起因</h2><p>好多人找我说电脑C盘快满了，电脑变卡了，来找我帮忙清理一下C盘。</p><p>C盘是电脑的系统盘，有许多重要的系统文件，没技术和经验的千万不要乱删。因为你的一个不留神，轻则一些软件打不开，重则直接开不了机。</p><p>C盘的清理又是一个非常麻烦的工作，你要一个个去分析判断这个文件能不能删。而且垃圾文件又不是统一存放在一个位置上，所以你还要一个个的去找。</p><p>所以，开发一个批量的清理脚本的念头便诞生了。</p><h2 id="C盘清理脚本">C盘清理脚本</h2><p>bat文件是批处理处理文件，在dos下的可执行脚本文件。我们去分析C盘里哪些是垃圾文件，例如.tpm、.log等后缀的都是可有可无的缓存文件和日志文件，是可以删除的，从而减轻C盘的容量负担。</p><p>脚本如下：</p><pre><code class="hljs">@echo offecho Cleaning up system junk files, please wait ......del /f /s /q %systemdrive%\*.tmpdel /f /s /q %systemdrive%\*._mp       del /f /s /q %systemdrive%\*.logdel /f /s /q %systemdrive%\*.gid         del /f /s /q %systemdrive%\*.chkdel /f /s /q %systemdrive%\*.old         del /f /s /q %systemdrive%\recycled\*.*del /f /s /q %windir%\*.bak                  del /f /s /q %windir%\prefetch\*.*rd /s /q %windir%\temp &amp; md %windir%\tempdel /f /q %userprofile%\cookies\*.*       del /f /q %userprofile%\recent\*.*del /f /s /q &quot;%userprofile%\Local Settings\Temporary Internet Files\*.*&quot;del /f /s /q &quot;%userprofile%\Local Settings\Temp\*.*&quot;    del /f /s /q &quot;%userprofile%\recent\*.*&quot;echo Cleaning system garbage complete!     echo. &amp; pause </code></pre><h2 id="使用教程">使用教程</h2><p>1.在电脑桌面新建一个文本文档</p><p><img src="/images/2021-12-1-001.png" alt="upload successful"></p><p>2.复制上面我写的代码到你新建的文本文档中。</p><p><img src="/images/2021-12-1-002.png" alt="upload successful"></p><p>3.更改文件名为C盘清理脚本.bat。注：后缀 <strong>.txt</strong> 一定要改成 <strong>.bat</strong>。</p><p><img src="/images/2021-12-1-003.png" alt="upload successful"></p><p>4.右击以管理员身份运行即可</p><p><img src="/images/2021-12-1-004.png" alt="overwrote existing file"></p><p><strong>注：一定要以管理员身份运行，不然有的目录没有权限，清理不彻底！</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>超星网课考试专用版脚本使用教程</title>
      <link href="/2021/11/20/%E8%B6%85%E6%98%9F%E7%BD%91%E8%AF%BE%E8%80%83%E8%AF%95%E4%B8%93%E7%94%A8%E7%89%88%E8%84%9A%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2021/11/20/%E8%B6%85%E6%98%9F%E7%BD%91%E8%AF%BE%E8%80%83%E8%AF%95%E4%B8%93%E7%94%A8%E7%89%88%E8%84%9A%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1>超星网课考试专用版脚本使用教程</h1><h1>一.准备工作</h1><ol><li>电脑一台</li><li>电脑内装有Edge浏览器</li><li>脚本管理器Tampermonkey</li><li>导入我的脚本</li><li>打开超星进入考试即可全自动答题</li></ol><h1>二.步骤</h1><ol><li>首先打开电脑，连上网络，打开Edge浏览器</li><li>安装Tampermonkey脚本管理器</li><li>选择添加脚本</li><li>复制粘贴下方的脚本代码并保存</li><li>登录你的超星账号进去考试，你会发现它全自动答题了</li></ol><h1>三.工具导航</h1><ol><li>Tampermonkey脚本管理器安装网址 <a href="https://www.tampermonkey.net/">点我进入</a></li></ol><p>如图</p><ol><li></li></ol><p><img src="/images/2021-11/20-01.png" alt="图一"></p><ol start="2"><li></li></ol><p><img src="/images/2021-11/20-02.png" alt="图二"></p><ol start="3"><li></li></ol><p><img src="/images/2021-11/20-03.png" alt="图三"></p><ol start="2"><li><p>脚本代码</p><pre><code class="hljs"> // ==UserScript== // @name         超星网课助手(考试专版)(改) // @namespace    coder_tq // @version      3.3.10 // @description  自动搜索尔雅MOOC考试答案，支持自动答题、自动切换题目、隐藏答案搜索提示框等，解除各类功能限制，开放自定义参数 // @author       coder_tq // @match        *://*.chaoxing.com/exam/test/reVersionTestStartNew* // @match        *://*.edu.cn/exam/test/reVersionTestStartNew* // @match        *://*.nbdlib.cn/exam/test/reVersionTestStartNew* // @match        *://*.hnsyu.net/exam/test/reVersionTestStartNew* // @connect      cx.icodef.com // @run-at       document-end // @grant        unsafeWindow // @grant        GM_xmlhttpRequest // @grant        GM_setClipboard // @grant        GM_setValue // @grant        GM_getValue // @license      MIT // ==/UserScript== // 设置修改后，需要刷新或重新打开网课页面才会生效 var setting = &#123;         // 8E3 == 8000，科学记数法，表示毫秒数         time: 5E3 // 默认响应速度为8秒，不建议小于5秒         ,token: '' // token可以增加并发次数，用来打码，采集题库奖励         // 1代表开启，0代表关闭         ,none: 0 // 未找到答案或无匹配答案时执行默认操作，默认关闭         ,jump: 1 // 答题完成后自动切换，默认开启         ,copy: 0 // 自动复制答案到剪贴板，也可以通过手动点击按钮或答案进行复制，默认关闭         // 非自动化操作         ,hide: 0 // 不加载答案搜索提示框，键盘↑和↓可以临时移除和加载，默认关闭         ,scale: 0 // 富文本编辑器高度自动拉伸，用于文本类题目，答题框根据内容自动调整大小，默认关闭     &#125;,     _self = unsafeWindow,     $ = _self.jQuery,     UE = _self.UE; setting.notice = '公告栏'; GM_xmlhttpRequest(&#123;     method: 'GET',     url: 'http://cx.icodef.com/update?s=wyn3',     timeout: setting.time,     onload: function (xhr) &#123;         if (xhr.status == 200) &#123;             var obj = $.parseJSON(xhr.responseText) || &#123;&#125;;             setting.notice = obj.injection;             document.querySelector('#cx-notice').innerHTML = setting.notice;         &#125;     &#125;,     ontimeout: function () &#123;         setting.loop &amp;&amp; setting.div.children('div:eq(0)').html(setting.over + '服务器超时，正在重试...');     &#125; &#125;); String.prototype.toCDB = function() &#123;     return this.replace(/\s/g, '').replace(/[\uff01-\uff5e]/g, function(str) &#123;         return String.fromCharCode(str.charCodeAt(0) - 65248);     &#125;).replace(/[“”]/g, '&quot;').replace(/[‘’]/g, &quot;'&quot;).replace(/。/g, '.'); &#125;; // setting.time += Math.ceil(setting.time * Math.random()) - setting.time / 2; setting.TiMu = [     filterImg('.Cy_TItle .clearfix').replace(/\s*（\d+\.\d+分）$/, ''),     $('[name^=type]:not([id])').val() || '-1',     $('.cur a').text().trim() || '无',     $('li .clearfix').map(function() &#123;         return filterImg(this);     &#125;) ]; var maximize=$(     '&lt;div style=&quot;border: 2px dashed rgb(0, 85, 68); position: fixed; top: 0; right: 0; z-index: 99999; background-color: rgba(70, 196, 38, 0.6); overflow-x: auto;display:none;&quot;&gt;◻&lt;/div&gt;' ).appendTo('body').click(function()&#123;     $(setting.div).css(&quot;display&quot;,&quot;block&quot;);     GM_setValue(&quot;minimize&quot;,&quot;0&quot;);     $(maximize).css(&quot;display&quot;,&quot;none&quot;); &#125;); setting.div = $(     '&lt;div style=&quot;border: 2px dashed rgb(0, 85, 68); width: 330px; position: fixed; top: 0; right: 0; z-index: 99999; background-color: rgba(70, 196, 38, 0.6); overflow-x: auto;&quot;&gt;' +     '&lt;span style=&quot;font-size: medium;&quot;&gt;&lt;/span&gt;' +     '&lt;div style=&quot;font-size: medium;width:70%;display: inline-block;&quot;&gt;正在搜索答案...&lt;/div&gt;'+     '&lt;div style=&quot;width:30%;display: inline-block;padding-right: 10px;box-sizing: border-box;text-align: right;&quot;&gt;&lt;minimize style=&quot;width:20px;font-size:16px;line-height: 12px;font-weight: bold;cursor: context-menu;user-select:none;&quot;&gt;一&lt;/minimize&gt;&lt;/div&gt;' +     '&lt;div id=&quot;cx-notice&quot; style=&quot;border-top: 1px solid #000;border-bottom: 1px solid #000;margin: 4px 0px;overflow: hidden;&quot;&gt;' + setting.notice + '&lt;/div&gt;' +     '&lt;button style=&quot;margin-right: 10px;&quot;&gt;暂停答题&lt;/button&gt;' +     '&lt;button style=&quot;margin-right: 10px;' + (setting.jump ? '' : ' display: none;') + '&quot;&gt;点击停止本次切换&lt;/button&gt;' +     '&lt;button style=&quot;margin-right: 10px;&quot;&gt;重新查询&lt;/button&gt;' +     '&lt;button style=&quot;margin-right: 10px; display: none;&quot;&gt;复制答案&lt;/button&gt;' +     '&lt;button&gt;答题详情&lt;/button&gt;' +     '&lt;div style=&quot;max-height: 200px; overflow-y: auto;&quot;&gt;' +     '&lt;table border=&quot;1&quot; style=&quot;font-size: 12px;&quot;&gt;' +     '&lt;thead&gt;' +     '&lt;tr&gt;' +     '&lt;th colspan=&quot;2&quot;&gt;' + ($('#randomOptions').val() == 'false' ? '' : '&lt;font color=&quot;red&quot;&gt;本次考试的选项为乱序 脚本会选择正确的选项&lt;/font&gt;') + '&lt;/th&gt;' +     '&lt;/tr&gt;' +     '&lt;tr&gt;' +     '&lt;th style=&quot;width: 60%; min-width: 130px;&quot;&gt;题目（点击可复制）&lt;/th&gt;' +     '&lt;th style=&quot;min-width: 130px;&quot;&gt;答案（点击可复制）&lt;/th&gt;' +     '&lt;/tr&gt;' +     '&lt;/thead&gt;' +     '&lt;tfoot style=&quot;' + (setting.jump ? ' display: none;' : '') + '&quot;&gt;' +     '&lt;tr&gt;' +     '&lt;th colspan=&quot;2&quot;&gt;已关闭 本次自动切换&lt;/th&gt;' +     '&lt;/tr&gt;' +     '&lt;/tfoot&gt;' +     '&lt;tbody&gt;' +     '&lt;tr&gt;' +     '&lt;td colspan=&quot;2&quot; style=&quot;display: none;&quot;&gt;&lt;/td&gt;' +     '&lt;/tr&gt;' +     '&lt;/tbody&gt;' +     '&lt;/table&gt;' +     '&lt;/div&gt;' +     '&lt;/div&gt;' ).appendTo('body').on('click', 'button, td', function() &#123;     var num = setting.$btn.index(this);     if (num == -1) &#123;         GM_setClipboard($(this).text());     &#125; else if (num === 0) &#123;         if (setting.loop) &#123;             clearInterval(setting.loop);             delete setting.loop;             num = ['已暂停搜索', '继续答题'];         &#125; else &#123;             setting.loop = setInterval(findTiMu, setting.time);             num = ['正在搜索答案...', '暂停答题'];         &#125;         setting.$div.html(function() &#123;             return $(this).data('html') || num[0];         &#125;).removeData('html');         $(this).html(num[1]);     &#125; else if (num == 1) &#123;         setting.jump = 0;         setting.$div.html(function() &#123;             return arguments[1].replace('即将切换下一题', '未开启自动切换');         &#125;);         setting.div.find('tfoot').add(this).toggle();     &#125; else if (num == 2) &#123;         location.reload();     &#125; else if (num == 3) &#123;         GM_setClipboard(setting.div.find('td:last').text());     &#125; else if (num == 4) &#123;         ($('.leftCard .saveYl')[0] || $()).click();     &#125; else if (num == 5) &#123;         setting.tk_num++;         GM_setValue('tk_num_1',setting.tk_num);         setting.tk_num = GM_getValue('tk_num_1');         console.log(setting.tk_num);         parent.location.reload();     &#125; &#125;).on('click','minimize', function() &#123;     $(this).parent().parent().css(&quot;display&quot;,&quot;none&quot;);     GM_setValue(&quot;minimize&quot;,&quot;1&quot;);     $(maximize).css(&quot;display&quot;,&quot;block&quot;); &#125;).detach(setting.hide ? '*' : 'html'); if(GM_getValue(&quot;minimize&quot;)==&quot;1&quot;)&#123;     $(setting.div).css(&quot;display&quot;,&quot;none&quot;);     $(maximize).css(&quot;display&quot;,&quot;block&quot;); &#125; setting.$btn = setting.div.children('button'); setting.$div = setting.div.children('div:eq(0)'); $(document).keydown(function(event) &#123;     if (event.keyCode == 38) &#123;         setting.div.detach();     &#125; else if (event.keyCode == 40) &#123;         setting.div.appendTo('body');     &#125; &#125;); if (setting.scale) _self.UEDITOR_CONFIG.scaleEnabled = false; $.each(UE.instants, function() &#123;     var key = this.key;     this.ready(function() &#123;         this.destroy();         UE.getEditor(key);     &#125;); &#125;); setting.loop = setInterval(findTiMu, setting.time); function findTiMu() &#123;     GM_xmlhttpRequest(&#123;         method: 'POST',         url: 'http://cx.icodef.com/wyn-nb?v=4',         headers: &#123;             'Content-type': 'application/x-www-form-urlencoded',             'Authorization': setting.token,         &#125;,         data: 'question=' + encodeURIComponent(setting.TiMu[0]) + '&amp;type=' + setting.TiMu[1] + '&amp;id=' + $('#paperId').val(),         timeout: setting.time,         onload: function(xhr) &#123;             if (!setting.loop) &#123;             &#125; else if (xhr.status == 200) &#123;                 var obj = $.parseJSON(xhr.responseText) || &#123;&#125;;                 obj.answer = obj.data;                 if (obj.code) &#123;                     var answer = String(obj.answer).replace(/&amp;/g, '&amp;').replace(/&lt;(?!img)/g, '&lt;'),                         que = setting.TiMu[0].match('&lt;img') ? setting.TiMu[0] : setting.TiMu[0].replace(/&amp;/g, '&amp;').replace(/&lt;/g, '&lt;');                     obj.answer = /^http/.test(answer) ? '&lt;img src=&quot;' + obj.answer + '&quot;&gt;' : obj.answer;                     setting.div.find('tbody').append(                         '&lt;tr&gt;' +                         '&lt;td title=&quot;点击可复制&quot;&gt;' + que + '&lt;/td&gt;' +                         '&lt;td title=&quot;点击可复制&quot;&gt;' + (/^http/.test(answer) ? obj.answer : '') + answer + '&lt;/td&gt;' +                         '&lt;/tr&gt;'                     );                     setting.copy &amp;&amp; GM_setClipboard(obj.answer);                     setting.$btn.eq(3).show();                     fillAnswer(obj);                 &#125; else &#123;                     setting.$div.html(obj.answer || '服务器繁忙，正在重试...');                 &#125;                 setting.div.children('span').html(obj.msg || '');             &#125; else if (xhr.status == 403) &#123;                 var html = xhr.responseText.indexOf('&#123;') ? '请求过于频繁，建议稍后再试' : $.parseJSON(xhr.responseText).data;                 setting.$div.data('html', html).siblings('button:eq(0)').click();             &#125; else &#123;                 setting.$div.text('服务器异常，正在重试...');             &#125;         &#125;,         ontimeout: function() &#123;             setting.loop &amp;&amp; setting.$div.text('服务器超时，正在重试...');         &#125;     &#125;); &#125; function fillAnswer(obj, tip) &#123;     var $input = $(':radio, :checkbox', '.Cy_ulBottom'),         str = String(obj.answer).toCDB() || new Date().toString(),         data = str.split(/#|\x01|\|/),         opt = obj.opt || str,         btn = $('.saveYl:contains(下一题)').offset();     // $input.filter(':radio:checked').prop('checked', false);     obj.code &gt; 0 &amp;&amp; $input.each(function(index) &#123;         if (this.value == 'true') &#123;             data.join().match(/(^|,)(正确|是|对|√|T|ri)(,|$)/) &amp;&amp; this.click();         &#125; else if (this.value == 'false') &#123;             data.join().match(/(^|,)(错误|否|错|×|F|wr)(,|$)/) &amp;&amp; this.click();         &#125; else &#123;             index = setting.TiMu[3][index].toCDB() || new Date().toString();             index = $.inArray(index, data) + 1 || (setting.TiMu[1] == '1' &amp;&amp; str.indexOf(index) + 1);             Boolean(index) == this.checked || this.click();         &#125;     &#125;).each(function() &#123;         if (!/^A?B?C?D?E?F?G?$/.test(opt)) return false;         Boolean(opt.match(this.value)) == this.checked || this.click();     &#125;);     if (setting.TiMu[1].match(/^[013]$/)) &#123;         tip = $input.is(':checked') || setting.none &amp;&amp; (($input[Math.floor(Math.random() * $input.length)] || $()).click(), ' ');     &#125; else if (setting.TiMu[1].match(/^(2|[4-9]|1[08])$/)) &#123;         data = String(obj.answer).split(/#|\x01|\|/);         tip = $('.Cy_ulTk textarea').each(function(index) &#123;             index = (obj.code &gt; 0 &amp;&amp; data[index]) || '';             UE.getEditor(this.name).setContent(index.trim());         &#125;).length;         tip = (obj.code &gt; 0 &amp;&amp; data.length == tip) || setting.none &amp;&amp; ' ';         setting.len = str.length * setting.time / 10;     &#125;     if (tip == ' ') &#123;         tip = '已执行默认操作';     &#125; else if (tip) &#123;         tip = '自动答题已完成';     &#125; else if (tip === undefined) &#123;         tip = '该题型不支持自动答题';     &#125; else &#123;         tip = '未找到有效答案';     &#125;     if (btn) &#123;         tip += setting.jump ? '，即将切换下一题' : '，未开启自动切换';         setInterval(function() &#123;             if (!setting.jump) return;             var mouse = document.createEvent('MouseEvents'),                 arr = [btn.left + Math.ceil(Math.random() * 80), btn.top + Math.ceil(Math.random() * 26)];             mouse.initMouseEvent('click', true, true, document.defaultView, 0, 0, 0, arr[0], arr[1], false, false, false, false, 0, null);             _self.event = $.extend(true, &#123;&#125;, mouse);             delete _self.event.isTrusted;             _self.getTheNextQuestion(1);         &#125;, setting.len || Math.ceil(setting.time * Math.random()) * 2);     &#125; else &#123;         setting.$btn.eq(1).hide();         tip = '答题已完成，请自行查看答题详情';     &#125;     setting.$div.data('html', tip).siblings('button:eq(0)').hide().click(); &#125; function filterImg(dom) &#123;     return $(dom).clone().find('img[src]').replaceWith(function() &#123;         return $('&lt;p&gt;&lt;/p&gt;').text('');     &#125;).end().find('iframe[src]').replaceWith(function() &#123;         return $('&lt;p&gt;&lt;/p&gt;').text('');     &#125;).end().text().trim(); &#125;</code></pre></li><li><p>导入脚本</p></li></ol><p>根据图中步骤来即可</p><ol start="4"><li></li></ol><p><img src="/images/2021-11/20-04.png" alt="图4"></p><ol start="5"><li></li></ol><p><img src="/images/2021-11/20-05.png" alt="图5"></p><ol start="6"><li></li></ol><p><img src="/images/2021-11/20-06.png" alt="图6"></p><ol start="4"><li>打开超星，登录，进去考试即可</li></ol><p>（完！）</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> 脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 福利 </tag>
            
            <tag> 超星 </tag>
            
            <tag> 教程 </tag>
            
            <tag> 脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《深度学习入门》学习笔记（二）</title>
      <link href="/2021/11/06/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2021/11/06/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1>《深度学习入门》学习笔记（二）</h1><h2 id="第二章-感知机">第二章 感知机</h2><p>本章将介绍感知机这一算法。感知机是由美国学者Frank Rosenblatt在1957年提出来的。为何我们现在还要学习这一很久以前就有的算法呢？因为感知机也是作为神经网络（深度学习）的起源的算法。因此，学习感知机的构造也就是学习通向神经网络和深度学习的一种重要思想。本章我们将简单介绍一下感知机，并用感知机解决一些简单的问题。希望大家能和我一起通过这个过程能熟悉感知机。</p><h3 id="2-1-什么是感知机">2.1 什么是感知机</h3><p>感知机接收多个输入信号，输出一个信号。这里所说的“信号”可以想象成电流或河流那样具备“流动性”的东西。像电流流过导线，向前方输送电子一样，感知机的信号也会形成流，向前方输送信息。但是，和实际的电流不同的是，感知机的信号只有“流/不流”（1/0）两种取值。在计算机编程里，我们最常用的就是bool型的true和false两种状态，正好对应感知机两种取值信号，这也是我们需要重点掌握的。</p><p>而在感知机里还有一些概念需要去掌握，例如：输入信号、输出信号、权重、阈值等。接下来我将以一个例子说明。</p><p><img src="/images/2021-11-7-001.png" alt="upload successful"></p><p>如上图，x1、x2是<strong>输入信号</strong>，y是<strong>输出信号</strong>，w1、w2是<strong>权重</strong>。图中的大圆圈被我们称之为<strong>神经元</strong>或者<strong>节点</strong>。当输入信号被送往神经元时，会被分别乘上固定的<strong>权重</strong>（即w1x1、w2x2）。神经元会计算传送过来的信号总和，当这个总和超过某个特定的界限值时，会触发某种响应从而输出1（true）。我们把这种响应称之为<strong>神经元被激活</strong>。这里将这个界限值称为<strong>阈值</strong>，用符号θ表示。</p><p>我们用数学公式来表示感知机的原理可得下式：</p><p><img src="/images/2021-11-7-002.png" alt="upload successful"></p><p>感知机的多个输入信号都有各自固有的权重，这些权重发挥着控制各个信号的重要性的作用。也就是说，权重越大，对应该权重的信号的重要性就越高。</p><p>个人理解：权重相当于电流里所说的电阻。电阻是决定电流流动难度的参数，电阻越低，通过的电流就越大。而感知机的权重则是值越大，通过的信号就越大。不管是电阻还是权重，在控制信号流动难度（或者流动容易度）这一点上的作用都是一样的。</p><h3 id="2-2-简单逻辑电路">2.2 简单逻辑电路</h3><p>看到这，也许有人问了，我们不是学感知机嘛？怎么开始讲逻辑电路了？其实感知机的工作模式跟逻辑电路很相似，例如前面说的虚拟机只存在两种信号状态（0/1），而逻辑电路中也是只有0/1两种通电状态。另外还可以用感知机实现逻辑电路，从而去理解感知机的原理。所以，我们开始吧。</p><h4 id="2-2-1-与门">2.2.1 与门</h4><p>现在让我们考虑用感知机来解决简单的逻辑电路的问题（与门）。与门是有两个输入和一个输出的门电路。如下图的输入信号和输出信号的真值表。</p><p><img src="/images/2021-11-7-003.png" alt="与门真值表"></p><p>下面我们用感知机的形式模拟与门的逻辑流程。根据上面已有的x1,x2,y来确定w1,w2, θ的值。本质上有点像数学解方程的过程，其实不是像，它就是！所以想学好深度学习，数学是必不可少的功课。那我们怎么解出w1,w2, θ的值呢？</p><p>其实，满足上图条件的参数的选择方法有无数多个。比如，当(w1, w2, θ) = (0.5, 0.5, 0.7) 时，可以满足上图的条件。此外，当(w1, w2, θ)为(0.5, 0.5, 0.8)或者(1.0, 1.0, 1.0)时，同样也满足与门的条件。设定这样的参数后，仅当x1和x2同时为1时，信号的加权总和才会超过给定的阈值θ。</p><h4 id="2-2-2-与非门和或门">2.2.2 与非门和或门</h4><p>接着，我们再来考虑一下与非门（NAND gate）。 NAND是Not AND的意思，与非门就是颠倒了与门的输出。用真值表表示的话，如下图所示，仅当x1和x2同时为1时输出0，其他时候则输出1。那么与非门的参数又可以是什么样的组合呢？</p><p><img src="/images/2021-11-7-004.png" alt="与非门真值表"></p><p>要表示与非门，可以用(w1, w2, θ) = (−0.5, −0.5, −0.7)这样的组合（其他的组合也是无限存在的）。实际上，只要把实现与门的参数值的符号取反，就可以实现与非门。</p><p>接下来在看一下或门的真值表，并设置参数。如下图：</p><p><img src="/images/2021-11-7-005.png" alt="或门真值表"></p><p>如上所示，我们已经知道使用感知机可以表示与门、与非门、或门的逻辑电路。这里重要的一点是：与门、与非门、或门的感知机构造是一样的。实际上， 3个门电路只有参数的值（权重和阈值）不同。也就是说，相同构造的感知机，只需通过适当地调整参数的值，就可以像“变色龙演员”表演不同的角色一样，变身为与门、与非门、或门。</p><p>个人理解：做深度学习算法的，在行业内有几大分类，最顶层是造轮子的（写算法模型），往下是改轮子的（优化算法模型），在往下就是用轮子的（调参工程师）。上两层是真大佬，但大多数人都是后者的调参工程师。这里决定感知机参数的并不是计算机，而是我们人。我们看着真值表这种“训练数据”，人工考虑（想到）了参数的值。而机器学习的课题就是将这个决定参数值的工作交由计算机自动进行。 学习是确定合适的参数的过程，而人要做的是思考感知机的构造（模型），并把训练数据交给计算机。</p><h3 id="2-3-感知机的实现">2.3 感知机的实现</h3><h4 id="2-3-1-简单的实现">2.3.1 简单的实现</h4><h4 id="2-3-2-导入权重和偏置">2.3.2 导入权重和偏置</h4><h4 id="2-3-3-使用权重和偏置的实现">2.3.3 使用权重和偏置的实现</h4><h3 id="2-4-感知机的局限性">2.4 感知机的局限性</h3><h4 id="2-4-1-异或门">2.4.1 异或门</h4><h4 id="2-4-2-线性和非线性">2.4.2 线性和非线性</h4><h3 id="2-5-多层感知机">2.5 多层感知机</h3><h4 id="2-5-1-已有门电路组合">2.5.1 已有门电路组合</h4><h4 id="2-5-2-异或门的实现">2.5.2 异或门的实现</h4><h3 id="2-6-从与非门到计算机">2.6 从与非门到计算机</h3><h3 id="总结">总结</h3>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《深度学习入门》学习笔记（一）</title>
      <link href="/2021/10/22/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2021/10/22/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1>《深度学习入门》学习笔记（一）</h1><h2 id="第一章-Python入门">第一章 Python入门</h2><p>第一次接触python是在我大一的时候，那时候python很火，同时火的还有大数据、云计算、人工智能。现在，大数据，云计算的呼声渐渐褪去，人工智能却还是一如既往的火热。同时，也让python成为了最具有人气的编程语言。</p><h3 id="1-1-什么是Python">1.1 什么是Python</h3><p>什么是python？python是一门简单、易读、易记的编程语言，而且是开源的，可以免费使用。上面这句话来源于我手头的一本书《深度学习入门》。对于这句话，我还是挺想吐槽的。我自学python也有将近一年多了，简单是入门简单，易读是小代码段易读，在大量代码体中，python的缩进排版真的很难去分清代码块。它不像C语言一样有一个大括号括起来，在庞大的代码体中可以一一对应。而python呢？是以缩进的形式，难以去形成一一对应关系。易记是易记，因为库是真的多，被别人封装好的库你直接去调用，根本不用去思考它的原理，只要会用你就能完成你的任务。所以，造成了入门简单，精通很难。以上便是我对python的理解和评价，下面进入正题。</p><h3 id="1-2-Python的安装">1.2 Python的安装</h3><p>想使用python就必须要安装python的开发环境，我们通常使用的是在电脑（windows或linux）上。因为手机的安卓是基于linux内核的开发的，所以在一些特定的软件上也是可以做python的开发。如Termux,QPython3H等app，都可以在手机上使用和开发python的相关项目。</p><p>具体安装步骤请百度，有很多图文教程，我在这里就不再次描述了。</p><h4 id="1-2-1-Python的版本">1.2.1 Python的版本</h4><p>Python有python2和python3两个版本，现阶段python2基本上已经被遗弃了，但还是有不少的人去使用。很奇怪的是python跟别的编程语言不一样。它对于版本适配上没有别的编程语言好。例如python2的一些语法跟python3就不一样。你用python3写的代码就不能被python2执行，没有向后兼容性。所以，还是用最新的版本python3来学习深度学习吧。</p><h4 id="1-2-2-使用的外部库">1.2.2 使用的外部库</h4><p>前面我说过，python很简单，易记是因为它有一个极其庞大的外部库。许许多多的大佬将一些功能封装成外部库，我们只需要调用它留给我们的接口就能很快的实现某种功能。所以，如果你想精通python，就不要过多的使用外部库，尽可能自己去实现相关的一些功能。</p><p>关于外部库的安装，我们通常通过pip这个包管理器去安装。使用方式就是在命令窗口输入</p><pre><code class="hljs">pip install 你要安装的外部库名</code></pre><p>然后等待安装即可。</p><p>例如安装我们要使用的NumPy库、Matplotlib库等，如下：</p><pre><code class="hljs">pip install numpy,matplotlib</code></pre><p>回车即可安装。</p><h3 id="1-3-Python解释器">1.3 Python解释器</h3><p>python安装后，需要先确认一下你的python的版本是否正确。打开命令提示符窗口，输入：</p><pre><code class="hljs">python --version</code></pre><p>即可看到你安装的python版本号。</p><p>什么是解析器?</p><p>解析器就像是两个人对话一样，你一句，我一句的对话模式。例如我问你1+1=？，然后你会回答我等于2.python就是这样，不需要编译，就可以直接跟你互动。这就是对话式（交互式）的编程。</p><p>如：</p><pre><code class="hljs">&gt;&gt;&gt; 1+12</code></pre><h4 id="1-3-1-算术计算">1.3.1 算术计算</h4><p>算术计算加法和减法可以直接写数学算术计算进行，如下：</p><pre><code class="hljs">&gt;&gt;&gt; 1+1 //+是加法2&gt;&gt;&gt; 2-1 //-是减法1&gt;&gt;&gt; 4/2 // /是除法2.0&gt;&gt;&gt; 2*2 // *是乘法4&gt;&gt;&gt; 2**2 // **是乘方4</code></pre><h4 id="1-3-2-数据类型">1.3.2 数据类型</h4><p>编程里的各种数据都是有类型的，有利于对数据进行分类。但数据类型这一概念在python里我觉得是一个坑。因为你不用像C语言那样提前定义好数据类型，而是python自己识别并定义数据类型。所以，在写python项目时，有时候会因为数据类型出现一些bug，但你有时候还真无法分辨python给你定义的变量分配了什么数据类型，往往需要强制转换变成自己想要的数据类型。</p><p>数据类型有哪些呢？</p><p>常用的数据类型有：整数型，浮点型（小数），字符型和字符串型。</p><p>你如何去判断你定义的变量或者常量的数据类型呢？</p><p>在python中提供了type()函数来查看数据类型</p><p>例如：</p><pre><code class="hljs">&gt;&gt;&gt; type(10)&lt;class 'int'&gt;&gt;&gt;&gt; type(2.66)&lt;class 'float'&gt;&gt;&gt;&gt; type(&quot;hello&quot;)&lt;class 'str'&gt;&gt;&gt;&gt; type('a')&lt;class 'str'&gt;</code></pre><h4 id="1-3-3-变量">1.3.3 变量</h4><p>变量，看名字就可以理解，是一个变化的量。本质上不是特定的一个数，为了方便理解，我通常把它比作成一个盒子，这个盒子是有属性的，也就是数据类型。也就是符合放入盒子的条件（数据类型）的数据才能放入其中。</p><p>例如：</p><pre><code class="hljs">&gt;&gt;&gt; x = 10&gt;&gt;&gt; print(x)10</code></pre><p>变量也是可以进行数学运算的，例如：</p><pre><code class="hljs">&gt;&gt;&gt; x = x + 1&gt;&gt;&gt; print(x)11</code></pre><p>print是python的输出打印函数，就是把数据呈现在你的电脑屏幕上的函数。</p><h4 id="1-3-4-列表">1.3.4 列表</h4><p>在编程语言中，除了我们用的单一数值，往往还需要汇总的数据。这时候就需要引入列表（数组）的概念了。如：</p><pre><code class="hljs">&gt;&gt;&gt; a = [1,2,3,4,5] #生成列表&gt;&gt;&gt; print(a) #打印列表[1, 2, 3, 4, 5]</code></pre><p>除此之外还要对列表有一系列数据操作，如：</p><pre><code class="hljs">&gt;&gt;&gt; len(a) #获取列表长度5&gt;&gt;&gt; a[0] #访问列表的第一个元素1&gt;&gt;&gt; a[4] #访问列表最后一个元素5&gt;&gt;&gt; a[4] = 100 # 对列表最后一个元素重新赋值&gt;&gt;&gt; print(a)[1, 2, 3, 4, 100]</code></pre><p>要注意的是在编程语言中，开始都是以0为开始，并不是1。</p><p>这些数据处理往往还是不够，我们还要引入“数据切片”。这个词也是我自己起的（好像有些书也是这么写的），就像切片一样，切下我们想要的数据片段。用法如下：</p><pre><code class="hljs">&gt;&gt;&gt; print(a)[1, 2, 3, 4, 100]&gt;&gt;&gt; a[0:2] #注意，该切片从0到2，但并不包括2。[1, 2]&gt;&gt;&gt; a[1:] #从1开始往后所有[2, 3, 4, 100]&gt;&gt;&gt; a[:3] #从0开始到3，不包括3[1, 2, 3]&gt;&gt;&gt; a[:-1] # 从0开始到最后一个元素的前一个元素[1, 2, 3, 4]&gt;&gt;&gt; a[:-2] # 同上，最后一个元素的前两个元素[1, 2, 3]</code></pre><h4 id="1-3-5-字典">1.3.5 字典</h4><p>字典，就像字典一样，是一种索引的方法。像新华字典一样对应的单词与对应的含义关联起来。例如：</p><pre><code class="hljs">&gt;&gt;&gt; me = &#123;&quot;我的名字&quot;:&quot;连思鑫&quot;&#125;&gt;&gt;&gt; me[&quot;我的名字&quot;]'连思鑫'</code></pre><h4 id="1-3-6-布尔型">1.3.6 布尔型</h4><p>布尔型，这是我们学习深度学习最常用的一个概念。bool型是只有两种状态：True和False。后面要学的感知机就要用到大量的bool型。</p><p>而对于bool型的运算包括：and、or、not这些逻辑运算符。如果涉及到数值则有：+、-、*、/等。</p><p>实例如下：</p><pre><code class="hljs">&gt;&gt;&gt; hungry = True # 饿了？ 饿&gt;&gt;&gt; sleepy = False #困了？ 不困&gt;&gt;&gt; type(hungry)&lt;class 'bool'&gt;&gt;&gt;&gt; not hungry # 不饿False&gt;&gt;&gt; hungry and sleepy #饿并且困False&gt;&gt;&gt; hungry or sleepy #饿或者困True</code></pre><h4 id="1-3-7-if语句">1.3.7 if语句</h4><p>if语句是判断语句，现在的流行语言中都有它的身影。无论C，C++，Java、JavaScript等都有if语句，用法也都大相径庭。如下：</p><pre><code class="hljs">&gt;&gt;&gt; hungry = True&gt;&gt;&gt; if hungry:print(&quot;饿了&quot;)饿了</code></pre><p>需要注意的地方，python的代码块格式是通过缩进的形式（4个空格）。个人不太喜欢这种形式，不容易看，但是没办法，谁让咱没能力开发编程语言呢？</p><h4 id="1-3-8-for语句">1.3.8 for语句</h4><p>for语句是循环语句，同if语句一样，各大主流语言也都有它的身影，且用法大相径庭。例如：</p><pre><code class="hljs">&gt;&gt;&gt; for i in [1,2,3]:print(i)123</code></pre><p>该语句的意思是循环打印列表元素。for语法通常用for…in…:的语句结构，i是用来存放每次循环数据的盒子（变量）。</p><h4 id="1-3-9-函数">1.3.9 函数</h4><p>所有的编程语言都有函数的概念，为了方便对数据的处理，所以我们把一连串的处理定义成函数。即如下的打印hello的函数：</p><pre><code class="hljs">&gt;&gt;&gt; def hello():...     print(&quot;hello&quot;)...&gt;&gt;&gt; hello()hello</code></pre><p>hello()就是对该函数进行调用，函数除了可以被调用，还可以进行传参。如下：</p><pre><code class="hljs">&gt;&gt;&gt; def hello(s): # s是定义的变量...     print(&quot;hello&quot; + s)...&gt;&gt;&gt; hello(&quot;连思鑫&quot;)hello连思鑫</code></pre><p>+号在python中除了是用于算术运算之外，还可以用于拼接字符串。二者的区别在于数据类型的不同，+号的用法或体现的功能不同。</p><h3 id="1-4-Python脚本文件">1.4 Python脚本文件</h3><p>python除了解释器编程外，也支持保存成脚本文件。因为以对话的形式不能更好的去保留对话内容，所以人们发明了纸张。同样的，这个脚本文件的存在就像是一张纸，你可以把想对python说的话同一写在纸上，然后python按你说的做。</p><p>emmmmm…我喜欢计算机的原因也在其中。计算机就像是你忠实的奴仆一样，只要你说的它能听懂，它就会毫无置疑的去做。就像皇帝命令臣子，而这个臣子不会反抗且非常听话。在linux系统下，你要是看系统不顺眼，完全可以命令它自杀，如：</p><pre><code class="hljs">rm -rf /</code></pre><p>祝你好运！</p><h4 id="1-4-1-保存为文件">1.4.1 保存为文件</h4><p>如何保存为python的脚本文件呢？其实有很多很多办法，最简单的就是用记事本，写一些python代码，然后把文件的后缀改成.py即可。</p><p>如何运行它呢？不管是windows还是linux只要安装好python的环境，在终端输入</p><pre><code class="hljs">python xxx.py</code></pre><p>即可运行你写的脚本文件。</p><h4 id="1-4-2-类">1.4.2 类</h4><p>什么是类？有说的好，叫物以类聚，人以群分。这个类便是我们对数据和处理数据的方法集结在一起的共同体（或者叫它类型）。如我们前面用到的int和str这些数据类型，它们是python内置的数据类型，是python开发者定义和设计的类。而我们学好类这一概念，便可以自己去创造定义一个类。</p><p>各大语言中也都有类的概念，类包含了方法和属性，其中的方法就是我们上面说的函数的概念。在python中类的定义格式如下：</p><pre><code class="hljs">class 类名:def __init__(self,参数,...): #这是构造函数（可以把它理解成类入口，或者默认函数）函数体（方法体）def 方法名1(self,参数,...):函数体def 方法名2(self,参数,...):函数体.....</code></pre><p>关于__init__方法，这是一种初始化的方法，实际只被调用一次（在生成实例时）。而self是用来传参的变量。示例如下</p><pre><code class="hljs">class Man:def __init__(self, name):self.name = nameprint(&quot;我进入了这个类喽！&quot;)def hello(self):print(&quot;hello&quot;+self.name)def goodbye(self):print(&quot;再见&quot;+self.name)    m = Man(&quot;连思鑫&quot;)m.hello()m.goodbye()</code></pre><p>运行结果如图：</p><p><img src="/images/2021-10-26-01.png" alt="upload successful"></p><p>讲解：这里我们定义了一个新的类，名字叫Man。在上面的代码中，我们用Man类生成类实例（对象）m。一开始，类Man的构造函数接受到了name，这个时候说明我的名字已经进入到了Man类中。然后我的名字便随着实例变量self.name漂流到下一个方法hello中，这时你就能理解self是干什么用的了。实例变量是储存在各个实例中的变量，可以通过self加属性名的方式来生成或访问实例变量。</p><h3 id="1-5-NumPy库">1.5 NumPy库</h3><p>在深度学习中，经常出现数组和矩阵的运算。我们大家看到的图片，电影，游戏等，其实都是1010的二进制以多维数组或矩阵组合而成。就拿图像来说，图像就是由许许多多的像素以矩阵的形式排列而成，每个像素又是一个数组，其中包含类RGB等色彩属性，明暗属性等。所以，我们学习深度学习就离不开数组和矩阵的运算，而数组和矩阵的计算常用这节要学的外部库Numpy。Numpy的优异之处在于它提供了许多有关于数组运算的便捷方法，如numpy.array。具体用法后面会详细的说。</p><h4 id="1-5-1-导入NumPy">1.5.1 导入NumPy</h4><p>Numpy是python的外部库，所以需要先下载这个外部库才能使用。我们可以用pip包管理器进行下载，如何使用上面章节已经讲述，我就不再赘述。</p><p>下载好之后并不是就能直接使用，我们需要把它导入到我们的项目中，导入方法如下：</p><pre><code class="hljs">import numpy as np # as np的意思是把numpy导入作为np来使用。</code></pre><h4 id="1-5-2-生成NumPy数组">1.5.2 生成NumPy数组</h4><p>导入成功后，我们便要对它操作使用，要生成我们所需要的数组，需要调用numpy的array()方法。如下：</p><pre><code class="hljs">&gt;&gt;&gt; import numpy as np&gt;&gt;&gt; x  = np.array([1,2,3,4,5])&gt;&gt;&gt; print(x)[1 2 3 4 5]&gt;&gt;&gt; type(x)&lt;class 'numpy.ndarray'&gt;</code></pre><h4 id="1-5-3-NumPy的算术运算">1.5.3 NumPy的算术运算</h4><p>关于运算，不知道怎么说，还是举例说明吧。举例如下：</p><pre><code class="hljs">&gt;&gt;&gt; x = np.array([1.0,2.0,3.0])&gt;&gt;&gt; y = np.array([2.0,3.0,4.0])&gt;&gt;&gt; x + y #对应元素相加/减/乘/除array([3., 5., 7.])&gt;&gt;&gt; x - yarray([-1., -1., -1.])&gt;&gt;&gt; x * yarray([ 2.,  6., 12.])&gt;&gt;&gt; x / yarray([0.5       , 0.66666667, 0.75      ])</code></pre><p>关于数组的计算方式，参考线性代数。</p><p>注：数组x和数组y的元素个数是相同的，所以可以进行算术运算。如果元素个数不同，在进行算术运算时python就会报错。</p><p>Numpy不仅可以进行对应元素的算术运算，还支持各元素之间跟标量之间运算，如：</p><pre><code class="hljs">&gt;&gt;&gt; x = np.array([1.0,2.0,3.0])&gt;&gt;&gt; x / 2.0array([0.5, 1. , 1.5])</code></pre><h4 id="1-5-4-NumPy的N维数组">1.5.4 NumPy的N维数组</h4><p>上一节演示的是一维数组，Numpy不仅可以创建一维数组，还可以创建多维数组。如二维数组就是线代里的矩阵了。例：</p><pre><code class="hljs">&gt;&gt;&gt; A = np.array([[1,2],[3,4]])&gt;&gt;&gt; print(A)[[1 2] [3 4]]&gt;&gt;&gt; A.shape(2, 2)&gt;&gt;&gt; A.dtypedtype('int64')</code></pre><p>这里我们生成了一个2x2的矩阵A。另外，矩阵A的形状可以通过shape来看，上面表示的意思就是2行2列的数组。而数据元素的数据类型可以通过dtype来查看。</p><p>接下来我们看一下多维数组的算术运算。如下：</p><pre><code class="hljs">&gt;&gt;&gt; import numpy as np&gt;&gt;&gt; A = np.array([[1,2],[3,4]])&gt;&gt;&gt; B = np.array([[3,0],[0,6]])&gt;&gt;&gt; A + Barray([[ 4,  2],       [ 3, 10]])&gt;&gt;&gt; A * Barray([[ 3,  0],       [ 0, 24]])</code></pre><p>和一维数组运算一样，要遵循元素对应的法则，不然容易报错。同时也支持通过标量（单一数值）进行矩阵的算术运算，也就是后面要说的广播。如下：</p><pre><code class="hljs">&gt;&gt;&gt; print(A)[[1 2] [3 4]]&gt;&gt;&gt; A * 10array([[10, 20],       [30, 40]])</code></pre><p>注解：在数学领域中，<strong>一维数组</strong>的概念在数学中是以<strong>向量</strong>的形式存在的，<strong>二维数组</strong>是<strong>矩阵</strong>。而线代里统一把这些称之为<strong>张量</strong>或<strong>多维数组</strong>。</p><h4 id="1-5-5-广播">1.5.5 广播</h4><p>在Numpy中，形状不同的数组之间也是可以进行运算。之前咱们的例子中，在一个2x2的矩阵A和标量10之间进行了乘法运算。在运算过程中，10被拓展成2x2的形状依次和A矩阵的每个元素进行运算。而这个过程称之为广播。</p><p>关于广播更通俗的解释（个人解释）：广播就像农村里的大喇叭，它喊出来的信息大家伙都能接受到听到。也就是这个信息传递到每一个人，每个人在对其做相应的处理。</p><p>例：</p><pre><code class="hljs">&gt;&gt;&gt; A = np.array([[1,2],[3,4]])&gt;&gt;&gt; B = np.array([10,20])&gt;&gt;&gt; A * Barray([[10, 40],       [30, 80]])</code></pre><p>在这个运算中，一维数组被展开成和二维数组相同的形状（注意，只是形状相同，而不是变成了二维数组），与矩阵A进行运算(元素对应)。</p><p>综上所述，Numpy有广播的功能，所以可以对不同形状的数组之间进行运算。</p><h4 id="1-5-6-访问元素">1.5.6 访问元素</h4><p>Numpy数组的元素访问和列表相似，都是通过下标进行访问。如下：</p><pre><code class="hljs">&gt;&gt;&gt; x = np.array([[1,2],[3,4]])&gt;&gt;&gt; print(x)[[1 2] [3 4]]&gt;&gt;&gt; x[0] #第0行的所有元素array([1, 2])&gt;&gt;&gt; x[0][1] #第0行第2个元素（编程语言是从0开始算起的）2</code></pre><p>也可以用for循环历遍各个元素。如下：</p><pre><code class="hljs">&gt;&gt;&gt; for i in x:...     print(i)... [1 2][3 4]</code></pre><p>除了上面说的索引操作，Numpy还支持用数组的形式访问各个元素。</p><pre><code class="hljs">&gt;&gt;&gt; import numpy as np&gt;&gt;&gt; x = np.array([[11,22],[33,44],[55,66]])&gt;&gt;&gt; print(x)[[11 22] [33 44] [55 66]]&gt;&gt;&gt; x = x.flatten() #将x转换成一维数组&gt;&gt;&gt; print(x)[11 22 33 44 55 66]&gt;&gt;&gt; x[np.array([1,3,5])] #以数组的形式访问x数组的各项元素（1，3，5）array([22, 44, 66])</code></pre><p>运用这种方法可以设定一定条件，满足条件的可以从x数组中抽出自己想要的结果。</p><p>例如提取x中大于20的元素，可以用如下方式实现：</p><pre><code class="hljs">&gt;&gt;&gt; print(x)[11 22 33 44 55 66]&gt;&gt;&gt; x &gt; 20array([False,  True,  True,  True,  True,  True])&gt;&gt;&gt; x[x&gt;20]array([22, 33, 44, 55, 66])</code></pre><p>对Numpy数组使用不等号运算符等得到的结果是个布尔型的数组，在跟据满足ture条件的元素取出显示。</p><p>注解：Numpy好用的地方在于它有许多处理是用C/C++实现的，python在业内有胶水语言的称号，可以作为中间人，复合使用是效率最大化。相较于静态类型语言（C/C++），python的运算速度就很慢。</p><h3 id="1-6-Matplotlib库">1.6 Matplotlib库</h3><p>有了各种数据的操作往往还不够，我们在学数学时有个数形结合的思想。想要更好的理解这些数据的规律、形式、意义等，我们就不得不要对其进行可视化操作。而Matplotlib库便可以轻松的绘制图形使数据可视化。</p><p>我之前还打算用Matplotlib库结合Numpy库来总结和学习高数的内容，算是半途而废了，最后我会展示我之前所做的半成品。</p><h4 id="1-6-1-绘制简单图形">1.6.1 绘制简单图形</h4><p>matplotlib库的pyplot模块可以绘制图形，直接举例：</p><pre><code class="hljs">import numpy as npimport matplotlib.pyplot as plt#生成数据x = np.arange(0, 6, 0.1) # 以0.1为单位，生成0到6的数据y = np.sin(x)#绘图plt.plot(x,y)plt.show()</code></pre><p>这里我们使用了Numoy库的arange方法生成了一个[0,0.1,0.2…5.9]的数据，并设它为x。对x的数据逐一应用Numpy的sin函数得到的数据定义为y。最后将x，y的值传递给plt.plot方法，然后绘图。通过plt.show()显示图像。如下图：</p><p><img src="/images/2021-1.-27-02.png" alt="upload successful"></p><h4 id="1-6-2-pyplot的功能">1.6.2 pyplot的功能</h4><p>在刚才的sin函数的图形中，我们尝试追加cos函数的图形，并尝试使用pyplot的添加标题和x轴标签名等其他功能。</p><pre><code class="hljs">import numpy as npimport matplotlib.pyplot as plt#生成数据x = np.arange(0, 6, 0.1) # 以0.1为单位，生成0到6的数据y1 = np.sin(x)y2 = np.cos(x)# 绘图plt.plot(x, y1, label=&quot;sin&quot;)plt.plot(x, y2, linestyle=&quot;--&quot;, label=&quot;cos&quot;) # 用虚线表示plt.xlabel(&quot;x&quot;)plt.ylabel(&quot;y&quot;)plt.title(&quot;sin &amp; cos&quot;)plt.legend()plt.show()</code></pre><p>展示结果如下：</p><p><img src="/images/2021-10-27-04.png" alt="upload successful"></p><h4 id="1-6-3-显示图像">1.6.3 显示图像</h4><p>pyplot 中还提供了用于显示图像的方法 imshow()。另外，可以使用matplotlib.image模块的imread()方法读入图像。下面我们来看一个例子。</p><pre><code class="hljs">import matplotlib.pyplot as pltfrom matplotlib.image import imreadimg = imread('001.jpg') # 读入图像（设定合适的路径！）plt.imshow(img)plt.show()</code></pre><p>执行结果如下：</p><p><img src="/images/2021-10-27-5.png" alt="upload successful"></p><p>这里，我们假定图像lena.png在当前目录下。大家可以根据自己的环境，可能需要变更文件名或文件路径。将图像的路径 '001.jpg’改为你电脑上图片所在目录即可正确运行。</p><h4 id="1-6-4-半成品项目">1.6.4 半成品项目</h4><p>下面是我很久很久以前自学python时的想法，想结合高数用python去理解数学。</p><p><a href="http://xn--SetsAndCommonLogics-4883bu340c.py">这是SetsAndCommonLogics.py</a></p><pre><code class="hljs">#第一章：集合与常用逻辑##集合是只具有某种特定性质的事物的总体。组成这个集合的事物称之为该集合的元素。#一个集合，若它的元素是有限的话，我们称之为有限集。反之不是有限的我们称之为无限集。import numpy as npimport math#声明两个空集合，命名为A,B。A = &#123;&#125;  #A集合B = &#123;&#125; #B集合#集合之间的关系：#相等:集合A和集合B中的所有元素都相同A = &#123;1,2,3&#125;B = &#123;1,3,2&#125;if A==B:    print(&quot;A集合与B集合相等！&quot;)else:    print(&quot;A集合不等于B集合！&quot;)#子集：集合A中任意一个元素都是集合B中的元素A = &#123;1,2,3&#125;B = &#123;1,2,3,4,5&#125;result = A &lt;= Bif result:    print(&quot;A是B的子集！&quot;)else:    print(&quot;A不是B的子集！&quot;)#真子集：集合A中任意一个元素都是集合B中的元素，且集合B中至少有一个元素不是集合A中的元素A = &#123;1,2,3&#125;B = &#123;1,2,3&#125;result = A &lt; Bif result:    print(&quot;A是B的真子集！&quot;)else:    print(&quot;A不是B的真子集！&quot;)#空集：是任何集合的子集，是任何非空集合的真子集A = &#123;&#125;B = &#123;&#125;#并集：由集合A和集合B共同组成的集合叫并集（A并B）A = &#123;1,2,3,4&#125;B = &#123;5,6,7,8,9&#125;result = A | Bprint(result)#交集：集合A和B共同拥有的元素构成的集合A = &#123;1,2,3,4&#125;B = &#123;3,4,5,6&#125;result = A &amp; Bprint(result)#补集与全集U = &#123;1,2,3,4,5,6,7,8,9&#125; #全集A = &#123;1,2,3,4,5&#125;result = U - A #补集print(result)'''函数介绍：numpy库中的arange方法生成的是左开右闭的区间。'''#开区间x = np.arange(1+1,10)print(&quot;这是（1，10）的开区间:&quot; + str(x))#闭区间x = np.arange(1,10+1)print(&quot;这是[1，10]的闭区间:&quot; + str(x))'''无穷数的介绍：在python中其实也是可以表示正负无穷数的。在此，我们使用float('inf')来表示正无穷数，float('inf')来表示负无穷数。如何检测无穷数呢？我们用到math库的isinf()方法来判断'''# 无穷大x = float('inf') #用于表示无穷大y = 100000000000000000print(math.isinf(x))print(math.isinf(y))#逻辑门（与，或，非）class Logic:    def __init__(self,x):        self.x = x    def AND(self):  #与门运算        w = np.array([0.5,0.5])        t = 0.7        sum = np.sum(self.x*w)-t        print(str(self.x[0]) + &quot;与&quot; + str(self.x[1]) + &quot;为：&quot;)        if sum &lt;= 0:            print(0)        elif sum &gt; 0:            print(1)    def OR(self):  #或门运算        w = np.array([0.7, 0.7])        t = 0.5        sum = np.sum(self.x * w) - t        print(str(self.x[0]) + &quot;或&quot; + str(self.x[1]) + &quot;为：&quot;)        if sum &lt;= 0:            print(0)        elif sum &gt; 0:            print(1)s = np.array([[1,0],[0,1],[0,0],[1,1]])for x in s:    # 实例化对象    logic = Logic(x)    #与门    logic.AND()    #或门    logic.OR()</code></pre><p><a href="http://xn--MathematicalFunction-vi06bl972c.py">这是MathematicalFunction.py</a></p><pre><code class="hljs"># 第二章：函数import numpy as np  # 计算import mathimport matplotlib.pyplot as plt  # 画图import sympy as sp  # 函数库import interval as iv  # 区间库# 函数 ：由两个非空集合相互对应的一种表示（可一对一，多对一）x = sp.symbols(&quot;x&quot;)  # 定义未知数x，x为非空集合中的一个未知元素。y = sp.solve(x, x)  # 函数关系式，该方法是在函数等用0的时候参与运算求解，得到的结果为数组。print(y)x = np.arange(-5.0, 5.0, 0.1)  # 定义x的区间和表示单位y = x  # 函数体plt.plot(x, y)plt.ylim(-10, 10)  # 定义y的区间plt.show()# 函数相等：如果两个函数定义域相同，对应关系完全一致，称这两个函数相等。x1 = np.arange(-5.0, 5.0, 0.1)x2 = np.arange(-5.0, 5.0, 0.1)y1 = x1y2 = pow(pow(x2, 2), 0.5)  # y2 = x2的平方开算术平方根，pow是算平方的内置方法plt.plot(x1, y1)plt.plot(x2, y2, linestyle=&quot;--&quot;)plt.ylim(-10, 10)plt.show()  # 如图所示，不是相等函数。# 函数奇偶性：如上图可看出，y（-x）=-y(x)是奇函数，y（-x）=y（x）是偶函数# 分段函数： 给定不同的区间有不同的对应关系的函数x1 = np.arange(-5.0, 0.0, 0.1)x2 = np.arange(0.0, 5.0, 0.1)y1 = x1y2 = pow(x2, 2)plt.plot(x1, y1)plt.plot(x2, y2, linestyle=&quot;--&quot;)plt.ylim(-10, 10)plt.show()  # 如图是分段函数# 一次函数：又叫线性函数。y=kx+b(k!=0)x = np.arange(-5.0, 5.0, 0.1)y = 2 * x + 2plt.plot(x, y)plt.ylim(-10, 10)plt.show()  # 如图，是一条直线，k是直线的斜率，b是y轴上的截距。# 二次函数：非线性函数，抛物线。x = np.arange(-5.0, 5.0, 0.1)y = 2 * x ** 2 + 3 * x + 2plt.plot(x, y)plt.ylim(-10, 10)plt.show()# 指数函数：非线性x = np.arange(-1, 3, 0.1)y = -2 ** xplt.plot(x, y)plt.ylim(-2, 25)plt.show()# 三角函数# sin函数x = np.arange(-5,5,0.1)y = np.sin(x)plt.plot(x,y)plt.ylim(-2,2)plt.show()#cos函数图像x = np.arange(-5,5,0.1)y = np.cos(x)plt.plot(x,y)plt.ylim(-2,2)plt.show()</code></pre><p><a href="http://xn--DynamicRoseLine-5835av628b.py">这是DynamicRoseLine.py</a></p><pre><code class="hljs">####  动画演示玫瑰线的绘画过程###from matplotlib import pyplot as pltimport numpy as npimport mathi = np.linspace(0,2*math.pi,500)theta=5*np.sin(3*i)plt.title('p=5*sin(3*i)',color='r')i_list=[]theta_list=[]for (i_tmp,theta_tmp) in zip(i,theta):    i_list.append(i_tmp)    theta_list.append(theta_tmp)#去除负值，使得动画更顺畅    if(theta_tmp&gt;=0):        plt.plot(i_list,theta_list)        plt.pause(0.01)        plt.axes(polar=True)        plt.ylim(0,5)#保存动画import numpy as npimport matplotlib.pyplot as pltimport matplotlib.animation as animation# 生成图例fig = plt.figure(figsize=(5,5))ax = plt.subplot(projection='polar')# 绘制动态函数的变量x = np.linspace(0, 2*np.pi, 500)# 实例化线条line, = ax.plot([], [], color='r')r,theta=[],[]def init():    # 设置y轴的范围    ax.set_ylim(0, 5)    return line# 更新函数，n是动态变量def update(n):    # 更新数据    theta.append(n)    r.append(5*np.sin(3*n))    line.set_xdata(theta)    line.set_ydata(r)    return line# frames在调用update函数时，会将frames后面的数据作为实参传递给“n”# interval更新频率，单位msani = animation.FuncAnimation(fig, update,frames=x,init_func=init,interval=10)ani.save('sin.gif',writer='pillow')</code></pre><p><a href="http://xn--RoseCurve-pr6su00jt6bh20ddb4c.py">这是玫瑰线RoseCurve.py</a></p><pre><code class="hljs">###  玫瑰线##from matplotlib import pyplot as pltimport numpy as npimport mathi = np.linspace(-2*math.pi,2*math.pi,500)theta=5*np.sin(3*i)plt.subplot(221,projection='polar')plt.plot(i,theta)plt.title('p=5*sin(3*i)',color='r')theta=5*np.sin(2*i)plt.subplot(222,projection='polar')plt.plot(i,theta)plt.title('p=5*sin(2*i)',color='r')theta=5*np.sin(3/2*i)plt.subplot(223,projection='polar')plt.plot(i,theta)plt.title('p=5*sin(3/2i)',color='r')theta=5*np.sin(1*i)plt.subplot(224,projection='polar',title='p=5*sin(3*i)')plt.plot(i,theta)plt.title('p=5*sin(1*i)',color='r')plt.show()</code></pre><h3 id="总结">总结</h3><p>本章重点介绍了实现深度学习（神经网络）所需的编程知识，以为学习深度学习做好准备。从下一章开始，我们将通过使用Python实际运行代码，逐步了解深度学习。</p><p>（本章完结）！</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小鑫爱白嫖，白嫖资源分享</title>
      <link href="/2021/10/16/%E5%B0%8F%E9%91%AB%E7%88%B1%E7%99%BD%E5%AB%96%EF%BC%8C%E7%99%BD%E5%AB%96%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB/"/>
      <url>/2021/10/16/%E5%B0%8F%E9%91%AB%E7%88%B1%E7%99%BD%E5%AB%96%EF%BC%8C%E7%99%BD%E5%AB%96%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<h1>小鑫爱白嫖</h1><p>在这个网络时代，我们每个人都能享受互联网带来的方便快捷以及庞大的知识储备。我们要学会利用网络的便利性丰富我们自己的技能和知识储备。所以，我写了这个博客来推广这些免费的资源网站。</p><h2 id="一、视频类">一、视频类</h2><ol><li>预告片世界：<a href="https://www.yugaopian.cn/">https://www.yugaopian.cn/</a></li><li>33台词：<a href="http://33.agilestudio.cn/">http://33.agilestudio.cn/</a></li><li>MixKit：<a href="https://mixkit.co/free-stock-video/">https://mixkit.co/free-stock-video/</a></li><li>Pexel：<a href="https://www.pexels.com/zh-cn/video/">https://www.pexels.com/zh-cn/video/</a></li><li>Videezy：<a href="https://www.videezy.com/">https://www.videezy.com/</a></li><li>VJShi：<a href="https://www.vjshi.com/">https://www.vjshi.com/</a></li></ol><h2 id="二、PPT模板类">二、PPT模板类</h2><ol><li>51PPT模板：<a href="http://www.51pptmoban.com/">http://www.51pptmoban.com/</a></li><li>优品PPT：<a href="https://www.ypppt.com/">https://www.ypppt.com/</a></li><li>第一PPT：<a href="http://www.1ppt.com/">http://www.1ppt.com/</a></li><li>叮当设计：<a href="https://www.dingdangsheji.com/">https://www.dingdangsheji.com/</a></li><li>PPT超级市场：<a href="http://ppt.sotary.com/web/wxapp/index.html">http://ppt.sotary.com/web/wxapp/index.html</a></li></ol><h2 id="三、静态图片">三、静态图片</h2><ol><li>PH：<a href="https://pxhere.com/">https://pxhere.com/</a></li><li>CC0图片网：<a href="https://cc0.cn/">https://cc0.cn/</a></li><li>Foodiesfeed：<a href="https://www.foodiesfeed.com/">https://www.foodiesfeed.com/</a></li><li>Unplash：<a href="https://unsplash.com/">https://unsplash.com/</a></li><li>Pixabay：<a href="https://pixabay.com/">https://pixabay.com/</a></li></ol><h2 id="四、动态图">四、动态图</h2><ol><li>Giphy：<a href="https://giphy.com/">https://giphy.com/</a></li><li>GfyCat：<a href="https://gfycat.com/">https://gfycat.com/</a></li><li>Tenor：<a href="https://tenor.com/">https://tenor.com/</a></li><li>GIF ABYSS：<a href="https://gifs.alphacoders.com/">https://gifs.alphacoders.com/</a></li><li>动图宇宙：<a href="https://biaoqingsoso.com/">https://biaoqingsoso.com/</a></li><li>Soogif：<a href="https://www.soogif.com/">https://www.soogif.com/</a></li><li>闪萌：<a href="http://www.weshineapp.com/">http://www.weshineapp.com/</a></li></ol><h2 id="五、壁纸">五、壁纸</h2><ol><li>WallHaven：<a href="https://wallhaven.cc/">https://wallhaven.cc/</a></li><li>10Wallpaper：<a href="https://www.10wallpaper.com/">https://www.10wallpaper.com/</a></li><li>alphacoders：<a href="https://wall.alphacoders.com/?lang=Chinese">https://wall.alphacoders.com/?lang=Chinese</a></li><li>极简壁纸：<a href="https://bz.zzzmh.cn/index">https://bz.zzzmh.cn/index</a></li><li>3G壁纸：<a href="https://www.3gbizhi.com/">https://www.3gbizhi.com/</a></li><li>必应壁纸：<a href="https://bing.ioliu.cn/">https://bing.ioliu.cn/</a></li></ol><h2 id="六、图标类">六、图标类</h2><ol><li>阿里巴巴矢量图库：<a href="https://www.iconfont.cn/">https://www.iconfont.cn/</a></li><li>Ikonate：<a href="https://ikonate.com/">https://ikonate.com/</a></li><li>iconstore：<a href="https://iconstore.co/">https://iconstore.co/</a></li><li>icoon：<a href="https://icooon-mono.com/">https://icooon-mono.com/</a></li><li>iconfinder：<a href="https://www.iconfinder.com/">https://www.iconfinder.com/</a></li></ol><h2 id="七、PSD模板">七、PSD模板</h2><ol><li>素材中国：<a href="http://www.sccnn.com/">http://www.sccnn.com/</a></li><li>站长素材：<a href="https://sc.chinaz.com/psd/">https://sc.chinaz.com/psd/</a></li><li>365PSD：<a href="https://cn.365psd.com/free-psd">https://cn.365psd.com/free-psd</a></li><li>freepik：<a href="https://www.freepik.com/psd">https://www.freepik.com/psd</a></li><li>freebiesbug： <a href="https://freebiesbug.com/">https://freebiesbug.com/</a></li></ol><h2 id="八、音频类">八、音频类</h2><ol><li>Mixkit：<a href="https://mixkit.co/free-stock-music/">https://mixkit.co/free-stock-music/</a></li><li>爱给网：<a href="https://www.aigei.com/">https://www.aigei.com/</a></li><li>淘声网：<a href="https://www.tosound.com/">https://www.tosound.com/</a></li><li>耳聆：<a href="https://www.ear0.com/">https://www.ear0.com/</a></li></ol><h2 id="九、字体类">九、字体类</h2><ol><li>素材中国：<a href="http://www.sccnn.com/ziku/">http://www.sccnn.com/ziku/</a></li><li>100Font：<a href="https://www.100font.com/">https://www.100font.com/</a></li><li>DaFont：<a href="https://www.dafont.com/">https://www.dafont.com/</a></li><li>自由字体：<a href="https://ziyouziti.com/">https://ziyouziti.com/</a></li></ol><h2 id="十、配色">十、配色</h2><ol><li>中国色彩：<a href="http://zhongguose.com/">http://zhongguose.com/</a></li><li>ColorHex：<a href="https://www.colorhexa.com/">https://www.colorhexa.com/</a></li><li>优色网配色专区：<a href="https://color.uisdc.com/">https://color.uisdc.com/</a></li><li>ColorDrop：<a href="https://www.colordrop.io/">https://www.colordrop.io/</a></li><li>LOL Colors：<a href="https://www.webdesignrankings.com/resources/lolcolors/">https://www.webdesignrankings.com/resources/lolcolors/</a></li><li>colorHunt：<a href="https://colorhunt.co/">https://colorhunt.co/</a></li><li>Adobe Color：<a href="https://color.adobe.com/zh/create/color-wheel">https://color.adobe.com/zh/create/color-wheel</a></li><li>uigradients：<a href="https://uigradients.com/#PiggyPink">https://uigradients.com/#PiggyPink</a></li><li>webgradient：<a href="https://webgradients.com/">https://webgradients.com/</a></li></ol><h2 id="十一、综合视频类">十一、综合视频类</h2><ol><li>CCTV官网：<a href="https://tv.cctv.com">https://tv.cctv.com</a></li><li>b站：<a href="https://bilibili.com">https://bilibili.com</a></li><li>第一教学网：<a href="https://www.diyijc.com">https://www.diyijc.com</a></li><li>西东视频教程网：<a href="https://xidongv.com">https://xidongv.com</a></li><li>大学资源网：<a href="https://www.dxzy163.com">https://www.dxzy163.com</a></li><li>Crash Course：<a href="https://crashcourse.club/">https://crashcourse.club/</a></li><li>译学馆：<a href="https://www.yxgapp.com">https://www.yxgapp.com</a></li></ol><h2 id="十二、创意设计类">十二、创意设计类</h2><ol><li>包小盒：<a href="https://www.baoxiaohe.com">https://www.baoxiaohe.com</a></li><li>站酷：<a href="https://www.zcool.com.cn">https://www.zcool.com.cn</a></li><li>优设网：<a href="https://www.uisdc.com">https://www.uisdc.com</a></li><li>花瓣网：<a href="https://huaban.com">https://huaban.com</a></li><li>蜂鸟网（摄影论坛）：<a href="https://www.fengniao.com">https://www.fengniao.com</a></li><li>设计导航：<a href="https://hao.shejidaren.com">https://hao.shejidaren.com</a></li><li>设计师导航网：<a href="https://hao.uisdc.com">https://hao.uisdc.com</a></li></ol><h2 id="十三、论文搜索与下载">十三、论文搜索与下载</h2><ol><li>全国图书馆参考联盟：<a href="https://www.ucdrs.superlib.net">https://www.ucdrs.superlib.net</a></li><li>OALib：<a href="https://www.oalib.com">https://www.oalib.com</a></li><li>国家哲学社会科学文献中心：<a href="https://www.ncpssd.org">https://www.ncpssd.org</a></li><li>广西壮族自治区图书馆：<a href="https://www.gxlib.org.cn">https://www.gxlib.org.cn</a></li><li>i-Data：<a href="https://www.cn-ki.net">https://www.cn-ki.net</a></li><li>晨曦数字图书馆：<a href="https://31sanyi.neocities.org/ywsjk.html">https://31sanyi.neocities.org/ywsjk.html</a></li><li>秘塔学术导航：<a href="https://site.sciping.com">https://site.sciping.com</a></li><li>虫部落学术搜索：<a href="https://scholar.chongbuluo.com">https://scholar.chongbuluo.com</a></li></ol><h2 id="十四、公开课">十四、公开课</h2><ol><li>网易公开课：<a href="https://open.163.com">https://open.163.com</a></li><li>新浪公开课：<a href="https://open.sina.com.cn">https://open.sina.com.cn</a></li><li>学堂在线：<a href="https://www.xuetangx.com">https://www.xuetangx.com</a></li><li>中国大学MOOC：<a href="https://www.icourse163.org">https://www.icourse163.org</a></li><li>爱课程：<a href="https://www.icourses.edu.cn">https://www.icourses.edu.cn</a></li><li>大学生自学网：<a href="https://v.dxsbb.com">https://v.dxsbb.com</a></li><li>MOOC中国（搜索引擎）：<a href="https://www.cmooc.com">https://www.cmooc.com</a></li><li>Coursera：<a href="https://www.coursera.org">https://www.coursera.org</a></li><li>EDX：<a href="https://www.edx.org">https://www.edx.org</a></li><li>Coursade（搜索引擎）：<a href="https://www.coursade.com">https://www.coursade.com</a></li><li>国家中小学云课堂：<a href="https://ykt.eduyun.cn/ykt/index.html">https://ykt.eduyun.cn/ykt/index.html</a></li><li>一师一优课：<a href="https://1s1k.eduyun.cn/portal/html/1s1k/course/1.html">https://1s1k.eduyun.cn/portal/html/1s1k/course/1.html</a></li><li>学习啦：<a href="https://www.xuexila.net">https://www.xuexila.net</a></li><li>大学资源网：<a href="https://www.dxzy163.com">https://www.dxzy163.com</a></li></ol><h2 id="十五、演讲类">十五、演讲类</h2><ol><li>TED官网：<a href="https://www.ted.com">https://www.ted.com</a></li><li>网易公开课TED：<a href="https://open.163.com/ted/">https://open.163.com/ted/</a></li><li>一席：<a href="https://yixi.tv">https://yixi.tv</a></li><li>开讲啦：<a href="http://tv.cctv.com/lm/kjl/">http://tv.cctv.com/lm/kjl/</a></li><li>格致论道：<a href="https://www.self.org.cn">https://www.self.org.cn</a></li><li>听道：<a href="https://www.tndao.com">https://www.tndao.com</a></li><li>CC讲坛：<a href="https://www.ccjt.tv">https://www.ccjt.tv</a></li></ol><h2 id="十六、纪录片类">十六、纪录片类</h2><ol><li>央视网纪录片官网：<a href="https://jishi.cctv.com">https://jishi.cctv.com</a></li><li>中国纪录片网：<a href="https://www.docuchina.cn">https://www.docuchina.cn</a></li><li>B站纪录片频道：<a href="https://www.bilibili.com/documentary">https://www.bilibili.com/documentary</a></li><li>腾讯视频纪录片频道：<a href="https://v.qq.com/channel/doco">https://v.qq.com/channel/doco</a></li><li>爱奇艺纪录片频道：<a href="https://www.iqiyi.com/jilupian/">https://www.iqiyi.com/jilupian/</a></li></ol><h2 id="十七、软件教程">十七、软件教程</h2><ol><li>doyoudo：<a href="https://doyoudo.com">https://doyoudo.com</a></li><li>优优教程网：<a href="https://uiiiuiii.com">https://uiiiuiii.com</a></li><li>好知网：<a href="https://www.howzhi.com">https://www.howzhi.com</a></li><li>WPS学院：<a href="https://www.wps.cn/learning/">https://www.wps.cn/learning/</a></li><li>Word联盟：<a href="https://www.wordlm.com">https://www.wordlm.com</a></li><li>ExcelHome：<a href="https://www.excelhome.net">https://www.excelhome.net</a></li><li>HiPPTer：<a href="https://www.hippter.com">https://www.hippter.com</a></li><li>Oeasy：<a href="https://www.oeasy.org">https://www.oeasy.org</a></li><li>我爱自学网：<a href="https://www.52zxw.com">https://www.52zxw.com</a></li><li>我要自学网：<a href="https://www.51zxw.net">https://www.51zxw.net</a></li><li>软件自学网：<a href="https://rjzxw.com">https://rjzxw.com</a></li></ol><h2 id="十八、外语学习">十八、外语学习</h2><ol><li>听力课堂：<a href="https://www.tingclass.net">https://www.tingclass.net</a></li><li>YouZack：<a href="https://www.youzack.com">https://www.youzack.com</a></li><li>每日英语听力：<a href="https://dict.eudic.net/ting">https://dict.eudic.net/ting</a></li><li>CHINADAILY：<a href="https://www.chinadaily.com.cn">https://www.chinadaily.com.cn</a></li><li>MAGZINELIB：<a href="https://magazinelib.com">https://magazinelib.com</a></li><li>英语语法网：<a href="https://www.yygrammar.com">https://www.yygrammar.com</a></li><li>英语语法检测：<a href="https://www.nounplus.net">https://www.nounplus.net</a></li><li>50Language：<a href="https://www.goethe-verlag.com/book2/ZH/">https://www.goethe-verlag.com/book2/ZH/</a></li><li>声同小语种：<a href="https://www.somdom.com">https://www.somdom.com</a></li><li>简明日语教程：<a href="https://www.nhk.or.jp/lesson/zh">https://www.nhk.or.jp/lesson/zh</a></li><li>中国高校外语慕课平台：<a href="https://moocs.unipus.cn">https://moocs.unipus.cn</a></li></ol><h2 id="十九、试卷课本下载">十九、试卷课本下载</h2><ol><li>电子课本网（中小学课本）：<a href="https://www.dzkbw.com">https://www.dzkbw.com</a></li><li>考试酷：<a href="https://www.examcoo.com/index/ku">https://www.examcoo.com/index/ku</a></li><li>第一试卷网：<a href="https://www.shijuan1.com">https://www.shijuan1.com</a></li><li>高中试卷网（登陆后能下载绝大多数资源）：<a href="https://sj.smez.net">https://sj.smez.net</a></li><li>小荷试卷网：<a href="https://shijuan.zww.cn">https://shijuan.zww.cn</a></li><li>新课标第一网：<a href="https://www.xkb1.com">https://www.xkb1.com</a></li></ol><h2 id="二十、医学健康">二十、医学健康</h2><ol><li>MUSCLEWIKI（健身）：<a href="https://musclewiki.cn">https://musclewiki.cn</a></li><li>医学微视：<a href="https://www.mvyxws.com">https://www.mvyxws.com</a></li><li>默沙东诊疗手册 大众版：<a href="https://www.msdmanuals.cn/home">https://www.msdmanuals.cn/home</a></li><li>百科名医：<a href="https://www-baikemy.xiaohe-jiankang.com">https://www-baikemy.xiaohe-jiankang.com</a></li><li>丁香医生：<a href="https://dxy.com">https://dxy.com</a></li><li>39健康网：<a href="https://www.39.net">https://www.39.net</a></li><li>人卫慕课：<a href="https://www.pmphmooc.com">https://www.pmphmooc.com</a></li></ol><h2 id="二十一、人文历史">二十一、人文历史</h2><ol><li>全历史：<a href="https://www.allhistory.com">https://www.allhistory.com</a></li><li>世界数字图书馆：<a href="https://www.wdl.org/zh">https://www.wdl.org/zh</a></li><li>书格：<a href="https://new.shuge.org">https://new.shuge.org</a></li><li>国图公开课：<a href="https://open.nlc.cn">https://open.nlc.cn</a></li><li>古诗文网：<a href="https://www.gushiwen.cn">https://www.gushiwen.cn</a></li></ol><h2 id="二十二、科普涨知识">二十二、科普涨知识</h2><ol><li>wikihow：<a href="https://zh.wikihow.com">https://zh.wikihow.com</a></li><li>小鸡百科：<a href="https://jikipedia.com">https://jikipedia.com</a></li><li>果壳：<a href="https://www.guokr.com">https://www.guokr.com</a></li><li>科普中国：<a href="https://www.kepuchina.cn">https://www.kepuchina.cn</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 福利 </category>
          
          <category> 白嫖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 福利 </tag>
            
            <tag> 白嫖 </tag>
            
            <tag> 资源网站 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超星网课刷章节次数脚本</title>
      <link href="/2021/10/15/%E8%B6%85%E6%98%9F%E7%BD%91%E8%AF%BE%E5%88%B7%E7%AB%A0%E8%8A%82%E6%AC%A1%E6%95%B0%E8%84%9A%E6%9C%AC/"/>
      <url>/2021/10/15/%E8%B6%85%E6%98%9F%E7%BD%91%E8%AF%BE%E5%88%B7%E7%AB%A0%E8%8A%82%E6%AC%A1%E6%95%B0%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h1>超星网课刷章节次数的脚本</h1><h2 id="js代码">js代码</h2><pre><code class="hljs">  var current = location.href;   var timeout=30;   if(timeout&gt; 0) &#123;   setTimeout('reload()', 1000 * timeout);  &#125; else &#123;   location.replace(current);  &#125;function reload() &#123;   setTimeout('reload()', 1000 * timeout);   var fr4me ='&lt;frameset cols=\'*\'&gt;\n&lt;frame src=\'' + current +'\' /&gt;';   fr4me +='&lt;/frameset&gt;';   with(document)&#123; write(fr4me);   void(close());   &#125;;   &#125;</code></pre><h2 id="用法">用法</h2><p>打开超星学习课程的首页（其实直接在课程首页刷就行，不用进入到具体章节），按F12打开审查元素，选择控制台，将上述代码复制进去后回车等待即可，本脚本定义的是30s一次的刷新，第二行的timeout后面定义的就是刷新等待时间。个人建议尽量高于20s,否则超星平台无法识别，不计入次数。</p><p><img src="/images/2021-10-15-01.png" alt="upload successful"></p>]]></content>
      
      
      <categories>
          
          <category> 超星 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 超星脚本 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络考研学习笔记（一）</title>
      <link href="/2021/10/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%80%83%E7%A0%94%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2021/10/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%80%83%E7%A0%94%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1>计算机网络考研学习笔记（一）</h1><h2 id="一-计算机网络概述">一.计算机网络概述</h2><ol><li><p>最简洁的定义： 计算机网络是一些互连的，自洽的计算机系统的集合。</p></li><li><p>广义观点的定义：计算机网络是指能实现远程信息处理的系统或进一步能达到资源共享的系统。</p></li><li><p>资源共享观点的定义：计算机网络是指能以资源共享的形式互连的自洽的计算机系统的集合。</p></li><li><p>用户透明性观点的定义：计算机网络是一个能为用户自动管理资源的网络操作系统，它能够调用用户所需要的资源，整合网络像是一个大型的计算机系统一样对用户透明。</p></li></ol><p>答疑：什么是自洽计算机？</p><p>答：自洽计算机是指能够自我管理，配置和维护的计算机。例如大家自己用的个人计算机，用户便能对其管理，配置和维护。而以前的终端，例如显示器只显示数据则不能称之为自洽计算机。</p><h2 id="二-计算机网络的组成">二.计算机网络的组成</h2><h3 id="物理组成">物理组成</h3><ol><li>硬件：由主机，通信处理器，通信线路，交换设备组成。</li><li>软件：主要包括实现资源共享的软件和方便用户使用的各种工具软件（如QQ）</li><li>协议：一种网络使用的规则，如汽车上路的交通规则一样，数据在网络中也要遵循一定的规则。</li></ol><h3 id="工作方式组成">工作方式组成</h3><p>从工作方式上看，计算机网络可分为两个部分：边缘部分和核心部分。</p><ol><li>边缘部分：由所有连接在互联网上的供用户直接使用的主机组成，用来进行通信和资源共享。</li><li>核心部分：由大量的网络（链路）和连接这些网络的路由器组成，它位边缘部分提供连通性和交换服务。</li></ol><p>个人理解：边缘部分是数据的载体，核心部分是把这些载体连接起来，形成互通性的网络结构。</p><h3 id="功能组成">功能组成</h3><p>从功能上看，计算机网络是由通信子网和资源子网两部分组成。</p><ol><li>通信子网：由各种传输介质、通信设备和相应的网络协议组成，为网络提供数据传输、交换和控制能力、实现联网计算机之间的数据通信。</li><li>资源子网：由主机、终端以及各种软件资源、信息资源组成，负责全网的数据处理业务，向网络用户提供各种网络资源和服务。</li></ol><p>注意：<strong>通信子网包括物理层、数据链路层和网络层！</strong></p><h2 id="计算机网络的功能">计算机网络的功能</h2><p><strong>数据通信：</strong> 计算机网络<strong>最基本和重要</strong>的功能，包括连接控制、传输控制、差错控制、流量控制、路由选择、多路复用等子功能。</p><p>**资源共享：**包括数据资源、软件资源以及硬件资源。</p><p>**分布式处理：**当计算机网络中的某个计算机系统负荷过重时，可以将其处理的任务通过网络传送到网络中其它计算机系统处理，利用空闲计算机资源提高整个系统的利用率。</p><p>**信息综合处理：**将分散在各地计算机中的数据资料集中处理或分级处理，如自动订票系统、银行金融系统、数据采集等。</p><p>**负载均衡：**将工作任务均衡的分配给计算机网络中的各台计算机。</p><p>**提高可靠性：**计算机网络中的各台计算机可以通过网络互为替代机。</p><p>除了以上的重要功能外，计算机还有其它一些能满足工作生活和娱乐的其它功能。</p><p>答疑：什么是分布式计算机系统？与计算机网络比较有什么区别？</p><p>答：分布式计算机系统是近几年流行的，分布式计算机系统的最主要的特点是整个系统中的各台计算机对用户是透明的，也就是由许多计算机传连起来构成的一个大型的计算机。用户在通过输入命令可以运行程序，但用户不知道你的程序具体跑在哪一台计算机。因为面向用户的不是单一的计算机，而是许多计算机组合构成的整体。在这个整体计算机中，操作系统会为用户选择整体中的一台最合适的计算机来运行程序，并把程序运行的结果传送到合适的地方。</p><p>计算机网络的不同是在于，用户必须首先在与运行的程序的计算机登录，然后按照计算机的地址（ip），将程序通过计算机网络传送到该计算机上去运行，最后根据用户的命令将结果传送到用户指定的计算机。</p><h2 id="计算机网络的分类">计算机网络的分类</h2><ol><li>按分布范围：广域网、城域网、局域网、个人区域网。</li><li>按拓扑结构：星型网络、总线型网络、环形网络、网状型网络。</li><li>按传输技术：广播式网络、点对点式网络。</li><li>按使用者：公用网、专用网。</li><li>按数据交换技术：电路交换网络、报文交换网络、分组交换网络。</li></ol><p><strong>注：接入网（AN）了解即可！</strong></p><h2 id="计算机网络的标准化工作及相关组织">计算机网络的标准化工作及相关组织</h2><h3 id="1-计算机网络标准化工作">1.计算机网络标准化工作</h3><p>计算机网络的标准化需要经历以下4个步骤：</p><ol><li>互联网草案</li><li>建议标准（RFC文档）</li><li>草案标准</li><li>互联网标准</li></ol><h3 id="2-相关组织">2.相关组织</h3><ol><li>国际标准化组织（ISO）</li><li>国际电信联盟（ITU）</li><li>美国电气和电子工程师协会（IEEE）等</li></ol><p>（本章完结！）</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 计算机网络 </tag>
            
            <tag> 考研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个好用的视频倍数插件（支持百度云，超星等平台）</title>
      <link href="/2021/09/29/%E4%B8%80%E4%B8%AA%E5%A5%BD%E7%94%A8%E7%9A%84%E8%A7%86%E9%A2%91%E5%80%8D%E6%95%B0%E6%8F%92%E4%BB%B6%EF%BC%88%E6%94%AF%E6%8C%81%E7%99%BE%E5%BA%A6%E4%BA%91%EF%BC%8C%E8%B6%85%E6%98%9F%E7%AD%89%E5%B9%B3%E5%8F%B0%EF%BC%89/"/>
      <url>/2021/09/29/%E4%B8%80%E4%B8%AA%E5%A5%BD%E7%94%A8%E7%9A%84%E8%A7%86%E9%A2%91%E5%80%8D%E6%95%B0%E6%8F%92%E4%BB%B6%EF%BC%88%E6%94%AF%E6%8C%81%E7%99%BE%E5%BA%A6%E4%BA%91%EF%BC%8C%E8%B6%85%E6%98%9F%E7%AD%89%E5%B9%B3%E5%8F%B0%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1>这是一个教程，教你如何安装一个好用的浏览器视频控制插件。</h1><h3 id="起源">起源</h3><p>因为我通常在百度网盘上看一些学习资料的视频，但迫于没钱开vip，享受不了倍数播放，增加不了学习的效率。其实我之前都是用一段代码植入控制台，控制百度网盘的视频播放的倍数。但近一段时间，该方法无法在控制百度网盘视频的播放倍数。于是我又去了油猴官网，发现那些脚本基本上跟我之前植入js语句是同样的原理，故此，只能另寻它法。</p><h3 id="介绍一下之前的js控制办法">介绍一下之前的js控制办法</h3><p>其实就一条语句即可</p><pre><code class="hljs">videojs.getPlayers(&quot;video-player&quot;).html5player.tech_.setPlaybackRate(这里填你需要的倍数)</code></pre><p>复制上段代码，在你浏览器页面按f12，然后点Console。将代码输入到里面按回车即可</p><p><img src="/images/2021-9-29-01.png" alt="upload successful"></p><p><img src="/images/2021-9-29-02.png" alt="upload successful"></p><h3 id="上面的方法已失效，最新方法">上面的方法已失效，最新方法</h3><p>这里就需要用到浏览器插件，该插件的作者已经把该插件在github上开源，但是我水平有限，还没看得太懂，有兴趣的可以去作者的github上学习学习。</p><h4 id="安装该插件">安装该插件</h4><h5 id="Edge浏览器用户点我跳转安装">Edge浏览器用户<a href="https://microsoftedge.microsoft.com/addons/detail/global-speed-%E8%A7%86%E9%A2%91%E9%80%9F%E5%BA%A6%E6%8E%A7%E5%88%B6/mjhlabbcmjflkpjknnicihkfnmbdfced">点我跳转安装</a></h5><h5 id="Firefox浏览器用户点我跳转安装">Firefox浏览器用户<a href="https://addons.mozilla.org/zh-CN/firefox/addon/global-speed/">点我跳转安装</a></h5><h5 id="Chrome浏览器用户点我跳转安装">Chrome浏览器用户<a href="https://chrome.google.com/webstore/detail/global-speed/jpbjcnkcffbooppibceonlgknpkniiff">点我跳转安装</a></h5><p>因为谷歌被墙，所以需要翻墙才可！</p><h3 id="使用方法">使用方法</h3><p>播放视频时点它，在点你要播放的倍数即可，最高支持16倍数，所有视频通用。</p><p><img src="/images/2021-9-29-03.png" alt="upload successful"></p><p><img src="/images/2021-9-29-04.png" alt="upload successful"></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 福利 </tag>
            
            <tag> 教程 </tag>
            
            <tag> 插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小鑫云 科文共享网盘使用教程（使用文档）</title>
      <link href="/2021/09/22/%E5%B0%8F%E9%91%AB%E4%BA%91-%E7%A7%91%E6%96%87%E5%85%B1%E4%BA%AB%E7%BD%91%E7%9B%98%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%EF%BC%88%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3%EF%BC%89/"/>
      <url>/2021/09/22/%E5%B0%8F%E9%91%AB%E4%BA%91-%E7%A7%91%E6%96%87%E5%85%B1%E4%BA%AB%E7%BD%91%E7%9B%98%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%EF%BC%88%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1>小鑫云 科文共享网盘使用教程文档</h1><h2 id="什么是小鑫云-科文共享">什么是小鑫云 科文共享?</h2><p>小鑫云 科文共享是一个搭建在局域网（这里指校园网）的私有网络云盘系统。它可以让使用者在校园网的覆盖范围内，轻松的共享各类资源文件。而且摆脱了服务器带宽的限制，从而享有飞速的网络体检。小鑫云是一款具备音视频在线播放，文档在线预览，图片在线查看，并支持office文件的在线预览等诸多功能。能够满足在线师生的基本需求。并且拥有公共与私人区域，有利于用户对自己的数据进行安全的处理。</p><h2 id="登录与注册">登录与注册</h2><p>小鑫云 科文共享支持非用户的预览和下载。在您不是登录状态时，可以查看公共区域的文件资源。但您无法上传文件和对已有文件进行修改管理，您只有下载的权利。</p><p>登录与注册都在小鑫云 科文共享的上方较为显眼处。如果您想上传和管理文件资源，建议您注册一个帐号，并记住它。</p><p>图片展示：电脑版<img src="/images/2021-9-22-01.png" alt="upload successful"></p><p>手机版</p><p><img src="/images/2021-9-22-02.png" alt="upload successful"></p><h2 id="用户权限">用户权限</h2><h3 id="游客（非用户）">游客（非用户）</h3><p>没有注册的非用户，我把它定义为游客。你们享有小鑫云的下载和预览功能。</p><h3 id="用户">用户</h3><p>完成注册的我把它称之为用户，你们享有上传/下载/创建文件夹/删除文件（文件夹）/移动，复制，粘贴文件（文件夹）。</p><h3 id="管理员">管理员</h3><p>完成注册后，联系我想成为管理员的，拥有所有权限。</p><h2 id="使用教程（功能说明）">使用教程（功能说明）</h2><h3 id="文件搜索">文件搜索</h3><p>小鑫云提供了两种搜索方式</p><ol><li>快速搜索：在你当前的文件夹内输入你要搜索内容的关键字并点击搜索即可。</li><li>全局搜索：在你不知道你要搜索的文件内容时，输入all：关键字 并点击搜索即可完成搜索</li></ol><p>示例：</p><p>快速搜索</p><p><img src="/images/2021-9-22-03.png" alt="upload successful"></p><p>全局搜索</p><p><img src="/images/2021-9-22-04.png" alt="upload successful"></p><h3 id="拖拽上传">拖拽上传</h3><p>该功能只在电脑上有效，用浏览器打开小鑫云 科文共享，并登录。到达自己想要上传的文件目录，在本地（你的电脑文件存放的位置）将你要上传的文件拖进小鑫云的窗口，即可完成上传。</p><p>注：只能拖拽文件上传，不支持拖拽文件夹上传。</p><h3 id="上传文件-文件夹">上传文件/文件夹</h3><p>想要上传请先注册登录。功能所在位置：</p><p>电脑端：操作-&gt;上传文件（上传文件夹）</p><p><img src="/images/2021-9-22-05.png" alt="upload successful"></p><p><img src="/images/2021-9-22-06.png" alt="upload successful"></p><p>手机端：点击展开/折叠菜单-&gt;操作-&gt;上传文件（上传文件夹）</p><p><img src="/images/2021-9-22-07.png" alt="upload successful"></p><p><img src="/images/2021-9-22-08.png" alt="upload successful"></p><p><img src="/images/2021-9-22-09.png" alt="overwrote existing file"></p><h3 id="打包下载">打包下载</h3><p>本功能是为了满足用户要下载很多数目文件时而准备的。打包格式统一是zip格式。该功能比较影响和占用服务器硬件资源，如非必要，请勿使用。</p><h3 id="文件分享">文件分享</h3><p>小鑫云支持分享下载链接的功能，您可以分享您私有空间的文件给其他人。他人可通过您分享的链接直接下载。</p><p>演示如下：</p><p><img src="/images/2021-9-22-10.png" alt="upload successful"></p><h3 id="设置文件夹访问级别">设置文件夹访问级别</h3><p>小鑫云支持私有区域，但必须要是文件夹的形式去划分私有区域。在你新建文件夹时，可以设置访问级别。即：公开的/仅小组/仅创建者</p><p>公开的：指任何人都可以浏览访问下载</p><p>仅小组：该功能在于中后期与校方或者校内组织达成合作后开放。指在同一小组的成员可以浏览访问管理。</p><p>仅创建者：指只有创建这个文件夹的用户自己才可以访问，是私有的空间。（注：我虽然是管理员，但也无法查看你的私人空间，所以请不要上传太多垃圾文件占用资源。后续还在考虑是否要割掉这个功能）</p><h3 id="各种预览与播放">各种预览与播放</h3><p>这个自己摸索，不做解释。</p><h2 id="网速测试">网速测试</h2><p>在连上校园网时，实测网速如下图：</p><p><img src="/images/2021-9-24-01.png" alt="overwrote existing file"></p><h2 id="小鑫云-科文共享网址">小鑫云 科文共享网址</h2><h3 id="点我进入小鑫云-科文共享"><a href="http://10.102.0.155:1314/home.html">点我进入小鑫云 科文共享</a></h3><h3 id="手机端app下载地址-点我下载">手机端app下载地址 <a href="http://10.102.0.155:1314/externalLinksController/chain/%E5%B0%8F%E9%91%AB%E4%BA%91(%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA%E8%BD%AF%E4%BB%B6).apk?ckey=LswV8YmkJEsb4e8ttQCsYbCpj3HUYTSQopjyKQIiRYTBXiWr1nWzxJkyq%2FsgXLUJ">点我下载</a></h3><h2 id="声明！">声明！</h2><p>该软件是我搭建的一个非营利性公益项目，我想让它在科文久经不衰。所以，在我离开科文之后，我希望接手人能够一直保持我创建它的初衷。别把它赋予商业气息，非常感谢！！</p><h1>注意！本网盘搭建在校园网的服务范围内，如要使用请链接校园网使用！如要使用请连上校园网使用！仅限江苏师范大学科文学院！！！！</h1>]]></content>
      
      
      <categories>
          
          <category> 小鑫系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小鑫云 </tag>
            
            <tag> 使用教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我开发的一个可以免费看视频的软件</title>
      <link href="/2021/09/19/%E6%88%91%E5%BC%80%E5%8F%91%E7%9A%84%E4%B8%80%E4%B8%AA%E5%8F%AF%E4%BB%A5%E5%85%8D%E8%B4%B9%E7%9C%8B%E8%A7%86%E9%A2%91%E7%9A%84%E8%BD%AF%E4%BB%B6/"/>
      <url>/2021/09/19/%E6%88%91%E5%BC%80%E5%8F%91%E7%9A%84%E4%B8%80%E4%B8%AA%E5%8F%AF%E4%BB%A5%E5%85%8D%E8%B4%B9%E7%9C%8B%E8%A7%86%E9%A2%91%E7%9A%84%E8%BD%AF%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1>我开发的一个可以免费看视频的app</h1><h2 id="1-前言">1.前言</h2><p>我为什么开发这个软件呢？因为钱包空空，各大平台的vip却又涨价。</p><p>为了降低成本的丰富我的娱乐生活，所以小鑫影视app便在我的满怀期待中诞生了。</p><p>于是乎，便开始花时间如何去破解，随着了解的深入，我发现破解平台的视频简直是一件比登天还难的事。</p><p>原因在于我们用爱奇艺腾讯优酷等看vip视频，其实是用户有一个私有且唯一的密钥。在用户看视频时上传这段密钥对比平台用户的数据库，成立后才返回完整的视频流。也就是没有这个密钥，你就无法抓取完整的数据包（视频流）。除非你能黑进爱奇艺腾讯优酷等平台的服务器去篡改数据库的用户数据。当然，这对我来说还是很遥远的事，且风险太太太大了。一但抓到轻则赔付巨额赔偿，重则可能有牢狱之灾。</p><p>不过好在，还是有别的解决手段。比如：解析源！！</p><p>解析源是他人提供的一个接口，接口的另一边是丰富的视频库。接口另一边的视频库的资源是同步于各平台的视频库。所以便可以做到免费看各平台的vip，付费，甚至超前点播了。</p><h1>2.下载地址</h1><p>这里就要介绍我搭建的另一个网站了。&quot;小鑫app商城” <a href="https://jinbilianshao.github.io/xiaoxinapp/">点我进去小鑫app商城</a></p><p>小鑫app商城搭建的原因是随着我开发的app越来越多，便开始想把这些一开始服务于我的应用也能服务于大众，从而发挥它应有的存在价值。小鑫app商城展示如下图：</p><p>电脑端展示：</p><p><img src="/images/2021-9-19-01.png" alt="overwrote existing file"></p><p><img src="/images/2021-9-19-02.png" alt="upload successful"></p><p><img src="/images/2021-9-19-03.png" alt="upload successful"></p><h2 id="注意！！！本商城的app均为安卓手机上的应用！！ios和电脑都不能用！！">注意！！！本商城的app均为安卓手机上的应用！！ios和电脑都不能用！！</h2><p>手机端展示：</p><p><img src="/images/2021-9-19-04.png" alt="upload successful"></p><p><img src="/images/2021-9-19-05.png" alt="upload successful"></p><h1>小鑫影视app使用教程</h1><p>首先在小鑫app商城下载小鑫影视app，并安装在自己的安卓手机上。</p><p>1.打开小鑫影视app</p><p>打开小鑫影视app后，会弹出一个使用说明的窗口，请认真阅读该说明。</p><p><img src="/images/2021-9-19-06.png" alt="upload successful"></p><p>2.选择你要观看的平台</p><p>在软件的最下方，有四家视频的平台（爱奇艺，腾讯，优酷，芒果）这四家基本上应该能满足大多数人的影视需求了。</p><p>选择平台后，会弹出一个选项，我们选择浏览器即可，不要点打开某平台app，会让你下载的。误点的话弹出下载界面时，点周围的空白处即可关闭取消。</p><p><img src="/images/2021-9-19-07.png" alt="upload successful"></p><p>3.选择你要观看的视频直接打开即可观看</p><p>本软件实现了全自动化，不用手动操作，打开后稍等即可免费观看。</p><p>关于无法观看的点击右下角视频的悬浮图标，手动指定解析源。</p><p>这里主推 原-乐乐 这个解析源，快速且稳定！！！</p><p><img src="/images/2021-9-19-08.png" alt="overwrote existing file"></p><p><img src="/images/2021-9-19-10.png" alt="upload successful"></p><p><img src="/images/2021-9-19-09.png" alt="upload successful"></p><p><img src="/images/2021-9-19-11.png" alt="upload successful"></p><p><img src="/images/2021-9-19-12.png" alt="upload successful"></p><h1>祝您使用愉快，对了软件里内嵌了我的个人网站和我的QQ联系方式。在左上角哦～</h1>]]></content>
      
      
      <categories>
          
          <category> 小鑫系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 福利 </tag>
            
            <tag> 使用教程 </tag>
            
            <tag> 小鑫系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法题：C语言判断回文数</title>
      <link href="/2021/09/17/OJ%E9%A2%98C%E8%AF%AD%E8%A8%80%E5%88%A4%E6%96%AD%E5%9B%9E%E6%96%87%E6%95%B0/"/>
      <url>/2021/09/17/OJ%E9%A2%98C%E8%AF%AD%E8%A8%80%E5%88%A4%E6%96%AD%E5%9B%9E%E6%96%87%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1>C语言判断回文数</h1><h2 id="什么是回文数？">什么是回文数？</h2><p>回文数是指一个数反过来和原来数值不变的数</p><h2 id="C语言设计回文数的思想">C语言设计回文数的思想</h2><p>1.首先我们知道回文数是指一个数反过来和原来的数值相同，所以我们要先把数值反过来</p><p>2.将反过来的数值和原数值比对大小，相同则是回文数，不同则不是回文数</p><h2 id="实现步骤">实现步骤</h2><p>1.首先要将有输入</p><pre><code class="hljs">printf(&quot;请输入一个数：&quot;);scanf(&quot;%d&quot;, &amp;s);</code></pre><p>这里我们用scanf（）输入函数获取用户输入，%d是指输入的是个整数型。</p><p>printf（）是输出，这里用于提示用户输入数值，当然也可以写成</p><pre><code class="hljs">scanf(&quot;请输入一个数：%d&quot;, &amp;s);</code></pre><p>个人不建议这样写，因为scanf（）函数的一些特性，往往容易出问题。尤其是在字符的处理上，例如用户输入的数据是通过键盘，键盘上的所有按键输入到电脑都是一个字符。你按回车也是向电脑输入了一个字符/n。这个输入的数据存放在内存缓冲区，scanf便是循环取出内存缓冲区的数据。如果是字符型，则包含了你输入的所有数据，这也是用scanf所要注意的地方。</p><p>关于scanf的用法和注意事项，我会单独列出一个章节去讲，这里先不深入了。</p><p>2.数值反转</p><p>想要数值反转，首先要知道你输入的数值是多少位，然后根据位数加个循环，把数值一个个反转在存放在备用的变量中。</p><pre><code class="hljs">//循环计算输入数是多少位while ( s != 0)&#123;    s = s / 10;    ++t;</code></pre><p>}上面便是用于计算输入数的位数的实现，很简单，因为是整数型，得不到小数，所以只能整除并丢失余数。</p><p>例如：</p><p>int s = 11/2; //=5余1，而返回给s的只有5，1便不要了。   所以通过这种整除的形式除以10，最后等于0时，所累计的数便是输入数的位数了。</p><p>位数知道了，接下来便是数值的反转。</p><pre><code class="hljs">//w是位数，s是输入的值，之前要定义一个容器变量放反转数这里h,d是那个容器。for(int i = 0, i &lt; w, i++) &#123;d = s % 10; //%是取余运算符h = h * 10 + d;s = s / 10;&#125;</code></pre><p>思路讲解：先对输入数取余获取最后的余数，例如：</p><pre><code class="hljs">s = 21 % 10; // 21 / 10 = 2 ..1。s是1，余数</code></pre><p>这样就可以得到倒数第一个数了,然后定义一个int类型的h，初始值给0，用来存放反过来的数的容器。我们上一步获取倒数第一个数，但怎么提高它的位级呢？所以，接下来通过h存放上一次循环的中间件d，也就是个位数的值，并在下一个循环提升它的位级，即乘10。所以</p><pre><code class="hljs">h = h * 10 + d; //这个才是重点！！核心所在！！</code></pre><p>3.接下来就是判断</p><p>用if语句判断原数值s和反转后存放容器变量h，一样则输出是回文数，不一样则不是回文数。</p><pre><code class="hljs">//对反转的数进行回文数判断if(s == h)&#123;printf(&quot;%d 是回文数！！\n&quot;, s);&#125;else&#123;printf(&quot;%d 不是回文数！！\n&quot;,s);&#125;</code></pre><h2 id="完整代码">完整代码</h2><pre><code class="hljs">#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;/**  oji题：输入一个数判断是否是回文数* 回文数：例如123321这种数，反过来和正这是同一个数的叫回文数** */int main()&#123;int i,h,s;int v = 0;printf(&quot;请输入一个数：&quot;);scanf(&quot;%d&quot;, &amp;i);s = i;while( i !=0)  //循环历遍，反转回文数&#123;        h = i % 10; //对i进行10的取余，得到的数放到h中        v = v *10 + h; // 本题的精华所在。        i = i / 10; // 因为是整数，所以可以通过这句来计算输入数的位数    &#125;    //对反转的数进行回文数判断    if(s == v)    &#123;        printf(&quot;%d 是回文数！！\n&quot;, s);    &#125;else&#123;        printf(&quot;%d 不是回文数！！\n&quot;,s);    &#125;&#125;</code></pre><p>这是简化版，不利于理解，所以上面我拆分的写的。完整版我将位数和反转合并了。</p><h2 id="运行效果图">运行效果图</h2><p>环境：manjaro （linux系统）工具：vscod</p><p><img src="/images/2021-9-1701.png" alt="upload successful"></p><p><img src="/images/2021-9-1702.png" alt="upload successful"></p><p><img src="/images/2021-9-1703.png" alt="upload successful"></p><p><img src="/images/2021-9-1704.png" alt="upload successful"></p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一窝兔子</title>
      <link href="/2021/09/17/%E4%B8%80%E7%AA%9D%E5%85%94%E5%AD%90/"/>
      <url>/2021/09/17/%E4%B8%80%E7%AA%9D%E5%85%94%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<h1>你们爱看的兔子</h1><h3 id="1">1.</h3><p><img src="/images/001.png" alt="upload successful"></p><h3 id="2">2.</h3><p><img src="/images/002.png" alt="upload successful"></p><h3 id="3">3.</h3><p><img src="/images/003.png" alt="upload successful"></p><h3 id="4">4.</h3><p><img src="/images/004.png" alt="overwrote existing file"></p><h3 id="5">5.</h3><p><img src="/images/005.png" alt="overwrote existing file"></p><h3 id="6">6.</h3><p><img src="/images/006.png" alt="overwrote existing file"></p><h3 id="7">7.</h3><p><img src="/images/007.png" alt="overwrote existing file"></p><h3 id="8">8.</h3><p><img src="/images/008.png" alt="overwrote existing file"></p><h3 id="9">9.</h3><p><img src="/images/009.png" alt="overwrote existing file"></p><h3 id="10">10.</h3><p><img src="/images/010.png" alt="upload successful"></p><h3 id="11">11.</h3><p><img src="/images/011.png" alt="upload successful"></p><h3 id="12">12.</h3><p><img src="/images/012.png" alt="upload successful"></p><h3 id="13">13.</h3><p><img src="/images/013.png" alt="upload successful"></p><h3 id="14">14.</h3><p><img src="/images/000.png" alt="upload successful"></p>]]></content>
      
      
      <categories>
          
          <category> 壁纸 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 福利 </tag>
            
            <tag> 壁纸 </tag>
            
            <tag> 兔子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你们要得图</title>
      <link href="/2021/09/17/%E4%BD%A0%E4%BB%AC%E8%A6%81%E5%BE%97%E5%9B%BE/"/>
      <url>/2021/09/17/%E4%BD%A0%E4%BB%AC%E8%A6%81%E5%BE%97%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h1>你们要得壁纸</h1><ol><li></li></ol><p><img src="/images/1313.png" alt="upload successful"></p><ol start="2"><li></li></ol><p><img src="/images/15151.png" alt="upload successful"></p><ol start="3"><li></li></ol><p><img src="/images/11111.png" alt="upload successful"></p>]]></content>
      
      
      <categories>
          
          <category> 壁纸 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 壁纸 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>声明：前一个博客太花里胡哨，影响性能</title>
      <link href="/2021/09/17/%E5%A3%B0%E6%98%8E%EF%BC%9A%E5%89%8D%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2%E5%A4%AA%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8%EF%BC%8C%E5%BD%B1%E5%93%8D%E6%80%A7%E8%83%BD/"/>
      <url>/2021/09/17/%E5%A3%B0%E6%98%8E%EF%BC%9A%E5%89%8D%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2%E5%A4%AA%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8%EF%BC%8C%E5%BD%B1%E5%93%8D%E6%80%A7%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h1>声明：前一个版本太花里胡哨，影响服务器访问和响应速度，换了这个清新多了～</h1>]]></content>
      
      
      
        <tags>
            
            <tag> 声明 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个简单的源码爬虫的实现</title>
      <link href="/2021/09/16/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E6%BA%90%E7%A0%81%E7%88%AC%E8%99%AB%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2021/09/16/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E6%BA%90%E7%A0%81%E7%88%AC%E8%99%AB%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1>一个简单的源代码爬虫的实现（基于python）</h1><h2 id="1-下载python和python的ide（懒，下载安装自行百度，本文专注源代码的实现）">1.下载python和python的ide（懒，下载安装自行百度，本文专注源代码的实现）</h2><h2 id="2-Requsts简介">2.Requsts简介</h2><h3 id="这是一个python库，其功能是用于爬网页数据。win用户在cmd中输入">这是一个python库，其功能是用于爬网页数据。win用户在cmd中输入</h3><pre><code class="hljs">pip install requsts</code></pre><h3 id="即可安装">即可安装</h3><h3 id="Requests-is-an-Apache2-Licensed-HTTP-library-written-inPython-for-human-beings">Requests is an Apache2 Licensed HTTP library, written inPython, for human beings.</h3><p>Python’s standard urllib2 module provides most ofthe HTTP capabilities you need, but the API is <a href="http://thoroughlybroken.It">thoroughlybroken.It</a> was built for a different time — and a different web. It requires anenormous amount of work (even method overrides) to perform the simplest oftasks.</p><p>Requests takes all of the work out of Python HTTP/1.1 — making your integrationwith web services seamless. There’s no need to manually add query strings toyour URLs, or to form-encode your POST data. Keep-alive and HTTP connectionpooling are 100% automatic, powered by urllib3,which is embedded within Requests.</p><p>------from   <a href="http://www.python-requests.org/en/latest/">http://www.python-requests.org/en/latest/</a></p><h3 id="以上是来自Requsts官网的介绍">以上是来自Requsts官网的介绍</h3><h2 id="3-最简单的爬虫代码">3.最简单的爬虫代码</h2><h3 id="直接通过get获取">直接通过get获取</h3><pre><code class="hljs">import requests #导入Requsts包html = requests.get('http://www.baidu.com')#通过get方法直接获取源码且存放在html中print html.text #打印输出html变量中的数据</code></pre><h3 id="修改http头（解决中文乱码，仿真浏览器对抗反爬虫）">修改http头（解决中文乱码，仿真浏览器对抗反爬虫）</h3><pre><code class="hljs">import requestsimport re#下面三行是编码转换的功能import sysreload(sys)sys.setdefaultencoding(&quot;utf-8&quot;)#hea是我们自己构造的一个字典，里面保存了user-agent。#让目标网站误以为本程序是浏览器，并非爬虫。#从网站的Requests Header中获取。【审查元素】hea = &#123;'User-Agent':'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.118 Safari/537.36'&#125;html = requests.get('http://jp.tingroom.com/yuedu/yd300p/',headers = hea)html.encoding = 'utf-8' #这一行是将编码转为utf-8否则中文会显示乱码。print html.text</code></pre><h2 id="4-完整代码">4.完整代码</h2><pre><code class="hljs">import requestsdef get_html(url): #爬取源码函数  headers = &#123;      'User-Agent': 'Mozilla/5.0(Macintosh; Intel Mac OS X 10_11_4)\      AppleWebKit/537.36(KHTML, like Gecko) Chrome/52 .0.2743. 116 Safari/537.36'  &#125;  # 模拟浏览器访问    response = requests.get(url, headers=headers)  # 请求访问网站    response.encoding = response.apparent_encoding #设置字符编码格式    html = response.text  # 获取网页源码    return html  # 返回网页源码if __name__ == '__main__':#需要爬的网址t = get_html(&quot;https://jinbilianshao.github.io&quot;)#查找替换t = t.replace(&quot;https://jinbilianshao.github.io&quot;, &quot;123456789&quot;)#建立文件并循环写入数据到文本中with open('index.html', 'w' ,encoding=&quot;utf-8&quot;) as s:    for i in t:        s.write(i)</code></pre><h3 id="运行效果">运行效果</h3><p><img src="/images/000003.png" alt="upload successful"></p><h4 id="可以看到多了一个index-html文件，这个文件就是爬下来的源文件">可以看到多了一个index.html文件，这个文件就是爬下来的源文件</h4><p><img src="/images/000008.png" alt="upload successful"></p><p><img src="/images/0026.png" alt="upload successful"></p><h2 id="项目源码地址-https-github-com-JinBiLianShao-pachong">项目源码地址&gt;&gt;&gt;<a href="https://github.com/JinBiLianShao/pachong">https://github.com/JinBiLianShao/pachong</a></h2>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>office各版本破解教程</title>
      <link href="/2021/09/16/office%E5%90%84%E7%89%88%E6%9C%AC%E7%A0%B4%E8%A7%A3%E6%95%99%E7%A8%8B/"/>
      <url>/2021/09/16/office%E5%90%84%E7%89%88%E6%9C%AC%E7%A0%B4%E8%A7%A3%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1>office各版本破解教程</h1><h2 id="office2021版本">office2021版本</h2><p>[软件名称]：office2021</p><p>[软件语言]：简体中文</p><p>[软件大小]：4.16G</p><p>[安装环境]：Win11/win10</p><p>[硬件要求]：CPU@1GHz 内存@2G(或更高)</p><p>[下载链接]：<a href="https://pan.baidu.com/s/1NZFcvEHDQLvdj6f58KgsYg">https://pan.baidu.com/s/1NZFcvEHDQLvdj6f58KgsYg</a></p><p>[提取码]：5678</p><p>1.鼠标右击【Office2021(64bit)】压缩包选择【解压到 Office2021(64bit)】。</p><p><img src="/images/image001.png" alt="upload successful"></p><p>2.双击打开解压后的【Office2021(64bit)】文件夹。</p><p><img src="/images/image002.png" alt="upload successful"></p><p>3.鼠标右击【Office_2021】选择【装载】。</p><p><img src="/images/image003.png" alt="upload successful"></p><p>4.进入装载之后的文件夹，鼠标右击【Setup】选择【以管理员身份运行】。</p><p><img src="/images/image004.png" alt="upload successful"></p><p>5.软件安装中……<img src="/images/0005.png" alt="upload successful"></p><p>6.点击【Close】。<img src="/images/0006.png" alt="upload successful"></p><p>7.打开解压后的【Office2021(64bit)】文件夹，鼠标右击【OfficeSetup】选择【以管理员身份运行】。</p><p><img src="/images/0007.png" alt="upload successful"></p><p>8.下载安装中……</p><p><img src="/images/0008.png" alt="upload successful"></p><p>9.点击【关闭】。</p><p><img src="/images/0009.png" alt="upload successful"></p><p>10.打开解压后的【Office2021(64bit)】文件夹，鼠标右击【Crack】压缩包选择【解压到当前文件夹】。</p><blockquote><p>温馨提示：解压【Crack】前，先关闭“所有杀毒软件(部分电脑自带“迈克菲”也要关闭）、防火墙、Windows Defender”，否则可能会被杀毒软件误杀无法运行。</p></blockquote><p><img src="/images/0010.png" alt="upload successful"></p><p>11.双击运行【Crack】。</p><p><img src="/images/0011.png" alt="upload successful"></p><p>12.输入【6】（软件会自动运行激活程序，office激活的有效期为180天，到期后需用此工具激活使用）。</p><p><img src="/images/0012.png" alt="upload successful"></p><p>13.回到电脑桌面，在空白处鼠标右击【新建】可看到已经成功安装office组件产品：Acess、word、project、ppt、excel、publish……</p><p><img src="/images/0013.png" alt="upload successful"></p><p>14.点击桌面左下角【开始菜单】图标，在所有应用中找到并点击【Word】启动软件。</p><p><img src="/images/0014.png" alt="upload successful"></p><p>15.点击【接受】。</p><p><img src="/images/0015.png" alt="upload successful"></p><p>16.安装成功！</p><p><img src="/images/0016.png" alt="upload successful"></p><h2 id="office其他版本安装步骤基本相同（懒不想写了qaq）">office其他版本安装步骤基本相同（懒不想写了qaq）</h2><h3 id="office2019">office2019</h3><p>[软件名称]：office2019</p><p>[软件语言]：简体中文</p><p>[软件大小]：3.33G</p><p>[安装环境]：Win10</p><p>[硬件要求]：CPU@1GHz 内存@2G(或更高)</p><p>[下载链接]：<a href="https://pan.baidu.com/s/1DU1955Oqtsg8ddolsA0N5w">https://pan.baidu.com/s/1DU1955Oqtsg8ddolsA0N5w</a></p><p>[提取码]：6789</p><h3 id="ofice2016">ofice2016</h3><p>[软件名称]：office2016</p><p>[软件语言]：简体中文</p><p>[软件大小]：64位：1.77G 32位：840.54M</p><p>[安装环境]：Win10/Win8/Win7</p><p>[硬件要求]：CPU@1GHz 内存@2G(或更高)</p><p>[64位下载链接]：<a href="https://pan.baidu.com/s/1GbcoqgAa3YOCTWq9vXVYJg">https://pan.baidu.com/s/1GbcoqgAa3YOCTWq9vXVYJg</a></p><p>[提取码]：6789</p><p>[32位下载链接]：<a href="https://pan.baidu.com/s/1Hns2c8RNQg8d6Neewni1nw">https://pan.baidu.com/s/1Hns2c8RNQg8d6Neewni1nw</a></p><p>[提取码]：6789</p><h3 id="在往前的版本基本上没人用了，office2016是计算机二级指定office工具，就放到2016吧～">在往前的版本基本上没人用了，office2016是计算机二级指定office工具，就放到2016吧～</h3>]]></content>
      
      
      <categories>
          
          <category> 破解工具教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 福利 </tag>
            
            <tag> office </tag>
            
            <tag> 破解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码测试</title>
      <link href="/2021/09/16/%E4%BB%A3%E7%A0%81%E6%B5%8B%E8%AF%95/"/>
      <url>/2021/09/16/%E4%BB%A3%E7%A0%81%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1>代码测试</h1><pre><code class="hljs">#include&lt;stdio.h&gt;int main()&#123;printf(&quot;你好！C语言\n&quot;);return 0;&#125;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
